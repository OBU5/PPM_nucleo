
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a320  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800a520  0800a520  0001a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e8  0800a7e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7f0  0800a7f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f4  0800a7f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a7f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005a7f8  200001e0  0800a9d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2005a9d8  0800a9d8  0002a9d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e81  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000289e  00000000  00000000  0003608f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e8  00000000  00000000  00038930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d0  00000000  00000000  00039f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002984e  00000000  00000000  0003b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fccc  00000000  00000000  00064c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103ba4  00000000  00000000  00074902  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001784a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006238  00000000  00000000  00178524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a508 	.word	0x0800a508

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800a508 	.word	0x0800a508

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000614:	f003 f86b 	bl	80036ee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000618:	f000 f868 	bl	80006ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800061c:	f000 fe80 	bl	8001320 <MX_GPIO_Init>
	MX_DMA_Init();
 8000620:	f000 fe44 	bl	80012ac <MX_DMA_Init>
	MX_ADC1_Init();
 8000624:	f000 f902 	bl	800082c <MX_ADC1_Init>
	MX_SPI1_Init();
 8000628:	f000 f9d2 	bl	80009d0 <MX_SPI1_Init>
	MX_TIM1_Init();
 800062c:	f000 fa48 	bl	8000ac0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000630:	f000 fb06 	bl	8000c40 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000634:	f000 fb58 	bl	8000ce8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000638:	f000 fbce 	bl	8000dd8 <MX_TIM4_Init>
	MX_TIM8_Init();
 800063c:	f000 fcaa 	bl	8000f94 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 8000640:	f000 fda4 	bl	800118c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000644:	f000 fdd2 	bl	80011ec <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000648:	f000 fe00 	bl	800124c <MX_USART3_UART_Init>
	MX_I2C1_Init();
 800064c:	f000 f940 	bl	80008d0 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000650:	f000 f97e 	bl	8000950 <MX_I2C3_Init>
	MX_SPI4_Init();
 8000654:	f000 f9f6 	bl	8000a44 <MX_SPI4_Init>
	MX_TIM5_Init();
 8000658:	f000 fc18 	bl	8000e8c <MX_TIM5_Init>
	MX_UART7_Init();
 800065c:	f000 fd66 	bl	800112c <MX_UART7_Init>
	MX_TIM6_Init();
 8000660:	f000 fc62 	bl	8000f28 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	initialization();
 8000664:	f001 fbf0 	bl	8001e48 <initialization>
	HAL_Delay(10);
 8000668:	200a      	movs	r0, #10
 800066a:	f003 f89d 	bl	80037a8 <HAL_Delay>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//parse text every time before polarization
		if (newDataInBuffer()) {
 800066e:	f002 f9eb 	bl	8002a48 <newDataInBuffer>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0x6c>
			parseText();
 8000678:	f001 fc74 	bl	8001f64 <parseText>
		}

		// if new measurement technique was updated - change state regarding to the update
		if (stateCanBeUpdated()) {
 800067c:	f002 f8de 	bl	800283c <stateCanBeUpdated>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <main+0x7a>
			updateState();
 8000686:	f002 f865 	bl	8002754 <updateState>
		}

		// normal mode with polarization
		if (ploarizationCanRun()) {
 800068a:	f002 f8ff 	bl	800288c <ploarizationCanRun>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d008      	beq.n	80006a6 <main+0x96>
			runPolarizationSequence();
 8000694:	f000 ff3e 	bl	8001514 <runPolarizationSequence>
			if (dataReadyToSendBeforeMeasurement()) {
 8000698:	f002 f8ac 	bl	80027f4 <dataReadyToSendBeforeMeasurement>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <main+0x96>
				sendMeasuredData();
 80006a2:	f001 feeb 	bl	800247c <sendMeasuredData>
			}
		}

		// measurement
		if (measurementCanRun()) {
 80006a6:	f002 f917 	bl	80028d8 <measurementCanRun>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <main+0xa4>
			runMeasurementMethod();
 80006b0:	f000 feec 	bl	800148c <runMeasurementMethod>
		}

		//
		if (dataReadyToSendAfterMeasurement()) {
 80006b4:	f002 f886 	bl	80027c4 <dataReadyToSendAfterMeasurement>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <main+0xb2>
			sendMeasuredData();
 80006be:	f001 fedd 	bl	800247c <sendMeasuredData>
		}
		if (isWaitingForSync()) {
 80006c2:	f002 f95b 	bl	800297c <isWaitingForSync>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d004      	beq.n	80006d6 <main+0xc6>
			set_LED1(0, 0, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f001 f83d 	bl	8001750 <set_LED1>
		}

		// idle state - if no method is active and there are no data to be sent
		if (stateIsIdle()) {
 80006d6:	f002 f92d 	bl	8002934 <stateIsIdle>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0c6      	beq.n	800066e <main+0x5e>
			set_LED1(0, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2000      	movs	r0, #0
 80006e6:	f001 f833 	bl	8001750 <set_LED1>
		if (newDataInBuffer()) {
 80006ea:	e7c0      	b.n	800066e <main+0x5e>

080006ec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0b8      	sub	sp, #224	; 0xe0
 80006f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006f6:	2234      	movs	r2, #52	; 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f009 f9ce 	bl	8009a9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000700:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2290      	movs	r2, #144	; 0x90
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f009 f9bf 	bl	8009a9c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800071e:	f004 fc1f 	bl	8004f60 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b3f      	ldr	r3, [pc, #252]	; (8000820 <SystemClock_Config+0x134>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a3e      	ldr	r2, [pc, #248]	; (8000820 <SystemClock_Config+0x134>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <SystemClock_Config+0x134>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073a:	4b3a      	ldr	r3, [pc, #232]	; (8000824 <SystemClock_Config+0x138>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a39      	ldr	r2, [pc, #228]	; (8000824 <SystemClock_Config+0x138>)
 8000740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <SystemClock_Config+0x138>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000752:	2301      	movs	r3, #1
 8000754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 5;
 800076e:	2305      	movs	r3, #5
 8000770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000774:	23d8      	movs	r3, #216	; 0xd8
 8000776:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000786:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fc48 	bl	8005020 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xae>
		Error_Handler();
 8000796:	f002 f9d7 	bl	8002b48 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800079a:	f004 fbf1 	bl	8004f80 <HAL_PWREx_EnableOverDrive>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xbc>
		Error_Handler();
 80007a4:	f002 f9d0 	bl	8002b48 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80007a8:	230f      	movs	r3, #15
 80007aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80007ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007ce:	2107      	movs	r1, #7
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 fed3 	bl	800557c <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xf4>
		Error_Handler();
 80007dc:	f002 f9b4 	bl	8002b48 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <SystemClock_Config+0x13c>)
 80007e2:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007e4:	2300      	movs	r3, #0
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80007fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000800:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4618      	mov	r0, r3
 8000808:	f005 f88a 	bl	8005920 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x12a>
		Error_Handler();
 8000812:	f002 f999 	bl	8002b48 <Error_Handler>
	}
}
 8000816:	bf00      	nop
 8000818:	37e0      	adds	r7, #224	; 0xe0
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000
 8000828:	000151d0 	.word	0x000151d0

0800082c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <MX_ADC1_Init+0xa0>)
 8000842:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800084a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_ADC1_Init+0x9c>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ADC1_Init+0x9c>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000870:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_ADC1_Init+0x9c>)
 800087e:	2201      	movs	r2, #1
 8000880:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_ADC1_Init+0x9c>)
 800088c:	2201      	movs	r2, #1
 800088e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000892:	f002 ffab 	bl	80037ec <HAL_ADC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x74>
		Error_Handler();
 800089c:	f002 f954 	bl	8002b48 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_ADC1_Init+0x9c>)
 80008b2:	f003 f8e1 	bl	8003a78 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x94>
		Error_Handler();
 80008bc:	f002 f944 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2002f4c8 	.word	0x2002f4c8
 80008cc:	40012000 	.word	0x40012000

080008d0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20404768;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C1_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C1_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C1_Init+0x74>)
 800090c:	f004 fa00 	bl	8004d10 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000916:	f002 f917 	bl	8002b48 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C1_Init+0x74>)
 800091e:	f004 fa87 	bl	8004e30 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
		Error_Handler();
 8000928:	f002 f90e 	bl	8002b48 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C1_Init+0x74>)
 8000930:	f004 fac9 	bl	8004ec6 <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800093a:	f002 f905 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200042c4 	.word	0x200042c4
 8000948:	40005400 	.word	0x40005400
 800094c:	20404768 	.word	0x20404768

08000950 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C3_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x20404768;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C3_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C3_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C3_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C3_Init+0x74>)
 800098c:	f004 f9c0 	bl	8004d10 <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C3_Init+0x4a>
		Error_Handler();
 8000996:	f002 f8d7 	bl	8002b48 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C3_Init+0x74>)
 800099e:	f004 fa47 	bl	8004e30 <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C3_Init+0x5c>
		Error_Handler();
 80009a8:	f002 f8ce 	bl	8002b48 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C3_Init+0x74>)
 80009b0:	f004 fa89 	bl	8004ec6 <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C3_Init+0x6e>
		Error_Handler();
 80009ba:	f002 f8c5 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20004098 	.word	0x20004098
 80009c8:	40005c00 	.word	0x40005c00
 80009cc:	20404768 	.word	0x20404768

080009d0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009d6:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <MX_SPI1_Init+0x70>)
 80009d8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009ea:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80009ee:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a16:	2207      	movs	r2, #7
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a28:	f005 fba0 	bl	800616c <HAL_SPI_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SPI1_Init+0x66>
		Error_Handler();
 8000a32:	f002 f889 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2002f73c 	.word	0x2002f73c
 8000a40:	40013000 	.word	0x40013000

08000a44 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <MX_SPI4_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a54:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a62:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a72:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a76:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 7;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a92:	2207      	movs	r2, #7
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000aa4:	f005 fb62 	bl	800616c <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_SPI4_Init+0x6e>
		Error_Handler();
 8000aae:	f002 f84b 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2002f590 	.word	0x2002f590
 8000abc:	40013400 	.word	0x40013400

08000ac0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b09a      	sub	sp, #104	; 0x68
 8000ac4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ac6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ad4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	222c      	movs	r2, #44	; 0x2c
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f008 ffce 	bl	8009a9c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b02:	4a4e      	ldr	r2, [pc, #312]	; (8000c3c <MX_TIM1_Init+0x17c>)
 8000b04:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000b06:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 8000b12:	4b49      	ldr	r3, [pc, #292]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b14:	f241 3221 	movw	r2, #4897	; 0x1321
 8000b18:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b47      	ldr	r3, [pc, #284]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b20:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b2c:	4842      	ldr	r0, [pc, #264]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b2e:	f006 f8bc 	bl	8006caa <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000b38:	f002 f806 	bl	8002b48 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b46:	4619      	mov	r1, r3
 8000b48:	483b      	ldr	r0, [pc, #236]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b4a:	f006 ff47 	bl	80079dc <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x98>
		Error_Handler();
 8000b54:	f001 fff8 	bl	8002b48 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000b58:	4837      	ldr	r0, [pc, #220]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b5a:	f006 f926 	bl	8006daa <HAL_TIM_PWM_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000b64:	f001 fff0 	bl	8002b48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b68:	2320      	movs	r3, #32
 8000b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000b74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482f      	ldr	r0, [pc, #188]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b7c:	f007 fe4e 	bl	800881c <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0xca>
		Error_Handler();
 8000b86:	f001 ffdf 	bl	8002b48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b8a:	2370      	movs	r3, #112	; 0x70
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 8000b8e:	f240 336a 	movw	r3, #874	; 0x36a
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b94:	2302      	movs	r3, #2
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4821      	ldr	r0, [pc, #132]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000bb4:	f006 fdfa 	bl	80077ac <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0x102>
		Error_Handler();
 8000bbe:	f001 ffc3 	bl	8002b48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc2:	2360      	movs	r3, #96	; 0x60
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 8000bc6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000bcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000bd6:	f006 fde9 	bl	80077ac <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x124>
		Error_Handler();
 8000be0:	f001 ffb2 	bl	8002b48 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000c1a:	f007 fe8d 	bl	8008938 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM1_Init+0x168>
		Error_Handler();
 8000c24:	f001 ff90 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000c2a:	f002 faad 	bl	8003188 <HAL_TIM_MspPostInit>

}
 8000c2e:	bf00      	nop
 8000c30:	3768      	adds	r7, #104	; 0x68
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2002f6fc 	.word	0x2002f6fc
 8000c3c:	40010000 	.word	0x40010000

08000c40 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c64:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000c86:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c88:	f006 f9de 	bl	8007048 <HAL_TIM_IC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000c92:	f001 ff59 	bl	8002b48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000ca6:	f007 fdb9 	bl	800881c <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x74>
		Error_Handler();
 8000cb0:	f001 ff4a 	bl	8002b48 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000ccc:	f006 fcd1 	bl	8007672 <HAL_TIM_IC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000cd6:	f001 ff37 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2002f7a0 	.word	0x2002f7a0

08000ce8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	; 0x40
 8000cec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d1e:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <MX_TIM3_Init+0xec>)
 8000d20:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000d22:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0;
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000d40:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d42:	f005 ffb2 	bl	8006caa <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000d4c:	f001 fefc 	bl	8002b48 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d52:	f006 f82a 	bl	8006daa <HAL_TIM_PWM_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x78>
		Error_Handler();
 8000d5c:	f001 fef4 	bl	8002b48 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d70:	f006 feee 	bl	8007b50 <HAL_TIM_SlaveConfigSynchro>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0x96>
		Error_Handler();
 8000d7a:	f001 fee5 	bl	8002b48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d8e:	f007 fd45 	bl	800881c <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0xb4>
		Error_Handler();
 8000d98:	f001 fed6 	bl	8002b48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9c:	2360      	movs	r3, #96	; 0x60
 8000d9e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000db4:	f006 fcfa 	bl	80077ac <HAL_TIM_PWM_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM3_Init+0xda>
		Error_Handler();
 8000dbe:	f001 fec3 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000dc4:	f002 f9e0 	bl	8003188 <HAL_TIM_MspPostInit>

}
 8000dc8:	bf00      	nop
 8000dca:	3740      	adds	r7, #64	; 0x40
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2002f468 	.word	0x2002f468
 8000dd4:	40000400 	.word	0x40000400

08000dd8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <MX_TIM4_Init+0xb0>)
 8000e00:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e22:	f005 ffc2 	bl	8006daa <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM4_Init+0x58>
		Error_Handler();
 8000e2c:	f001 fe8c 	bl	8002b48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e30:	2320      	movs	r3, #32
 8000e32:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e40:	f007 fcec 	bl	800881c <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM4_Init+0x76>
		Error_Handler();
 8000e4a:	f001 fe7d 	bl	8002b48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e66:	f006 fca1 	bl	80077ac <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM4_Init+0x9c>
		Error_Handler();
 8000e70:	f001 fe6a 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e76:	f002 f987 	bl	8003188 <HAL_TIM_MspPostInit>

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20004204 	.word	0x20004204
 8000e88:	40000800 	.word	0x40000800

08000e8c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <MX_TIM5_Init+0x98>)
 8000eae:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = (21600 / 2) - 1;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000ebe:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000ec2:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000ed2:	f005 feea 	bl	8006caa <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM5_Init+0x54>
		Error_Handler();
 8000edc:	f001 fe34 	bl	8002b48 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000eee:	f006 fd75 	bl	80079dc <HAL_TIM_ConfigClockSource>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM5_Init+0x70>
		Error_Handler();
 8000ef8:	f001 fe26 	bl	8002b48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000f0a:	f007 fc87 	bl	800881c <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM5_Init+0x8c>
		Error_Handler();
 8000f14:	f001 fe18 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2002f428 	.word	0x2002f428
 8000f24:	40000c00 	.word	0x40000c00

08000f28 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MX_TIM6_Init+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4898 - 1;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f4c:	f241 3221 	movw	r2, #4897	; 0x1321
 8000f50:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f5a:	f005 fea6 	bl	8006caa <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM6_Init+0x40>
		Error_Handler();
 8000f64:	f001 fdf0 	bl	8002b48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f76:	f007 fc51 	bl	800881c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM6_Init+0x5c>
		Error_Handler();
 8000f80:	f001 fde2 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2002f6b8 	.word	0x2002f6b8
 8000f90:	40001000 	.word	0x40001000

08000f94 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09e      	sub	sp, #120	; 0x78
 8000f98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000fd8:	463b      	mov	r3, r7
 8000fda:	222c      	movs	r2, #44	; 0x2c
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 fd5c 	bl	8009a9c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000fe4:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <MX_TIM8_Init+0x190>)
 8000fe6:	4a50      	ldr	r2, [pc, #320]	; (8001128 <MX_TIM8_Init+0x194>)
 8000fe8:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000fea:	4b4e      	ldr	r3, [pc, #312]	; (8001124 <MX_TIM8_Init+0x190>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <MX_TIM8_Init+0x190>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 8000ff6:	4b4b      	ldr	r3, [pc, #300]	; (8001124 <MX_TIM8_Init+0x190>)
 8000ff8:	226b      	movs	r2, #107	; 0x6b
 8000ffa:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b49      	ldr	r3, [pc, #292]	; (8001124 <MX_TIM8_Init+0x190>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 8001002:	4b48      	ldr	r3, [pc, #288]	; (8001124 <MX_TIM8_Init+0x190>)
 8001004:	2218      	movs	r2, #24
 8001006:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <MX_TIM8_Init+0x190>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800100e:	4845      	ldr	r0, [pc, #276]	; (8001124 <MX_TIM8_Init+0x190>)
 8001010:	f005 fe4b 	bl	8006caa <HAL_TIM_Base_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM8_Init+0x8a>
		Error_Handler();
 800101a:	f001 fd95 	bl	8002b48 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001024:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001028:	4619      	mov	r1, r3
 800102a:	483e      	ldr	r0, [pc, #248]	; (8001124 <MX_TIM8_Init+0x190>)
 800102c:	f006 fcd6 	bl	80079dc <HAL_TIM_ConfigClockSource>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001036:	f001 fd87 	bl	8002b48 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800103a:	483a      	ldr	r0, [pc, #232]	; (8001124 <MX_TIM8_Init+0x190>)
 800103c:	f005 feb5 	bl	8006daa <HAL_TIM_PWM_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM8_Init+0xb6>
		Error_Handler();
 8001046:	f001 fd7f 	bl	8002b48 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 800104a:	2108      	movs	r1, #8
 800104c:	4835      	ldr	r0, [pc, #212]	; (8001124 <MX_TIM8_Init+0x190>)
 800104e:	f006 f9ab 	bl	80073a8 <HAL_TIM_OnePulse_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM8_Init+0xc8>
		Error_Handler();
 8001058:	f001 fd76 	bl	8002b48 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800105c:	2306      	movs	r3, #6
 800105e:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001060:	2300      	movs	r3, #0
 8001062:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8001064:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001068:	4619      	mov	r1, r3
 800106a:	482e      	ldr	r0, [pc, #184]	; (8001124 <MX_TIM8_Init+0x190>)
 800106c:	f006 fd70 	bl	8007b50 <HAL_TIM_SlaveConfigSynchro>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM8_Init+0xe6>
		Error_Handler();
 8001076:	f001 fd67 	bl	8002b48 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8001086:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800108a:	4619      	mov	r1, r3
 800108c:	4825      	ldr	r0, [pc, #148]	; (8001124 <MX_TIM8_Init+0x190>)
 800108e:	f007 fbc5 	bl	800881c <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM8_Init+0x108>
		Error_Handler();
 8001098:	f001 fd56 	bl	8002b48 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800109c:	2370      	movs	r3, #112	; 0x70
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 80010a0:	2336      	movs	r3, #54	; 0x36
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80010b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <MX_TIM8_Init+0x190>)
 80010c2:	f006 fb73 	bl	80077ac <HAL_TIM_PWM_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM8_Init+0x13c>
		Error_Handler();
 80010cc:	f001 fd3c 	bl	8002b48 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f6:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <MX_TIM8_Init+0x190>)
 8001106:	f007 fc17 	bl	8008938 <HAL_TIMEx_ConfigBreakDeadTime>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM8_Init+0x180>
		Error_Handler();
 8001110:	f001 fd1a 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <MX_TIM8_Init+0x190>)
 8001116:	f002 f837 	bl	8003188 <HAL_TIM_MspPostInit>

}
 800111a:	bf00      	nop
 800111c:	3778      	adds	r7, #120	; 0x78
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200041c4 	.word	0x200041c4
 8001128:	40010400 	.word	0x40010400

0800112c <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_UART7_Init+0x58>)
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_UART7_Init+0x5c>)
 8001134:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_UART7_Init+0x58>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_UART7_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_UART7_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_UART7_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_UART7_Init+0x58>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_UART7_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_UART7_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_UART7_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_UART7_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_UART7_Init+0x58>)
 8001170:	f007 fc7e 	bl	8008a70 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_UART7_Init+0x52>
		Error_Handler();
 800117a:	f001 fce5 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20004144 	.word	0x20004144
 8001188:	40007800 	.word	0x40007800

0800118c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_USART1_UART_Init+0x5c>)
 8001194:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011d0:	f007 fc4e 	bl	8008a70 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80011da:	f001 fcb5 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2002f510 	.word	0x2002f510
 80011e8:	40011000 	.word	0x40011000

080011ec <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_USART2_UART_Init+0x58>)
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <MX_USART2_UART_Init+0x5c>)
 80011f4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_USART2_UART_Init+0x58>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001230:	f007 fc1e 	bl	8008a70 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800123a:	f001 fc85 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2002f7e0 	.word	0x2002f7e0
 8001248:	40004400 	.word	0x40004400

0800124c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001254:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2000000;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_USART3_UART_Init+0x5c>)
 800125a:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001270:	220c      	movs	r2, #12
 8001272:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800128e:	f007 fbef 	bl	8008a70 <HAL_UART_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART3_UART_Init+0x50>
		Error_Handler();
 8001298:	f001 fc56 	bl	8002b48 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20004244 	.word	0x20004244
 80012a4:	40004800 	.word	0x40004800
 80012a8:	001e8480 	.word	0x001e8480

080012ac <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_DMA_Init+0x70>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <MX_DMA_Init+0x70>)
 80012b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_DMA_Init+0x70>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_DMA_Init+0x70>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_DMA_Init+0x70>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_DMA_Init+0x70>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2010      	movs	r0, #16
 80012e8:	f002 ff67 	bl	80041ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012ec:	2010      	movs	r0, #16
 80012ee:	f002 ff80 	bl	80041f2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	203a      	movs	r0, #58	; 0x3a
 80012f8:	f002 ff5f 	bl	80041ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012fc:	203a      	movs	r0, #58	; 0x3a
 80012fe:	f002 ff78 	bl	80041f2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	203c      	movs	r0, #60	; 0x3c
 8001308:	f002 ff57 	bl	80041ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800130c:	203c      	movs	r0, #60	; 0x3c
 800130e:	f002 ff70 	bl	80041f2 <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <MX_GPIO_Init+0x154>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a4e      	ldr	r2, [pc, #312]	; (8001474 <MX_GPIO_Init+0x154>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <MX_GPIO_Init+0x154>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b49      	ldr	r3, [pc, #292]	; (8001474 <MX_GPIO_Init+0x154>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a48      	ldr	r2, [pc, #288]	; (8001474 <MX_GPIO_Init+0x154>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b46      	ldr	r3, [pc, #280]	; (8001474 <MX_GPIO_Init+0x154>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	4b43      	ldr	r3, [pc, #268]	; (8001474 <MX_GPIO_Init+0x154>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a42      	ldr	r2, [pc, #264]	; (8001474 <MX_GPIO_Init+0x154>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b40      	ldr	r3, [pc, #256]	; (8001474 <MX_GPIO_Init+0x154>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <MX_GPIO_Init+0x154>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a3c      	ldr	r2, [pc, #240]	; (8001474 <MX_GPIO_Init+0x154>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_GPIO_Init+0x154>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_GPIO_Init+0x154>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a36      	ldr	r2, [pc, #216]	; (8001474 <MX_GPIO_Init+0x154>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <MX_GPIO_Init+0x154>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <MX_GPIO_Init+0x154>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a30      	ldr	r2, [pc, #192]	; (8001474 <MX_GPIO_Init+0x154>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <MX_GPIO_Init+0x154>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	482b      	ldr	r0, [pc, #172]	; (8001478 <MX_GPIO_Init+0x158>)
 80013cc:	f003 fc6e 	bl	8004cac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80013d0:	2200      	movs	r2, #0
 80013d2:	f64e 717f 	movw	r1, #61311	; 0xef7f
 80013d6:	4829      	ldr	r0, [pc, #164]	; (800147c <MX_GPIO_Init+0x15c>)
 80013d8:	f003 fc68 	bl	8004cac <HAL_GPIO_WritePin>
	LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : SN6505_EN_Pin */
	GPIO_InitStruct.Pin = SN6505_EN_Pin;
 80013dc:	2308      	movs	r3, #8
 80013de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4821      	ldr	r0, [pc, #132]	; (8001478 <MX_GPIO_Init+0x158>)
 80013f4:	f003 fab0 	bl	8004958 <HAL_GPIO_Init>

	/*Configure GPIO pin : SYNC_Pin */
	GPIO_InitStruct.Pin = SYNC_Pin;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_GPIO_Init+0x160>)
 8001400:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(SYNC_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	481d      	ldr	r0, [pc, #116]	; (8001484 <MX_GPIO_Init+0x164>)
 800140e:	f003 faa3 	bl	8004958 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin
	 LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin
	 S1_Pin S2_Pin S3_Pin S4_Pin
	 S5_Pin S6_Pin */
	GPIO_InitStruct.Pin = LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin;
 8001412:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001416:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4814      	ldr	r0, [pc, #80]	; (800147c <MX_GPIO_Init+0x15c>)
 800142c:	f003 fa94 	bl	8004958 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin;
 8001430:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001434:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_GPIO_Init+0x168>)
 8001438:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_GPIO_Init+0x158>)
 8001446:	f003 fa87 	bl	8004958 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2017      	movs	r0, #23
 8001450:	f002 feb3 	bl	80041ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001454:	2017      	movs	r0, #23
 8001456:	f002 fecc 	bl	80041f2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2028      	movs	r0, #40	; 0x28
 8001460:	f002 feab 	bl	80041ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001464:	2028      	movs	r0, #40	; 0x28
 8001466:	f002 fec4 	bl	80041f2 <HAL_NVIC_EnableIRQ>

}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	10110000 	.word	0x10110000
 8001484:	40020400 	.word	0x40020400
 8001488:	10210000 	.word	0x10210000

0800148c <runMeasurementMethod>:

/* USER CODE BEGIN 4 */

void runMeasurementMethod() {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	//there is no need to run measurement sequence, when the mode is "measureOnSync"
	if(!isModeMeasureOnSync()){
 8001490:	f001 fae6 	bl	8002a60 <isModeMeasureOnSync>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <runMeasurementMethod+0x12>
		runMeasurementSequence();
 800149a:	f000 f8a7 	bl	80015ec <runMeasurementSequence>
	}
	//if measurement method is set, run it
	if ((state.remainingMeasurements > 0) || (state.remainingMeasurements == -1) && ((state.extAdcActiveState == 1) || (state.intAdcActiveState == 1) || (state.compActiveState == 1))) {
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <runMeasurementMethod+0x84>)
 80014a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dc11      	bgt.n	80014cc <runMeasurementMethod+0x40>
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <runMeasurementMethod+0x84>)
 80014aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b2:	d12b      	bne.n	800150c <runMeasurementMethod+0x80>
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <runMeasurementMethod+0x84>)
 80014b6:	791b      	ldrb	r3, [r3, #4]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d007      	beq.n	80014cc <runMeasurementMethod+0x40>
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <runMeasurementMethod+0x84>)
 80014be:	795b      	ldrb	r3, [r3, #5]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d003      	beq.n	80014cc <runMeasurementMethod+0x40>
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <runMeasurementMethod+0x84>)
 80014c6:	799b      	ldrb	r3, [r3, #6]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d11f      	bne.n	800150c <runMeasurementMethod+0x80>
		// check, if there isn't new user update before starting measurement
		if (newDataInBuffer()) {
 80014cc:	f001 fabc 	bl	8002a48 <newDataInBuffer>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <runMeasurementMethod+0x4e>
			parseText();
 80014d6:	f000 fd45 	bl	8001f64 <parseText>
		}
		// also update the state
		if (stateCanBeUpdated()) {
 80014da:	f001 f9af 	bl	800283c <stateCanBeUpdated>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <runMeasurementMethod+0x5c>
			updateState();
 80014e4:	f001 f936 	bl	8002754 <updateState>
		}
		if (state.extAdcActiveState == 1) {
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <runMeasurementMethod+0x84>)
 80014ea:	791b      	ldrb	r3, [r3, #4]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <runMeasurementMethod+0x68>
			measureWithExtADC();
 80014f0:	f000 fa12 	bl	8001918 <measureWithExtADC>
		}
		if (state.intAdcActiveState == 1) {
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <runMeasurementMethod+0x84>)
 80014f6:	795b      	ldrb	r3, [r3, #5]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <runMeasurementMethod+0x74>
			measureWithIntADC();
 80014fc:	f000 fa3e 	bl	800197c <measureWithIntADC>
		}
		if (state.compActiveState == 1) {
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <runMeasurementMethod+0x84>)
 8001502:	799b      	ldrb	r3, [r3, #6]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <runMeasurementMethod+0x80>
			measureWithComp();
 8001508:	f000 fa5e 	bl	80019c8 <measureWithComp>
		}
	}
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2002f4a8 	.word	0x2002f4a8

08001514 <runPolarizationSequence>:

void runPolarizationSequence() {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <runPolarizationSequence+0xc8>)
 800151a:	2200      	movs	r2, #0
 800151c:	761a      	strb	r2, [r3, #24]
	remainingTimeToNextMeasurement = state.wholeMeasurementPeriod * 1000; // convert ms to us
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <runPolarizationSequence+0xc8>)
 8001520:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001524:	461a      	mov	r2, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	fb03 f302 	mul.w	r3, r3, r2
 800152e:	461a      	mov	r2, r3
 8001530:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <runPolarizationSequence+0xcc>)
 8001532:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = state.polarizationPeriod * 1000; // convert ms to us
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <runPolarizationSequence+0xc8>)
 8001536:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800153a:	461a      	mov	r2, r3
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	fb03 f302 	mul.w	r3, r3, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <runPolarizationSequence+0xd0>)
 8001548:	601a      	str	r2, [r3, #0]

	// visualise
	set_LED1(1, 1, 1);
 800154a:	2201      	movs	r2, #1
 800154c:	2101      	movs	r1, #1
 800154e:	2001      	movs	r0, #1
 8001550:	f000 f8fe 	bl	8001750 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001554:	2201      	movs	r2, #1
 8001556:	2102      	movs	r1, #2
 8001558:	4823      	ldr	r0, [pc, #140]	; (80015e8 <runPolarizationSequence+0xd4>)
 800155a:	f003 fba7 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2104      	movs	r1, #4
 8001562:	4821      	ldr	r0, [pc, #132]	; (80015e8 <runPolarizationSequence+0xd4>)
 8001564:	f003 fba2 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001568:	2201      	movs	r2, #1
 800156a:	2108      	movs	r1, #8
 800156c:	481e      	ldr	r0, [pc, #120]	; (80015e8 <runPolarizationSequence+0xd4>)
 800156e:	f003 fb9d 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2110      	movs	r1, #16
 8001576:	481c      	ldr	r0, [pc, #112]	; (80015e8 <runPolarizationSequence+0xd4>)
 8001578:	f003 fb98 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2120      	movs	r1, #32
 8001580:	4819      	ldr	r0, [pc, #100]	; (80015e8 <runPolarizationSequence+0xd4>)
 8001582:	f003 fb93 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	2140      	movs	r1, #64	; 0x40
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <runPolarizationSequence+0xd4>)
 800158c:	f003 fb8e 	bl	8004cac <HAL_GPIO_WritePin>
	delay_ms(5);
 8001590:	2005      	movs	r0, #5
 8001592:	f000 f9a9 	bl	80018e8 <delay_ms>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	4813      	ldr	r0, [pc, #76]	; (80015e8 <runPolarizationSequence+0xd4>)
 800159c:	f003 fb86 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2104      	movs	r1, #4
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <runPolarizationSequence+0xd4>)
 80015a6:	f003 fb81 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2108      	movs	r1, #8
 80015ae:	480e      	ldr	r0, [pc, #56]	; (80015e8 <runPolarizationSequence+0xd4>)
 80015b0:	f003 fb7c 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2110      	movs	r1, #16
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <runPolarizationSequence+0xd4>)
 80015ba:	f003 fb77 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2120      	movs	r1, #32
 80015c2:	4809      	ldr	r0, [pc, #36]	; (80015e8 <runPolarizationSequence+0xd4>)
 80015c4:	f003 fb72 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <runPolarizationSequence+0xd4>)
 80015ce:	f003 fb6d 	bl	8004cac <HAL_GPIO_WritePin>
	state.preparedToRunMeasurementPhase = 1;
 80015d2:	4b02      	ldr	r3, [pc, #8]	; (80015dc <runPolarizationSequence+0xc8>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	765a      	strb	r2, [r3, #25]

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2002f4a8 	.word	0x2002f4a8
 80015e0:	20004314 	.word	0x20004314
 80015e4:	20000204 	.word	0x20000204
 80015e8:	40020c00 	.word	0x40020c00

080015ec <runMeasurementSequence>:

void runMeasurementSequence() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	state.preparedToRunMeasurementPhase = 0;
 80015f0:	4b55      	ldr	r3, [pc, #340]	; (8001748 <runMeasurementSequence+0x15c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	765a      	strb	r2, [r3, #25]
	set_LED1(0, 1, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2101      	movs	r1, #1
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f8a8 	bl	8001750 <set_LED1>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2102      	movs	r1, #2
 8001604:	4851      	ldr	r0, [pc, #324]	; (800174c <runMeasurementSequence+0x160>)
 8001606:	f003 fb51 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2104      	movs	r1, #4
 800160e:	484f      	ldr	r0, [pc, #316]	; (800174c <runMeasurementSequence+0x160>)
 8001610:	f003 fb4c 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	2108      	movs	r1, #8
 8001618:	484c      	ldr	r0, [pc, #304]	; (800174c <runMeasurementSequence+0x160>)
 800161a:	f003 fb47 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2110      	movs	r1, #16
 8001622:	484a      	ldr	r0, [pc, #296]	; (800174c <runMeasurementSequence+0x160>)
 8001624:	f003 fb42 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2120      	movs	r1, #32
 800162c:	4847      	ldr	r0, [pc, #284]	; (800174c <runMeasurementSequence+0x160>)
 800162e:	f003 fb3d 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	4845      	ldr	r0, [pc, #276]	; (800174c <runMeasurementSequence+0x160>)
 8001638:	f003 fb38 	bl	8004cac <HAL_GPIO_WritePin>
	delay_us(50);
 800163c:	2032      	movs	r0, #50	; 0x32
 800163e:	f000 f93f 	bl	80018c0 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2102      	movs	r1, #2
 8001646:	4841      	ldr	r0, [pc, #260]	; (800174c <runMeasurementSequence+0x160>)
 8001648:	f003 fb30 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2104      	movs	r1, #4
 8001650:	483e      	ldr	r0, [pc, #248]	; (800174c <runMeasurementSequence+0x160>)
 8001652:	f003 fb2b 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	2108      	movs	r1, #8
 800165a:	483c      	ldr	r0, [pc, #240]	; (800174c <runMeasurementSequence+0x160>)
 800165c:	f003 fb26 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2110      	movs	r1, #16
 8001664:	4839      	ldr	r0, [pc, #228]	; (800174c <runMeasurementSequence+0x160>)
 8001666:	f003 fb21 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800166a:	2201      	movs	r2, #1
 800166c:	2120      	movs	r1, #32
 800166e:	4837      	ldr	r0, [pc, #220]	; (800174c <runMeasurementSequence+0x160>)
 8001670:	f003 fb1c 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001674:	2201      	movs	r2, #1
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	4834      	ldr	r0, [pc, #208]	; (800174c <runMeasurementSequence+0x160>)
 800167a:	f003 fb17 	bl	8004cac <HAL_GPIO_WritePin>
	delay_ms(10);
 800167e:	200a      	movs	r0, #10
 8001680:	f000 f932 	bl	80018e8 <delay_ms>

	//run sequnece T7 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2102      	movs	r1, #2
 8001688:	4830      	ldr	r0, [pc, #192]	; (800174c <runMeasurementSequence+0x160>)
 800168a:	f003 fb0f 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2104      	movs	r1, #4
 8001692:	482e      	ldr	r0, [pc, #184]	; (800174c <runMeasurementSequence+0x160>)
 8001694:	f003 fb0a 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2108      	movs	r1, #8
 800169c:	482b      	ldr	r0, [pc, #172]	; (800174c <runMeasurementSequence+0x160>)
 800169e:	f003 fb05 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2110      	movs	r1, #16
 80016a6:	4829      	ldr	r0, [pc, #164]	; (800174c <runMeasurementSequence+0x160>)
 80016a8:	f003 fb00 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2120      	movs	r1, #32
 80016b0:	4826      	ldr	r0, [pc, #152]	; (800174c <runMeasurementSequence+0x160>)
 80016b2:	f003 fafb 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2140      	movs	r1, #64	; 0x40
 80016ba:	4824      	ldr	r0, [pc, #144]	; (800174c <runMeasurementSequence+0x160>)
 80016bc:	f003 faf6 	bl	8004cac <HAL_GPIO_WritePin>
	delay_ms(10);
 80016c0:	200a      	movs	r0, #10
 80016c2:	f000 f911 	bl	80018e8 <delay_ms>

	//run sequnece T8 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2102      	movs	r1, #2
 80016ca:	4820      	ldr	r0, [pc, #128]	; (800174c <runMeasurementSequence+0x160>)
 80016cc:	f003 faee 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2104      	movs	r1, #4
 80016d4:	481d      	ldr	r0, [pc, #116]	; (800174c <runMeasurementSequence+0x160>)
 80016d6:	f003 fae9 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2108      	movs	r1, #8
 80016de:	481b      	ldr	r0, [pc, #108]	; (800174c <runMeasurementSequence+0x160>)
 80016e0:	f003 fae4 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2110      	movs	r1, #16
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <runMeasurementSequence+0x160>)
 80016ea:	f003 fadf 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2120      	movs	r1, #32
 80016f2:	4816      	ldr	r0, [pc, #88]	; (800174c <runMeasurementSequence+0x160>)
 80016f4:	f003 fada 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <runMeasurementSequence+0x160>)
 80016fe:	f003 fad5 	bl	8004cac <HAL_GPIO_WritePin>
	delay_ms(10);
 8001702:	200a      	movs	r0, #10
 8001704:	f000 f8f0 	bl	80018e8 <delay_ms>

	//run sequnece T9 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2102      	movs	r1, #2
 800170c:	480f      	ldr	r0, [pc, #60]	; (800174c <runMeasurementSequence+0x160>)
 800170e:	f003 facd 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8001712:	2201      	movs	r2, #1
 8001714:	2104      	movs	r1, #4
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <runMeasurementSequence+0x160>)
 8001718:	f003 fac8 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2108      	movs	r1, #8
 8001720:	480a      	ldr	r0, [pc, #40]	; (800174c <runMeasurementSequence+0x160>)
 8001722:	f003 fac3 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2110      	movs	r1, #16
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <runMeasurementSequence+0x160>)
 800172c:	f003 fabe 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001730:	2201      	movs	r2, #1
 8001732:	2120      	movs	r1, #32
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <runMeasurementSequence+0x160>)
 8001736:	f003 fab9 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	4803      	ldr	r0, [pc, #12]	; (800174c <runMeasurementSequence+0x160>)
 8001740:	f003 fab4 	bl	8004cac <HAL_GPIO_WritePin>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2002f4a8 	.word	0x2002f4a8
 800174c:	40020c00 	.word	0x40020c00

08001750 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
 800175a:	460b      	mov	r3, r1
 800175c:	71bb      	strb	r3, [r7, #6]
 800175e:	4613      	mov	r3, r2
 8001760:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, G);
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	461a      	mov	r2, r3
 8001766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176a:	480a      	ldr	r0, [pc, #40]	; (8001794 <set_LED1+0x44>)
 800176c:	f003 fa9e 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, B);
 8001770:	797b      	ldrb	r3, [r7, #5]
 8001772:	461a      	mov	r2, r3
 8001774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <set_LED1+0x44>)
 800177a:	f003 fa97 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, R);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	461a      	mov	r2, r3
 8001782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <set_LED1+0x44>)
 8001788:	f003 fa90 	bl	8004cac <HAL_GPIO_WritePin>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40020c00 	.word	0x40020c00

08001798 <set_LED2>:
void set_LED2(uint8_t val) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val);
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	461a      	mov	r2, r3
 80017a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <set_LED2+0x20>)
 80017ac:	f003 fa7e 	bl	8004cac <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40020c00 	.word	0x40020c00

080017bc <set_LED3>:

void set_LED3(uint8_t val) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, val);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	461a      	mov	r2, r3
 80017ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <set_LED3+0x20>)
 80017d0:	f003 fa6c 	bl	8004cac <HAL_GPIO_WritePin>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020c00 	.word	0x40020c00

080017e0 <set_LED4>:

void set_LED4(uint8_t val) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, val);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	461a      	mov	r2, r3
 80017ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <set_LED4+0x20>)
 80017f4:	f003 fa5a 	bl	8004cac <HAL_GPIO_WritePin>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020c00 	.word	0x40020c00

08001804 <switchingCircuitIdle>:

void switchingCircuitIdle() {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 8001808:	2200      	movs	r2, #0
 800180a:	2101      	movs	r1, #1
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <switchingCircuitIdle+0x50>)
 800180e:	f003 fa4d 	bl	8004cac <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2102      	movs	r1, #2
 8001816:	480f      	ldr	r0, [pc, #60]	; (8001854 <switchingCircuitIdle+0x50>)
 8001818:	f003 fa48 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2104      	movs	r1, #4
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <switchingCircuitIdle+0x50>)
 8001822:	f003 fa43 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001826:	2201      	movs	r2, #1
 8001828:	2108      	movs	r1, #8
 800182a:	480a      	ldr	r0, [pc, #40]	; (8001854 <switchingCircuitIdle+0x50>)
 800182c:	f003 fa3e 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2110      	movs	r1, #16
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <switchingCircuitIdle+0x50>)
 8001836:	f003 fa39 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2120      	movs	r1, #32
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <switchingCircuitIdle+0x50>)
 8001840:	f003 fa34 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <switchingCircuitIdle+0x50>)
 800184a:	f003 fa2f 	bl	8004cac <HAL_GPIO_WritePin>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40020c00 	.word	0x40020c00

08001858 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d11d      	bne.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		if (timeIndex > 0) {
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 50;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	3b32      	subs	r3, #50	; 0x32
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800187a:	6013      	str	r3, [r2, #0]
		}
		if (remainingTimeToNextMeasurement > 0) {
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_TIM_PeriodElapsedCallback+0x38>
			remainingTimeToNextMeasurement -= 50;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3b32      	subs	r3, #50	; 0x32
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e001      	b.n	8001894 <HAL_TIM_PeriodElapsedCallback+0x3c>
		} else {
			prepareForPolarizationPhaseIfPossible();
 8001890:	f000 f9d0 	bl	8001c34 <prepareForPolarizationPhaseIfPossible>
		}
		if (remainingPolarizationTime > 0) {
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			remainingPolarizationTime -= 50;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3b32      	subs	r3, #50	; 0x32
 80018a2:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40000c00 	.word	0x40000c00
 80018b4:	20000200 	.word	0x20000200
 80018b8:	20004314 	.word	0x20004314
 80018bc:	20000204 	.word	0x20000204

080018c0 <delay_us>:

void delay_us(uint32_t delay_us) {
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <delay_us+0x24>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 80018ce:	bf00      	nop
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <delay_us+0x24>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1fb      	bne.n	80018d0 <delay_us+0x10>
		;
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	20000200 	.word	0x20000200

080018e8 <delay_ms>:

void delay_ms(uint32_t delay_us) {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us * 1000;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	4a06      	ldr	r2, [pc, #24]	; (8001914 <delay_ms+0x2c>)
 80018fc:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 80018fe:	bf00      	nop
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <delay_ms+0x2c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1fb      	bne.n	8001900 <delay_ms+0x18>
		;
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	20000200 	.word	0x20000200

08001918 <measureWithExtADC>:

void measureWithExtADC() {
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2101      	movs	r1, #1
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff ff15 	bl	8001750 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <measureWithExtADC+0x4c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <measureWithExtADC+0x50>)
 8001930:	480e      	ldr	r0, [pc, #56]	; (800196c <measureWithExtADC+0x54>)
 8001932:	f004 fcad 	bl	8006290 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 8001936:	2100      	movs	r1, #0
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <measureWithExtADC+0x58>)
 800193a:	f005 fa61 	bl	8006e00 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 800193e:	2104      	movs	r1, #4
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <measureWithExtADC+0x58>)
 8001942:	f005 fa5d 	bl	8006e00 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 8001946:	2100      	movs	r1, #0
 8001948:	480a      	ldr	r0, [pc, #40]	; (8001974 <measureWithExtADC+0x5c>)
 800194a:	f005 fa59 	bl	8006e00 <HAL_TIM_PWM_Start_IT>
	set_LED2(1);
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff ff22 	bl	8001798 <set_LED2>
	state.extAdcMeasuring = 1;
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <measureWithExtADC+0x60>)
 8001956:	2201      	movs	r2, #1
 8001958:	71da      	strb	r2, [r3, #7]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <measureWithExtADC+0x60>)
 800195c:	2200      	movs	r2, #0
 800195e:	765a      	strb	r2, [r3, #25]
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000000 	.word	0x20000000
 8001968:	20045148 	.word	0x20045148
 800196c:	2002f73c 	.word	0x2002f73c
 8001970:	2002f6fc 	.word	0x2002f6fc
 8001974:	200041c4 	.word	0x200041c4
 8001978:	2002f4a8 	.word	0x2002f4a8

0800197c <measureWithIntADC>:

void measureWithIntADC() {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2101      	movs	r1, #1
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fee3 	bl	8001750 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <measureWithIntADC+0x38>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4909      	ldr	r1, [pc, #36]	; (80019b8 <measureWithIntADC+0x3c>)
 8001992:	480a      	ldr	r0, [pc, #40]	; (80019bc <measureWithIntADC+0x40>)
 8001994:	f001 ff6e 	bl	8003874 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 8001998:	4809      	ldr	r0, [pc, #36]	; (80019c0 <measureWithIntADC+0x44>)
 800199a:	f005 f9b1 	bl	8006d00 <HAL_TIM_Base_Start_IT>
	set_LED3(1);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7ff ff0c 	bl	80017bc <set_LED3>
	state.intAdcMeasuring = 1;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <measureWithIntADC+0x48>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	721a      	strb	r2, [r3, #8]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <measureWithIntADC+0x48>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	765a      	strb	r2, [r3, #25]
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000000 	.word	0x20000000
 80019b8:	2002f860 	.word	0x2002f860
 80019bc:	2002f4c8 	.word	0x2002f4c8
 80019c0:	2002f6b8 	.word	0x2002f6b8
 80019c4:	2002f4a8 	.word	0x2002f4a8

080019c8 <measureWithComp>:

void measureWithComp() {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2101      	movs	r1, #1
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff febd 	bl	8001750 <set_LED1>
	// run the timer 4001 - 2 seconds for 2 kHz
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 4001);
 80019d6:	f640 73a1 	movw	r3, #4001	; 0xfa1
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <measureWithComp+0x34>)
 80019dc:	2100      	movs	r1, #0
 80019de:	4808      	ldr	r0, [pc, #32]	; (8001a00 <measureWithComp+0x38>)
 80019e0:	f005 fb5e 	bl	80070a0 <HAL_TIM_IC_Start_DMA>
	set_LED4(1);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fefb 	bl	80017e0 <set_LED4>
	state.compMeasuring = 1;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <measureWithComp+0x3c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	725a      	strb	r2, [r3, #9]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <measureWithComp+0x3c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	765a      	strb	r2, [r3, #25]
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000214 	.word	0x20000214
 8001a00:	2002f7a0 	.word	0x2002f7a0
 8001a04:	2002f4a8 	.word	0x2002f4a8

08001a08 <measurementWithExtAdcDone>:

void measurementWithExtAdcDone() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

	//stop DMA
	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <measurementWithExtAdcDone+0x94>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <measurementWithExtAdcDone+0x94>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6053      	str	r3, [r2, #4]

	filledBuffersExtADC++;
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a22:	701a      	strb	r2, [r3, #0]
	//first buffer is filled
	if (filledBuffersExtADC == 1) {
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d108      	bne.n	8001a3e <measurementWithExtAdcDone+0x36>
		//start DMA again with second buffer
		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <measurementWithExtAdcDone+0x9c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	491c      	ldr	r1, [pc, #112]	; (8001aa8 <measurementWithExtAdcDone+0xa0>)
 8001a36:	481d      	ldr	r0, [pc, #116]	; (8001aac <measurementWithExtAdcDone+0xa4>)
 8001a38:	f004 fc2a 	bl	8006290 <HAL_SPI_Receive_DMA>
			state.extAdcSetState = 0;
		} else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8001a3c:	e02b      	b.n	8001a96 <measurementWithExtAdcDone+0x8e>
	else if (filledBuffersExtADC == 2) {
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d127      	bne.n	8001a96 <measurementWithExtAdcDone+0x8e>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001a46:	2100      	movs	r1, #0
 8001a48:	4819      	ldr	r0, [pc, #100]	; (8001ab0 <measurementWithExtAdcDone+0xa8>)
 8001a4a:	f005 fa63 	bl	8006f14 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001a4e:	2104      	movs	r1, #4
 8001a50:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <measurementWithExtAdcDone+0xa8>)
 8001a52:	f005 fa5f 	bl	8006f14 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001a56:	2100      	movs	r1, #0
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <measurementWithExtAdcDone+0xac>)
 8001a5a:	f005 fa5b 	bl	8006f14 <HAL_TIM_PWM_Stop_IT>
		set_LED2(0);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fe9a 	bl	8001798 <set_LED2>
		state.extAdcReadyToSend = 1;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	705a      	strb	r2, [r3, #1]
		state.extAdcMeasuring = 0;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	71da      	strb	r2, [r3, #7]
		filledBuffersExtADC = 0;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
		goToIdleAfterMeasurement();
 8001a76:	f000 f899 	bl	8001bac <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a7c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d106      	bne.n	8001a92 <measurementWithExtAdcDone+0x8a>
			state.extAdcActiveState = 0;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	711a      	strb	r2, [r3, #4]
			state.extAdcSetState = 0;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	729a      	strb	r2, [r3, #10]
}
 8001a90:	e001      	b.n	8001a96 <measurementWithExtAdcDone+0x8e>
			prepareForPolarizationPhaseIfPossible();
 8001a92:	f000 f8cf 	bl	8001c34 <prepareForPolarizationPhaseIfPossible>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40013000 	.word	0x40013000
 8001aa0:	200001fc 	.word	0x200001fc
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20019ba0 	.word	0x20019ba0
 8001aac:	2002f73c 	.word	0x2002f73c
 8001ab0:	2002f6fc 	.word	0x2002f6fc
 8001ab4:	200041c4 	.word	0x200041c4
 8001ab8:	2002f4a8 	.word	0x2002f4a8

08001abc <measurementWithIntAdcDone>:

void measurementWithIntAdcDone() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	//stop the ADC when in interrupt
	//if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.
	ADC1->CR2 &= ~ADC_CR2_DMA;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <measurementWithIntAdcDone+0x80>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <measurementWithIntAdcDone+0x80>)
 8001ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aca:	6093      	str	r3, [r2, #8]

	filledBuffersIntADC++;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001ad6:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffersIntADC == 1) {
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <measurementWithIntAdcDone+0x34>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <measurementWithIntAdcDone+0x88>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4918      	ldr	r1, [pc, #96]	; (8001b48 <measurementWithIntAdcDone+0x8c>)
 8001ae8:	4818      	ldr	r0, [pc, #96]	; (8001b4c <measurementWithIntAdcDone+0x90>)
 8001aea:	f001 fec3 	bl	8003874 <HAL_ADC_Start_DMA>
		// if there are remaning
		else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8001aee:	e022      	b.n	8001b36 <measurementWithIntAdcDone+0x7a>
	else if (filledBuffersIntADC == 2) {
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d11e      	bne.n	8001b36 <measurementWithIntAdcDone+0x7a>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001af8:	4815      	ldr	r0, [pc, #84]	; (8001b50 <measurementWithIntAdcDone+0x94>)
 8001afa:	f005 f92b 	bl	8006d54 <HAL_TIM_Base_Stop_IT>
		set_LED3(0);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fe5c 	bl	80017bc <set_LED3>
		filledBuffersIntADC = 0;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
		state.intAdcReadyToSend = 1;
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	709a      	strb	r2, [r3, #2]
		state.intAdcMeasuring = 0;
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	721a      	strb	r2, [r3, #8]
		goToIdleAfterMeasurement();
 8001b16:	f000 f849 	bl	8001bac <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <measurementWithIntAdcDone+0x76>
			state.intAdcActiveState = 0;
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	715a      	strb	r2, [r3, #5]
			state.intAdcSetState = 0;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	72da      	strb	r2, [r3, #11]
}
 8001b30:	e001      	b.n	8001b36 <measurementWithIntAdcDone+0x7a>
			prepareForPolarizationPhaseIfPossible();
 8001b32:	f000 f87f 	bl	8001c34 <prepareForPolarizationPhaseIfPossible>
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40012000 	.word	0x40012000
 8001b40:	200001fd 	.word	0x200001fd
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20004318 	.word	0x20004318
 8001b4c:	2002f4c8 	.word	0x2002f4c8
 8001b50:	2002f6b8 	.word	0x2002f6b8
 8001b54:	2002f4a8 	.word	0x2002f4a8

08001b58 <measurementWithCompDone>:

void measurementWithCompDone(TIM_HandleTypeDef *htim) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <measurementWithCompDone+0x4c>)
 8001b64:	f005 fb98 	bl	8007298 <HAL_TIM_IC_Stop_DMA>
	set_LED4(0);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff fe39 	bl	80017e0 <set_LED4>
	state.compReadyToSend = 1;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	70da      	strb	r2, [r3, #3]
	state.compMeasuring = 0;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	725a      	strb	r2, [r3, #9]

	goToIdleAfterMeasurement();
 8001b7a:	f000 f817 	bl	8001bac <goToIdleAfterMeasurement>

	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b80:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d106      	bne.n	8001b96 <measurementWithCompDone+0x3e>
		state.compActiveState = 0;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	719a      	strb	r2, [r3, #6]
		state.compSetState = 0;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	731a      	strb	r2, [r3, #12]
	} else {
		prepareForPolarizationPhaseIfPossible();
	}
}
 8001b94:	e001      	b.n	8001b9a <measurementWithCompDone+0x42>
		prepareForPolarizationPhaseIfPossible();
 8001b96:	f000 f84d 	bl	8001c34 <prepareForPolarizationPhaseIfPossible>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2002f7a0 	.word	0x2002f7a0
 8001ba8:	2002f4a8 	.word	0x2002f4a8

08001bac <goToIdleAfterMeasurement>:

void goToIdleAfterMeasurement() {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	//only if all measurements were done
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bb2:	79db      	ldrb	r3, [r3, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d138      	bne.n	8001c2a <goToIdleAfterMeasurement+0x7e>
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bba:	7a1b      	ldrb	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d134      	bne.n	8001c2a <goToIdleAfterMeasurement+0x7e>
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bc2:	7a5b      	ldrb	r3, [r3, #9]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d130      	bne.n	8001c2a <goToIdleAfterMeasurement+0x7e>
		switchingCircuitIdle();
 8001bc8:	f7ff fe1c 	bl	8001804 <switchingCircuitIdle>
		set_LED1(0, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fdbd 	bl	8001750 <set_LED1>
		state.index++;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bde:	61d3      	str	r3, [r2, #28]
		// -1 indicates infinity measurements
		if (canDecreaseRemainingMeasurements()) {
 8001be0:	f000 ff14 	bl	8002a0c <canDecreaseRemainingMeasurements>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d01f      	beq.n	8001c2a <goToIdleAfterMeasurement+0x7e>
			state.remainingMeasurements--;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bfa:	81da      	strh	r2, [r3, #14]
			//if this was the last measurement - set all states to 0
			if (state.remainingMeasurements == 0) {
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bfe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d111      	bne.n	8001c2a <goToIdleAfterMeasurement+0x7e>
				state.extAdcActiveState = 0;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	711a      	strb	r2, [r3, #4]
				state.extAdcSetState = 0;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	729a      	strb	r2, [r3, #10]
				state.intAdcActiveState = 0;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	715a      	strb	r2, [r3, #5]
				state.intAdcSetState = 0;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	72da      	strb	r2, [r3, #11]
				state.compActiveState = 0;
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	719a      	strb	r2, [r3, #6]
				state.compSetState = 0;
 8001c24:	4b02      	ldr	r3, [pc, #8]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	731a      	strb	r2, [r3, #12]
			}
		}
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2002f4a8 	.word	0x2002f4a8

08001c34 <prepareForPolarizationPhaseIfPossible>:

void prepareForPolarizationPhaseIfPossible() {
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
	if ((state.mode == 0) && (state.remainingMeasurements != 0) && (state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <prepareForPolarizationPhaseIfPossible+0x40>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d113      	bne.n	8001c68 <prepareForPolarizationPhaseIfPossible+0x34>
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <prepareForPolarizationPhaseIfPossible+0x40>)
 8001c42:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00e      	beq.n	8001c68 <prepareForPolarizationPhaseIfPossible+0x34>
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <prepareForPolarizationPhaseIfPossible+0x40>)
 8001c4c:	79db      	ldrb	r3, [r3, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10a      	bne.n	8001c68 <prepareForPolarizationPhaseIfPossible+0x34>
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <prepareForPolarizationPhaseIfPossible+0x40>)
 8001c54:	7a1b      	ldrb	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <prepareForPolarizationPhaseIfPossible+0x34>
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <prepareForPolarizationPhaseIfPossible+0x40>)
 8001c5c:	7a5b      	ldrb	r3, [r3, #9]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <prepareForPolarizationPhaseIfPossible+0x34>
		state.preparedToRunPolarizationPhase = 1;
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <prepareForPolarizationPhaseIfPossible+0x40>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	761a      	strb	r2, [r3, #24]
	}
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2002f4a8 	.word	0x2002f4a8

08001c78 <setStateToDefault>:

void setStateToDefault() {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	state.mode = 0;
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <setStateToDefault+0x8c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
	state.extAdcReadyToSend = 0;
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <setStateToDefault+0x8c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <setStateToDefault+0x8c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <setStateToDefault+0x8c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = 1;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <setStateToDefault+0x8c>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = 0;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <setStateToDefault+0x8c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	715a      	strb	r2, [r3, #5]
	state.compActiveState = 1;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <setStateToDefault+0x8c>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <setStateToDefault+0x8c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <setStateToDefault+0x8c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <setStateToDefault+0x8c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	725a      	strb	r2, [r3, #9]

	state.extAdcSetState = 1;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <setStateToDefault+0x8c>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	729a      	strb	r2, [r3, #10]
	state.intAdcSetState = 0;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <setStateToDefault+0x8c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	72da      	strb	r2, [r3, #11]
	state.compSetState = 0;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <setStateToDefault+0x8c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	731a      	strb	r2, [r3, #12]

	state.remainingMeasurements = -1;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <setStateToDefault+0x8c>)
 8001ccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd0:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = -1;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <setStateToDefault+0x8c>)
 8001cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd8:	821a      	strh	r2, [r3, #16]
	setMeasurementPeriod(8000);		//8 sec
 8001cda:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001cde:	f000 fecf 	bl	8002a80 <setMeasurementPeriod>

	state.newDataInBuffer = 0;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <setStateToDefault+0x8c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	759a      	strb	r2, [r3, #22]
	state.measureTechniqueUpdated = 0;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <setStateToDefault+0x8c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 1;
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <setStateToDefault+0x8c>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <setStateToDefault+0x8c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 8001cfa:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <setStateToDefault+0x8c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61da      	str	r2, [r3, #28]

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2002f4a8 	.word	0x2002f4a8

08001d08 <setStateToMeasureOnSync>:

void setStateToMeasureOnSync() {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	state.mode = 1;
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]

	state.extAdcReadyToSend = 0;
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = state.extAdcSetState;
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d26:	7a9a      	ldrb	r2, [r3, #10]
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d2a:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = state.intAdcSetState;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d2e:	7ada      	ldrb	r2, [r3, #11]
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d32:	715a      	strb	r2, [r3, #5]
	state.compActiveState = state.compSetState;
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d36:	7b1a      	ldrb	r2, [r3, #12]
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d3a:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	725a      	strb	r2, [r3, #9]

	state.remainingMeasurements = -1;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d54:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = -1;
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5c:	821a      	strh	r2, [r3, #16]
	state.wholeMeasurementPeriod = 0; 	//in ms -> 5 sec
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	825a      	strh	r2, [r3, #18]
	state.polarizationPeriod = 0; 		//in ms -> 3 sec
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	829a      	strh	r2, [r3, #20]

	remainingTimeToNextMeasurement = 0;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <setStateToMeasureOnSync+0xac>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = 0;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <setStateToMeasureOnSync+0xb0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
	setMeasurementPeriod(2000);
 8001d76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d7a:	f000 fe81 	bl	8002a80 <setMeasurementPeriod>

	state.newDataInBuffer = 0;
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	759a      	strb	r2, [r3, #22]
	state.measureTechniqueUpdated = 0;
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 0;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <setStateToMeasureOnSync+0xa8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	61da      	str	r2, [r3, #28]

	set_LED1(0, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff fcd5 	bl	8001750 <set_LED1>
	switchingCircuitIdle();
 8001da6:	f7ff fd2d 	bl	8001804 <switchingCircuitIdle>

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2002f4a8 	.word	0x2002f4a8
 8001db4:	20004314 	.word	0x20004314
 8001db8:	20000204 	.word	0x20000204

08001dbc <setStateToIdle>:
void setStateToIdle() {
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <setStateToIdle+0x88>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <setStateToIdle+0x88>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <setStateToIdle+0x88>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = 0;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <setStateToIdle+0x88>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = 0;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <setStateToIdle+0x88>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	715a      	strb	r2, [r3, #5]
	state.compActiveState = 0;
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <setStateToIdle+0x88>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <setStateToIdle+0x88>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <setStateToIdle+0x88>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <setStateToIdle+0x88>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	725a      	strb	r2, [r3, #9]

	state.extAdcSetState = 0;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <setStateToIdle+0x88>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	729a      	strb	r2, [r3, #10]
	state.intAdcSetState = 0;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <setStateToIdle+0x88>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	72da      	strb	r2, [r3, #11]
	state.compSetState = 0;
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <setStateToIdle+0x88>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	731a      	strb	r2, [r3, #12]

	state.remainingMeasurements = 0;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <setStateToIdle+0x88>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = 0;
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <setStateToIdle+0x88>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	821a      	strh	r2, [r3, #16]
	state.wholeMeasurementPeriod = 0; 	//in ms -> 5 sec
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <setStateToIdle+0x88>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	825a      	strh	r2, [r3, #18]
	state.polarizationPeriod = 0; 		//in ms -> 3 sec
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <setStateToIdle+0x88>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	829a      	strh	r2, [r3, #20]

	state.measureTechniqueUpdated = 0;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <setStateToIdle+0x88>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 0;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <setStateToIdle+0x88>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <setStateToIdle+0x88>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <setStateToIdle+0x88>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]

}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	2002f4a8 	.word	0x2002f4a8

08001e48 <initialization>:

void initialization() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	//setStateToMeasureOnlyNoPolarization();
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);	// start listening to commands
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4909      	ldr	r1, [pc, #36]	; (8001e74 <initialization+0x2c>)
 8001e50:	4809      	ldr	r0, [pc, #36]	; (8001e78 <initialization+0x30>)
 8001e52:	f006 feed 	bl	8008c30 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5); 						// start timer for delay measuring
 8001e56:	4809      	ldr	r0, [pc, #36]	; (8001e7c <initialization+0x34>)
 8001e58:	f004 ff52 	bl	8006d00 <HAL_TIM_Base_Start_IT>
	switchingCircuitIdle();
 8001e5c:	f7ff fcd2 	bl	8001804 <switchingCircuitIdle>
	set_LED1(0, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fc73 	bl	8001750 <set_LED1>
	setStateToDefault();								// set state in order to polarize with period 5 seconds
 8001e6a:	f7ff ff05 	bl	8001c78 <setStateToDefault>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20004310 	.word	0x20004310
 8001e78:	20004244 	.word	0x20004244
 8001e7c:	2002f428 	.word	0x2002f428

08001e80 <HAL_TIM_IC_CaptureCallback>:

//comparator finished measuring
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d102      	bne.n	8001e98 <HAL_TIM_IC_CaptureCallback+0x18>
		measurementWithCompDone(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fe60 	bl	8001b58 <measurementWithCompDone>
	}
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_ADC_ConvCpltCallback>:

//intADC - buffer filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_ADC_ConvCpltCallback+0x20>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConvCpltCallback+0x16>
		measurementWithIntAdcDone();
 8001eb2:	f7ff fe03 	bl	8001abc <measurementWithIntAdcDone>
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40012000 	.word	0x40012000

08001ec4 <HAL_UART_RxCpltCallback>:

//char received with via USB
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_UART_RxCpltCallback+0x20>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_RxCpltCallback+0x16>
		characterReceived();
 8001ed6:	f000 f807 	bl	8001ee8 <characterReceived>
	}
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40004800 	.word	0x40004800

08001ee8 <characterReceived>:

void characterReceived() {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <characterReceived+0x40>)
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <characterReceived+0x44>)
 8001ef2:	f006 fe9d 	bl	8008c30 <HAL_UART_Receive_IT>
	//receivedCharIndex shouldn't exceed 100
	receivedChars[(receivedCharIndex++) % 100] = buffer_uart_rx[0];
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <characterReceived+0x48>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	b2d1      	uxtb	r1, r2
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <characterReceived+0x48>)
 8001f00:	7011      	strb	r1, [r2, #0]
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <characterReceived+0x4c>)
 8001f04:	fba2 1203 	umull	r1, r2, r2, r3
 8001f08:	0952      	lsrs	r2, r2, #5
 8001f0a:	2164      	movs	r1, #100	; 0x64
 8001f0c:	fb01 f202 	mul.w	r2, r1, r2
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <characterReceived+0x40>)
 8001f18:	7819      	ldrb	r1, [r3, #0]
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <characterReceived+0x50>)
 8001f1c:	5499      	strb	r1, [r3, r2]
	state.newDataInBuffer = 1;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <characterReceived+0x54>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	759a      	strb	r2, [r3, #22]
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20004310 	.word	0x20004310
 8001f2c:	20004244 	.word	0x20004244
 8001f30:	2002f6f8 	.word	0x2002f6f8
 8001f34:	51eb851f 	.word	0x51eb851f
 8001f38:	2002f654 	.word	0x2002f654
 8001f3c:	2002f4a8 	.word	0x2002f4a8

08001f40 <HAL_SPI_RxCpltCallback>:

//extADC - buffer filled
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_SPI_RxCpltCallback+0x20>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_SPI_RxCpltCallback+0x16>
		measurementWithExtAdcDone();
 8001f52:	f7ff fd59 	bl	8001a08 <measurementWithExtAdcDone>
	}
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013000 	.word	0x40013000

08001f64 <parseText>:

int parseText() {
 8001f64:	b5b0      	push	{r4, r5, r7, lr}
 8001f66:	b0a6      	sub	sp, #152	; 0x98
 8001f68:	af00      	add	r7, sp, #0
	//-------------------------------------------------------------------------------------
	//check if there is character "<" and ">"
	//-------------------------------------------------------------------------------------
	state.newDataInBuffer = 0;
 8001f6a:	4bcc      	ldr	r3, [pc, #816]	; (800229c <parseText+0x338>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	759a      	strb	r2, [r3, #22]

	uint8_t i, indexOfHead, indexOfTail, tailCount = 0, headCount = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	char msg_buffers[80];
	char receivedCommand[50];

	for (i = 0; i < strlen(receivedCommand); i++) {
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001f82:	e00c      	b.n	8001f9e <parseText+0x3a>
		receivedCommand[i] = '\0';
 8001f84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f88:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001f8c:	4413      	add	r3, r2
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f803 2c98 	strb.w	r2, [r3, #-152]
	for (i = 0; i < strlen(receivedCommand); i++) {
 8001f94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001f9e:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe f955 	bl	8000254 <strlen>
 8001faa:	4603      	mov	r3, r0
 8001fac:	429c      	cmp	r4, r3
 8001fae:	d3e9      	bcc.n	8001f84 <parseText+0x20>
	}
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001fb6:	e00c      	b.n	8001fd2 <parseText+0x6e>
		msg_buffers[i] = '\0';
 8001fb8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001fbc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001fc0:	4413      	add	r3, r2
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001fc8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001fd2:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001fd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe f93a 	bl	8000254 <strlen>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	429c      	cmp	r4, r3
 8001fe4:	d3e8      	bcc.n	8001fb8 <parseText+0x54>
	}
	for (i = 0; i < strlen(receivedChars); i++) {
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001fec:	e023      	b.n	8002036 <parseText+0xd2>
		//head of the message
		if (receivedChars[i] == '<') {
 8001fee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ff2:	4aab      	ldr	r2, [pc, #684]	; (80022a0 <parseText+0x33c>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	2b3c      	cmp	r3, #60	; 0x3c
 8001ff8:	d109      	bne.n	800200e <parseText+0xaa>
			indexOfHead = i;
 8001ffa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ffe:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			headCount++;
 8002002:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002006:	3301      	adds	r3, #1
 8002008:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800200c:	e00e      	b.n	800202c <parseText+0xc8>
		}
		//tail of the message
		else if (receivedChars[i] == '>') {
 800200e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002012:	4aa3      	ldr	r2, [pc, #652]	; (80022a0 <parseText+0x33c>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	2b3e      	cmp	r3, #62	; 0x3e
 8002018:	d108      	bne.n	800202c <parseText+0xc8>
			indexOfTail = i;
 800201a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800201e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			tailCount++;
 8002022:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002026:	3301      	adds	r3, #1
 8002028:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	for (i = 0; i < strlen(receivedChars); i++) {
 800202c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002030:	3301      	adds	r3, #1
 8002032:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002036:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 800203a:	4899      	ldr	r0, [pc, #612]	; (80022a0 <parseText+0x33c>)
 800203c:	f7fe f90a 	bl	8000254 <strlen>
 8002040:	4603      	mov	r3, r0
 8002042:	429c      	cmp	r4, r3
 8002044:	d3d3      	bcc.n	8001fee <parseText+0x8a>
		}
	}
	//received message is not complete
	if (headCount > tailCount) {
 8002046:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800204a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800204e:	429a      	cmp	r2, r3
 8002050:	d901      	bls.n	8002056 <parseText+0xf2>
		return 0;
 8002052:	2300      	movs	r3, #0
 8002054:	e1d1      	b.n	80023fa <parseText+0x496>
	}
	// received message is complete ->
	else if (headCount == tailCount && headCount > 0 && tailCount > 0) {
 8002056:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800205a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800205e:	429a      	cmp	r2, r3
 8002060:	d158      	bne.n	8002114 <parseText+0x1b0>
 8002062:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002066:	2b00      	cmp	r3, #0
 8002068:	d054      	beq.n	8002114 <parseText+0x1b0>
 800206a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800206e:	2b00      	cmp	r3, #0
 8002070:	d050      	beq.n	8002114 <parseText+0x1b0>
		sprintf(msg_buffers, "<INFO:Message accepted>\n");
 8002072:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002076:	4a8b      	ldr	r2, [pc, #556]	; (80022a4 <parseText+0x340>)
 8002078:	461c      	mov	r4, r3
 800207a:	4615      	mov	r5, r2
 800207c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800207e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002084:	c403      	stmia	r4!, {r0, r1}
 8002086:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002088:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe f8e1 	bl	8000254 <strlen>
 8002092:	4603      	mov	r3, r0
 8002094:	b29a      	uxth	r2, r3
 8002096:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	4882      	ldr	r0, [pc, #520]	; (80022a8 <parseText+0x344>)
 80020a0:	f006 fd34 	bl	8008b0c <HAL_UART_Transmit>
	}

	//-------------------------------------------------------------------------------------
	// get string between special chars (Only if specialCharCount == 2)
	//-------------------------------------------------------------------------------------
	strncpy(receivedCommand, receivedChars + indexOfHead + 1, indexOfTail - indexOfHead - 1);
 80020a4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a7d      	ldr	r2, [pc, #500]	; (80022a0 <parseText+0x33c>)
 80020ac:	1899      	adds	r1, r3, r2
 80020ae:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80020b2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	461a      	mov	r2, r3
 80020bc:	463b      	mov	r3, r7
 80020be:	4618      	mov	r0, r3
 80020c0:	f007 fd14 	bl	8009aec <strncpy>
	receivedCommand[indexOfTail - indexOfHead - 1] = '\0';
 80020c4:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80020c8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80020d4:	4413      	add	r3, r2
 80020d6:	2200      	movs	r2, #0
 80020d8:	f803 2c98 	strb.w	r2, [r3, #-152]

	char *command = strtok(receivedCommand, ":");
 80020dc:	463b      	mov	r3, r7
 80020de:	4973      	ldr	r1, [pc, #460]	; (80022ac <parseText+0x348>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f007 fd19 	bl	8009b18 <strtok>
 80020e6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	char *method = strtok(NULL, ":");
 80020ea:	4970      	ldr	r1, [pc, #448]	; (80022ac <parseText+0x348>)
 80020ec:	2000      	movs	r0, #0
 80020ee:	f007 fd13 	bl	8009b18 <strtok>
 80020f2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	char *count = strtok(NULL, ":");
 80020f6:	496d      	ldr	r1, [pc, #436]	; (80022ac <parseText+0x348>)
 80020f8:	2000      	movs	r0, #0
 80020fa:	f007 fd0d 	bl	8009b18 <strtok>
 80020fe:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	//-------------------------------------------------------------------------------------
	// Perform action based on received message
	//-------------------------------------------------------------------------------------

	//<IDN> - identification
	if (strcmp(command, "IDN") == 0) {
 8002102:	496b      	ldr	r1, [pc, #428]	; (80022b0 <parseText+0x34c>)
 8002104:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002108:	f7fe f89a 	bl	8000240 <strcmp>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <parseText+0x1c8>
 8002112:	e02b      	b.n	800216c <parseText+0x208>
	else if ((headCount < tailCount)) {
 8002114:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8002118:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800211c:	429a      	cmp	r2, r3
 800211e:	d203      	bcs.n	8002128 <parseText+0x1c4>
		clearReceivedCharsBuffer(); // receivedChars needs to be cleared
 8002120:	f000 f982 	bl	8002428 <clearReceivedCharsBuffer>
		return 0;
 8002124:	2300      	movs	r3, #0
 8002126:	e168      	b.n	80023fa <parseText+0x496>
		return 0;
 8002128:	2300      	movs	r3, #0
 800212a:	e166      	b.n	80023fa <parseText+0x496>
		sprintf(msg_buffers, "<INFO:This is proton precession magnetometer - version 1>\n");
 800212c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002130:	4a60      	ldr	r2, [pc, #384]	; (80022b4 <parseText+0x350>)
 8002132:	461c      	mov	r4, r3
 8002134:	4615      	mov	r5, r2
 8002136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002146:	c403      	stmia	r4!, {r0, r1}
 8002148:	8022      	strh	r2, [r4, #0]
 800214a:	3402      	adds	r4, #2
 800214c:	0c13      	lsrs	r3, r2, #16
 800214e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002150:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f87d 	bl	8000254 <strlen>
 800215a:	4603      	mov	r3, r0
 800215c:	b29a      	uxth	r2, r3
 800215e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	4850      	ldr	r0, [pc, #320]	; (80022a8 <parseText+0x344>)
 8002168:	f006 fcd0 	bl	8008b0c <HAL_UART_Transmit>
	}

	//<IDLE> - initialization state
	if (strcmp(command, "IDLE") == 0) {
 800216c:	4952      	ldr	r1, [pc, #328]	; (80022b8 <parseText+0x354>)
 800216e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002172:	f7fe f865 	bl	8000240 <strcmp>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <parseText+0x21c>
		setStateToIdle();
 800217c:	f7ff fe1e 	bl	8001dbc <setStateToIdle>
	}
	//<DEFAULT> - initialization state
	if (strcmp(command, "DEFAULT") == 0) {
 8002180:	494e      	ldr	r1, [pc, #312]	; (80022bc <parseText+0x358>)
 8002182:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002186:	f7fe f85b 	bl	8000240 <strcmp>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <parseText+0x230>
		setStateToDefault();
 8002190:	f7ff fd72 	bl	8001c78 <setStateToDefault>
	}
	//<SET:parameter:value>
	if (strcmp(command, "SET") == 0) {
 8002194:	494a      	ldr	r1, [pc, #296]	; (80022c0 <parseText+0x35c>)
 8002196:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800219a:	f7fe f851 	bl	8000240 <strcmp>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <parseText+0x24c>
		//polarization time
		if (strcmp(method, "polT") == 0) {
 80021a4:	4947      	ldr	r1, [pc, #284]	; (80022c4 <parseText+0x360>)
 80021a6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80021aa:	f7fe f849 	bl	8000240 <strcmp>
 80021ae:	e122      	b.n	80023f6 <parseText+0x492>
			//convert received string to integer
			//polarizationTime = atoi(count);
		}
	}
	//<MEAS:method:count>
	else if (strcmp(command, "MEAS") == 0) {
 80021b0:	4945      	ldr	r1, [pc, #276]	; (80022c8 <parseText+0x364>)
 80021b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80021b6:	f7fe f843 	bl	8000240 <strcmp>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 811a 	bne.w	80023f6 <parseText+0x492>
		//external ADC only
		if (strcmp(method, "extADC") == 0) {
 80021c2:	4942      	ldr	r1, [pc, #264]	; (80022cc <parseText+0x368>)
 80021c4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80021c8:	f7fe f83a 	bl	8000240 <strcmp>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d110      	bne.n	80021f4 <parseText+0x290>
			state.extAdcSetState = 1;
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <parseText+0x338>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <parseText+0x338>)
 80021da:	2200      	movs	r2, #0
 80021dc:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <parseText+0x338>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <parseText+0x338>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 80021ea:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80021ee:	f000 fc47 	bl	8002a80 <setMeasurementPeriod>
 80021f2:	e0d7      	b.n	80023a4 <parseText+0x440>
		}
		//internal ADC only
		else if (strcmp(method, "intADC") == 0) {
 80021f4:	4936      	ldr	r1, [pc, #216]	; (80022d0 <parseText+0x36c>)
 80021f6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80021fa:	f7fe f821 	bl	8000240 <strcmp>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d110      	bne.n	8002226 <parseText+0x2c2>
			state.extAdcSetState = 0;
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <parseText+0x338>)
 8002206:	2200      	movs	r2, #0
 8002208:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <parseText+0x338>)
 800220c:	2201      	movs	r2, #1
 800220e:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <parseText+0x338>)
 8002212:	2200      	movs	r2, #0
 8002214:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <parseText+0x338>)
 8002218:	2201      	movs	r2, #1
 800221a:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 800221c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002220:	f000 fc2e 	bl	8002a80 <setMeasurementPeriod>
 8002224:	e0be      	b.n	80023a4 <parseText+0x440>
		}
		//comparator only
		else if (strcmp(method, "comp") == 0) {
 8002226:	492b      	ldr	r1, [pc, #172]	; (80022d4 <parseText+0x370>)
 8002228:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800222c:	f7fe f808 	bl	8000240 <strcmp>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d110      	bne.n	8002258 <parseText+0x2f4>
			state.extAdcSetState = 0;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <parseText+0x338>)
 8002238:	2200      	movs	r2, #0
 800223a:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <parseText+0x338>)
 800223e:	2200      	movs	r2, #0
 8002240:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <parseText+0x338>)
 8002244:	2201      	movs	r2, #1
 8002246:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <parseText+0x338>)
 800224a:	2201      	movs	r2, #1
 800224c:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(5000);
 800224e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002252:	f000 fc15 	bl	8002a80 <setMeasurementPeriod>
 8002256:	e0a5      	b.n	80023a4 <parseText+0x440>
		}
		//external ADC + internal ADC
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 8002258:	491f      	ldr	r1, [pc, #124]	; (80022d8 <parseText+0x374>)
 800225a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800225e:	f7fd ffef 	bl	8000240 <strcmp>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d007      	beq.n	8002278 <parseText+0x314>
 8002268:	491c      	ldr	r1, [pc, #112]	; (80022dc <parseText+0x378>)
 800226a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800226e:	f7fd ffe7 	bl	8000240 <strcmp>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d133      	bne.n	80022e0 <parseText+0x37c>
			state.extAdcSetState = 1;
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <parseText+0x338>)
 800227a:	2201      	movs	r2, #1
 800227c:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <parseText+0x338>)
 8002280:	2201      	movs	r2, #1
 8002282:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <parseText+0x338>)
 8002286:	2200      	movs	r2, #0
 8002288:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <parseText+0x338>)
 800228c:	2201      	movs	r2, #1
 800228e:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(13000);
 8002290:	f243 20c8 	movw	r0, #13000	; 0x32c8
 8002294:	f000 fbf4 	bl	8002a80 <setMeasurementPeriod>
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 8002298:	e084      	b.n	80023a4 <parseText+0x440>
 800229a:	bf00      	nop
 800229c:	2002f4a8 	.word	0x2002f4a8
 80022a0:	2002f654 	.word	0x2002f654
 80022a4:	0800a520 	.word	0x0800a520
 80022a8:	20004244 	.word	0x20004244
 80022ac:	0800a53c 	.word	0x0800a53c
 80022b0:	0800a540 	.word	0x0800a540
 80022b4:	0800a544 	.word	0x0800a544
 80022b8:	0800a580 	.word	0x0800a580
 80022bc:	0800a588 	.word	0x0800a588
 80022c0:	0800a590 	.word	0x0800a590
 80022c4:	0800a594 	.word	0x0800a594
 80022c8:	0800a59c 	.word	0x0800a59c
 80022cc:	0800a5a4 	.word	0x0800a5a4
 80022d0:	0800a5ac 	.word	0x0800a5ac
 80022d4:	0800a5b4 	.word	0x0800a5b4
 80022d8:	0800a5bc 	.word	0x0800a5bc
 80022dc:	0800a5cc 	.word	0x0800a5cc
		}
		//external ADC + comparator
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 80022e0:	4948      	ldr	r1, [pc, #288]	; (8002404 <parseText+0x4a0>)
 80022e2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022e6:	f7fd ffab 	bl	8000240 <strcmp>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <parseText+0x39c>
 80022f0:	4945      	ldr	r1, [pc, #276]	; (8002408 <parseText+0x4a4>)
 80022f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022f6:	f7fd ffa3 	bl	8000240 <strcmp>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d110      	bne.n	8002322 <parseText+0x3be>
			state.extAdcSetState = 1;
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <parseText+0x4a8>)
 8002302:	2201      	movs	r2, #1
 8002304:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <parseText+0x4a8>)
 8002308:	2200      	movs	r2, #0
 800230a:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <parseText+0x4a8>)
 800230e:	2201      	movs	r2, #1
 8002310:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 8002312:	4b3e      	ldr	r3, [pc, #248]	; (800240c <parseText+0x4a8>)
 8002314:	2201      	movs	r2, #1
 8002316:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 8002318:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800231c:	f000 fbb0 	bl	8002a80 <setMeasurementPeriod>
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 8002320:	e040      	b.n	80023a4 <parseText+0x440>
		}
		//internal ADC + comparator
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 8002322:	493b      	ldr	r1, [pc, #236]	; (8002410 <parseText+0x4ac>)
 8002324:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002328:	f7fd ff8a 	bl	8000240 <strcmp>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <parseText+0x3de>
 8002332:	4938      	ldr	r1, [pc, #224]	; (8002414 <parseText+0x4b0>)
 8002334:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002338:	f7fd ff82 	bl	8000240 <strcmp>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d110      	bne.n	8002364 <parseText+0x400>
			state.extAdcSetState = 0;
 8002342:	4b32      	ldr	r3, [pc, #200]	; (800240c <parseText+0x4a8>)
 8002344:	2200      	movs	r2, #0
 8002346:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <parseText+0x4a8>)
 800234a:	2201      	movs	r2, #1
 800234c:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 800234e:	4b2f      	ldr	r3, [pc, #188]	; (800240c <parseText+0x4a8>)
 8002350:	2201      	movs	r2, #1
 8002352:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <parseText+0x4a8>)
 8002356:	2201      	movs	r2, #1
 8002358:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 800235a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800235e:	f000 fb8f 	bl	8002a80 <setMeasurementPeriod>
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 8002362:	e01f      	b.n	80023a4 <parseText+0x440>
		}
		//external ADC + internal ADC + comparator
		else if ((strcmp(method, "extADC+intADC+comp") == 0) || (strcmp(method, "intADC+extADC+comp") == 0)) {
 8002364:	492c      	ldr	r1, [pc, #176]	; (8002418 <parseText+0x4b4>)
 8002366:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800236a:	f7fd ff69 	bl	8000240 <strcmp>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d007      	beq.n	8002384 <parseText+0x420>
 8002374:	4929      	ldr	r1, [pc, #164]	; (800241c <parseText+0x4b8>)
 8002376:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800237a:	f7fd ff61 	bl	8000240 <strcmp>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10f      	bne.n	80023a4 <parseText+0x440>
			state.compSetState = 1;
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <parseText+0x4a8>)
 8002386:	2201      	movs	r2, #1
 8002388:	731a      	strb	r2, [r3, #12]
			state.extAdcSetState = 1;
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <parseText+0x4a8>)
 800238c:	2201      	movs	r2, #1
 800238e:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <parseText+0x4a8>)
 8002392:	2201      	movs	r2, #1
 8002394:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <parseText+0x4a8>)
 8002398:	2201      	movs	r2, #1
 800239a:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(13000);
 800239c:	f243 20c8 	movw	r0, #13000	; 0x32c8
 80023a0:	f000 fb6e 	bl	8002a80 <setMeasurementPeriod>
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 80023a4:	491e      	ldr	r1, [pc, #120]	; (8002420 <parseText+0x4bc>)
 80023a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80023aa:	f7fd ff49 	bl	8000240 <strcmp>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <parseText+0x45a>
			state.setMeasurements = -1;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <parseText+0x4a8>)
 80023b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ba:	821a      	strh	r2, [r3, #16]
 80023bc:	e01b      	b.n	80023f6 <parseText+0x492>
		} else if (strcmp(count, "") == 0) {
 80023be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <parseText+0x46c>
			state.setMeasurements = 1;
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <parseText+0x4a8>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	821a      	strh	r2, [r3, #16]
 80023ce:	e012      	b.n	80023f6 <parseText+0x492>
		} else if (strcmp(count, "onSync") == 0) {
 80023d0:	4914      	ldr	r1, [pc, #80]	; (8002424 <parseText+0x4c0>)
 80023d2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80023d6:	f7fd ff33 	bl	8000240 <strcmp>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <parseText+0x482>
			setStateToMeasureOnSync();
 80023e0:	f7ff fc92 	bl	8001d08 <setStateToMeasureOnSync>
 80023e4:	e007      	b.n	80023f6 <parseText+0x492>
		}

		else {
			state.setMeasurements = atoi(count);
 80023e6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80023ea:	f007 fb28 	bl	8009a3e <atoi>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <parseText+0x4a8>)
 80023f4:	821a      	strh	r2, [r3, #16]
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	clearReceivedCharsBuffer();
 80023f6:	f000 f817 	bl	8002428 <clearReceivedCharsBuffer>
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3798      	adds	r7, #152	; 0x98
 80023fe:	46bd      	mov	sp, r7
 8002400:	bdb0      	pop	{r4, r5, r7, pc}
 8002402:	bf00      	nop
 8002404:	0800a5dc 	.word	0x0800a5dc
 8002408:	0800a5e8 	.word	0x0800a5e8
 800240c:	2002f4a8 	.word	0x2002f4a8
 8002410:	0800a5f4 	.word	0x0800a5f4
 8002414:	0800a600 	.word	0x0800a600
 8002418:	0800a60c 	.word	0x0800a60c
 800241c:	0800a620 	.word	0x0800a620
 8002420:	0800a634 	.word	0x0800a634
 8002424:	0800a638 	.word	0x0800a638

08002428 <clearReceivedCharsBuffer>:

void clearReceivedCharsBuffer() {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
	int i = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
	//keep everything in range
	if (receivedCharIndex > 50) {
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <clearReceivedCharsBuffer+0x4c>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b32      	cmp	r3, #50	; 0x32
 8002438:	d902      	bls.n	8002440 <clearReceivedCharsBuffer+0x18>
		receivedCharIndex = 50;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <clearReceivedCharsBuffer+0x4c>)
 800243c:	2232      	movs	r2, #50	; 0x32
 800243e:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < receivedCharIndex; i++) {
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	e007      	b.n	8002456 <clearReceivedCharsBuffer+0x2e>
		receivedChars[i] = '\0';
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <clearReceivedCharsBuffer+0x50>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < receivedCharIndex; i++) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3301      	adds	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <clearReceivedCharsBuffer+0x4c>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4293      	cmp	r3, r2
 8002460:	dbf1      	blt.n	8002446 <clearReceivedCharsBuffer+0x1e>
	}
	receivedCharIndex = 0;
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <clearReceivedCharsBuffer+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	2002f6f8 	.word	0x2002f6f8
 8002478:	2002f654 	.word	0x2002f654

0800247c <sendMeasuredData>:

void sendMeasuredData() {
 800247c:	b580      	push	{r7, lr}
 800247e:	b094      	sub	sp, #80	; 0x50
 8002480:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[50];
	uint16_t adc = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int i = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if ((state.extAdcReadyToSend == 1)) {
 800248c:	4ba3      	ldr	r3, [pc, #652]	; (800271c <sendMeasuredData+0x2a0>)
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d171      	bne.n	8002578 <sendMeasuredData+0xfc>
		sprintf(msg_buffers, "<MEAS:%u:extADC:\n", state.index);
 8002494:	4ba1      	ldr	r3, [pc, #644]	; (800271c <sendMeasuredData+0x2a0>)
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	463b      	mov	r3, r7
 800249a:	49a1      	ldr	r1, [pc, #644]	; (8002720 <sendMeasuredData+0x2a4>)
 800249c:	4618      	mov	r0, r3
 800249e:	f007 fb05 	bl	8009aac <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80024a2:	463b      	mov	r3, r7
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fd fed5 	bl	8000254 <strlen>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	4639      	mov	r1, r7
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
 80024b4:	489b      	ldr	r0, [pc, #620]	; (8002724 <sendMeasuredData+0x2a8>)
 80024b6:	f006 fb29 	bl	8008b0c <HAL_UART_Transmit>

		// first buffer

		for (i = 0; i < samplesPerPeriod; i++) {
 80024ba:	2300      	movs	r3, #0
 80024bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024be:	e01b      	b.n	80024f8 <sendMeasuredData+0x7c>
			adc = (buffer_extAdc_1.uint16[i]);
 80024c0:	4a99      	ldr	r2, [pc, #612]	; (8002728 <sendMeasuredData+0x2ac>)
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80024cc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80024d0:	463b      	mov	r3, r7
 80024d2:	4996      	ldr	r1, [pc, #600]	; (800272c <sendMeasuredData+0x2b0>)
 80024d4:	4618      	mov	r0, r3
 80024d6:	f007 fae9 	bl	8009aac <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80024da:	463b      	mov	r3, r7
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd feb9 	bl	8000254 <strlen>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4639      	mov	r1, r7
 80024e8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ec:	488d      	ldr	r0, [pc, #564]	; (8002724 <sendMeasuredData+0x2a8>)
 80024ee:	f006 fb0d 	bl	8008b0c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	3301      	adds	r3, #1
 80024f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024fa:	4b8d      	ldr	r3, [pc, #564]	; (8002730 <sendMeasuredData+0x2b4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3de      	bcc.n	80024c0 <sendMeasuredData+0x44>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8002502:	2300      	movs	r3, #0
 8002504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002506:	e01b      	b.n	8002540 <sendMeasuredData+0xc4>
			adc = (buffer_extAdc_2.uint16[i]);
 8002508:	4a8a      	ldr	r2, [pc, #552]	; (8002734 <sendMeasuredData+0x2b8>)
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002510:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8002514:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002518:	463b      	mov	r3, r7
 800251a:	4984      	ldr	r1, [pc, #528]	; (800272c <sendMeasuredData+0x2b0>)
 800251c:	4618      	mov	r0, r3
 800251e:	f007 fac5 	bl	8009aac <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002522:	463b      	mov	r3, r7
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd fe95 	bl	8000254 <strlen>
 800252a:	4603      	mov	r3, r0
 800252c:	b29a      	uxth	r2, r3
 800252e:	4639      	mov	r1, r7
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	487b      	ldr	r0, [pc, #492]	; (8002724 <sendMeasuredData+0x2a8>)
 8002536:	f006 fae9 	bl	8008b0c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 800253a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253c:	3301      	adds	r3, #1
 800253e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002542:	4b7b      	ldr	r3, [pc, #492]	; (8002730 <sendMeasuredData+0x2b4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d3de      	bcc.n	8002508 <sendMeasuredData+0x8c>
		}
		sprintf(msg_buffers, ">\n");
 800254a:	463b      	mov	r3, r7
 800254c:	4a7a      	ldr	r2, [pc, #488]	; (8002738 <sendMeasuredData+0x2bc>)
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4611      	mov	r1, r2
 8002552:	8019      	strh	r1, [r3, #0]
 8002554:	3302      	adds	r3, #2
 8002556:	0c12      	lsrs	r2, r2, #16
 8002558:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800255a:	463b      	mov	r3, r7
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fe79 	bl	8000254 <strlen>
 8002562:	4603      	mov	r3, r0
 8002564:	b29a      	uxth	r2, r3
 8002566:	4639      	mov	r1, r7
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	486d      	ldr	r0, [pc, #436]	; (8002724 <sendMeasuredData+0x2a8>)
 800256e:	f006 facd 	bl	8008b0c <HAL_UART_Transmit>
		state.extAdcReadyToSend = 0;
 8002572:	4b6a      	ldr	r3, [pc, #424]	; (800271c <sendMeasuredData+0x2a0>)
 8002574:	2200      	movs	r2, #0
 8002576:	705a      	strb	r2, [r3, #1]
	}

	if ((state.intAdcReadyToSend == 1)) {
 8002578:	4b68      	ldr	r3, [pc, #416]	; (800271c <sendMeasuredData+0x2a0>)
 800257a:	789b      	ldrb	r3, [r3, #2]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d171      	bne.n	8002664 <sendMeasuredData+0x1e8>
		sprintf(msg_buffers, "<MEAS:%u:intADC:\n", state.index);
 8002580:	4b66      	ldr	r3, [pc, #408]	; (800271c <sendMeasuredData+0x2a0>)
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	463b      	mov	r3, r7
 8002586:	496d      	ldr	r1, [pc, #436]	; (800273c <sendMeasuredData+0x2c0>)
 8002588:	4618      	mov	r0, r3
 800258a:	f007 fa8f 	bl	8009aac <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800258e:	463b      	mov	r3, r7
 8002590:	4618      	mov	r0, r3
 8002592:	f7fd fe5f 	bl	8000254 <strlen>
 8002596:	4603      	mov	r3, r0
 8002598:	b29a      	uxth	r2, r3
 800259a:	4639      	mov	r1, r7
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	4860      	ldr	r0, [pc, #384]	; (8002724 <sendMeasuredData+0x2a8>)
 80025a2:	f006 fab3 	bl	8008b0c <HAL_UART_Transmit>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80025a6:	2300      	movs	r3, #0
 80025a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025aa:	e01b      	b.n	80025e4 <sendMeasuredData+0x168>
			adc = (buffer_intAdc_1.uint16[i]);
 80025ac:	4a64      	ldr	r2, [pc, #400]	; (8002740 <sendMeasuredData+0x2c4>)
 80025ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80025b8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80025bc:	463b      	mov	r3, r7
 80025be:	495b      	ldr	r1, [pc, #364]	; (800272c <sendMeasuredData+0x2b0>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f007 fa73 	bl	8009aac <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80025c6:	463b      	mov	r3, r7
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd fe43 	bl	8000254 <strlen>
 80025ce:	4603      	mov	r3, r0
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	4639      	mov	r1, r7
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	4852      	ldr	r0, [pc, #328]	; (8002724 <sendMeasuredData+0x2a8>)
 80025da:	f006 fa97 	bl	8008b0c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80025de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e0:	3301      	adds	r3, #1
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025e6:	4b52      	ldr	r3, [pc, #328]	; (8002730 <sendMeasuredData+0x2b4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3de      	bcc.n	80025ac <sendMeasuredData+0x130>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80025ee:	2300      	movs	r3, #0
 80025f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f2:	e01b      	b.n	800262c <sendMeasuredData+0x1b0>
			adc = (buffer_intAdc_2.uint16[i]);
 80025f4:	4a53      	ldr	r2, [pc, #332]	; (8002744 <sendMeasuredData+0x2c8>)
 80025f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8002600:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002604:	463b      	mov	r3, r7
 8002606:	4949      	ldr	r1, [pc, #292]	; (800272c <sendMeasuredData+0x2b0>)
 8002608:	4618      	mov	r0, r3
 800260a:	f007 fa4f 	bl	8009aac <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800260e:	463b      	mov	r3, r7
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd fe1f 	bl	8000254 <strlen>
 8002616:	4603      	mov	r3, r0
 8002618:	b29a      	uxth	r2, r3
 800261a:	4639      	mov	r1, r7
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	4840      	ldr	r0, [pc, #256]	; (8002724 <sendMeasuredData+0x2a8>)
 8002622:	f006 fa73 	bl	8008b0c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002628:	3301      	adds	r3, #1
 800262a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800262c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800262e:	4b40      	ldr	r3, [pc, #256]	; (8002730 <sendMeasuredData+0x2b4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d3de      	bcc.n	80025f4 <sendMeasuredData+0x178>
		}
		sprintf(msg_buffers, ">\n");
 8002636:	463b      	mov	r3, r7
 8002638:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <sendMeasuredData+0x2bc>)
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	4611      	mov	r1, r2
 800263e:	8019      	strh	r1, [r3, #0]
 8002640:	3302      	adds	r3, #2
 8002642:	0c12      	lsrs	r2, r2, #16
 8002644:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002646:	463b      	mov	r3, r7
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd fe03 	bl	8000254 <strlen>
 800264e:	4603      	mov	r3, r0
 8002650:	b29a      	uxth	r2, r3
 8002652:	4639      	mov	r1, r7
 8002654:	f04f 33ff 	mov.w	r3, #4294967295
 8002658:	4832      	ldr	r0, [pc, #200]	; (8002724 <sendMeasuredData+0x2a8>)
 800265a:	f006 fa57 	bl	8008b0c <HAL_UART_Transmit>
		state.intAdcReadyToSend = 0;
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <sendMeasuredData+0x2a0>)
 8002660:	2200      	movs	r2, #0
 8002662:	709a      	strb	r2, [r3, #2]
	}

	if ((state.compReadyToSend == 1)) {
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <sendMeasuredData+0x2a0>)
 8002666:	78db      	ldrb	r3, [r3, #3]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d153      	bne.n	8002714 <sendMeasuredData+0x298>
		//send frequency
		sprintf(msg_buffers, "<MEAS:%u:comp:\n", state.index);
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <sendMeasuredData+0x2a0>)
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	463b      	mov	r3, r7
 8002672:	4935      	ldr	r1, [pc, #212]	; (8002748 <sendMeasuredData+0x2cc>)
 8002674:	4618      	mov	r0, r3
 8002676:	f007 fa19 	bl	8009aac <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800267a:	463b      	mov	r3, r7
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd fde9 	bl	8000254 <strlen>
 8002682:	4603      	mov	r3, r0
 8002684:	b29a      	uxth	r2, r3
 8002686:	4639      	mov	r1, r7
 8002688:	f04f 33ff 	mov.w	r3, #4294967295
 800268c:	4825      	ldr	r0, [pc, #148]	; (8002724 <sendMeasuredData+0x2a8>)
 800268e:	f006 fa3d 	bl	8008b0c <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 8002692:	2300      	movs	r3, #0
 8002694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002696:	e022      	b.n	80026de <sendMeasuredData+0x262>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 8002698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269a:	3301      	adds	r3, #1
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <sendMeasuredData+0x2d0>)
 800269e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026a2:	492a      	ldr	r1, [pc, #168]	; (800274c <sendMeasuredData+0x2d0>)
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	647b      	str	r3, [r7, #68]	; 0x44
			sprintf(msg_freq, "%d\n", freq);
 80026ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b4:	4926      	ldr	r1, [pc, #152]	; (8002750 <sendMeasuredData+0x2d4>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f007 f9f8 	bl	8009aac <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
 80026bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fdc7 	bl	8000254 <strlen>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	4814      	ldr	r0, [pc, #80]	; (8002724 <sendMeasuredData+0x2a8>)
 80026d4:	f006 fa1a 	bl	8008b0c <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 80026d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026da:	3301      	adds	r3, #1
 80026dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80026e4:	dbd8      	blt.n	8002698 <sendMeasuredData+0x21c>
		}
		sprintf(msg_buffers, ">\n");
 80026e6:	463b      	mov	r3, r7
 80026e8:	4a13      	ldr	r2, [pc, #76]	; (8002738 <sendMeasuredData+0x2bc>)
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	4611      	mov	r1, r2
 80026ee:	8019      	strh	r1, [r3, #0]
 80026f0:	3302      	adds	r3, #2
 80026f2:	0c12      	lsrs	r2, r2, #16
 80026f4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80026f6:	463b      	mov	r3, r7
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fdab 	bl	8000254 <strlen>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29a      	uxth	r2, r3
 8002702:	4639      	mov	r1, r7
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
 8002708:	4806      	ldr	r0, [pc, #24]	; (8002724 <sendMeasuredData+0x2a8>)
 800270a:	f006 f9ff 	bl	8008b0c <HAL_UART_Transmit>
		state.compReadyToSend = 0;
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <sendMeasuredData+0x2a0>)
 8002710:	2200      	movs	r2, #0
 8002712:	70da      	strb	r2, [r3, #3]
	}
}
 8002714:	bf00      	nop
 8002716:	3750      	adds	r7, #80	; 0x50
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	2002f4a8 	.word	0x2002f4a8
 8002720:	0800a640 	.word	0x0800a640
 8002724:	20004244 	.word	0x20004244
 8002728:	20045148 	.word	0x20045148
 800272c:	0800a654 	.word	0x0800a654
 8002730:	20000000 	.word	0x20000000
 8002734:	20019ba0 	.word	0x20019ba0
 8002738:	0800a65c 	.word	0x0800a65c
 800273c:	0800a660 	.word	0x0800a660
 8002740:	2002f860 	.word	0x2002f860
 8002744:	20004318 	.word	0x20004318
 8002748:	0800a674 	.word	0x0800a674
 800274c:	20000214 	.word	0x20000214
 8002750:	0800a684 	.word	0x0800a684

08002754 <updateState>:

void updateState() {
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
	state.remainingMeasurements = state.setMeasurements;
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <updateState+0x3c>)
 800275a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <updateState+0x3c>)
 8002760:	81da      	strh	r2, [r3, #14]
	state.extAdcActiveState = state.extAdcSetState;
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <updateState+0x3c>)
 8002764:	7a9a      	ldrb	r2, [r3, #10]
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <updateState+0x3c>)
 8002768:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = state.intAdcSetState;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <updateState+0x3c>)
 800276c:	7ada      	ldrb	r2, [r3, #11]
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <updateState+0x3c>)
 8002770:	715a      	strb	r2, [r3, #5]
	state.compActiveState = state.compSetState;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <updateState+0x3c>)
 8002774:	7b1a      	ldrb	r2, [r3, #12]
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <updateState+0x3c>)
 8002778:	719a      	strb	r2, [r3, #6]
	state.preparedToRunPolarizationPhase = 1;
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <updateState+0x3c>)
 800277c:	2201      	movs	r2, #1
 800277e:	761a      	strb	r2, [r3, #24]
	state.measureTechniqueUpdated = 0;
 8002780:	4b03      	ldr	r3, [pc, #12]	; (8002790 <updateState+0x3c>)
 8002782:	2200      	movs	r2, #0
 8002784:	75da      	strb	r2, [r3, #23]
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	2002f4a8 	.word	0x2002f4a8

08002794 <dataReadyToSend>:

int dataReadyToSend() {
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
	return (state.extAdcReadyToSend || state.intAdcReadyToSend || state.compReadyToSend);
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <dataReadyToSend+0x2c>)
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <dataReadyToSend+0x1c>
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <dataReadyToSend+0x2c>)
 80027a2:	789b      	ldrb	r3, [r3, #2]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <dataReadyToSend+0x1c>
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <dataReadyToSend+0x2c>)
 80027aa:	78db      	ldrb	r3, [r3, #3]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <dataReadyToSend+0x20>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <dataReadyToSend+0x22>
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	2002f4a8 	.word	0x2002f4a8

080027c4 <dataReadyToSendAfterMeasurement>:

//data should be sent after measurement only in "mode 1" or when it is the last measurement
int dataReadyToSendAfterMeasurement() {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	return (dataReadyToSend() && (lastMeasurement() || state.mode == 1));
 80027c8:	f7ff ffe4 	bl	8002794 <dataReadyToSend>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <dataReadyToSendAfterMeasurement+0x24>
 80027d2:	f000 f821 	bl	8002818 <lastMeasurement>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <dataReadyToSendAfterMeasurement+0x20>
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <dataReadyToSendAfterMeasurement+0x2c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <dataReadyToSendAfterMeasurement+0x24>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <dataReadyToSendAfterMeasurement+0x26>
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2002f4a8 	.word	0x2002f4a8

080027f4 <dataReadyToSendBeforeMeasurement>:

//data should be sent before measurement only in "mode 0", when it's just right after polarization
int dataReadyToSendBeforeMeasurement() {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	return (dataReadyToSend() && state.mode == 0);
 80027f8:	f7ff ffcc 	bl	8002794 <dataReadyToSend>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <dataReadyToSendBeforeMeasurement+0x1a>
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <dataReadyToSendBeforeMeasurement+0x20>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <dataReadyToSendBeforeMeasurement+0x1a>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <dataReadyToSendBeforeMeasurement+0x1c>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	2002f4a8 	.word	0x2002f4a8

08002818 <lastMeasurement>:

int lastMeasurement() {
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
	return (state.remainingMeasurements == 0);
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <lastMeasurement+0x20>)
 800281e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002822:	2b00      	cmp	r3, #0
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	2002f4a8 	.word	0x2002f4a8

0800283c <stateCanBeUpdated>:

int stateCanBeUpdated() {
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	return (state.measureTechniqueUpdated && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <stateCanBeUpdated+0x4c>)
 8002842:	7ddb      	ldrb	r3, [r3, #23]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d019      	beq.n	800287c <stateCanBeUpdated+0x40>
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <stateCanBeUpdated+0x4c>)
 800284a:	79db      	ldrb	r3, [r3, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d115      	bne.n	800287c <stateCanBeUpdated+0x40>
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <stateCanBeUpdated+0x4c>)
 8002852:	7a1b      	ldrb	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d111      	bne.n	800287c <stateCanBeUpdated+0x40>
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <stateCanBeUpdated+0x4c>)
 800285a:	7a5b      	ldrb	r3, [r3, #9]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <stateCanBeUpdated+0x40>
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <stateCanBeUpdated+0x4c>)
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <stateCanBeUpdated+0x40>
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <stateCanBeUpdated+0x4c>)
 800286a:	789b      	ldrb	r3, [r3, #2]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <stateCanBeUpdated+0x40>
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <stateCanBeUpdated+0x4c>)
 8002872:	78db      	ldrb	r3, [r3, #3]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <stateCanBeUpdated+0x40>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <stateCanBeUpdated+0x42>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	2002f4a8 	.word	0x2002f4a8

0800288c <ploarizationCanRun>:

// polarization can run even if data are sending
int ploarizationCanRun() {
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
	return (state.mode == 0 && remainingTimeToNextMeasurement == 0 && state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring);
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <ploarizationCanRun+0x44>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d115      	bne.n	80028c4 <ploarizationCanRun+0x38>
 8002898:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <ploarizationCanRun+0x48>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <ploarizationCanRun+0x38>
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <ploarizationCanRun+0x44>)
 80028a2:	7e1b      	ldrb	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <ploarizationCanRun+0x38>
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <ploarizationCanRun+0x44>)
 80028aa:	79db      	ldrb	r3, [r3, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <ploarizationCanRun+0x38>
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <ploarizationCanRun+0x44>)
 80028b2:	7a1b      	ldrb	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <ploarizationCanRun+0x38>
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <ploarizationCanRun+0x44>)
 80028ba:	7a5b      	ldrb	r3, [r3, #9]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <ploarizationCanRun+0x38>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <ploarizationCanRun+0x3a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	2002f4a8 	.word	0x2002f4a8
 80028d4:	20004314 	.word	0x20004314

080028d8 <measurementCanRun>:
// measurement sequence can run if polarization can run and all the data
int measurementCanRun() {
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
	return (remainingPolarizationTime == 0 && state.preparedToRunMeasurementPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <measurementCanRun+0x54>)
 80028de:	681b      	ldr	r3, [r3, #0]
			&& !state.intAdcReadyToSend && !state.compReadyToSend);
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d11d      	bne.n	8002920 <measurementCanRun+0x48>
	return (remainingPolarizationTime == 0 && state.preparedToRunMeasurementPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <measurementCanRun+0x58>)
 80028e6:	7e5b      	ldrb	r3, [r3, #25]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d019      	beq.n	8002920 <measurementCanRun+0x48>
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <measurementCanRun+0x58>)
 80028ee:	79db      	ldrb	r3, [r3, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d115      	bne.n	8002920 <measurementCanRun+0x48>
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <measurementCanRun+0x58>)
 80028f6:	7a1b      	ldrb	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d111      	bne.n	8002920 <measurementCanRun+0x48>
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <measurementCanRun+0x58>)
 80028fe:	7a5b      	ldrb	r3, [r3, #9]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <measurementCanRun+0x48>
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <measurementCanRun+0x58>)
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <measurementCanRun+0x48>
			&& !state.intAdcReadyToSend && !state.compReadyToSend);
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <measurementCanRun+0x58>)
 800290e:	789b      	ldrb	r3, [r3, #2]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <measurementCanRun+0x48>
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <measurementCanRun+0x58>)
 8002916:	78db      	ldrb	r3, [r3, #3]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <measurementCanRun+0x48>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <measurementCanRun+0x4a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	20000204 	.word	0x20000204
 8002930:	2002f4a8 	.word	0x2002f4a8

08002934 <stateIsIdle>:

int stateIsIdle() {
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
	return (!state.extAdcActiveState && !state.intAdcActiveState && !state.compActiveState && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <stateIsIdle+0x44>)
 800293a:	791b      	ldrb	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d115      	bne.n	800296c <stateIsIdle+0x38>
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <stateIsIdle+0x44>)
 8002942:	795b      	ldrb	r3, [r3, #5]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d111      	bne.n	800296c <stateIsIdle+0x38>
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <stateIsIdle+0x44>)
 800294a:	799b      	ldrb	r3, [r3, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <stateIsIdle+0x38>
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <stateIsIdle+0x44>)
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <stateIsIdle+0x38>
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <stateIsIdle+0x44>)
 800295a:	789b      	ldrb	r3, [r3, #2]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <stateIsIdle+0x38>
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <stateIsIdle+0x44>)
 8002962:	78db      	ldrb	r3, [r3, #3]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <stateIsIdle+0x38>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <stateIsIdle+0x3a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	2002f4a8 	.word	0x2002f4a8

0800297c <isWaitingForSync>:

int isWaitingForSync() {
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	return (state.mode == 1 && !isMeasuring() && !isSending());
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <isWaitingForSync+0x2c>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10b      	bne.n	80029a0 <isWaitingForSync+0x24>
 8002988:	f000 f810 	bl	80029ac <isMeasuring>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <isWaitingForSync+0x24>
 8002992:	f000 f823 	bl	80029dc <isSending>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <isWaitingForSync+0x24>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <isWaitingForSync+0x26>
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2002f4a8 	.word	0x2002f4a8

080029ac <isMeasuring>:

int  isMeasuring(){
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
	return (state.extAdcMeasuring || state.intAdcMeasuring || state.compMeasuring);
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <isMeasuring+0x2c>)
 80029b2:	79db      	ldrb	r3, [r3, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <isMeasuring+0x1c>
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <isMeasuring+0x2c>)
 80029ba:	7a1b      	ldrb	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <isMeasuring+0x1c>
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <isMeasuring+0x2c>)
 80029c2:	7a5b      	ldrb	r3, [r3, #9]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <isMeasuring+0x20>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <isMeasuring+0x22>
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	2002f4a8 	.word	0x2002f4a8

080029dc <isSending>:
int isSending() {
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
	return (state.extAdcReadyToSend || state.intAdcReadyToSend || state.compReadyToSend);
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <isSending+0x2c>)
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <isSending+0x1c>
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <isSending+0x2c>)
 80029ea:	789b      	ldrb	r3, [r3, #2]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <isSending+0x1c>
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <isSending+0x2c>)
 80029f2:	78db      	ldrb	r3, [r3, #3]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <isSending+0x20>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <isSending+0x22>
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	2002f4a8 	.word	0x2002f4a8

08002a0c <canDecreaseRemainingMeasurements>:

int canDecreaseRemainingMeasurements() {
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
	return ((state.remainingMeasurements > 0) && (state.intAdcActiveState || state.extAdcActiveState || state.compActiveState));
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <canDecreaseRemainingMeasurements+0x38>)
 8002a12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	dd0d      	ble.n	8002a36 <canDecreaseRemainingMeasurements+0x2a>
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <canDecreaseRemainingMeasurements+0x38>)
 8002a1c:	795b      	ldrb	r3, [r3, #5]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <canDecreaseRemainingMeasurements+0x26>
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <canDecreaseRemainingMeasurements+0x38>)
 8002a24:	791b      	ldrb	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <canDecreaseRemainingMeasurements+0x26>
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <canDecreaseRemainingMeasurements+0x38>)
 8002a2c:	799b      	ldrb	r3, [r3, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <canDecreaseRemainingMeasurements+0x2a>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <canDecreaseRemainingMeasurements+0x2c>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2002f4a8 	.word	0x2002f4a8

08002a48 <newDataInBuffer>:

int newDataInBuffer() {
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
	return (state.newDataInBuffer);
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <newDataInBuffer+0x14>)
 8002a4e:	7d9b      	ldrb	r3, [r3, #22]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	2002f4a8 	.word	0x2002f4a8

08002a60 <isModeMeasureOnSync>:
int isModeMeasureOnSync() {
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
	return (state.mode == 1);
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <isModeMeasureOnSync+0x1c>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	2002f4a8 	.word	0x2002f4a8

08002a80 <setMeasurementPeriod>:

void setMeasurementPeriod(uint16_t time) {
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	80fb      	strh	r3, [r7, #6]
	if (time > 2000) {
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a90:	d90a      	bls.n	8002aa8 <setMeasurementPeriod+0x28>
		state.polarizationPeriod = time - 2100;
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <setMeasurementPeriod+0x34>)
 8002a9e:	829a      	strh	r2, [r3, #20]
		state.wholeMeasurementPeriod = time;
 8002aa0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <setMeasurementPeriod+0x34>)
 8002aa6:	825a      	strh	r2, [r3, #18]
	}
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	2002f4a8 	.word	0x2002f4a8

08002ab8 <changeStateMode>:
void changeStateMode() {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	if (state.mode == 0) {
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <changeStateMode+0x48>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d114      	bne.n	8002aee <changeStateMode+0x36>
		state.extAdcSetState = 1;
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <changeStateMode+0x48>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	729a      	strb	r2, [r3, #10]
		state.intAdcSetState = 0;
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <changeStateMode+0x48>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	72da      	strb	r2, [r3, #11]
		state.compSetState = 0;
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <changeStateMode+0x48>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	731a      	strb	r2, [r3, #12]

		state.extAdcActiveState = 1;
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <changeStateMode+0x48>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	711a      	strb	r2, [r3, #4]
		state.intAdcActiveState = 0;
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <changeStateMode+0x48>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	715a      	strb	r2, [r3, #5]
		state.compActiveState = 0;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <changeStateMode+0x48>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	719a      	strb	r2, [r3, #6]

		setStateToMeasureOnSync();
 8002ae8:	f7ff f90e 	bl	8001d08 <setStateToMeasureOnSync>
	} else if (state.mode == 1) {
		state.mode = 0;

	}
}
 8002aec:	e006      	b.n	8002afc <changeStateMode+0x44>
	} else if (state.mode == 1) {
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <changeStateMode+0x48>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <changeStateMode+0x44>
		state.mode = 0;
 8002af6:	4b02      	ldr	r3, [pc, #8]	; (8002b00 <changeStateMode+0x48>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2002f4a8 	.word	0x2002f4a8

08002b04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	80fb      	strh	r3, [r7, #6]
	// change state
	if (GPIO_Pin == BTN1_Pin) {
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d102      	bne.n	8002b1a <HAL_GPIO_EXTI_Callback+0x16>
		changeStateMode();
 8002b14:	f7ff ffd0 	bl	8002ab8 <changeStateMode>
	} else if (GPIO_Pin == BTN2_Pin || GPIO_Pin == SYNC_Pin) {
		if (isWaitingForSync()) {
			state.preparedToRunMeasurementPhase = 1;
		}
	}
}
 8002b18:	e00f      	b.n	8002b3a <HAL_GPIO_EXTI_Callback+0x36>
	} else if (GPIO_Pin == BTN2_Pin || GPIO_Pin == SYNC_Pin) {
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_EXTI_Callback+0x26>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	d107      	bne.n	8002b3a <HAL_GPIO_EXTI_Callback+0x36>
		if (isWaitingForSync()) {
 8002b2a:	f7ff ff27 	bl	800297c <isWaitingForSync>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_GPIO_EXTI_Callback+0x36>
			state.preparedToRunMeasurementPhase = 1;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x40>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	765a      	strb	r2, [r3, #25]
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2002f4a8 	.word	0x2002f4a8

08002b48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_MspInit+0x44>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <HAL_MspInit+0x44>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_MspInit+0x44>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_MspInit+0x44>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_MspInit+0x44>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_MspInit+0x44>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800

08002ba0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <HAL_ADC_MspInit+0xd0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d152      	bne.n	8002c68 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <HAL_ADC_MspInit+0xd4>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <HAL_ADC_MspInit+0xd4>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bce:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_ADC_MspInit+0xd4>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_ADC_MspInit+0xd4>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	4a25      	ldr	r2, [pc, #148]	; (8002c74 <HAL_ADC_MspInit+0xd4>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6313      	str	r3, [r2, #48]	; 0x30
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_ADC_MspInit+0xd4>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4619      	mov	r1, r3
 8002c04:	481c      	ldr	r0, [pc, #112]	; (8002c78 <HAL_ADC_MspInit+0xd8>)
 8002c06:	f001 fea7 	bl	8004958 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002c0a:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c0c:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <HAL_ADC_MspInit+0xe0>)
 8002c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c16:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c4c:	480b      	ldr	r0, [pc, #44]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c4e:	f001 faeb 	bl	8004228 <HAL_DMA_Init>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8002c58:	f7ff ff76 	bl	8002b48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38
 8002c62:	4a06      	ldr	r2, [pc, #24]	; (8002c7c <HAL_ADC_MspInit+0xdc>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40012000 	.word	0x40012000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020000 	.word	0x40020000
 8002c7c:	2002f5f4 	.word	0x2002f5f4
 8002c80:	40026470 	.word	0x40026470

08002c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08c      	sub	sp, #48	; 0x30
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8c:	f107 031c 	add.w	r3, r7, #28
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a3d      	ldr	r2, [pc, #244]	; (8002d98 <HAL_I2C_MspInit+0x114>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d128      	bne.n	8002cf8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a3c      	ldr	r2, [pc, #240]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
 8002cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc2:	2312      	movs	r3, #18
 8002cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4831      	ldr	r0, [pc, #196]	; (8002da0 <HAL_I2C_MspInit+0x11c>)
 8002cda:	f001 fe3d 	bl	8004958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a2e      	ldr	r2, [pc, #184]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cf6:	e04a      	b.n	8002d8e <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <HAL_I2C_MspInit+0x120>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d145      	bne.n	8002d8e <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d02:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d38:	2312      	movs	r3, #18
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d44:	2304      	movs	r3, #4
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4816      	ldr	r0, [pc, #88]	; (8002da8 <HAL_I2C_MspInit+0x124>)
 8002d50:	f001 fe02 	bl	8004958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d5a:	2312      	movs	r3, #18
 8002d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d66:	2304      	movs	r3, #4
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	4619      	mov	r1, r3
 8002d70:	480e      	ldr	r0, [pc, #56]	; (8002dac <HAL_I2C_MspInit+0x128>)
 8002d72:	f001 fdf1 	bl	8004958 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d80:	6413      	str	r3, [r2, #64]	; 0x40
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_I2C_MspInit+0x118>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
}
 8002d8e:	bf00      	nop
 8002d90:	3730      	adds	r7, #48	; 0x30
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40005400 	.word	0x40005400
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40005c00 	.word	0x40005c00
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	; 0x30
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a46      	ldr	r2, [pc, #280]	; (8002ee8 <HAL_SPI_MspInit+0x138>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d159      	bne.n	8002e86 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dd2:	4b46      	ldr	r3, [pc, #280]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a45      	ldr	r2, [pc, #276]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b43      	ldr	r3, [pc, #268]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	4b40      	ldr	r3, [pc, #256]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a3f      	ldr	r2, [pc, #252]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8002e02:	23b0      	movs	r3, #176	; 0xb0
 8002e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e12:	2305      	movs	r3, #5
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	f107 031c 	add.w	r3, r7, #28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4834      	ldr	r0, [pc, #208]	; (8002ef0 <HAL_SPI_MspInit+0x140>)
 8002e1e:	f001 fd9b 	bl	8004958 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002e22:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e24:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <HAL_SPI_MspInit+0x148>)
 8002e26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e2a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002e2e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e36:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e42:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e4a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e4c:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e52:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e60:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002e68:	4822      	ldr	r0, [pc, #136]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e6a:	f001 f9dd 	bl	8004228 <HAL_DMA_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8002e74:	f7ff fe68 	bl	8002b48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <HAL_SPI_MspInit+0x144>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002e84:	e02c      	b.n	8002ee0 <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI4)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1c      	ldr	r2, [pc, #112]	; (8002efc <HAL_SPI_MspInit+0x14c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d127      	bne.n	8002ee0 <HAL_SPI_MspInit+0x130>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	4a15      	ldr	r2, [pc, #84]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002e96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002eae:	f043 0310 	orr.w	r3, r3, #16
 8002eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_SPI_MspInit+0x13c>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002ec0:	2374      	movs	r3, #116	; 0x74
 8002ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ed4:	f107 031c 	add.w	r3, r7, #28
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4809      	ldr	r0, [pc, #36]	; (8002f00 <HAL_SPI_MspInit+0x150>)
 8002edc:	f001 fd3c 	bl	8004958 <HAL_GPIO_Init>
}
 8002ee0:	bf00      	nop
 8002ee2:	3730      	adds	r7, #48	; 0x30
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40013000 	.word	0x40013000
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	200450e8 	.word	0x200450e8
 8002ef8:	40026440 	.word	0x40026440
 8002efc:	40013400 	.word	0x40013400
 8002f00:	40021000 	.word	0x40021000

08002f04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a45      	ldr	r2, [pc, #276]	; (8003028 <HAL_TIM_Base_MspInit+0x124>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d11c      	bne.n	8002f50 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f16:	4b45      	ldr	r3, [pc, #276]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	4a44      	ldr	r2, [pc, #272]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6453      	str	r3, [r2, #68]	; 0x44
 8002f22:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	2018      	movs	r0, #24
 8002f34:	f001 f941 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002f38:	2018      	movs	r0, #24
 8002f3a:	f001 f95a 	bl	80041f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	2019      	movs	r0, #25
 8002f44:	f001 f939 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f48:	2019      	movs	r0, #25
 8002f4a:	f001 f952 	bl	80041f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f4e:	e066      	b.n	800301e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM3)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a36      	ldr	r2, [pc, #216]	; (8003030 <HAL_TIM_Base_MspInit+0x12c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d114      	bne.n	8002f84 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f5a:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a33      	ldr	r2, [pc, #204]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b31      	ldr	r3, [pc, #196]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2101      	movs	r1, #1
 8002f76:	201d      	movs	r0, #29
 8002f78:	f001 f91f 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f7c:	201d      	movs	r0, #29
 8002f7e:	f001 f938 	bl	80041f2 <HAL_NVIC_EnableIRQ>
}
 8002f82:	e04c      	b.n	800301e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2a      	ldr	r2, [pc, #168]	; (8003034 <HAL_TIM_Base_MspInit+0x130>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d114      	bne.n	8002fb8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f8e:	4b27      	ldr	r3, [pc, #156]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a26      	ldr	r2, [pc, #152]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2101      	movs	r1, #1
 8002faa:	2032      	movs	r0, #50	; 0x32
 8002fac:	f001 f905 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002fb0:	2032      	movs	r0, #50	; 0x32
 8002fb2:	f001 f91e 	bl	80041f2 <HAL_NVIC_EnableIRQ>
}
 8002fb6:	e032      	b.n	800301e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM6)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <HAL_TIM_Base_MspInit+0x134>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d114      	bne.n	8002fec <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4a19      	ldr	r2, [pc, #100]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002fc8:	f043 0310 	orr.w	r3, r3, #16
 8002fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2101      	movs	r1, #1
 8002fde:	2036      	movs	r0, #54	; 0x36
 8002fe0:	f001 f8eb 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fe4:	2036      	movs	r0, #54	; 0x36
 8002fe6:	f001 f904 	bl	80041f2 <HAL_NVIC_EnableIRQ>
}
 8002fea:	e018      	b.n	800301e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM8)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a12      	ldr	r2, [pc, #72]	; (800303c <HAL_TIM_Base_MspInit+0x138>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d113      	bne.n	800301e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_TIM_Base_MspInit+0x128>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2101      	movs	r1, #1
 8003012:	202e      	movs	r0, #46	; 0x2e
 8003014:	f001 f8d1 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003018:	202e      	movs	r0, #46	; 0x2e
 800301a:	f001 f8ea 	bl	80041f2 <HAL_NVIC_EnableIRQ>
}
 800301e:	bf00      	nop
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40010000 	.word	0x40010000
 800302c:	40023800 	.word	0x40023800
 8003030:	40000400 	.word	0x40000400
 8003034:	40000c00 	.word	0x40000c00
 8003038:	40001000 	.word	0x40001000
 800303c:	40010400 	.word	0x40010400

08003040 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d160      	bne.n	8003124 <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003062:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_TIM_IC_MspInit+0xec>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a31      	ldr	r2, [pc, #196]	; (800312c <HAL_TIM_IC_MspInit+0xec>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_TIM_IC_MspInit+0xec>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307a:	4b2c      	ldr	r3, [pc, #176]	; (800312c <HAL_TIM_IC_MspInit+0xec>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a2b      	ldr	r2, [pc, #172]	; (800312c <HAL_TIM_IC_MspInit+0xec>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b29      	ldr	r3, [pc, #164]	; (800312c <HAL_TIM_IC_MspInit+0xec>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8003092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030a4:	2301      	movs	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4619      	mov	r1, r3
 80030ae:	4820      	ldr	r0, [pc, #128]	; (8003130 <HAL_TIM_IC_MspInit+0xf0>)
 80030b0:	f001 fc52 	bl	8004958 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030b6:	4a20      	ldr	r2, [pc, #128]	; (8003138 <HAL_TIM_IC_MspInit+0xf8>)
 80030b8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80030c0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030ce:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030d6:	4b17      	ldr	r3, [pc, #92]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030dc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80030f8:	480e      	ldr	r0, [pc, #56]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 80030fa:	f001 f895 	bl	8004228 <HAL_DMA_Init>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8003104:	f7ff fd20 	bl	8002b48 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
 800310e:	4a09      	ldr	r2, [pc, #36]	; (8003134 <HAL_TIM_IC_MspInit+0xf4>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003114:	2200      	movs	r2, #0
 8003116:	2101      	movs	r1, #1
 8003118:	201c      	movs	r0, #28
 800311a:	f001 f84e 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800311e:	201c      	movs	r0, #28
 8003120:	f001 f867 	bl	80041f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003124:	bf00      	nop
 8003126:	3728      	adds	r7, #40	; 0x28
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40023800 	.word	0x40023800
 8003130:	40020000 	.word	0x40020000
 8003134:	200040e4 	.word	0x200040e4
 8003138:	40026088 	.word	0x40026088

0800313c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <HAL_TIM_PWM_MspInit+0x44>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d113      	bne.n	8003176 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <HAL_TIM_PWM_MspInit+0x48>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <HAL_TIM_PWM_MspInit+0x48>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_TIM_PWM_MspInit+0x48>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2101      	movs	r1, #1
 800316a:	201e      	movs	r0, #30
 800316c:	f001 f825 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003170:	201e      	movs	r0, #30
 8003172:	f001 f83e 	bl	80041f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40000800 	.word	0x40000800
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a45      	ldr	r2, [pc, #276]	; (80032bc <HAL_TIM_MspPostInit+0x134>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d11d      	bne.n	80031e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031aa:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a44      	ldr	r2, [pc, #272]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 80031b0:	f043 0310 	orr.w	r3, r3, #16
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 80031c2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80031c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031d4:	2301      	movs	r3, #1
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	4619      	mov	r1, r3
 80031de:	4839      	ldr	r0, [pc, #228]	; (80032c4 <HAL_TIM_MspPostInit+0x13c>)
 80031e0:	f001 fbba 	bl	8004958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80031e4:	e065      	b.n	80032b2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a37      	ldr	r2, [pc, #220]	; (80032c8 <HAL_TIM_MspPostInit+0x140>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d11c      	bne.n	800322a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f0:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	4a32      	ldr	r2, [pc, #200]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6313      	str	r3, [r2, #48]	; 0x30
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8003208:	2340      	movs	r3, #64	; 0x40
 800320a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2300      	movs	r3, #0
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003218:	2302      	movs	r3, #2
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 800321c:	f107 031c 	add.w	r3, r7, #28
 8003220:	4619      	mov	r1, r3
 8003222:	482a      	ldr	r0, [pc, #168]	; (80032cc <HAL_TIM_MspPostInit+0x144>)
 8003224:	f001 fb98 	bl	8004958 <HAL_GPIO_Init>
}
 8003228:	e043      	b.n	80032b2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_TIM_MspPostInit+0x148>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d11d      	bne.n	8003270 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003234:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 800323a:	f043 0308 	orr.w	r3, r3, #8
 800323e:	6313      	str	r3, [r2, #48]	; 0x30
 8003240:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 800324c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800325e:	2302      	movs	r3, #2
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 8003262:	f107 031c 	add.w	r3, r7, #28
 8003266:	4619      	mov	r1, r3
 8003268:	481a      	ldr	r0, [pc, #104]	; (80032d4 <HAL_TIM_MspPostInit+0x14c>)
 800326a:	f001 fb75 	bl	8004958 <HAL_GPIO_Init>
}
 800326e:	e020      	b.n	80032b2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <HAL_TIM_MspPostInit+0x150>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d11b      	bne.n	80032b2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_TIM_MspPostInit+0x138>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2300      	movs	r3, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032a2:	2303      	movs	r3, #3
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	4619      	mov	r1, r3
 80032ac:	480b      	ldr	r0, [pc, #44]	; (80032dc <HAL_TIM_MspPostInit+0x154>)
 80032ae:	f001 fb53 	bl	8004958 <HAL_GPIO_Init>
}
 80032b2:	bf00      	nop
 80032b4:	3730      	adds	r7, #48	; 0x30
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	40010400 	.word	0x40010400
 80032dc:	40020800 	.word	0x40020800

080032e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b090      	sub	sp, #64	; 0x40
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a61      	ldr	r2, [pc, #388]	; (8003484 <HAL_UART_MspInit+0x1a4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d129      	bne.n	8003356 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003302:	4b61      	ldr	r3, [pc, #388]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a60      	ldr	r2, [pc, #384]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b5e      	ldr	r3, [pc, #376]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a5a      	ldr	r2, [pc, #360]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003320:	f043 0310 	orr.w	r3, r3, #16
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003332:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	2302      	movs	r3, #2
 800333a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003340:	2303      	movs	r3, #3
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003344:	2308      	movs	r3, #8
 8003346:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	4619      	mov	r1, r3
 800334e:	484f      	ldr	r0, [pc, #316]	; (800348c <HAL_UART_MspInit+0x1ac>)
 8003350:	f001 fb02 	bl	8004958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003354:	e092      	b.n	800347c <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a4d      	ldr	r2, [pc, #308]	; (8003490 <HAL_UART_MspInit+0x1b0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d129      	bne.n	80033b4 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003360:	4b49      	ldr	r3, [pc, #292]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	4a48      	ldr	r2, [pc, #288]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003366:	f043 0310 	orr.w	r3, r3, #16
 800336a:	6453      	str	r3, [r2, #68]	; 0x44
 800336c:	4b46      	ldr	r3, [pc, #280]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003378:	4b43      	ldr	r3, [pc, #268]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	4a42      	ldr	r2, [pc, #264]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	6313      	str	r3, [r2, #48]	; 0x30
 8003384:	4b40      	ldr	r3, [pc, #256]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8003390:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80033a2:	2304      	movs	r3, #4
 80033a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033aa:	4619      	mov	r1, r3
 80033ac:	4839      	ldr	r0, [pc, #228]	; (8003494 <HAL_UART_MspInit+0x1b4>)
 80033ae:	f001 fad3 	bl	8004958 <HAL_GPIO_Init>
}
 80033b2:	e063      	b.n	800347c <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a37      	ldr	r2, [pc, #220]	; (8003498 <HAL_UART_MspInit+0x1b8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d128      	bne.n	8003410 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033be:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a31      	ldr	r2, [pc, #196]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a2b      	ldr	r2, [pc, #172]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 80033ee:	230c      	movs	r3, #12
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fa:	2303      	movs	r3, #3
 80033fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033fe:	2307      	movs	r3, #7
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003406:	4619      	mov	r1, r3
 8003408:	4824      	ldr	r0, [pc, #144]	; (800349c <HAL_UART_MspInit+0x1bc>)
 800340a:	f001 faa5 	bl	8004958 <HAL_GPIO_Init>
}
 800340e:	e035      	b.n	800347c <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <HAL_UART_MspInit+0x1c0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d130      	bne.n	800347c <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800341a:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a14      	ldr	r2, [pc, #80]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b12      	ldr	r3, [pc, #72]	; (8003488 <HAL_UART_MspInit+0x1a8>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 800344a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800345c:	2307      	movs	r3, #7
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003464:	4619      	mov	r1, r3
 8003466:	480b      	ldr	r0, [pc, #44]	; (8003494 <HAL_UART_MspInit+0x1b4>)
 8003468:	f001 fa76 	bl	8004958 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800346c:	2200      	movs	r2, #0
 800346e:	2100      	movs	r1, #0
 8003470:	2027      	movs	r0, #39	; 0x27
 8003472:	f000 fea2 	bl	80041ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003476:	2027      	movs	r0, #39	; 0x27
 8003478:	f000 febb 	bl	80041f2 <HAL_NVIC_EnableIRQ>
}
 800347c:	bf00      	nop
 800347e:	3740      	adds	r7, #64	; 0x40
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40007800 	.word	0x40007800
 8003488:	40023800 	.word	0x40023800
 800348c:	40021000 	.word	0x40021000
 8003490:	40011000 	.word	0x40011000
 8003494:	40020400 	.word	0x40020400
 8003498:	40004400 	.word	0x40004400
 800349c:	40020000 	.word	0x40020000
 80034a0:	40004800 	.word	0x40004800

080034a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <HardFault_Handler+0x4>

080034b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <MemManage_Handler+0x4>

080034be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <BusFault_Handler+0x4>

080034c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <UsageFault_Handler+0x4>

080034ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f8:	f000 f936 	bl	8003768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}

08003500 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <DMA1_Stream5_IRQHandler+0x10>)
 8003506:	f000 ffbf 	bl	8004488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	200040e4 	.word	0x200040e4

08003514 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003518:	2080      	movs	r0, #128	; 0x80
 800351a:	f001 fbe1 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800351e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003522:	f001 fbdd 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003532:	f003 ff7f 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	2002f6fc 	.word	0x2002f6fc

08003540 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003546:	f003 ff75 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2002f6fc 	.word	0x2002f6fc

08003554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <TIM2_IRQHandler+0x10>)
 800355a:	f003 ff6b 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	2002f7a0 	.word	0x2002f7a0

08003568 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <TIM3_IRQHandler+0x10>)
 800356e:	f003 ff61 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2002f468 	.word	0x2002f468

0800357c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <TIM4_IRQHandler+0x10>)
 8003582:	f003 ff57 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20004204 	.word	0x20004204

08003590 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <USART3_IRQHandler+0x10>)
 8003596:	f005 fbed 	bl	8008d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20004244 	.word	0x20004244

080035a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80035a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80035ac:	f001 fb98 	bl	8004ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <TIM8_CC_IRQHandler+0x10>)
 80035ba:	f003 ff3b 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200041c4 	.word	0x200041c4

080035c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <TIM5_IRQHandler+0x10>)
 80035ce:	f003 ff31 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2002f428 	.word	0x2002f428

080035dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <TIM6_DAC_IRQHandler+0x10>)
 80035e2:	f003 ff27 	bl	8007434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	2002f6b8 	.word	0x2002f6b8

080035f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <DMA2_Stream2_IRQHandler+0x10>)
 80035f6:	f000 ff47 	bl	8004488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200450e8 	.word	0x200450e8

08003604 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003608:	4802      	ldr	r0, [pc, #8]	; (8003614 <DMA2_Stream4_IRQHandler+0x10>)
 800360a:	f000 ff3d 	bl	8004488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2002f5f4 	.word	0x2002f5f4

08003618 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003620:	4b11      	ldr	r3, [pc, #68]	; (8003668 <_sbrk+0x50>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <_sbrk+0x16>
		heap_end = &end;
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <_sbrk+0x50>)
 800362a:	4a10      	ldr	r2, [pc, #64]	; (800366c <_sbrk+0x54>)
 800362c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800362e:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <_sbrk+0x50>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <_sbrk+0x50>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	466a      	mov	r2, sp
 800363e:	4293      	cmp	r3, r2
 8003640:	d907      	bls.n	8003652 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003642:	f006 fa01 	bl	8009a48 <__errno>
 8003646:	4602      	mov	r2, r0
 8003648:	230c      	movs	r3, #12
 800364a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800364c:	f04f 33ff 	mov.w	r3, #4294967295
 8003650:	e006      	b.n	8003660 <_sbrk+0x48>
	}

	heap_end += incr;
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <_sbrk+0x50>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	4a03      	ldr	r2, [pc, #12]	; (8003668 <_sbrk+0x50>)
 800365c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000208 	.word	0x20000208
 800366c:	2005a9d8 	.word	0x2005a9d8

08003670 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <SystemInit+0x28>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	4a07      	ldr	r2, [pc, #28]	; (8003698 <SystemInit+0x28>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <SystemInit+0x28>)
 8003686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800368a:	609a      	str	r2, [r3, #8]
#endif
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800369c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036a2:	e003      	b.n	80036ac <LoopCopyDataInit>

080036a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036aa:	3104      	adds	r1, #4

080036ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036b4:	d3f6      	bcc.n	80036a4 <CopyDataInit>
  ldr  r2, =_sbss
 80036b6:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036b8:	e002      	b.n	80036c0 <LoopFillZerobss>

080036ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036bc:	f842 3b04 	str.w	r3, [r2], #4

080036c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036c4:	d3f9      	bcc.n	80036ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036c6:	f7ff ffd3 	bl	8003670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ca:	f006 f9c3 	bl	8009a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ce:	f7fc ff9f 	bl	8000610 <main>
  bx  lr    
 80036d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036d4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80036d8:	0800a7f8 	.word	0x0800a7f8
  ldr  r0, =_sdata
 80036dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036e0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80036e4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80036e8:	2005a9d8 	.word	0x2005a9d8

080036ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036ec:	e7fe      	b.n	80036ec <ADC_IRQHandler>

080036ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f2:	2003      	movs	r0, #3
 80036f4:	f000 fd56 	bl	80041a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f8:	2000      	movs	r0, #0
 80036fa:	f000 f805 	bl	8003708 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80036fe:	f7ff fa2b 	bl	8002b58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_InitTick+0x54>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_InitTick+0x58>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800371e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fd71 	bl	800420e <HAL_SYSTICK_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e00e      	b.n	8003754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d80a      	bhi.n	8003752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800373c:	2200      	movs	r2, #0
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f000 fd39 	bl	80041ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003748:	4a06      	ldr	r2, [pc, #24]	; (8003764 <HAL_InitTick+0x5c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000004 	.word	0x20000004
 8003760:	2000000c 	.word	0x2000000c
 8003764:	20000008 	.word	0x20000008

08003768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x20>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_IncTick+0x24>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4413      	add	r3, r2
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_IncTick+0x24>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	2000000c 	.word	0x2000000c
 800378c:	2005a9d0 	.word	0x2005a9d0

08003790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTick;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_GetTick+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2005a9d0 	.word	0x2005a9d0

080037a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff ffee 	bl	8003790 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d005      	beq.n	80037ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_Delay+0x40>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037ce:	bf00      	nop
 80037d0:	f7ff ffde 	bl	8003790 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d8f7      	bhi.n	80037d0 <HAL_Delay+0x28>
  {
  }
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	2000000c 	.word	0x2000000c

080037ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e031      	b.n	8003866 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff f9c8 	bl	8002ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382e:	4b10      	ldr	r3, [pc, #64]	; (8003870 <HAL_ADC_Init+0x84>)
 8003830:	4013      	ands	r3, r2
 8003832:	f043 0202 	orr.w	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa66 	bl	8003d0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	641a      	str	r2, [r3, #64]	; 0x40
 8003856:	e001      	b.n	800385c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	ffffeefd 	.word	0xffffeefd

08003874 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_ADC_Start_DMA+0x1e>
 800388e:	2302      	movs	r3, #2
 8003890:	e0c7      	b.n	8003a22 <HAL_ADC_Start_DMA+0x1ae>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d018      	beq.n	80038da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80038b8:	4b5c      	ldr	r3, [pc, #368]	; (8003a2c <HAL_ADC_Start_DMA+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5c      	ldr	r2, [pc, #368]	; (8003a30 <HAL_ADC_Start_DMA+0x1bc>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0c9a      	lsrs	r2, r3, #18
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80038cc:	e002      	b.n	80038d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f9      	bne.n	80038ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	f040 809b 	bne.w	8003a20 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ee:	4b51      	ldr	r3, [pc, #324]	; (8003a34 <HAL_ADC_Start_DMA+0x1c0>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003910:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d106      	bne.n	8003934 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f023 0206 	bic.w	r2, r3, #6
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
 8003932:	e002      	b.n	800393a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	4a3c      	ldr	r2, [pc, #240]	; (8003a38 <HAL_ADC_Start_DMA+0x1c4>)
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <HAL_ADC_Start_DMA+0x1c8>)
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	4a3a      	ldr	r2, [pc, #232]	; (8003a40 <HAL_ADC_Start_DMA+0x1cc>)
 8003958:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003962:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003972:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003982:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	334c      	adds	r3, #76	; 0x4c
 800398e:	4619      	mov	r1, r3
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f000 fcf6 	bl	8004384 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <HAL_ADC_Start_DMA+0x1d0>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10f      	bne.n	80039c4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d136      	bne.n	8003a20 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	e02d      	b.n	8003a20 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_ADC_Start_DMA+0x1d4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10e      	bne.n	80039ec <HAL_ADC_Start_DMA+0x178>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039ea:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80039ec:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <HAL_ADC_Start_DMA+0x1d0>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d113      	bne.n	8003a20 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_ADC_Start_DMA+0x1d8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10e      	bne.n	8003a20 <HAL_ADC_Start_DMA+0x1ac>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a1e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	431bde83 	.word	0x431bde83
 8003a34:	fffff8fe 	.word	0xfffff8fe
 8003a38:	08003f01 	.word	0x08003f01
 8003a3c:	08003fbb 	.word	0x08003fbb
 8003a40:	08003fd7 	.word	0x08003fd7
 8003a44:	40012300 	.word	0x40012300
 8003a48:	40012000 	.word	0x40012000
 8003a4c:	40012200 	.word	0x40012200

08003a50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1c>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e12a      	b.n	8003cea <HAL_ADC_ConfigChannel+0x272>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b09      	cmp	r3, #9
 8003aa2:	d93a      	bls.n	8003b1a <HAL_ADC_ConfigChannel+0xa2>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aac:	d035      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68d9      	ldr	r1, [r3, #12]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3b1e      	subs	r3, #30
 8003ac4:	2207      	movs	r2, #7
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43da      	mvns	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a87      	ldr	r2, [pc, #540]	; (8003cf8 <HAL_ADC_ConfigChannel+0x280>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10a      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68d9      	ldr	r1, [r3, #12]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	061a      	lsls	r2, r3, #24
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003af2:	e035      	b.n	8003b60 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68d9      	ldr	r1, [r3, #12]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	4618      	mov	r0, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4403      	add	r3, r0
 8003b0c:	3b1e      	subs	r3, #30
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b18:	e022      	b.n	8003b60 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6919      	ldr	r1, [r3, #16]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	2207      	movs	r2, #7
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43da      	mvns	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	400a      	ands	r2, r1
 8003b3c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6919      	ldr	r1, [r3, #16]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	4618      	mov	r0, r3
 8003b50:	4603      	mov	r3, r0
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4403      	add	r3, r0
 8003b56:	409a      	lsls	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b06      	cmp	r3, #6
 8003b66:	d824      	bhi.n	8003bb2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	3b05      	subs	r3, #5
 8003b7a:	221f      	movs	r2, #31
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43da      	mvns	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	400a      	ands	r2, r1
 8003b88:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	4618      	mov	r0, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3b05      	subs	r3, #5
 8003ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34
 8003bb0:	e04c      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d824      	bhi.n	8003c04 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	3b23      	subs	r3, #35	; 0x23
 8003bcc:	221f      	movs	r2, #31
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	400a      	ands	r2, r1
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4618      	mov	r0, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b23      	subs	r3, #35	; 0x23
 8003bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
 8003c02:	e023      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	3b41      	subs	r3, #65	; 0x41
 8003c16:	221f      	movs	r2, #31
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	400a      	ands	r2, r1
 8003c24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	4618      	mov	r0, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3b41      	subs	r3, #65	; 0x41
 8003c40:	fa00 f203 	lsl.w	r2, r0, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <HAL_ADC_ConfigChannel+0x284>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10a      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1f4>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c5e:	d105      	bne.n	8003c6c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003c60:	4b27      	ldr	r3, [pc, #156]	; (8003d00 <HAL_ADC_ConfigChannel+0x288>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <HAL_ADC_ConfigChannel+0x288>)
 8003c66:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c6a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <HAL_ADC_ConfigChannel+0x284>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d109      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x212>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b12      	cmp	r3, #18
 8003c7c:	d105      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_ADC_ConfigChannel+0x288>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a1f      	ldr	r2, [pc, #124]	; (8003d00 <HAL_ADC_ConfigChannel+0x288>)
 8003c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c88:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <HAL_ADC_ConfigChannel+0x284>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d125      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x268>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_ADC_ConfigChannel+0x280>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d003      	beq.n	8003ca6 <HAL_ADC_ConfigChannel+0x22e>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b11      	cmp	r3, #17
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003ca6:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <HAL_ADC_ConfigChannel+0x288>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <HAL_ADC_ConfigChannel+0x288>)
 8003cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cb0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <HAL_ADC_ConfigChannel+0x280>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d111      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <HAL_ADC_ConfigChannel+0x28c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <HAL_ADC_ConfigChannel+0x290>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0c9a      	lsrs	r2, r3, #18
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003cd2:	e002      	b.n	8003cda <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f9      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	10000012 	.word	0x10000012
 8003cfc:	40012000 	.word	0x40012000
 8003d00:	40012300 	.word	0x40012300
 8003d04:	20000004 	.word	0x20000004
 8003d08:	431bde83 	.word	0x431bde83

08003d0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003d14:	4b78      	ldr	r3, [pc, #480]	; (8003ef8 <ADC_Init+0x1ec>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a77      	ldr	r2, [pc, #476]	; (8003ef8 <ADC_Init+0x1ec>)
 8003d1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d1e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003d20:	4b75      	ldr	r3, [pc, #468]	; (8003ef8 <ADC_Init+0x1ec>)
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4973      	ldr	r1, [pc, #460]	; (8003ef8 <ADC_Init+0x1ec>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	021a      	lsls	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6899      	ldr	r1, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	4a58      	ldr	r2, [pc, #352]	; (8003efc <ADC_Init+0x1f0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	e00f      	b.n	8003e06 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0202 	bic.w	r2, r2, #2
 8003e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6899      	ldr	r1, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	005a      	lsls	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01b      	beq.n	8003e6c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	035a      	lsls	r2, r3, #13
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	e007      	b.n	8003e7c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	051a      	lsls	r2, r3, #20
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6899      	ldr	r1, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ebe:	025a      	lsls	r2, r3, #9
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6899      	ldr	r1, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	029a      	lsls	r2, r3, #10
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40012300 	.word	0x40012300
 8003efc:	0f000001 	.word	0x0f000001

08003f00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d13c      	bne.n	8003f94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d12b      	bne.n	8003f8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d127      	bne.n	8003f8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d006      	beq.n	8003f58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d119      	bne.n	8003f8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0220 	bic.w	r2, r2, #32
 8003f66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7fd ff87 	bl	8001ea0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f92:	e00e      	b.n	8003fb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff fd5f 	bl	8003a64 <HAL_ADC_ErrorCallback>
}
 8003fa6:	e004      	b.n	8003fb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fd41 	bl	8003a50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2240      	movs	r2, #64	; 0x40
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f043 0204 	orr.w	r2, r3, #4
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fd34 	bl	8003a64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <__NVIC_SetPriorityGrouping+0x40>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004020:	4013      	ands	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <__NVIC_SetPriorityGrouping+0x44>)
 800402e:	4313      	orrs	r3, r2
 8004030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004032:	4a04      	ldr	r2, [pc, #16]	; (8004044 <__NVIC_SetPriorityGrouping+0x40>)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	60d3      	str	r3, [r2, #12]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00
 8004048:	05fa0000 	.word	0x05fa0000

0800404c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <__NVIC_GetPriorityGrouping+0x18>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	f003 0307 	and.w	r3, r3, #7
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	2b00      	cmp	r3, #0
 8004078:	db0b      	blt.n	8004092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	f003 021f 	and.w	r2, r3, #31
 8004080:	4907      	ldr	r1, [pc, #28]	; (80040a0 <__NVIC_EnableIRQ+0x38>)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2001      	movs	r0, #1
 800408a:	fa00 f202 	lsl.w	r2, r0, r2
 800408e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e100 	.word	0xe000e100

080040a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db0a      	blt.n	80040ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	490c      	ldr	r1, [pc, #48]	; (80040f0 <__NVIC_SetPriority+0x4c>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	0112      	lsls	r2, r2, #4
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	440b      	add	r3, r1
 80040c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040cc:	e00a      	b.n	80040e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4908      	ldr	r1, [pc, #32]	; (80040f4 <__NVIC_SetPriority+0x50>)
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	3b04      	subs	r3, #4
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	440b      	add	r3, r1
 80040e2:	761a      	strb	r2, [r3, #24]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000e100 	.word	0xe000e100
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	; 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f1c3 0307 	rsb	r3, r3, #7
 8004112:	2b04      	cmp	r3, #4
 8004114:	bf28      	it	cs
 8004116:	2304      	movcs	r3, #4
 8004118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3304      	adds	r3, #4
 800411e:	2b06      	cmp	r3, #6
 8004120:	d902      	bls.n	8004128 <NVIC_EncodePriority+0x30>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3b03      	subs	r3, #3
 8004126:	e000      	b.n	800412a <NVIC_EncodePriority+0x32>
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	f04f 32ff 	mov.w	r2, #4294967295
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	401a      	ands	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004140:	f04f 31ff 	mov.w	r1, #4294967295
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43d9      	mvns	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004150:	4313      	orrs	r3, r2
         );
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	; 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004170:	d301      	bcc.n	8004176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004172:	2301      	movs	r3, #1
 8004174:	e00f      	b.n	8004196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004176:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <SysTick_Config+0x40>)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3b01      	subs	r3, #1
 800417c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800417e:	210f      	movs	r1, #15
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	f7ff ff8e 	bl	80040a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <SysTick_Config+0x40>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418e:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <SysTick_Config+0x40>)
 8004190:	2207      	movs	r2, #7
 8004192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	e000e010 	.word	0xe000e010

080041a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff29 	bl	8004004 <__NVIC_SetPriorityGrouping>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041cc:	f7ff ff3e 	bl	800404c <__NVIC_GetPriorityGrouping>
 80041d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7ff ff8e 	bl	80040f8 <NVIC_EncodePriority>
 80041dc:	4602      	mov	r2, r0
 80041de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff5d 	bl	80040a4 <__NVIC_SetPriority>
}
 80041ea:	bf00      	nop
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff31 	bl	8004068 <__NVIC_EnableIRQ>
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ffa2 	bl	8004160 <SysTick_Config>
 800421c:	4603      	mov	r3, r0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004234:	f7ff faac 	bl	8003790 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e099      	b.n	8004378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004264:	e00f      	b.n	8004286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004266:	f7ff fa93 	bl	8003790 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b05      	cmp	r3, #5
 8004272:	d908      	bls.n	8004286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2203      	movs	r2, #3
 800427e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e078      	b.n	8004378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e8      	bne.n	8004266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4b38      	ldr	r3, [pc, #224]	; (8004380 <HAL_DMA_Init+0x158>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d107      	bne.n	80042f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	4313      	orrs	r3, r2
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0307 	bic.w	r3, r3, #7
 8004306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	2b04      	cmp	r3, #4
 8004318:	d117      	bne.n	800434a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00e      	beq.n	800434a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fa99 	bl	8004864 <DMA_CheckFifoParam>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d008      	beq.n	800434a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2240      	movs	r2, #64	; 0x40
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004346:	2301      	movs	r3, #1
 8004348:	e016      	b.n	8004378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa50 	bl	80047f8 <DMA_CalcBaseAndBitshift>
 8004358:	4603      	mov	r3, r0
 800435a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	223f      	movs	r2, #63	; 0x3f
 8004362:	409a      	lsls	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	e010803f 	.word	0xe010803f

08004384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_DMA_Start_IT+0x26>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e048      	b.n	800443c <HAL_DMA_Start_IT+0xb8>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d137      	bne.n	800442e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f9e2 	bl	800479c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	223f      	movs	r2, #63	; 0x3f
 80043de:	409a      	lsls	r2, r3
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0216 	orr.w	r2, r2, #22
 80043f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004402:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0208 	orr.w	r2, r2, #8
 800441a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e005      	b.n	800443a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004436:	2302      	movs	r3, #2
 8004438:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d004      	beq.n	8004462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2280      	movs	r2, #128	; 0x80
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e00c      	b.n	800447c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2205      	movs	r2, #5
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004494:	4b92      	ldr	r3, [pc, #584]	; (80046e0 <HAL_DMA_IRQHandler+0x258>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a92      	ldr	r2, [pc, #584]	; (80046e4 <HAL_DMA_IRQHandler+0x25c>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	0a9b      	lsrs	r3, r3, #10
 80044a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b2:	2208      	movs	r2, #8
 80044b4:	409a      	lsls	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4013      	ands	r3, r2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01a      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0204 	bic.w	r2, r2, #4
 80044da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	2208      	movs	r2, #8
 80044e2:	409a      	lsls	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	f043 0201 	orr.w	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	2201      	movs	r2, #1
 80044fa:	409a      	lsls	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d012      	beq.n	800452a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004516:	2201      	movs	r2, #1
 8004518:	409a      	lsls	r2, r3
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	f043 0202 	orr.w	r2, r3, #2
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	2204      	movs	r2, #4
 8004530:	409a      	lsls	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4013      	ands	r3, r2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d012      	beq.n	8004560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00b      	beq.n	8004560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	2204      	movs	r2, #4
 800454e:	409a      	lsls	r2, r3
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004558:	f043 0204 	orr.w	r2, r3, #4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	2210      	movs	r2, #16
 8004566:	409a      	lsls	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d043      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d03c      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004582:	2210      	movs	r2, #16
 8004584:	409a      	lsls	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d018      	beq.n	80045ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d108      	bne.n	80045b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d024      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
 80045b6:	e01f      	b.n	80045f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01b      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
 80045c8:	e016      	b.n	80045f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0208 	bic.w	r2, r2, #8
 80045e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	2220      	movs	r2, #32
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 808e 	beq.w	8004726 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8086 	beq.w	8004726 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	2220      	movs	r2, #32
 8004620:	409a      	lsls	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b05      	cmp	r3, #5
 8004630:	d136      	bne.n	80046a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0216 	bic.w	r2, r2, #22
 8004640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <HAL_DMA_IRQHandler+0x1da>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0208 	bic.w	r2, r2, #8
 8004670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	223f      	movs	r2, #63	; 0x3f
 8004678:	409a      	lsls	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	2b00      	cmp	r3, #0
 8004694:	d07d      	beq.n	8004792 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
        }
        return;
 800469e:	e078      	b.n	8004792 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01c      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d108      	bne.n	80046ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d030      	beq.n	8004726 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	4798      	blx	r3
 80046cc:	e02b      	b.n	8004726 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
 80046de:	e022      	b.n	8004726 <HAL_DMA_IRQHandler+0x29e>
 80046e0:	20000004 	.word	0x20000004
 80046e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0210 	bic.w	r2, r2, #16
 8004704:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	2b00      	cmp	r3, #0
 800472c:	d032      	beq.n	8004794 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d022      	beq.n	8004780 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2205      	movs	r2, #5
 800473e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3301      	adds	r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	429a      	cmp	r2, r3
 800475c:	d307      	bcc.n	800476e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f2      	bne.n	8004752 <HAL_DMA_IRQHandler+0x2ca>
 800476c:	e000      	b.n	8004770 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800476e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
 8004790:	e000      	b.n	8004794 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004792:	bf00      	nop
    }
  }
}
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop

0800479c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d108      	bne.n	80047dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047da:	e007      	b.n	80047ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	3b10      	subs	r3, #16
 8004808:	4a13      	ldr	r2, [pc, #76]	; (8004858 <DMA_CalcBaseAndBitshift+0x60>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	091b      	lsrs	r3, r3, #4
 8004810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004812:	4a12      	ldr	r2, [pc, #72]	; (800485c <DMA_CalcBaseAndBitshift+0x64>)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d908      	bls.n	8004838 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <DMA_CalcBaseAndBitshift+0x68>)
 800482e:	4013      	ands	r3, r2
 8004830:	1d1a      	adds	r2, r3, #4
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	659a      	str	r2, [r3, #88]	; 0x58
 8004836:	e006      	b.n	8004846 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <DMA_CalcBaseAndBitshift+0x68>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	aaaaaaab 	.word	0xaaaaaaab
 800485c:	0800a6a0 	.word	0x0800a6a0
 8004860:	fffffc00 	.word	0xfffffc00

08004864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d11f      	bne.n	80048be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d855      	bhi.n	8004930 <DMA_CheckFifoParam+0xcc>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <DMA_CheckFifoParam+0x28>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048af 	.word	0x080048af
 8004894:	0800489d 	.word	0x0800489d
 8004898:	08004931 	.word	0x08004931
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d045      	beq.n	8004934 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ac:	e042      	b.n	8004934 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048b6:	d13f      	bne.n	8004938 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048bc:	e03c      	b.n	8004938 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c6:	d121      	bne.n	800490c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d836      	bhi.n	800493c <DMA_CheckFifoParam+0xd8>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <DMA_CheckFifoParam+0x70>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	080048eb 	.word	0x080048eb
 80048dc:	080048e5 	.word	0x080048e5
 80048e0:	080048fd 	.word	0x080048fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      break;
 80048e8:	e02f      	b.n	800494a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d024      	beq.n	8004940 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048fa:	e021      	b.n	8004940 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004904:	d11e      	bne.n	8004944 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800490a:	e01b      	b.n	8004944 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d902      	bls.n	8004918 <DMA_CheckFifoParam+0xb4>
 8004912:	2b03      	cmp	r3, #3
 8004914:	d003      	beq.n	800491e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004916:	e018      	b.n	800494a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      break;
 800491c:	e015      	b.n	800494a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00e      	beq.n	8004948 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
      break;
 800492e:	e00b      	b.n	8004948 <DMA_CheckFifoParam+0xe4>
      break;
 8004930:	bf00      	nop
 8004932:	e00a      	b.n	800494a <DMA_CheckFifoParam+0xe6>
      break;
 8004934:	bf00      	nop
 8004936:	e008      	b.n	800494a <DMA_CheckFifoParam+0xe6>
      break;
 8004938:	bf00      	nop
 800493a:	e006      	b.n	800494a <DMA_CheckFifoParam+0xe6>
      break;
 800493c:	bf00      	nop
 800493e:	e004      	b.n	800494a <DMA_CheckFifoParam+0xe6>
      break;
 8004940:	bf00      	nop
 8004942:	e002      	b.n	800494a <DMA_CheckFifoParam+0xe6>
      break;   
 8004944:	bf00      	nop
 8004946:	e000      	b.n	800494a <DMA_CheckFifoParam+0xe6>
      break;
 8004948:	bf00      	nop
    }
  } 
  
  return status; 
 800494a:	7bfb      	ldrb	r3, [r7, #15]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004958:	b480      	push	{r7}
 800495a:	b089      	sub	sp, #36	; 0x24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800496e:	2300      	movs	r3, #0
 8004970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e175      	b.n	8004c64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004978:	2201      	movs	r2, #1
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4013      	ands	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	429a      	cmp	r2, r3
 8004992:	f040 8164 	bne.w	8004c5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d00b      	beq.n	80049b6 <HAL_GPIO_Init+0x5e>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d007      	beq.n	80049b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049aa:	2b11      	cmp	r3, #17
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b12      	cmp	r3, #18
 80049b4:	d130      	bne.n	8004a18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	2203      	movs	r2, #3
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049ec:	2201      	movs	r2, #1
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4013      	ands	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 0201 	and.w	r2, r3, #1
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	2203      	movs	r2, #3
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x100>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b12      	cmp	r3, #18
 8004a56:	d123      	bne.n	8004aa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	08da      	lsrs	r2, r3, #3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3208      	adds	r2, #8
 8004a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	220f      	movs	r2, #15
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	08da      	lsrs	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3208      	adds	r2, #8
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	2203      	movs	r2, #3
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 0203 	and.w	r2, r3, #3
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80be 	beq.w	8004c5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae2:	4b65      	ldr	r3, [pc, #404]	; (8004c78 <HAL_GPIO_Init+0x320>)
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	4a64      	ldr	r2, [pc, #400]	; (8004c78 <HAL_GPIO_Init+0x320>)
 8004ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004aec:	6453      	str	r3, [r2, #68]	; 0x44
 8004aee:	4b62      	ldr	r3, [pc, #392]	; (8004c78 <HAL_GPIO_Init+0x320>)
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004afa:	4a60      	ldr	r2, [pc, #384]	; (8004c7c <HAL_GPIO_Init+0x324>)
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	3302      	adds	r3, #2
 8004b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	220f      	movs	r2, #15
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43db      	mvns	r3, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a57      	ldr	r2, [pc, #348]	; (8004c80 <HAL_GPIO_Init+0x328>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d037      	beq.n	8004b96 <HAL_GPIO_Init+0x23e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a56      	ldr	r2, [pc, #344]	; (8004c84 <HAL_GPIO_Init+0x32c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d031      	beq.n	8004b92 <HAL_GPIO_Init+0x23a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a55      	ldr	r2, [pc, #340]	; (8004c88 <HAL_GPIO_Init+0x330>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02b      	beq.n	8004b8e <HAL_GPIO_Init+0x236>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a54      	ldr	r2, [pc, #336]	; (8004c8c <HAL_GPIO_Init+0x334>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d025      	beq.n	8004b8a <HAL_GPIO_Init+0x232>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a53      	ldr	r2, [pc, #332]	; (8004c90 <HAL_GPIO_Init+0x338>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01f      	beq.n	8004b86 <HAL_GPIO_Init+0x22e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a52      	ldr	r2, [pc, #328]	; (8004c94 <HAL_GPIO_Init+0x33c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d019      	beq.n	8004b82 <HAL_GPIO_Init+0x22a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a51      	ldr	r2, [pc, #324]	; (8004c98 <HAL_GPIO_Init+0x340>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_GPIO_Init+0x226>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a50      	ldr	r2, [pc, #320]	; (8004c9c <HAL_GPIO_Init+0x344>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00d      	beq.n	8004b7a <HAL_GPIO_Init+0x222>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4f      	ldr	r2, [pc, #316]	; (8004ca0 <HAL_GPIO_Init+0x348>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0x21e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <HAL_GPIO_Init+0x34c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_GPIO_Init+0x21a>
 8004b6e:	2309      	movs	r3, #9
 8004b70:	e012      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b72:	230a      	movs	r3, #10
 8004b74:	e010      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b76:	2308      	movs	r3, #8
 8004b78:	e00e      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b7a:	2307      	movs	r3, #7
 8004b7c:	e00c      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b7e:	2306      	movs	r3, #6
 8004b80:	e00a      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e008      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e004      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e002      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_GPIO_Init+0x240>
 8004b96:	2300      	movs	r3, #0
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	f002 0203 	and.w	r2, r2, #3
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	4093      	lsls	r3, r2
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ba8:	4934      	ldr	r1, [pc, #208]	; (8004c7c <HAL_GPIO_Init+0x324>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	089b      	lsrs	r3, r3, #2
 8004bae:	3302      	adds	r3, #2
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bb6:	4b3c      	ldr	r3, [pc, #240]	; (8004ca8 <HAL_GPIO_Init+0x350>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bda:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <HAL_GPIO_Init+0x350>)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004be0:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <HAL_GPIO_Init+0x350>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c04:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <HAL_GPIO_Init+0x350>)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <HAL_GPIO_Init+0x350>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <HAL_GPIO_Init+0x350>)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c34:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <HAL_GPIO_Init+0x350>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <HAL_GPIO_Init+0x350>)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3301      	adds	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	f67f ae86 	bls.w	8004978 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	3724      	adds	r7, #36	; 0x24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40013800 	.word	0x40013800
 8004c80:	40020000 	.word	0x40020000
 8004c84:	40020400 	.word	0x40020400
 8004c88:	40020800 	.word	0x40020800
 8004c8c:	40020c00 	.word	0x40020c00
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40021400 	.word	0x40021400
 8004c98:	40021800 	.word	0x40021800
 8004c9c:	40021c00 	.word	0x40021c00
 8004ca0:	40022000 	.word	0x40022000
 8004ca4:	40022400 	.word	0x40022400
 8004ca8:	40013c00 	.word	0x40013c00

08004cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cbc:	787b      	ldrb	r3, [r7, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004cc8:	e003      	b.n	8004cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	041a      	lsls	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	619a      	str	r2, [r3, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d006      	beq.n	8004d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cf6:	4a05      	ldr	r2, [pc, #20]	; (8004d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fd ff00 	bl	8002b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40013c00 	.word	0x40013c00

08004d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e07f      	b.n	8004e22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fd ffa4 	bl	8002c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2224      	movs	r2, #36	; 0x24
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d107      	bne.n	8004d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	e006      	b.n	8004d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d104      	bne.n	8004daa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_I2C_Init+0x11c>)
 8004db6:	430b      	orrs	r3, r1
 8004db8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	ea42 0103 	orr.w	r1, r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	021a      	lsls	r2, r3, #8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69d9      	ldr	r1, [r3, #28]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	02008000 	.word	0x02008000

08004e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d138      	bne.n	8004eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e032      	b.n	8004eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2224      	movs	r2, #36	; 0x24
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d139      	bne.n	8004f50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e033      	b.n	8004f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2224      	movs	r2, #36	; 0x24
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e000      	b.n	8004f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
  }
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40007000 	.word	0x40007000

08004f80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f8a:	4b23      	ldr	r3, [pc, #140]	; (8005018 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a22      	ldr	r2, [pc, #136]	; (8005018 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
 8004f96:	4b20      	ldr	r3, [pc, #128]	; (8005018 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	; (800501c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fae:	f7fe fbef 	bl	8003790 <HAL_GetTick>
 8004fb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fb4:	e009      	b.n	8004fca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fb6:	f7fe fbeb 	bl	8003790 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fc4:	d901      	bls.n	8004fca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e022      	b.n	8005010 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fca:	4b14      	ldr	r3, [pc, #80]	; (800501c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d1ee      	bne.n	8004fb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a0f      	ldr	r2, [pc, #60]	; (800501c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fe4:	f7fe fbd4 	bl	8003790 <HAL_GetTick>
 8004fe8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fea:	e009      	b.n	8005000 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004fec:	f7fe fbd0 	bl	8003790 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ffa:	d901      	bls.n	8005000 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e007      	b.n	8005010 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800500c:	d1ee      	bne.n	8004fec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	40007000 	.word	0x40007000

08005020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005028:	2300      	movs	r3, #0
 800502a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e29b      	b.n	800556e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8087 	beq.w	8005152 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005044:	4b96      	ldr	r3, [pc, #600]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 030c 	and.w	r3, r3, #12
 800504c:	2b04      	cmp	r3, #4
 800504e:	d00c      	beq.n	800506a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005050:	4b93      	ldr	r3, [pc, #588]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d112      	bne.n	8005082 <HAL_RCC_OscConfig+0x62>
 800505c:	4b90      	ldr	r3, [pc, #576]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005068:	d10b      	bne.n	8005082 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506a:	4b8d      	ldr	r3, [pc, #564]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d06c      	beq.n	8005150 <HAL_RCC_OscConfig+0x130>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d168      	bne.n	8005150 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e275      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x7a>
 800508c:	4b84      	ldr	r3, [pc, #528]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a83      	ldr	r2, [pc, #524]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e02e      	b.n	80050f8 <HAL_RCC_OscConfig+0xd8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0x9c>
 80050a2:	4b7f      	ldr	r3, [pc, #508]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a7e      	ldr	r2, [pc, #504]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	4b7c      	ldr	r3, [pc, #496]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7b      	ldr	r2, [pc, #492]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e01d      	b.n	80050f8 <HAL_RCC_OscConfig+0xd8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCC_OscConfig+0xc0>
 80050c6:	4b76      	ldr	r3, [pc, #472]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a75      	ldr	r2, [pc, #468]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b73      	ldr	r3, [pc, #460]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a72      	ldr	r2, [pc, #456]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e00b      	b.n	80050f8 <HAL_RCC_OscConfig+0xd8>
 80050e0:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a6e      	ldr	r2, [pc, #440]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4b6c      	ldr	r3, [pc, #432]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6b      	ldr	r2, [pc, #428]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80050f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d013      	beq.n	8005128 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fe fb46 	bl	8003790 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005108:	f7fe fb42 	bl	8003790 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b64      	cmp	r3, #100	; 0x64
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e229      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800511a:	4b61      	ldr	r3, [pc, #388]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0xe8>
 8005126:	e014      	b.n	8005152 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fe fb32 	bl	8003790 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005130:	f7fe fb2e 	bl	8003790 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	; 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e215      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005142:	4b57      	ldr	r3, [pc, #348]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x110>
 800514e:	e000      	b.n	8005152 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d069      	beq.n	8005232 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800515e:	4b50      	ldr	r3, [pc, #320]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800516a:	4b4d      	ldr	r3, [pc, #308]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b08      	cmp	r3, #8
 8005174:	d11c      	bne.n	80051b0 <HAL_RCC_OscConfig+0x190>
 8005176:	4b4a      	ldr	r3, [pc, #296]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d116      	bne.n	80051b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005182:	4b47      	ldr	r3, [pc, #284]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <HAL_RCC_OscConfig+0x17a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d001      	beq.n	800519a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e1e9      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519a:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	493d      	ldr	r1, [pc, #244]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ae:	e040      	b.n	8005232 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d023      	beq.n	8005200 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051b8:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a38      	ldr	r2, [pc, #224]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fe fae4 	bl	8003790 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051cc:	f7fe fae0 	bl	8003790 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e1c7      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051de:	4b30      	ldr	r3, [pc, #192]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ea:	4b2d      	ldr	r3, [pc, #180]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4929      	ldr	r1, [pc, #164]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	600b      	str	r3, [r1, #0]
 80051fe:	e018      	b.n	8005232 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005200:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005206:	f023 0301 	bic.w	r3, r3, #1
 800520a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fe fac0 	bl	8003790 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005214:	f7fe fabc 	bl	8003790 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e1a3      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d038      	beq.n	80052b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d019      	beq.n	800527a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800524c:	f043 0301 	orr.w	r3, r3, #1
 8005250:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005252:	f7fe fa9d 	bl	8003790 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525a:	f7fe fa99 	bl	8003790 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e180      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800526e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x23a>
 8005278:	e01a      	b.n	80052b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 800527c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527e:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <HAL_RCC_OscConfig+0x280>)
 8005280:	f023 0301 	bic.w	r3, r3, #1
 8005284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fe fa83 	bl	8003790 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528c:	e00a      	b.n	80052a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528e:	f7fe fa7f 	bl	8003790 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d903      	bls.n	80052a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e166      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
 80052a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a4:	4b92      	ldr	r3, [pc, #584]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80052a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ee      	bne.n	800528e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80a4 	beq.w	8005406 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052be:	4b8c      	ldr	r3, [pc, #560]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10d      	bne.n	80052e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ca:	4b89      	ldr	r3, [pc, #548]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a88      	ldr	r2, [pc, #544]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6413      	str	r3, [r2, #64]	; 0x40
 80052d6:	4b86      	ldr	r3, [pc, #536]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e2:	2301      	movs	r3, #1
 80052e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e6:	4b83      	ldr	r3, [pc, #524]	; (80054f4 <HAL_RCC_OscConfig+0x4d4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d118      	bne.n	8005324 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80052f2:	4b80      	ldr	r3, [pc, #512]	; (80054f4 <HAL_RCC_OscConfig+0x4d4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a7f      	ldr	r2, [pc, #508]	; (80054f4 <HAL_RCC_OscConfig+0x4d4>)
 80052f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052fe:	f7fe fa47 	bl	8003790 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005306:	f7fe fa43 	bl	8003790 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b64      	cmp	r3, #100	; 0x64
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e12a      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005318:	4b76      	ldr	r3, [pc, #472]	; (80054f4 <HAL_RCC_OscConfig+0x4d4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x31a>
 800532c:	4b70      	ldr	r3, [pc, #448]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	4a6f      	ldr	r2, [pc, #444]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6713      	str	r3, [r2, #112]	; 0x70
 8005338:	e02d      	b.n	8005396 <HAL_RCC_OscConfig+0x376>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x33c>
 8005342:	4b6b      	ldr	r3, [pc, #428]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005346:	4a6a      	ldr	r2, [pc, #424]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	6713      	str	r3, [r2, #112]	; 0x70
 800534e:	4b68      	ldr	r3, [pc, #416]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	4a67      	ldr	r2, [pc, #412]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	6713      	str	r3, [r2, #112]	; 0x70
 800535a:	e01c      	b.n	8005396 <HAL_RCC_OscConfig+0x376>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b05      	cmp	r3, #5
 8005362:	d10c      	bne.n	800537e <HAL_RCC_OscConfig+0x35e>
 8005364:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	4a61      	ldr	r2, [pc, #388]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 800536a:	f043 0304 	orr.w	r3, r3, #4
 800536e:	6713      	str	r3, [r2, #112]	; 0x70
 8005370:	4b5f      	ldr	r3, [pc, #380]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	4a5e      	ldr	r2, [pc, #376]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	6713      	str	r3, [r2, #112]	; 0x70
 800537c:	e00b      	b.n	8005396 <HAL_RCC_OscConfig+0x376>
 800537e:	4b5c      	ldr	r3, [pc, #368]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	4a5b      	ldr	r2, [pc, #364]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	6713      	str	r3, [r2, #112]	; 0x70
 800538a:	4b59      	ldr	r3, [pc, #356]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a58      	ldr	r2, [pc, #352]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d015      	beq.n	80053ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539e:	f7fe f9f7 	bl	8003790 <HAL_GetTick>
 80053a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a4:	e00a      	b.n	80053bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a6:	f7fe f9f3 	bl	8003790 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e0d8      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053bc:	4b4c      	ldr	r3, [pc, #304]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0ee      	beq.n	80053a6 <HAL_RCC_OscConfig+0x386>
 80053c8:	e014      	b.n	80053f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ca:	f7fe f9e1 	bl	8003790 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d0:	e00a      	b.n	80053e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fe f9dd 	bl	8003790 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0c2      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e8:	4b41      	ldr	r3, [pc, #260]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ee      	bne.n	80053d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d105      	bne.n	8005406 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fa:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	4a3c      	ldr	r2, [pc, #240]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005404:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80ae 	beq.w	800556c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005410:	4b37      	ldr	r3, [pc, #220]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 030c 	and.w	r3, r3, #12
 8005418:	2b08      	cmp	r3, #8
 800541a:	d06d      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d14b      	bne.n	80054bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005424:	4b32      	ldr	r3, [pc, #200]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a31      	ldr	r2, [pc, #196]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 800542a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fe f9ae 	bl	8003790 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005438:	f7fe f9aa 	bl	8003790 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e091      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	019b      	lsls	r3, r3, #6
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	3b01      	subs	r3, #1
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	071b      	lsls	r3, r3, #28
 8005482:	491b      	ldr	r1, [pc, #108]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005488:	4b19      	ldr	r3, [pc, #100]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 800548e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fe f97c 	bl	8003790 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fe f978 	bl	8003790 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e05f      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ae:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x47c>
 80054ba:	e057      	b.n	800556c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054bc:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0b      	ldr	r2, [pc, #44]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80054c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fe f962 	bl	8003790 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fe f95e 	bl	8003790 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e045      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e2:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <HAL_RCC_OscConfig+0x4d0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4b0>
 80054ee:	e03d      	b.n	800556c <HAL_RCC_OscConfig+0x54c>
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80054f8:	4b1f      	ldr	r3, [pc, #124]	; (8005578 <HAL_RCC_OscConfig+0x558>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d030      	beq.n	8005568 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d129      	bne.n	8005568 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d122      	bne.n	8005568 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005528:	4013      	ands	r3, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800552e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005530:	4293      	cmp	r3, r2
 8005532:	d119      	bne.n	8005568 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	3b01      	subs	r3, #1
 8005542:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d10f      	bne.n	8005568 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005554:	429a      	cmp	r2, r3
 8005556:	d107      	bne.n	8005568 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800

0800557c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0d0      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005594:	4b6a      	ldr	r3, [pc, #424]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d910      	bls.n	80055c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a2:	4b67      	ldr	r3, [pc, #412]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f023 020f 	bic.w	r2, r3, #15
 80055aa:	4965      	ldr	r1, [pc, #404]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b63      	ldr	r3, [pc, #396]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e0b8      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d020      	beq.n	8005612 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055dc:	4b59      	ldr	r3, [pc, #356]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	4a58      	ldr	r2, [pc, #352]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 80055e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f4:	4b53      	ldr	r3, [pc, #332]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	4a52      	ldr	r2, [pc, #328]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 80055fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005600:	4b50      	ldr	r3, [pc, #320]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	494d      	ldr	r1, [pc, #308]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d040      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005626:	4b47      	ldr	r3, [pc, #284]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d115      	bne.n	800565e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e07f      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d107      	bne.n	800564e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563e:	4b41      	ldr	r3, [pc, #260]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e073      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564e:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e06b      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800565e:	4b39      	ldr	r3, [pc, #228]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f023 0203 	bic.w	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4936      	ldr	r1, [pc, #216]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 800566c:	4313      	orrs	r3, r2
 800566e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005670:	f7fe f88e 	bl	8003790 <HAL_GetTick>
 8005674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	e00a      	b.n	800568e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005678:	f7fe f88a 	bl	8003790 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e053      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568e:	4b2d      	ldr	r3, [pc, #180]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 020c 	and.w	r2, r3, #12
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	429a      	cmp	r2, r3
 800569e:	d1eb      	bne.n	8005678 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d210      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b24      	ldr	r3, [pc, #144]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 020f 	bic.w	r2, r3, #15
 80056b6:	4922      	ldr	r1, [pc, #136]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056be:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e032      	b.n	8005736 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056dc:	4b19      	ldr	r3, [pc, #100]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4916      	ldr	r1, [pc, #88]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	490e      	ldr	r1, [pc, #56]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800570e:	f000 f821 	bl	8005754 <HAL_RCC_GetSysClockFreq>
 8005712:	4601      	mov	r1, r0
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <HAL_RCC_ClockConfig+0x1cc>)
 8005720:	5cd3      	ldrb	r3, [r2, r3]
 8005722:	fa21 f303 	lsr.w	r3, r1, r3
 8005726:	4a09      	ldr	r2, [pc, #36]	; (800574c <HAL_RCC_ClockConfig+0x1d0>)
 8005728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800572a:	4b09      	ldr	r3, [pc, #36]	; (8005750 <HAL_RCC_ClockConfig+0x1d4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fd ffea 	bl	8003708 <HAL_InitTick>

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40023c00 	.word	0x40023c00
 8005744:	40023800 	.word	0x40023800
 8005748:	0800a688 	.word	0x0800a688
 800574c:	20000004 	.word	0x20000004
 8005750:	20000008 	.word	0x20000008

08005754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	2300      	movs	r3, #0
 8005764:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800576a:	4b50      	ldr	r3, [pc, #320]	; (80058ac <HAL_RCC_GetSysClockFreq+0x158>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b04      	cmp	r3, #4
 8005774:	d007      	beq.n	8005786 <HAL_RCC_GetSysClockFreq+0x32>
 8005776:	2b08      	cmp	r3, #8
 8005778:	d008      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0x38>
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 808d 	bne.w	800589a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005780:	4b4b      	ldr	r3, [pc, #300]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005782:	60bb      	str	r3, [r7, #8]
      break;
 8005784:	e08c      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005786:	4b4b      	ldr	r3, [pc, #300]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005788:	60bb      	str	r3, [r7, #8]
      break;
 800578a:	e089      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800578c:	4b47      	ldr	r3, [pc, #284]	; (80058ac <HAL_RCC_GetSysClockFreq+0x158>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005794:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005796:	4b45      	ldr	r3, [pc, #276]	; (80058ac <HAL_RCC_GetSysClockFreq+0x158>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d023      	beq.n	80057ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057a2:	4b42      	ldr	r3, [pc, #264]	; (80058ac <HAL_RCC_GetSysClockFreq+0x158>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	099b      	lsrs	r3, r3, #6
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	ea03 0501 	and.w	r5, r3, r1
 80057b8:	ea04 0602 	and.w	r6, r4, r2
 80057bc:	4a3d      	ldr	r2, [pc, #244]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80057be:	fb02 f106 	mul.w	r1, r2, r6
 80057c2:	2200      	movs	r2, #0
 80057c4:	fb02 f205 	mul.w	r2, r2, r5
 80057c8:	440a      	add	r2, r1
 80057ca:	493a      	ldr	r1, [pc, #232]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80057cc:	fba5 0101 	umull	r0, r1, r5, r1
 80057d0:	1853      	adds	r3, r2, r1
 80057d2:	4619      	mov	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f04f 0400 	mov.w	r4, #0
 80057da:	461a      	mov	r2, r3
 80057dc:	4623      	mov	r3, r4
 80057de:	f7fa fd97 	bl	8000310 <__aeabi_uldivmod>
 80057e2:	4603      	mov	r3, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	e049      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ea:	4b30      	ldr	r3, [pc, #192]	; (80058ac <HAL_RCC_GetSysClockFreq+0x158>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	099b      	lsrs	r3, r3, #6
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	ea03 0501 	and.w	r5, r3, r1
 8005800:	ea04 0602 	and.w	r6, r4, r2
 8005804:	4629      	mov	r1, r5
 8005806:	4632      	mov	r2, r6
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	f04f 0400 	mov.w	r4, #0
 8005810:	0154      	lsls	r4, r2, #5
 8005812:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005816:	014b      	lsls	r3, r1, #5
 8005818:	4619      	mov	r1, r3
 800581a:	4622      	mov	r2, r4
 800581c:	1b49      	subs	r1, r1, r5
 800581e:	eb62 0206 	sbc.w	r2, r2, r6
 8005822:	f04f 0300 	mov.w	r3, #0
 8005826:	f04f 0400 	mov.w	r4, #0
 800582a:	0194      	lsls	r4, r2, #6
 800582c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005830:	018b      	lsls	r3, r1, #6
 8005832:	1a5b      	subs	r3, r3, r1
 8005834:	eb64 0402 	sbc.w	r4, r4, r2
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	00e2      	lsls	r2, r4, #3
 8005842:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005846:	00d9      	lsls	r1, r3, #3
 8005848:	460b      	mov	r3, r1
 800584a:	4614      	mov	r4, r2
 800584c:	195b      	adds	r3, r3, r5
 800584e:	eb44 0406 	adc.w	r4, r4, r6
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	02a2      	lsls	r2, r4, #10
 800585c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005860:	0299      	lsls	r1, r3, #10
 8005862:	460b      	mov	r3, r1
 8005864:	4614      	mov	r4, r2
 8005866:	4618      	mov	r0, r3
 8005868:	4621      	mov	r1, r4
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	461a      	mov	r2, r3
 8005872:	4623      	mov	r3, r4
 8005874:	f7fa fd4c 	bl	8000310 <__aeabi_uldivmod>
 8005878:	4603      	mov	r3, r0
 800587a:	460c      	mov	r4, r1
 800587c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCC_GetSysClockFreq+0x158>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	0c1b      	lsrs	r3, r3, #16
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	3301      	adds	r3, #1
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	60bb      	str	r3, [r7, #8]
      break;
 8005898:	e002      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800589c:	60bb      	str	r3, [r7, #8]
      break;
 800589e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058a0:	68bb      	ldr	r3, [r7, #8]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40023800 	.word	0x40023800
 80058b0:	00f42400 	.word	0x00f42400
 80058b4:	00989680 	.word	0x00989680

080058b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058bc:	4b03      	ldr	r3, [pc, #12]	; (80058cc <HAL_RCC_GetHCLKFreq+0x14>)
 80058be:	681b      	ldr	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000004 	.word	0x20000004

080058d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058d4:	f7ff fff0 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 80058d8:	4601      	mov	r1, r0
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	0a9b      	lsrs	r3, r3, #10
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	4a03      	ldr	r2, [pc, #12]	; (80058f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e6:	5cd3      	ldrb	r3, [r2, r3]
 80058e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40023800 	.word	0x40023800
 80058f4:	0800a698 	.word	0x0800a698

080058f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058fc:	f7ff ffdc 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8005900:	4601      	mov	r1, r0
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	0b5b      	lsrs	r3, r3, #13
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	4a03      	ldr	r2, [pc, #12]	; (800591c <HAL_RCC_GetPCLK2Freq+0x24>)
 800590e:	5cd3      	ldrb	r3, [r2, r3]
 8005910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005914:	4618      	mov	r0, r3
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40023800 	.word	0x40023800
 800591c:	0800a698 	.word	0x0800a698

08005920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d012      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005948:	4b69      	ldr	r3, [pc, #420]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	4a68      	ldr	r2, [pc, #416]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005952:	6093      	str	r3, [r2, #8]
 8005954:	4b66      	ldr	r3, [pc, #408]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595c:	4964      	ldr	r1, [pc, #400]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800596a:	2301      	movs	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d017      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800597a:	4b5d      	ldr	r3, [pc, #372]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005988:	4959      	ldr	r1, [pc, #356]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005998:	d101      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800599a:	2301      	movs	r3, #1
 800599c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80059a6:	2301      	movs	r3, #1
 80059a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d017      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80059b6:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	494a      	ldr	r1, [pc, #296]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059d4:	d101      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80059f2:	2301      	movs	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 808b 	beq.w	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a04:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	4a39      	ldr	r2, [pc, #228]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a10:	4b37      	ldr	r3, [pc, #220]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a1c:	4b35      	ldr	r3, [pc, #212]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a34      	ldr	r2, [pc, #208]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a28:	f7fd feb2 	bl	8003790 <HAL_GetTick>
 8005a2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a30:	f7fd feae 	bl	8003790 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b64      	cmp	r3, #100	; 0x64
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e38d      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a42:	4b2c      	ldr	r3, [pc, #176]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a4e:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d035      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d02e      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a6c:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a76:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a82:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a8e:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a94:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d114      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fd fe76 	bl	8003790 <HAL_GetTick>
 8005aa4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa6:	e00a      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa8:	f7fd fe72 	bl	8003790 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e34f      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0ee      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad6:	d111      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ae6:	400b      	ands	r3, r1
 8005ae8:	4901      	ldr	r1, [pc, #4]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	608b      	str	r3, [r1, #8]
 8005aee:	e00b      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005af0:	40023800 	.word	0x40023800
 8005af4:	40007000 	.word	0x40007000
 8005af8:	0ffffcff 	.word	0x0ffffcff
 8005afc:	4bb3      	ldr	r3, [pc, #716]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4ab2      	ldr	r2, [pc, #712]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b06:	6093      	str	r3, [r2, #8]
 8005b08:	4bb0      	ldr	r3, [pc, #704]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	49ad      	ldr	r1, [pc, #692]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d010      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b26:	4ba9      	ldr	r3, [pc, #676]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b2c:	4aa7      	ldr	r2, [pc, #668]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b36:	4ba5      	ldr	r3, [pc, #660]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	49a2      	ldr	r1, [pc, #648]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b54:	4b9d      	ldr	r3, [pc, #628]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b62:	499a      	ldr	r1, [pc, #616]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b76:	4b95      	ldr	r3, [pc, #596]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b84:	4991      	ldr	r1, [pc, #580]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b98:	4b8c      	ldr	r3, [pc, #560]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba6:	4989      	ldr	r1, [pc, #548]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bba:	4b84      	ldr	r3, [pc, #528]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	4980      	ldr	r1, [pc, #512]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bdc:	4b7b      	ldr	r3, [pc, #492]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f023 0203 	bic.w	r2, r3, #3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	4978      	ldr	r1, [pc, #480]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bfe:	4b73      	ldr	r3, [pc, #460]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c04:	f023 020c 	bic.w	r2, r3, #12
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0c:	496f      	ldr	r1, [pc, #444]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c20:	4b6a      	ldr	r3, [pc, #424]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2e:	4967      	ldr	r1, [pc, #412]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c42:	4b62      	ldr	r3, [pc, #392]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c50:	495e      	ldr	r1, [pc, #376]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c64:	4b59      	ldr	r3, [pc, #356]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c72:	4956      	ldr	r1, [pc, #344]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c86:	4b51      	ldr	r3, [pc, #324]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c94:	494d      	ldr	r1, [pc, #308]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ca8:	4b48      	ldr	r3, [pc, #288]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb6:	4945      	ldr	r1, [pc, #276]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005cca:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd8:	493c      	ldr	r1, [pc, #240]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005cec:	4b37      	ldr	r3, [pc, #220]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cfa:	4934      	ldr	r1, [pc, #208]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d011      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d0e:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1c:	492b      	ldr	r1, [pc, #172]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d4e:	4b1f      	ldr	r3, [pc, #124]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5c:	491b      	ldr	r1, [pc, #108]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d70:	4b16      	ldr	r3, [pc, #88]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d80:	4912      	ldr	r1, [pc, #72]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00b      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005d94:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da4:	4909      	ldr	r1, [pc, #36]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00f      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005db8:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc8:	e002      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005dca:	bf00      	nop
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	4985      	ldr	r1, [pc, #532]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005de4:	4b80      	ldr	r3, [pc, #512]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df4:	497c      	ldr	r1, [pc, #496]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d005      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e0a:	f040 80d6 	bne.w	8005fba <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e0e:	4b76      	ldr	r3, [pc, #472]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a75      	ldr	r2, [pc, #468]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1a:	f7fd fcb9 	bl	8003790 <HAL_GetTick>
 8005e1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e20:	e008      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e22:	f7fd fcb5 	bl	8003790 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b64      	cmp	r3, #100	; 0x64
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e194      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e34:	4b6c      	ldr	r3, [pc, #432]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f0      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d021      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d11d      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e54:	4b64      	ldr	r3, [pc, #400]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5a:	0c1b      	lsrs	r3, r3, #16
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e62:	4b61      	ldr	r3, [pc, #388]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e68:	0e1b      	lsrs	r3, r3, #24
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	019a      	lsls	r2, r3, #6
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	041b      	lsls	r3, r3, #16
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	061b      	lsls	r3, r3, #24
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	071b      	lsls	r3, r3, #28
 8005e88:	4957      	ldr	r1, [pc, #348]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea4:	d00a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d02e      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eba:	d129      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ebc:	4b4a      	ldr	r3, [pc, #296]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005eca:	4b47      	ldr	r3, [pc, #284]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ed0:	0f1b      	lsrs	r3, r3, #28
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	019a      	lsls	r2, r3, #6
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	041b      	lsls	r3, r3, #16
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	061b      	lsls	r3, r3, #24
 8005eea:	431a      	orrs	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	071b      	lsls	r3, r3, #28
 8005ef0:	493d      	ldr	r1, [pc, #244]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ef8:	4b3b      	ldr	r3, [pc, #236]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efe:	f023 021f 	bic.w	r2, r3, #31
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	3b01      	subs	r3, #1
 8005f08:	4937      	ldr	r1, [pc, #220]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01d      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f1c:	4b32      	ldr	r3, [pc, #200]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f22:	0e1b      	lsrs	r3, r3, #24
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f30:	0f1b      	lsrs	r3, r3, #28
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	019a      	lsls	r2, r3, #6
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	041b      	lsls	r3, r3, #16
 8005f44:	431a      	orrs	r2, r3
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	061b      	lsls	r3, r3, #24
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	071b      	lsls	r3, r3, #28
 8005f50:	4925      	ldr	r1, [pc, #148]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d011      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	019a      	lsls	r2, r3, #6
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	061b      	lsls	r3, r3, #24
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	071b      	lsls	r3, r3, #28
 8005f80:	4919      	ldr	r1, [pc, #100]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f88:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f94:	f7fd fbfc 	bl	8003790 <HAL_GetTick>
 8005f98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f9c:	f7fd fbf8 	bl	8003790 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b64      	cmp	r3, #100	; 0x64
 8005fa8:	d901      	bls.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0d7      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fae:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	f040 80cd 	bne.w	800615c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a08      	ldr	r2, [pc, #32]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fce:	f7fd fbdf 	bl	8003790 <HAL_GetTick>
 8005fd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fd4:	e00a      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fd6:	f7fd fbdb 	bl	8003790 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b64      	cmp	r3, #100	; 0x64
 8005fe2:	d903      	bls.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0ba      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005fe8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fec:	4b5e      	ldr	r3, [pc, #376]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ff8:	d0ed      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006016:	2b00      	cmp	r3, #0
 8006018:	d02e      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d12a      	bne.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006022:	4b51      	ldr	r3, [pc, #324]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	0c1b      	lsrs	r3, r3, #16
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006030:	4b4d      	ldr	r3, [pc, #308]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	0f1b      	lsrs	r3, r3, #28
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	019a      	lsls	r2, r3, #6
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	061b      	lsls	r3, r3, #24
 8006050:	431a      	orrs	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	071b      	lsls	r3, r3, #28
 8006056:	4944      	ldr	r1, [pc, #272]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800605e:	4b42      	ldr	r3, [pc, #264]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006064:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	3b01      	subs	r3, #1
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	493d      	ldr	r1, [pc, #244]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d022      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800608c:	d11d      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800608e:	4b36      	ldr	r3, [pc, #216]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006094:	0e1b      	lsrs	r3, r3, #24
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800609c:	4b32      	ldr	r3, [pc, #200]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	0f1b      	lsrs	r3, r3, #28
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	019a      	lsls	r2, r3, #6
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	431a      	orrs	r2, r3
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	061b      	lsls	r3, r3, #24
 80060bc:	431a      	orrs	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	071b      	lsls	r3, r3, #28
 80060c2:	4929      	ldr	r1, [pc, #164]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d028      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060d6:	4b24      	ldr	r3, [pc, #144]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	0e1b      	lsrs	r3, r3, #24
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060e4:	4b20      	ldr	r3, [pc, #128]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	0c1b      	lsrs	r3, r3, #16
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	019a      	lsls	r2, r3, #6
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	431a      	orrs	r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	061b      	lsls	r3, r3, #24
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	071b      	lsls	r3, r3, #28
 800610a:	4917      	ldr	r1, [pc, #92]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	4911      	ldr	r1, [pc, #68]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a0e      	ldr	r2, [pc, #56]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800612e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006134:	f7fd fb2c 	bl	8003790 <HAL_GetTick>
 8006138:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800613a:	e008      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800613c:	f7fd fb28 	bl	8003790 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b64      	cmp	r3, #100	; 0x64
 8006148:	d901      	bls.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e007      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615a:	d1ef      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40023800 	.word	0x40023800

0800616c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e084      	b.n	8006288 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fc fe09 	bl	8002db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061be:	d902      	bls.n	80061c6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e002      	b.n	80061cc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80061d4:	d007      	beq.n	80061e6 <HAL_SPI_Init+0x7a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061de:	d002      	beq.n	80061e6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061f6:	d903      	bls.n	8006200 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
 80061fe:	e002      	b.n	8006206 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	ea42 0103 	orr.w	r1, r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	0c1b      	lsrs	r3, r3, #16
 8006246:	f003 0204 	and.w	r2, r3, #4
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	431a      	orrs	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006254:	431a      	orrs	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	ea42 0103 	orr.w	r1, r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	430a      	orrs	r2, r1
 8006266:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69da      	ldr	r2, [r3, #28]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006276:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d110      	bne.n	80062cc <HAL_SPI_Receive_DMA+0x3c>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b2:	d10b      	bne.n	80062cc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2204      	movs	r2, #4
 80062b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 f900 	bl	80064c8 <HAL_SPI_TransmitReceive_DMA>
 80062c8:	4603      	mov	r3, r0
 80062ca:	e0f3      	b.n	80064b4 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_SPI_Receive_DMA+0x4a>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0ec      	b.n	80064b4 <HAL_SPI_Receive_DMA+0x224>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d002      	beq.n	80062f4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80062ee:	2302      	movs	r3, #2
 80062f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062f2:	e0da      	b.n	80064aa <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_SPI_Receive_DMA+0x70>
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006304:	e0d1      	b.n	80064aa <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2204      	movs	r2, #4
 800630a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	88fa      	ldrh	r2, [r7, #6]
 8006326:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634a:	d107      	bne.n	800635c <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800635a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800636a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006374:	d908      	bls.n	8006388 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	e042      	b.n	800640e <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006396:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a2:	d134      	bne.n	800640e <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063b2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d111      	bne.n	80063e8 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063da:	b29b      	uxth	r3, r3
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063e6:	e012      	b.n	800640e <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063fe:	b29b      	uxth	r3, r3
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	b29b      	uxth	r3, r3
 8006404:	3301      	adds	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006412:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <HAL_SPI_Receive_DMA+0x22c>)
 8006414:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641a:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <HAL_SPI_Receive_DMA+0x230>)
 800641c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006422:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <HAL_SPI_Receive_DMA+0x234>)
 8006424:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	2200      	movs	r2, #0
 800642c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	330c      	adds	r3, #12
 8006438:	4619      	mov	r1, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	461a      	mov	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006446:	b29b      	uxth	r3, r3
 8006448:	f7fd ff9c 	bl	8004384 <HAL_DMA_Start_IT>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006456:	f043 0210 	orr.w	r2, r3, #16
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800646a:	e01e      	b.n	80064aa <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d007      	beq.n	800648a <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006488:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0220 	orr.w	r2, r2, #32
 8006498:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	08006949 	.word	0x08006949
 80064c0:	08006831 	.word	0x08006831
 80064c4:	08006981 	.word	0x08006981

080064c8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e16c      	b.n	80067c2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064f6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80064fe:	7dbb      	ldrb	r3, [r7, #22]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d00d      	beq.n	8006520 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650a:	d106      	bne.n	800651a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d102      	bne.n	800651a <HAL_SPI_TransmitReceive_DMA+0x52>
 8006514:	7dbb      	ldrb	r3, [r7, #22]
 8006516:	2b04      	cmp	r3, #4
 8006518:	d002      	beq.n	8006520 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800651a:	2302      	movs	r3, #2
 800651c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800651e:	e14b      	b.n	80067b8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800652c:	887b      	ldrh	r3, [r7, #2]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006536:	e13f      	b.n	80067b8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b04      	cmp	r3, #4
 8006542:	d003      	beq.n	800654c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2205      	movs	r2, #5
 8006548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	887a      	ldrh	r2, [r7, #2]
 800655c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	887a      	ldrh	r2, [r7, #2]
 8006562:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	887a      	ldrh	r2, [r7, #2]
 800656e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	887a      	ldrh	r2, [r7, #2]
 8006576:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8006594:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800659e:	d908      	bls.n	80065b2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065ae:	605a      	str	r2, [r3, #4]
 80065b0:	e06f      	b.n	8006692 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065c0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065cc:	d126      	bne.n	800661c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10f      	bne.n	80065fa <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065e8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065f8:	e010      	b.n	800661c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006608:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	b29b      	uxth	r3, r3
 8006614:	3301      	adds	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006626:	d134      	bne.n	8006692 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006636:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800663e:	b29b      	uxth	r3, r3
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d111      	bne.n	800666c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006656:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800665e:	b29b      	uxth	r3, r3
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800666a:	e012      	b.n	8006692 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800667a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006682:	b29b      	uxth	r3, r3
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	b29b      	uxth	r3, r3
 8006688:	3301      	adds	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b04      	cmp	r3, #4
 800669c:	d108      	bne.n	80066b0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a2:	4a4a      	ldr	r2, [pc, #296]	; (80067cc <HAL_SPI_TransmitReceive_DMA+0x304>)
 80066a4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066aa:	4a49      	ldr	r2, [pc, #292]	; (80067d0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80066ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80066ae:	e007      	b.n	80066c0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b4:	4a47      	ldr	r2, [pc, #284]	; (80067d4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	4a46      	ldr	r2, [pc, #280]	; (80067d8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80066be:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c4:	4a45      	ldr	r2, [pc, #276]	; (80067dc <HAL_SPI_TransmitReceive_DMA+0x314>)
 80066c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066cc:	2200      	movs	r2, #0
 80066ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	4619      	mov	r1, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	461a      	mov	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f7fd fe4b 	bl	8004384 <HAL_DMA_Start_IT>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00c      	beq.n	800670e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	f043 0210 	orr.w	r2, r3, #16
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800670c:	e054      	b.n	80067b8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0201 	orr.w	r2, r2, #1
 800671c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	2200      	movs	r2, #0
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672a:	2200      	movs	r2, #0
 800672c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	2200      	movs	r2, #0
 8006734:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673a:	2200      	movs	r2, #0
 800673c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	4619      	mov	r1, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	461a      	mov	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	f7fd fe15 	bl	8004384 <HAL_DMA_Start_IT>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00c      	beq.n	800677a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	f043 0210 	orr.w	r2, r3, #16
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006778:	e01e      	b.n	80067b8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d007      	beq.n	8006798 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006796:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0220 	orr.w	r2, r2, #32
 80067a6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0202 	orr.w	r2, r2, #2
 80067b6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	08006949 	.word	0x08006949
 80067d0:	08006831 	.word	0x08006831
 80067d4:	08006965 	.word	0x08006965
 80067d8:	080068b7 	.word	0x080068b7
 80067dc:	08006981 	.word	0x08006981

080067e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683e:	f7fc ffa7 	bl	8003790 <HAL_GetTick>
 8006842:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006852:	d02a      	beq.n	80068aa <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0220 	bic.w	r2, r2, #32
 8006862:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0203 	bic.w	r2, r2, #3
 8006872:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	2164      	movs	r1, #100	; 0x64
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f978 	bl	8006b6e <SPI_EndRxTransaction>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff ffba 	bl	800681c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068a8:	e002      	b.n	80068b0 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7fb fb48 	bl	8001f40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068c4:	f7fc ff64 	bl	8003790 <HAL_GetTick>
 80068c8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d8:	d030      	beq.n	800693c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0220 	bic.w	r2, r2, #32
 80068e8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	2164      	movs	r1, #100	; 0x64
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f995 	bl	8006c1e <SPI_EndRxTxTransaction>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0203 	bic.w	r2, r2, #3
 8006914:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff ff71 	bl	800681c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800693a:	e002      	b.n	8006942 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff ff4f 	bl	80067e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff ff4c 	bl	80067f4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff ff48 	bl	8006808 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0203 	bic.w	r2, r2, #3
 800699c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a2:	f043 0210 	orr.w	r2, r3, #16
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff ff32 	bl	800681c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	4613      	mov	r3, r2
 80069ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069d0:	e04c      	b.n	8006a6c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d8:	d048      	beq.n	8006a6c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80069da:	f7fc fed9 	bl	8003790 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d902      	bls.n	80069f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d13d      	bne.n	8006a6c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a08:	d111      	bne.n	8006a2e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a12:	d004      	beq.n	8006a1e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1c:	d107      	bne.n	8006a2e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a36:	d10f      	bne.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e00f      	b.n	8006a8c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	4013      	ands	r3, r2
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2301      	moveq	r3, #1
 8006a7e:	2300      	movne	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d1a3      	bne.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006aa2:	e057      	b.n	8006b54 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006aaa:	d106      	bne.n	8006aba <SPI_WaitFifoStateUntilTimeout+0x26>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d103      	bne.n	8006aba <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac0:	d048      	beq.n	8006b54 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006ac2:	f7fc fe65 	bl	8003790 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d902      	bls.n	8006ad8 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d13d      	bne.n	8006b54 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ae6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006af0:	d111      	bne.n	8006b16 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006afa:	d004      	beq.n	8006b06 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b04:	d107      	bne.n	8006b16 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b1e:	d10f      	bne.n	8006b40 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e008      	b.n	8006b66 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d19f      	bne.n	8006aa4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af02      	add	r7, sp, #8
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b82:	d111      	bne.n	8006ba8 <SPI_EndRxTransaction+0x3a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b8c:	d004      	beq.n	8006b98 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b96:	d107      	bne.n	8006ba8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff ff04 	bl	80069c0 <SPI_WaitFlagStateUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e023      	b.n	8006c16 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bd6:	d11d      	bne.n	8006c14 <SPI_EndRxTransaction+0xa6>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be0:	d004      	beq.n	8006bec <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bea:	d113      	bne.n	8006c14 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff ff4b 	bl	8006a94 <SPI_WaitFifoStateUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c08:	f043 0220 	orr.w	r2, r3, #32
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e000      	b.n	8006c16 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af02      	add	r7, sp, #8
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7ff ff2c 	bl	8006a94 <SPI_WaitFifoStateUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d007      	beq.n	8006c52 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c46:	f043 0220 	orr.w	r2, r3, #32
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e027      	b.n	8006ca2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2180      	movs	r1, #128	; 0x80
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f7ff feaf 	bl	80069c0 <SPI_WaitFlagStateUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6c:	f043 0220 	orr.w	r2, r3, #32
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e014      	b.n	8006ca2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff ff05 	bl	8006a94 <SPI_WaitFifoStateUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c94:	f043 0220 	orr.w	r2, r3, #32
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e000      	b.n	8006ca2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e01d      	b.n	8006cf8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d106      	bne.n	8006cd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7fc f917 	bl	8002f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f001 f827 	bl	8007d3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <HAL_TIM_Base_Start_IT+0x50>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d00b      	beq.n	8006d42 <HAL_TIM_Base_Start_IT+0x42>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d30:	d007      	beq.n	8006d42 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	00010007 	.word	0x00010007

08006d54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10f      	bne.n	8006d9c <HAL_TIM_Base_Stop_IT+0x48>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6a1a      	ldr	r2, [r3, #32]
 8006d82:	f240 4344 	movw	r3, #1092	; 0x444
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d107      	bne.n	8006d9c <HAL_TIM_Base_Stop_IT+0x48>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e01d      	b.n	8006df8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fc f9b3 	bl	800313c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f000 ffa7 	bl	8007d3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b0c      	cmp	r3, #12
 8006e0e:	d841      	bhi.n	8006e94 <HAL_TIM_PWM_Start_IT+0x94>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <HAL_TIM_PWM_Start_IT+0x18>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e4d 	.word	0x08006e4d
 8006e1c:	08006e95 	.word	0x08006e95
 8006e20:	08006e95 	.word	0x08006e95
 8006e24:	08006e95 	.word	0x08006e95
 8006e28:	08006e5f 	.word	0x08006e5f
 8006e2c:	08006e95 	.word	0x08006e95
 8006e30:	08006e95 	.word	0x08006e95
 8006e34:	08006e95 	.word	0x08006e95
 8006e38:	08006e71 	.word	0x08006e71
 8006e3c:	08006e95 	.word	0x08006e95
 8006e40:	08006e95 	.word	0x08006e95
 8006e44:	08006e95 	.word	0x08006e95
 8006e48:	08006e83 	.word	0x08006e83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0202 	orr.w	r2, r2, #2
 8006e5a:	60da      	str	r2, [r3, #12]
      break;
 8006e5c:	e01b      	b.n	8006e96 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0204 	orr.w	r2, r2, #4
 8006e6c:	60da      	str	r2, [r3, #12]
      break;
 8006e6e:	e012      	b.n	8006e96 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0208 	orr.w	r2, r2, #8
 8006e7e:	60da      	str	r2, [r3, #12]
      break;
 8006e80:	e009      	b.n	8006e96 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0210 	orr.w	r2, r2, #16
 8006e90:	60da      	str	r2, [r3, #12]
      break;
 8006e92:	e000      	b.n	8006e96 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8006e94:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f001 fc96 	bl	80087d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <HAL_TIM_PWM_Start_IT+0x108>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d004      	beq.n	8006eb8 <HAL_TIM_PWM_Start_IT+0xb8>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a16      	ldr	r2, [pc, #88]	; (8006f0c <HAL_TIM_PWM_Start_IT+0x10c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d101      	bne.n	8006ebc <HAL_TIM_PWM_Start_IT+0xbc>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <HAL_TIM_PWM_Start_IT+0xbe>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <HAL_TIM_PWM_Start_IT+0x110>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b06      	cmp	r3, #6
 8006ee2:	d00b      	beq.n	8006efc <HAL_TIM_PWM_Start_IT+0xfc>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eea:	d007      	beq.n	8006efc <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40010400 	.word	0x40010400
 8006f10:	00010007 	.word	0x00010007

08006f14 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b0c      	cmp	r3, #12
 8006f22:	d841      	bhi.n	8006fa8 <HAL_TIM_PWM_Stop_IT+0x94>
 8006f24:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <HAL_TIM_PWM_Stop_IT+0x18>)
 8006f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2a:	bf00      	nop
 8006f2c:	08006f61 	.word	0x08006f61
 8006f30:	08006fa9 	.word	0x08006fa9
 8006f34:	08006fa9 	.word	0x08006fa9
 8006f38:	08006fa9 	.word	0x08006fa9
 8006f3c:	08006f73 	.word	0x08006f73
 8006f40:	08006fa9 	.word	0x08006fa9
 8006f44:	08006fa9 	.word	0x08006fa9
 8006f48:	08006fa9 	.word	0x08006fa9
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006fa9 	.word	0x08006fa9
 8006f54:	08006fa9 	.word	0x08006fa9
 8006f58:	08006fa9 	.word	0x08006fa9
 8006f5c:	08006f97 	.word	0x08006f97
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0202 	bic.w	r2, r2, #2
 8006f6e:	60da      	str	r2, [r3, #12]
      break;
 8006f70:	e01b      	b.n	8006faa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0204 	bic.w	r2, r2, #4
 8006f80:	60da      	str	r2, [r3, #12]
      break;
 8006f82:	e012      	b.n	8006faa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0208 	bic.w	r2, r2, #8
 8006f92:	60da      	str	r2, [r3, #12]
      break;
 8006f94:	e009      	b.n	8006faa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0210 	bic.w	r2, r2, #16
 8006fa4:	60da      	str	r2, [r3, #12]
      break;
 8006fa6:	e000      	b.n	8006faa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8006fa8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 fc0c 	bl	80087d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a20      	ldr	r2, [pc, #128]	; (8007040 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIM_PWM_Stop_IT+0xb8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <HAL_TIM_PWM_Stop_IT+0x130>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIM_PWM_Stop_IT+0xbc>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <HAL_TIM_PWM_Stop_IT+0xbe>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d017      	beq.n	8007006 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a1a      	ldr	r2, [r3, #32]
 8006fdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6a1a      	ldr	r2, [r3, #32]
 8006fec:	f240 4344 	movw	r3, #1092	; 0x444
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d107      	bne.n	8007006 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007004:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007010:	4013      	ands	r3, r2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10f      	bne.n	8007036 <HAL_TIM_PWM_Stop_IT+0x122>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1a      	ldr	r2, [r3, #32]
 800701c:	f240 4344 	movw	r3, #1092	; 0x444
 8007020:	4013      	ands	r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d107      	bne.n	8007036 <HAL_TIM_PWM_Stop_IT+0x122>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3708      	adds	r7, #8
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	40010000 	.word	0x40010000
 8007044:	40010400 	.word	0x40010400

08007048 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e01d      	b.n	8007096 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fb ffe6 	bl	8003040 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f000 fe58 	bl	8007d3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d101      	bne.n	80070be <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80070ba:	2302      	movs	r3, #2
 80070bc:	e0e0      	b.n	8007280 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d10b      	bne.n	80070e2 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_TIM_IC_Start_DMA+0x3a>
 80070d0:	887b      	ldrh	r3, [r7, #2]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0d2      	b.n	8007280 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b0c      	cmp	r3, #12
 80070e6:	f200 80ad 	bhi.w	8007244 <HAL_TIM_IC_Start_DMA+0x1a4>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <HAL_TIM_IC_Start_DMA+0x50>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007125 	.word	0x08007125
 80070f4:	08007245 	.word	0x08007245
 80070f8:	08007245 	.word	0x08007245
 80070fc:	08007245 	.word	0x08007245
 8007100:	0800716d 	.word	0x0800716d
 8007104:	08007245 	.word	0x08007245
 8007108:	08007245 	.word	0x08007245
 800710c:	08007245 	.word	0x08007245
 8007110:	080071b5 	.word	0x080071b5
 8007114:	08007245 	.word	0x08007245
 8007118:	08007245 	.word	0x08007245
 800711c:	08007245 	.word	0x08007245
 8007120:	080071fd 	.word	0x080071fd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	4a57      	ldr	r2, [pc, #348]	; (8007288 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800712a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	4a56      	ldr	r2, [pc, #344]	; (800728c <HAL_TIM_IC_Start_DMA+0x1ec>)
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	4a55      	ldr	r2, [pc, #340]	; (8007290 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800713a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3334      	adds	r3, #52	; 0x34
 8007146:	4619      	mov	r1, r3
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	887b      	ldrh	r3, [r7, #2]
 800714c:	f7fd f91a 	bl	8004384 <HAL_DMA_Start_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e092      	b.n	8007280 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007168:	60da      	str	r2, [r3, #12]
      break;
 800716a:	e06c      	b.n	8007246 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	4a45      	ldr	r2, [pc, #276]	; (8007288 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8007172:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	4a44      	ldr	r2, [pc, #272]	; (800728c <HAL_TIM_IC_Start_DMA+0x1ec>)
 800717a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	4a43      	ldr	r2, [pc, #268]	; (8007290 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8007182:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3338      	adds	r3, #56	; 0x38
 800718e:	4619      	mov	r1, r3
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	887b      	ldrh	r3, [r7, #2]
 8007194:	f7fd f8f6 	bl	8004384 <HAL_DMA_Start_IT>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e06e      	b.n	8007280 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071b0:	60da      	str	r2, [r3, #12]
      break;
 80071b2:	e048      	b.n	8007246 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4a33      	ldr	r2, [pc, #204]	; (8007288 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80071ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	4a32      	ldr	r2, [pc, #200]	; (800728c <HAL_TIM_IC_Start_DMA+0x1ec>)
 80071c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	4a31      	ldr	r2, [pc, #196]	; (8007290 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80071ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	333c      	adds	r3, #60	; 0x3c
 80071d6:	4619      	mov	r1, r3
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	f7fd f8d2 	bl	8004384 <HAL_DMA_Start_IT>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e04a      	b.n	8007280 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071f8:	60da      	str	r2, [r3, #12]
      break;
 80071fa:	e024      	b.n	8007246 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	4a21      	ldr	r2, [pc, #132]	; (8007288 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8007202:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	4a20      	ldr	r2, [pc, #128]	; (800728c <HAL_TIM_IC_Start_DMA+0x1ec>)
 800720a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	4a1f      	ldr	r2, [pc, #124]	; (8007290 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8007212:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3340      	adds	r3, #64	; 0x40
 800721e:	4619      	mov	r1, r3
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	887b      	ldrh	r3, [r7, #2]
 8007224:	f7fd f8ae 	bl	8004384 <HAL_DMA_Start_IT>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e026      	b.n	8007280 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007240:	60da      	str	r2, [r3, #12]
      break;
 8007242:	e000      	b.n	8007246 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8007244:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2201      	movs	r2, #1
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fabe 	bl	80087d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689a      	ldr	r2, [r3, #8]
 800725a:	4b0e      	ldr	r3, [pc, #56]	; (8007294 <HAL_TIM_IC_Start_DMA+0x1f4>)
 800725c:	4013      	ands	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2b06      	cmp	r3, #6
 8007264:	d00b      	beq.n	800727e <HAL_TIM_IC_Start_DMA+0x1de>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726c:	d007      	beq.n	800727e <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f042 0201 	orr.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	08007c5d 	.word	0x08007c5d
 800728c:	08007ccd 	.word	0x08007ccd
 8007290:	08007c39 	.word	0x08007c39
 8007294:	00010007 	.word	0x00010007

08007298 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b0c      	cmp	r3, #12
 80072a6:	d855      	bhi.n	8007354 <HAL_TIM_IC_Stop_DMA+0xbc>
 80072a8:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <HAL_TIM_IC_Stop_DMA+0x18>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	08007355 	.word	0x08007355
 80072b8:	08007355 	.word	0x08007355
 80072bc:	08007355 	.word	0x08007355
 80072c0:	08007301 	.word	0x08007301
 80072c4:	08007355 	.word	0x08007355
 80072c8:	08007355 	.word	0x08007355
 80072cc:	08007355 	.word	0x08007355
 80072d0:	0800731d 	.word	0x0800731d
 80072d4:	08007355 	.word	0x08007355
 80072d8:	08007355 	.word	0x08007355
 80072dc:	08007355 	.word	0x08007355
 80072e0:	08007339 	.word	0x08007339
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fd f8a3 	bl	8004444 <HAL_DMA_Abort_IT>
      break;
 80072fe:	e02a      	b.n	8007356 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007314:	4618      	mov	r0, r3
 8007316:	f7fd f895 	bl	8004444 <HAL_DMA_Abort_IT>
      break;
 800731a:	e01c      	b.n	8007356 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800732a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	4618      	mov	r0, r3
 8007332:	f7fd f887 	bl	8004444 <HAL_DMA_Abort_IT>
      break;
 8007336:	e00e      	b.n	8007356 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007346:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	4618      	mov	r0, r3
 800734e:	f7fd f879 	bl	8004444 <HAL_DMA_Abort_IT>
      break;
 8007352:	e000      	b.n	8007356 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8007354:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f001 fa36 	bl	80087d0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6a1a      	ldr	r2, [r3, #32]
 800736a:	f241 1311 	movw	r3, #4369	; 0x1111
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10f      	bne.n	8007394 <HAL_TIM_IC_Stop_DMA+0xfc>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6a1a      	ldr	r2, [r3, #32]
 800737a:	f240 4344 	movw	r3, #1092	; 0x444
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d107      	bne.n	8007394 <HAL_TIM_IC_Stop_DMA+0xfc>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0201 	bic.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop

080073a8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e02d      	b.n	8007418 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f825 	bl	8007420 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f000 fca7 	bl	8007d3c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0208 	bic.w	r2, r2, #8
 80073fc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b02      	cmp	r3, #2
 8007448:	d122      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d11b      	bne.n	8007490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0202 	mvn.w	r2, #2
 8007460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fa fd02 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fba8 	bl	8007bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fbb9 	bl	8007bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b04      	cmp	r3, #4
 800749c:	d122      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d11b      	bne.n	80074e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0204 	mvn.w	r2, #4
 80074b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fa fcd8 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 80074d0:	e005      	b.n	80074de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fb7e 	bl	8007bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fb8f 	bl	8007bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f003 0308 	and.w	r3, r3, #8
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d122      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d11b      	bne.n	8007538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f06f 0208 	mvn.w	r2, #8
 8007508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fa fcae 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8007524:	e005      	b.n	8007532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fb54 	bl	8007bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fb65 	bl	8007bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d122      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b10      	cmp	r3, #16
 8007552:	d11b      	bne.n	800758c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0210 	mvn.w	r2, #16
 800755c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2208      	movs	r2, #8
 8007562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7fa fc84 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8007578:	e005      	b.n	8007586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fb2a 	bl	8007bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fb3b 	bl	8007bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10e      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d107      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0201 	mvn.w	r2, #1
 80075b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fa f950 	bl	8001858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c2:	2b80      	cmp	r3, #128	; 0x80
 80075c4:	d10e      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d0:	2b80      	cmp	r3, #128	; 0x80
 80075d2:	d107      	bne.n	80075e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 fa32 	bl	8008a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f2:	d10e      	bne.n	8007612 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fe:	2b80      	cmp	r3, #128	; 0x80
 8007600:	d107      	bne.n	8007612 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800760a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 fa25 	bl	8008a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d10e      	bne.n	800763e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	d107      	bne.n	800763e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fae9 	bl	8007c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b20      	cmp	r3, #32
 800764a:	d10e      	bne.n	800766a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b20      	cmp	r3, #32
 8007658:	d107      	bne.n	800766a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f06f 0220 	mvn.w	r2, #32
 8007662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f9e5 	bl	8008a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_TIM_IC_ConfigChannel+0x1a>
 8007688:	2302      	movs	r3, #2
 800768a:	e08a      	b.n	80077a2 <HAL_TIM_IC_ConfigChannel+0x130>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d11b      	bne.n	80076da <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6819      	ldr	r1, [r3, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f000 fec9 	bl	8008448 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 020c 	bic.w	r2, r2, #12
 80076c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6999      	ldr	r1, [r3, #24]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	619a      	str	r2, [r3, #24]
 80076d8:	e05a      	b.n	8007790 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d11c      	bne.n	800771a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6819      	ldr	r1, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f000 ff4d 	bl	800858e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007702:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6999      	ldr	r1, [r3, #24]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	021a      	lsls	r2, r3, #8
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	619a      	str	r2, [r3, #24]
 8007718:	e03a      	b.n	8007790 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b08      	cmp	r3, #8
 800771e:	d11b      	bne.n	8007758 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6819      	ldr	r1, [r3, #0]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	f000 ff9a 	bl	8008668 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69da      	ldr	r2, [r3, #28]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 020c 	bic.w	r2, r2, #12
 8007742:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69d9      	ldr	r1, [r3, #28]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	61da      	str	r2, [r3, #28]
 8007756:	e01b      	b.n	8007790 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f000 ffba 	bl	80086e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69da      	ldr	r2, [r3, #28]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800777a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	69d9      	ldr	r1, [r3, #28]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	021a      	lsls	r2, r3, #8
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e105      	b.n	80079d2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b14      	cmp	r3, #20
 80077da:	f200 80f0 	bhi.w	80079be <HAL_TIM_PWM_ConfigChannel+0x212>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007839 	.word	0x08007839
 80077e8:	080079bf 	.word	0x080079bf
 80077ec:	080079bf 	.word	0x080079bf
 80077f0:	080079bf 	.word	0x080079bf
 80077f4:	08007879 	.word	0x08007879
 80077f8:	080079bf 	.word	0x080079bf
 80077fc:	080079bf 	.word	0x080079bf
 8007800:	080079bf 	.word	0x080079bf
 8007804:	080078bb 	.word	0x080078bb
 8007808:	080079bf 	.word	0x080079bf
 800780c:	080079bf 	.word	0x080079bf
 8007810:	080079bf 	.word	0x080079bf
 8007814:	080078fb 	.word	0x080078fb
 8007818:	080079bf 	.word	0x080079bf
 800781c:	080079bf 	.word	0x080079bf
 8007820:	080079bf 	.word	0x080079bf
 8007824:	0800793d 	.word	0x0800793d
 8007828:	080079bf 	.word	0x080079bf
 800782c:	080079bf 	.word	0x080079bf
 8007830:	080079bf 	.word	0x080079bf
 8007834:	0800797d 	.word	0x0800797d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	4618      	mov	r0, r3
 8007840:	f000 fb1c 	bl	8007e7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0208 	orr.w	r2, r2, #8
 8007852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0204 	bic.w	r2, r2, #4
 8007862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6999      	ldr	r1, [r3, #24]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	619a      	str	r2, [r3, #24]
      break;
 8007876:	e0a3      	b.n	80079c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fb6e 	bl	8007f60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6999      	ldr	r1, [r3, #24]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	021a      	lsls	r2, r3, #8
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	619a      	str	r2, [r3, #24]
      break;
 80078b8:	e082      	b.n	80079c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68b9      	ldr	r1, [r7, #8]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fbc5 	bl	8008050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0208 	orr.w	r2, r2, #8
 80078d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69da      	ldr	r2, [r3, #28]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0204 	bic.w	r2, r2, #4
 80078e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69d9      	ldr	r1, [r3, #28]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	61da      	str	r2, [r3, #28]
      break;
 80078f8:	e062      	b.n	80079c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fc1b 	bl	800813c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69da      	ldr	r2, [r3, #28]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69d9      	ldr	r1, [r3, #28]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	021a      	lsls	r2, r3, #8
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	61da      	str	r2, [r3, #28]
      break;
 800793a:	e041      	b.n	80079c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	4618      	mov	r0, r3
 8007944:	f000 fc52 	bl	80081ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0208 	orr.w	r2, r2, #8
 8007956:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0204 	bic.w	r2, r2, #4
 8007966:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800797a:	e021      	b.n	80079c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fc84 	bl	8008290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	021a      	lsls	r2, r3, #8
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079bc:	e000      	b.n	80079c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80079be:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop

080079dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_TIM_ConfigClockSource+0x18>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e0a6      	b.n	8007b42 <HAL_TIM_ConfigClockSource+0x166>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4b4f      	ldr	r3, [pc, #316]	; (8007b4c <HAL_TIM_ConfigClockSource+0x170>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b40      	cmp	r3, #64	; 0x40
 8007a2a:	d067      	beq.n	8007afc <HAL_TIM_ConfigClockSource+0x120>
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	d80b      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x6c>
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d073      	beq.n	8007b1c <HAL_TIM_ConfigClockSource+0x140>
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d802      	bhi.n	8007a3e <HAL_TIM_ConfigClockSource+0x62>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d06f      	beq.n	8007b1c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007a3c:	e078      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d06c      	beq.n	8007b1c <HAL_TIM_ConfigClockSource+0x140>
 8007a42:	2b30      	cmp	r3, #48	; 0x30
 8007a44:	d06a      	beq.n	8007b1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007a46:	e073      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a48:	2b70      	cmp	r3, #112	; 0x70
 8007a4a:	d00d      	beq.n	8007a68 <HAL_TIM_ConfigClockSource+0x8c>
 8007a4c:	2b70      	cmp	r3, #112	; 0x70
 8007a4e:	d804      	bhi.n	8007a5a <HAL_TIM_ConfigClockSource+0x7e>
 8007a50:	2b50      	cmp	r3, #80	; 0x50
 8007a52:	d033      	beq.n	8007abc <HAL_TIM_ConfigClockSource+0xe0>
 8007a54:	2b60      	cmp	r3, #96	; 0x60
 8007a56:	d041      	beq.n	8007adc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007a58:	e06a      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	d066      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0x152>
 8007a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a64:	d017      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007a66:	e063      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	6899      	ldr	r1, [r3, #8]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685a      	ldr	r2, [r3, #4]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f000 fe8a 	bl	8008790 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	609a      	str	r2, [r3, #8]
      break;
 8007a94:	e04c      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6899      	ldr	r1, [r3, #8]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f000 fe73 	bl	8008790 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ab8:	609a      	str	r2, [r3, #8]
      break;
 8007aba:	e039      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	6859      	ldr	r1, [r3, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f000 fd31 	bl	8008530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2150      	movs	r1, #80	; 0x50
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fe40 	bl	800875a <TIM_ITRx_SetConfig>
      break;
 8007ada:	e029      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	6859      	ldr	r1, [r3, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f000 fd8d 	bl	8008608 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2160      	movs	r1, #96	; 0x60
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fe30 	bl	800875a <TIM_ITRx_SetConfig>
      break;
 8007afa:	e019      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	6859      	ldr	r1, [r3, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f000 fd11 	bl	8008530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2140      	movs	r1, #64	; 0x40
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fe20 	bl	800875a <TIM_ITRx_SetConfig>
      break;
 8007b1a:	e009      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4619      	mov	r1, r3
 8007b26:	4610      	mov	r0, r2
 8007b28:	f000 fe17 	bl	800875a <TIM_ITRx_SetConfig>
      break;
 8007b2c:	e000      	b.n	8007b30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	fffeff88 	.word	0xfffeff88

08007b50 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e031      	b.n	8007bcc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fbdc 	bl	8008338 <TIM_SlaveTimer_SetConfig>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e018      	b.n	8007bcc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bb8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff ffe8 	bl	8007c24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d103      	bne.n	8007c84 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	771a      	strb	r2, [r3, #28]
 8007c82:	e019      	b.n	8007cb8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d103      	bne.n	8007c96 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2202      	movs	r2, #2
 8007c92:	771a      	strb	r2, [r3, #28]
 8007c94:	e010      	b.n	8007cb8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d103      	bne.n	8007ca8 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	771a      	strb	r2, [r3, #28]
 8007ca6:	e007      	b.n	8007cb8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d102      	bne.n	8007cb8 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2208      	movs	r2, #8
 8007cb6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7fa f8e1 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	771a      	strb	r2, [r3, #28]
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d103      	bne.n	8007cf4 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	771a      	strb	r2, [r3, #28]
 8007cf2:	e019      	b.n	8007d28 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d103      	bne.n	8007d06 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2202      	movs	r2, #2
 8007d02:	771a      	strb	r2, [r3, #28]
 8007d04:	e010      	b.n	8007d28 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d103      	bne.n	8007d18 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2204      	movs	r2, #4
 8007d14:	771a      	strb	r2, [r3, #28]
 8007d16:	e007      	b.n	8007d28 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d102      	bne.n	8007d28 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2208      	movs	r2, #8
 8007d26:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f7ff ff5d 	bl	8007be8 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
}
 8007d34:	bf00      	nop
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a40      	ldr	r2, [pc, #256]	; (8007e50 <TIM_Base_SetConfig+0x114>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d013      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d5a:	d00f      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a3d      	ldr	r2, [pc, #244]	; (8007e54 <TIM_Base_SetConfig+0x118>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a3c      	ldr	r2, [pc, #240]	; (8007e58 <TIM_Base_SetConfig+0x11c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a3b      	ldr	r2, [pc, #236]	; (8007e5c <TIM_Base_SetConfig+0x120>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a3a      	ldr	r2, [pc, #232]	; (8007e60 <TIM_Base_SetConfig+0x124>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d108      	bne.n	8007d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2f      	ldr	r2, [pc, #188]	; (8007e50 <TIM_Base_SetConfig+0x114>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d02b      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9c:	d027      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a2c      	ldr	r2, [pc, #176]	; (8007e54 <TIM_Base_SetConfig+0x118>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d023      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2b      	ldr	r2, [pc, #172]	; (8007e58 <TIM_Base_SetConfig+0x11c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01f      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a2a      	ldr	r2, [pc, #168]	; (8007e5c <TIM_Base_SetConfig+0x120>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01b      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a29      	ldr	r2, [pc, #164]	; (8007e60 <TIM_Base_SetConfig+0x124>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d017      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a28      	ldr	r2, [pc, #160]	; (8007e64 <TIM_Base_SetConfig+0x128>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d013      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a27      	ldr	r2, [pc, #156]	; (8007e68 <TIM_Base_SetConfig+0x12c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00f      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a26      	ldr	r2, [pc, #152]	; (8007e6c <TIM_Base_SetConfig+0x130>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00b      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a25      	ldr	r2, [pc, #148]	; (8007e70 <TIM_Base_SetConfig+0x134>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d007      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a24      	ldr	r2, [pc, #144]	; (8007e74 <TIM_Base_SetConfig+0x138>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_Base_SetConfig+0xb2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a23      	ldr	r2, [pc, #140]	; (8007e78 <TIM_Base_SetConfig+0x13c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d108      	bne.n	8007e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <TIM_Base_SetConfig+0x114>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d003      	beq.n	8007e34 <TIM_Base_SetConfig+0xf8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a0c      	ldr	r2, [pc, #48]	; (8007e60 <TIM_Base_SetConfig+0x124>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d103      	bne.n	8007e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	615a      	str	r2, [r3, #20]
}
 8007e42:	bf00      	nop
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	40010000 	.word	0x40010000
 8007e54:	40000400 	.word	0x40000400
 8007e58:	40000800 	.word	0x40000800
 8007e5c:	40000c00 	.word	0x40000c00
 8007e60:	40010400 	.word	0x40010400
 8007e64:	40014000 	.word	0x40014000
 8007e68:	40014400 	.word	0x40014400
 8007e6c:	40014800 	.word	0x40014800
 8007e70:	40001800 	.word	0x40001800
 8007e74:	40001c00 	.word	0x40001c00
 8007e78:	40002000 	.word	0x40002000

08007e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	f023 0201 	bic.w	r2, r3, #1
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4b2b      	ldr	r3, [pc, #172]	; (8007f54 <TIM_OC1_SetConfig+0xd8>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 0303 	bic.w	r3, r3, #3
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f023 0302 	bic.w	r3, r3, #2
 8007ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a21      	ldr	r2, [pc, #132]	; (8007f58 <TIM_OC1_SetConfig+0xdc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d003      	beq.n	8007ee0 <TIM_OC1_SetConfig+0x64>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a20      	ldr	r2, [pc, #128]	; (8007f5c <TIM_OC1_SetConfig+0xe0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d10c      	bne.n	8007efa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f023 0308 	bic.w	r3, r3, #8
 8007ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f023 0304 	bic.w	r3, r3, #4
 8007ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a16      	ldr	r2, [pc, #88]	; (8007f58 <TIM_OC1_SetConfig+0xdc>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d003      	beq.n	8007f0a <TIM_OC1_SetConfig+0x8e>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a15      	ldr	r2, [pc, #84]	; (8007f5c <TIM_OC1_SetConfig+0xe0>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d111      	bne.n	8007f2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	693a      	ldr	r2, [r7, #16]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	621a      	str	r2, [r3, #32]
}
 8007f48:	bf00      	nop
 8007f4a:	371c      	adds	r7, #28
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	fffeff8f 	.word	0xfffeff8f
 8007f58:	40010000 	.word	0x40010000
 8007f5c:	40010400 	.word	0x40010400

08007f60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	f023 0210 	bic.w	r2, r3, #16
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4b2e      	ldr	r3, [pc, #184]	; (8008044 <TIM_OC2_SetConfig+0xe4>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	021b      	lsls	r3, r3, #8
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f023 0320 	bic.w	r3, r3, #32
 8007faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	011b      	lsls	r3, r3, #4
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a23      	ldr	r2, [pc, #140]	; (8008048 <TIM_OC2_SetConfig+0xe8>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d003      	beq.n	8007fc8 <TIM_OC2_SetConfig+0x68>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a22      	ldr	r2, [pc, #136]	; (800804c <TIM_OC2_SetConfig+0xec>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d10d      	bne.n	8007fe4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a18      	ldr	r2, [pc, #96]	; (8008048 <TIM_OC2_SetConfig+0xe8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_OC2_SetConfig+0x94>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a17      	ldr	r2, [pc, #92]	; (800804c <TIM_OC2_SetConfig+0xec>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d113      	bne.n	800801c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	621a      	str	r2, [r3, #32]
}
 8008036:	bf00      	nop
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	feff8fff 	.word	0xfeff8fff
 8008048:	40010000 	.word	0x40010000
 800804c:	40010400 	.word	0x40010400

08008050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <TIM_OC3_SetConfig+0xe0>)
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a22      	ldr	r2, [pc, #136]	; (8008134 <TIM_OC3_SetConfig+0xe4>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d003      	beq.n	80080b6 <TIM_OC3_SetConfig+0x66>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a21      	ldr	r2, [pc, #132]	; (8008138 <TIM_OC3_SetConfig+0xe8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d10d      	bne.n	80080d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a17      	ldr	r2, [pc, #92]	; (8008134 <TIM_OC3_SetConfig+0xe4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <TIM_OC3_SetConfig+0x92>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a16      	ldr	r2, [pc, #88]	; (8008138 <TIM_OC3_SetConfig+0xe8>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d113      	bne.n	800810a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	621a      	str	r2, [r3, #32]
}
 8008124:	bf00      	nop
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	fffeff8f 	.word	0xfffeff8f
 8008134:	40010000 	.word	0x40010000
 8008138:	40010400 	.word	0x40010400

0800813c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <TIM_OC4_SetConfig+0xa4>)
 8008168:	4013      	ands	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	031b      	lsls	r3, r3, #12
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a13      	ldr	r2, [pc, #76]	; (80081e4 <TIM_OC4_SetConfig+0xa8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d003      	beq.n	80081a4 <TIM_OC4_SetConfig+0x68>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a12      	ldr	r2, [pc, #72]	; (80081e8 <TIM_OC4_SetConfig+0xac>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d109      	bne.n	80081b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	019b      	lsls	r3, r3, #6
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	621a      	str	r2, [r3, #32]
}
 80081d2:	bf00      	nop
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	feff8fff 	.word	0xfeff8fff
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40010400 	.word	0x40010400

080081ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <TIM_OC5_SetConfig+0x98>)
 8008218:	4013      	ands	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800822c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	041b      	lsls	r3, r3, #16
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4313      	orrs	r3, r2
 8008238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a12      	ldr	r2, [pc, #72]	; (8008288 <TIM_OC5_SetConfig+0x9c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d003      	beq.n	800824a <TIM_OC5_SetConfig+0x5e>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a11      	ldr	r2, [pc, #68]	; (800828c <TIM_OC5_SetConfig+0xa0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d109      	bne.n	800825e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008250:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	621a      	str	r2, [r3, #32]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	fffeff8f 	.word	0xfffeff8f
 8008288:	40010000 	.word	0x40010000
 800828c:	40010400 	.word	0x40010400

08008290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	4b1c      	ldr	r3, [pc, #112]	; (800832c <TIM_OC6_SetConfig+0x9c>)
 80082bc:	4013      	ands	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	021b      	lsls	r3, r3, #8
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	051b      	lsls	r3, r3, #20
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a13      	ldr	r2, [pc, #76]	; (8008330 <TIM_OC6_SetConfig+0xa0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d003      	beq.n	80082f0 <TIM_OC6_SetConfig+0x60>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a12      	ldr	r2, [pc, #72]	; (8008334 <TIM_OC6_SetConfig+0xa4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d109      	bne.n	8008304 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	029b      	lsls	r3, r3, #10
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	4313      	orrs	r3, r2
 8008302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	621a      	str	r2, [r3, #32]
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	feff8fff 	.word	0xfeff8fff
 8008330:	40010000 	.word	0x40010000
 8008334:	40010400 	.word	0x40010400

08008338 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008350:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4313      	orrs	r3, r2
 800835a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4b39      	ldr	r3, [pc, #228]	; (8008444 <TIM_SlaveTimer_SetConfig+0x10c>)
 8008360:	4013      	ands	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b30      	cmp	r3, #48	; 0x30
 800837c:	d05c      	beq.n	8008438 <TIM_SlaveTimer_SetConfig+0x100>
 800837e:	2b30      	cmp	r3, #48	; 0x30
 8008380:	d806      	bhi.n	8008390 <TIM_SlaveTimer_SetConfig+0x58>
 8008382:	2b10      	cmp	r3, #16
 8008384:	d058      	beq.n	8008438 <TIM_SlaveTimer_SetConfig+0x100>
 8008386:	2b20      	cmp	r3, #32
 8008388:	d056      	beq.n	8008438 <TIM_SlaveTimer_SetConfig+0x100>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d054      	beq.n	8008438 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800838e:	e054      	b.n	800843a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008390:	2b50      	cmp	r3, #80	; 0x50
 8008392:	d03d      	beq.n	8008410 <TIM_SlaveTimer_SetConfig+0xd8>
 8008394:	2b50      	cmp	r3, #80	; 0x50
 8008396:	d802      	bhi.n	800839e <TIM_SlaveTimer_SetConfig+0x66>
 8008398:	2b40      	cmp	r3, #64	; 0x40
 800839a:	d010      	beq.n	80083be <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800839c:	e04d      	b.n	800843a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800839e:	2b60      	cmp	r3, #96	; 0x60
 80083a0:	d040      	beq.n	8008424 <TIM_SlaveTimer_SetConfig+0xec>
 80083a2:	2b70      	cmp	r3, #112	; 0x70
 80083a4:	d000      	beq.n	80083a8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80083a6:	e048      	b.n	800843a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6818      	ldr	r0, [r3, #0]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68d9      	ldr	r1, [r3, #12]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	f000 f9ea 	bl	8008790 <TIM_ETR_SetConfig>
      break;
 80083bc:	e03d      	b.n	800843a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b05      	cmp	r3, #5
 80083c4:	d101      	bne.n	80083ca <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e038      	b.n	800843c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6a1a      	ldr	r2, [r3, #32]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0201 	bic.w	r2, r2, #1
 80083e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083f0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	621a      	str	r2, [r3, #32]
      break;
 800840e:	e014      	b.n	800843a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	6899      	ldr	r1, [r3, #8]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	461a      	mov	r2, r3
 800841e:	f000 f887 	bl	8008530 <TIM_TI1_ConfigInputStage>
      break;
 8008422:	e00a      	b.n	800843a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	6899      	ldr	r1, [r3, #8]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	461a      	mov	r2, r3
 8008432:	f000 f8e9 	bl	8008608 <TIM_TI2_ConfigInputStage>
      break;
 8008436:	e000      	b.n	800843a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008438:	bf00      	nop
  }
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3718      	adds	r7, #24
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	fffefff8 	.word	0xfffefff8

08008448 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f023 0201 	bic.w	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4a28      	ldr	r2, [pc, #160]	; (8008514 <TIM_TI1_SetConfig+0xcc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d01b      	beq.n	80084ae <TIM_TI1_SetConfig+0x66>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847c:	d017      	beq.n	80084ae <TIM_TI1_SetConfig+0x66>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4a25      	ldr	r2, [pc, #148]	; (8008518 <TIM_TI1_SetConfig+0xd0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <TIM_TI1_SetConfig+0x66>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4a24      	ldr	r2, [pc, #144]	; (800851c <TIM_TI1_SetConfig+0xd4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00f      	beq.n	80084ae <TIM_TI1_SetConfig+0x66>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4a23      	ldr	r2, [pc, #140]	; (8008520 <TIM_TI1_SetConfig+0xd8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00b      	beq.n	80084ae <TIM_TI1_SetConfig+0x66>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4a22      	ldr	r2, [pc, #136]	; (8008524 <TIM_TI1_SetConfig+0xdc>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d007      	beq.n	80084ae <TIM_TI1_SetConfig+0x66>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	4a21      	ldr	r2, [pc, #132]	; (8008528 <TIM_TI1_SetConfig+0xe0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d003      	beq.n	80084ae <TIM_TI1_SetConfig+0x66>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4a20      	ldr	r2, [pc, #128]	; (800852c <TIM_TI1_SetConfig+0xe4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d101      	bne.n	80084b2 <TIM_TI1_SetConfig+0x6a>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <TIM_TI1_SetConfig+0x6c>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d008      	beq.n	80084ca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f023 0303 	bic.w	r3, r3, #3
 80084be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	e003      	b.n	80084d2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f043 0301 	orr.w	r3, r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	011b      	lsls	r3, r3, #4
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f023 030a 	bic.w	r3, r3, #10
 80084ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f003 030a 	and.w	r3, r3, #10
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40010000 	.word	0x40010000
 8008518:	40000400 	.word	0x40000400
 800851c:	40000800 	.word	0x40000800
 8008520:	40000c00 	.word	0x40000c00
 8008524:	40010400 	.word	0x40010400
 8008528:	40014000 	.word	0x40014000
 800852c:	40001800 	.word	0x40001800

08008530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f023 0201 	bic.w	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800855a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f023 030a 	bic.w	r3, r3, #10
 800856c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	621a      	str	r2, [r3, #32]
}
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800858e:	b480      	push	{r7}
 8008590:	b087      	sub	sp, #28
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	f023 0210 	bic.w	r2, r3, #16
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	031b      	lsls	r3, r3, #12
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	621a      	str	r2, [r3, #32]
}
 80085fc:	bf00      	nop
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	f023 0210 	bic.w	r2, r3, #16
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008632:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	031b      	lsls	r3, r3, #12
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008644:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	4313      	orrs	r3, r2
 800864e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	621a      	str	r2, [r3, #32]
}
 800865c:	bf00      	nop
 800865e:	371c      	adds	r7, #28
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f023 0303 	bic.w	r3, r3, #3
 8008694:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4313      	orrs	r3, r2
 800869c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80086b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	021b      	lsls	r3, r3, #8
 80086be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	621a      	str	r2, [r3, #32]
}
 80086d4:	bf00      	nop
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800870c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	4313      	orrs	r3, r2
 8008716:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800871e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	031b      	lsls	r3, r3, #12
 8008724:	b29b      	uxth	r3, r3
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008732:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	031b      	lsls	r3, r3, #12
 8008738:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4313      	orrs	r3, r2
 8008740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	621a      	str	r2, [r3, #32]
}
 800874e:	bf00      	nop
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	f043 0307 	orr.w	r3, r3, #7
 800877c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	609a      	str	r2, [r3, #8]
}
 8008784:	bf00      	nop
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	021a      	lsls	r2, r3, #8
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	609a      	str	r2, [r3, #8]
}
 80087c4:	bf00      	nop
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f003 031f 	and.w	r3, r3, #31
 80087e2:	2201      	movs	r2, #1
 80087e4:	fa02 f303 	lsl.w	r3, r2, r3
 80087e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a1a      	ldr	r2, [r3, #32]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	43db      	mvns	r3, r3
 80087f2:	401a      	ands	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a1a      	ldr	r2, [r3, #32]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f003 031f 	and.w	r3, r3, #31
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	fa01 f303 	lsl.w	r3, r1, r3
 8008808:	431a      	orrs	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	621a      	str	r2, [r3, #32]
}
 800880e:	bf00      	nop
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
	...

0800881c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008830:	2302      	movs	r3, #2
 8008832:	e06d      	b.n	8008910 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a30      	ldr	r2, [pc, #192]	; (800891c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d004      	beq.n	8008868 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2f      	ldr	r2, [pc, #188]	; (8008920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d108      	bne.n	800887a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800886e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	4313      	orrs	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008880:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	4313      	orrs	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a20      	ldr	r2, [pc, #128]	; (800891c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d022      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a6:	d01d      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a1d      	ldr	r2, [pc, #116]	; (8008924 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d018      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a1c      	ldr	r2, [pc, #112]	; (8008928 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d013      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1a      	ldr	r2, [pc, #104]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00e      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a15      	ldr	r2, [pc, #84]	; (8008920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d009      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a16      	ldr	r2, [pc, #88]	; (8008930 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d004      	beq.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a15      	ldr	r2, [pc, #84]	; (8008934 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d10c      	bne.n	80088fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	40010000 	.word	0x40010000
 8008920:	40010400 	.word	0x40010400
 8008924:	40000400 	.word	0x40000400
 8008928:	40000800 	.word	0x40000800
 800892c:	40000c00 	.word	0x40000c00
 8008930:	40014000 	.word	0x40014000
 8008934:	40001800 	.word	0x40001800

08008938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800894c:	2b01      	cmp	r3, #1
 800894e:	d101      	bne.n	8008954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008950:	2302      	movs	r3, #2
 8008952:	e065      	b.n	8008a20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	4313      	orrs	r3, r2
 8008968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	4313      	orrs	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4313      	orrs	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	4313      	orrs	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	041b      	lsls	r3, r3, #16
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a16      	ldr	r2, [pc, #88]	; (8008a2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d004      	beq.n	80089e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a14      	ldr	r2, [pc, #80]	; (8008a30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d115      	bne.n	8008a0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	051b      	lsls	r3, r3, #20
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40010400 	.word	0x40010400

08008a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e040      	b.n	8008b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7fa fc24 	bl	80032e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2224      	movs	r2, #36	; 0x24
 8008a9c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 0201 	bic.w	r2, r2, #1
 8008aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fac4 	bl	800903c <UART_SetConfig>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d101      	bne.n	8008abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e022      	b.n	8008b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fd62 	bl	8009590 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0201 	orr.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fde9 	bl	80096d4 <UART_CheckIdleState>
 8008b02:	4603      	mov	r3, r0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08a      	sub	sp, #40	; 0x28
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d17f      	bne.n	8008c24 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_UART_Transmit+0x24>
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e078      	b.n	8008c26 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <HAL_UART_Transmit+0x36>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e071      	b.n	8008c26 <HAL_UART_Transmit+0x11a>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2221      	movs	r2, #33	; 0x21
 8008b54:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008b56:	f7fa fe1b 	bl	8003790 <HAL_GetTick>
 8008b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	88fa      	ldrh	r2, [r7, #6]
 8008b60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b74:	d108      	bne.n	8008b88 <HAL_UART_Transmit+0x7c>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d104      	bne.n	8008b88 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	61bb      	str	r3, [r7, #24]
 8008b86:	e003      	b.n	8008b90 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008b98:	e02c      	b.n	8008bf4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2180      	movs	r1, #128	; 0x80
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fdda 	bl	800975e <UART_WaitOnFlagUntilTimeout>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e038      	b.n	8008c26 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	3302      	adds	r3, #2
 8008bce:	61bb      	str	r3, [r7, #24]
 8008bd0:	e007      	b.n	8008be2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	3301      	adds	r3, #1
 8008be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1cc      	bne.n	8008b9a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2200      	movs	r2, #0
 8008c08:	2140      	movs	r1, #64	; 0x40
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fda7 	bl	800975e <UART_WaitOnFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e005      	b.n	8008c26 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	e000      	b.n	8008c26 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008c24:	2302      	movs	r3, #2
  }
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	f040 808a 	bne.w	8008d5c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <HAL_UART_Receive_IT+0x24>
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e082      	b.n	8008d5e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <HAL_UART_Receive_IT+0x36>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e07b      	b.n	8008d5e <HAL_UART_Receive_IT+0x12e>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	88fa      	ldrh	r2, [r7, #6]
 8008c78:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	88fa      	ldrh	r2, [r7, #6]
 8008c80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c92:	d10e      	bne.n	8008cb2 <HAL_UART_Receive_IT+0x82>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d105      	bne.n	8008ca8 <HAL_UART_Receive_IT+0x78>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008ca2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ca6:	e02d      	b.n	8008d04 <HAL_UART_Receive_IT+0xd4>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	22ff      	movs	r2, #255	; 0xff
 8008cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cb0:	e028      	b.n	8008d04 <HAL_UART_Receive_IT+0xd4>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10d      	bne.n	8008cd6 <HAL_UART_Receive_IT+0xa6>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d104      	bne.n	8008ccc <HAL_UART_Receive_IT+0x9c>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	22ff      	movs	r2, #255	; 0xff
 8008cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cca:	e01b      	b.n	8008d04 <HAL_UART_Receive_IT+0xd4>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	227f      	movs	r2, #127	; 0x7f
 8008cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cd4:	e016      	b.n	8008d04 <HAL_UART_Receive_IT+0xd4>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cde:	d10d      	bne.n	8008cfc <HAL_UART_Receive_IT+0xcc>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <HAL_UART_Receive_IT+0xc2>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	227f      	movs	r2, #127	; 0x7f
 8008cec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cf0:	e008      	b.n	8008d04 <HAL_UART_Receive_IT+0xd4>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	223f      	movs	r2, #63	; 0x3f
 8008cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cfa:	e003      	b.n	8008d04 <HAL_UART_Receive_IT+0xd4>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2222      	movs	r2, #34	; 0x22
 8008d0e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689a      	ldr	r2, [r3, #8]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d28:	d107      	bne.n	8008d3a <HAL_UART_Receive_IT+0x10a>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d103      	bne.n	8008d3a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <HAL_UART_Receive_IT+0x13c>)
 8008d36:	661a      	str	r2, [r3, #96]	; 0x60
 8008d38:	e002      	b.n	8008d40 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4a0c      	ldr	r2, [pc, #48]	; (8008d70 <HAL_UART_Receive_IT+0x140>)
 8008d3e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008d56:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e000      	b.n	8008d5e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008d5c:	2302      	movs	r3, #2
  }
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	08009999 	.word	0x08009999
 8008d70:	080098f3 	.word	0x080098f3

08008d74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d113      	bne.n	8008dcc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00e      	beq.n	8008dcc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d009      	beq.n	8008dcc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 8114 	beq.w	8008fea <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
      }
      return;
 8008dca:	e10e      	b.n	8008fea <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 80d6 	beq.w	8008f80 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d105      	bne.n	8008dea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 80cb 	beq.w	8008f80 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00e      	beq.n	8008e12 <HAL_UART_IRQHandler+0x9e>
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d009      	beq.n	8008e12 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2201      	movs	r2, #1
 8008e04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e0a:	f043 0201 	orr.w	r2, r3, #1
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00e      	beq.n	8008e3a <HAL_UART_IRQHandler+0xc6>
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d009      	beq.n	8008e3a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e32:	f043 0204 	orr.w	r2, r3, #4
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00e      	beq.n	8008e62 <HAL_UART_IRQHandler+0xee>
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2204      	movs	r2, #4
 8008e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e5a:	f043 0202 	orr.w	r2, r3, #2
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d013      	beq.n	8008e94 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f003 0320 	and.w	r3, r3, #32
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d104      	bne.n	8008e80 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d009      	beq.n	8008e94 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2208      	movs	r2, #8
 8008e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e8c:	f043 0208 	orr.w	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00f      	beq.n	8008ebe <HAL_UART_IRQHandler+0x14a>
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb6:	f043 0220 	orr.w	r2, r3, #32
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 8093 	beq.w	8008fee <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00c      	beq.n	8008eec <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	f003 0320 	and.w	r3, r3, #32
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ef0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008efc:	2b40      	cmp	r3, #64	; 0x40
 8008efe:	d004      	beq.n	8008f0a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d031      	beq.n	8008f6e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fca2 	bl	8009854 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1a:	2b40      	cmp	r3, #64	; 0x40
 8008f1c:	d123      	bne.n	8008f66 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f2c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d013      	beq.n	8008f5e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f3a:	4a30      	ldr	r2, [pc, #192]	; (8008ffc <HAL_UART_IRQHandler+0x288>)
 8008f3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fb fa7e 	bl	8004444 <HAL_DMA_Abort_IT>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d016      	beq.n	8008f7c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5c:	e00e      	b.n	8008f7c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f858 	bl	8009014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f64:	e00a      	b.n	8008f7c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f854 	bl	8009014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f6c:	e006      	b.n	8008f7c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f850 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008f7a:	e038      	b.n	8008fee <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f7c:	bf00      	nop
    return;
 8008f7e:	e036      	b.n	8008fee <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00d      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x232>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d008      	beq.n	8008fa6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f842 	bl	8009028 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fa4:	e026      	b.n	8008ff4 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00d      	beq.n	8008fcc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d008      	beq.n	8008fcc <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d017      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
    }
    return;
 8008fca:	e012      	b.n	8008ff2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00e      	beq.n	8008ff4 <HAL_UART_IRQHandler+0x280>
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc6d 	bl	80098c0 <UART_EndTransmit_IT>
    return;
 8008fe6:	bf00      	nop
 8008fe8:	e004      	b.n	8008ff4 <HAL_UART_IRQHandler+0x280>
      return;
 8008fea:	bf00      	nop
 8008fec:	e002      	b.n	8008ff4 <HAL_UART_IRQHandler+0x280>
    return;
 8008fee:	bf00      	nop
 8008ff0:	e000      	b.n	8008ff4 <HAL_UART_IRQHandler+0x280>
    return;
 8008ff2:	bf00      	nop
  }

}
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	08009895 	.word	0x08009895

08009000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b088      	sub	sp, #32
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009044:	2300      	movs	r3, #0
 8009046:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	431a      	orrs	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	4313      	orrs	r3, r2
 8009062:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	4bb1      	ldr	r3, [pc, #708]	; (8009330 <UART_SetConfig+0x2f4>)
 800906c:	4013      	ands	r3, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6812      	ldr	r2, [r2, #0]
 8009072:	6939      	ldr	r1, [r7, #16]
 8009074:	430b      	orrs	r3, r1
 8009076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68da      	ldr	r2, [r3, #12]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	4313      	orrs	r3, r2
 800909c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	430a      	orrs	r2, r1
 80090b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a9f      	ldr	r2, [pc, #636]	; (8009334 <UART_SetConfig+0x2f8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d121      	bne.n	8009100 <UART_SetConfig+0xc4>
 80090bc:	4b9e      	ldr	r3, [pc, #632]	; (8009338 <UART_SetConfig+0x2fc>)
 80090be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d816      	bhi.n	80090f8 <UART_SetConfig+0xbc>
 80090ca:	a201      	add	r2, pc, #4	; (adr r2, 80090d0 <UART_SetConfig+0x94>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	080090e1 	.word	0x080090e1
 80090d4:	080090ed 	.word	0x080090ed
 80090d8:	080090e7 	.word	0x080090e7
 80090dc:	080090f3 	.word	0x080090f3
 80090e0:	2301      	movs	r3, #1
 80090e2:	77fb      	strb	r3, [r7, #31]
 80090e4:	e151      	b.n	800938a <UART_SetConfig+0x34e>
 80090e6:	2302      	movs	r3, #2
 80090e8:	77fb      	strb	r3, [r7, #31]
 80090ea:	e14e      	b.n	800938a <UART_SetConfig+0x34e>
 80090ec:	2304      	movs	r3, #4
 80090ee:	77fb      	strb	r3, [r7, #31]
 80090f0:	e14b      	b.n	800938a <UART_SetConfig+0x34e>
 80090f2:	2308      	movs	r3, #8
 80090f4:	77fb      	strb	r3, [r7, #31]
 80090f6:	e148      	b.n	800938a <UART_SetConfig+0x34e>
 80090f8:	2310      	movs	r3, #16
 80090fa:	77fb      	strb	r3, [r7, #31]
 80090fc:	bf00      	nop
 80090fe:	e144      	b.n	800938a <UART_SetConfig+0x34e>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a8d      	ldr	r2, [pc, #564]	; (800933c <UART_SetConfig+0x300>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d134      	bne.n	8009174 <UART_SetConfig+0x138>
 800910a:	4b8b      	ldr	r3, [pc, #556]	; (8009338 <UART_SetConfig+0x2fc>)
 800910c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009110:	f003 030c 	and.w	r3, r3, #12
 8009114:	2b0c      	cmp	r3, #12
 8009116:	d829      	bhi.n	800916c <UART_SetConfig+0x130>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <UART_SetConfig+0xe4>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009155 	.word	0x08009155
 8009124:	0800916d 	.word	0x0800916d
 8009128:	0800916d 	.word	0x0800916d
 800912c:	0800916d 	.word	0x0800916d
 8009130:	08009161 	.word	0x08009161
 8009134:	0800916d 	.word	0x0800916d
 8009138:	0800916d 	.word	0x0800916d
 800913c:	0800916d 	.word	0x0800916d
 8009140:	0800915b 	.word	0x0800915b
 8009144:	0800916d 	.word	0x0800916d
 8009148:	0800916d 	.word	0x0800916d
 800914c:	0800916d 	.word	0x0800916d
 8009150:	08009167 	.word	0x08009167
 8009154:	2300      	movs	r3, #0
 8009156:	77fb      	strb	r3, [r7, #31]
 8009158:	e117      	b.n	800938a <UART_SetConfig+0x34e>
 800915a:	2302      	movs	r3, #2
 800915c:	77fb      	strb	r3, [r7, #31]
 800915e:	e114      	b.n	800938a <UART_SetConfig+0x34e>
 8009160:	2304      	movs	r3, #4
 8009162:	77fb      	strb	r3, [r7, #31]
 8009164:	e111      	b.n	800938a <UART_SetConfig+0x34e>
 8009166:	2308      	movs	r3, #8
 8009168:	77fb      	strb	r3, [r7, #31]
 800916a:	e10e      	b.n	800938a <UART_SetConfig+0x34e>
 800916c:	2310      	movs	r3, #16
 800916e:	77fb      	strb	r3, [r7, #31]
 8009170:	bf00      	nop
 8009172:	e10a      	b.n	800938a <UART_SetConfig+0x34e>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a71      	ldr	r2, [pc, #452]	; (8009340 <UART_SetConfig+0x304>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d120      	bne.n	80091c0 <UART_SetConfig+0x184>
 800917e:	4b6e      	ldr	r3, [pc, #440]	; (8009338 <UART_SetConfig+0x2fc>)
 8009180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009184:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009188:	2b10      	cmp	r3, #16
 800918a:	d00f      	beq.n	80091ac <UART_SetConfig+0x170>
 800918c:	2b10      	cmp	r3, #16
 800918e:	d802      	bhi.n	8009196 <UART_SetConfig+0x15a>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <UART_SetConfig+0x164>
 8009194:	e010      	b.n	80091b8 <UART_SetConfig+0x17c>
 8009196:	2b20      	cmp	r3, #32
 8009198:	d005      	beq.n	80091a6 <UART_SetConfig+0x16a>
 800919a:	2b30      	cmp	r3, #48	; 0x30
 800919c:	d009      	beq.n	80091b2 <UART_SetConfig+0x176>
 800919e:	e00b      	b.n	80091b8 <UART_SetConfig+0x17c>
 80091a0:	2300      	movs	r3, #0
 80091a2:	77fb      	strb	r3, [r7, #31]
 80091a4:	e0f1      	b.n	800938a <UART_SetConfig+0x34e>
 80091a6:	2302      	movs	r3, #2
 80091a8:	77fb      	strb	r3, [r7, #31]
 80091aa:	e0ee      	b.n	800938a <UART_SetConfig+0x34e>
 80091ac:	2304      	movs	r3, #4
 80091ae:	77fb      	strb	r3, [r7, #31]
 80091b0:	e0eb      	b.n	800938a <UART_SetConfig+0x34e>
 80091b2:	2308      	movs	r3, #8
 80091b4:	77fb      	strb	r3, [r7, #31]
 80091b6:	e0e8      	b.n	800938a <UART_SetConfig+0x34e>
 80091b8:	2310      	movs	r3, #16
 80091ba:	77fb      	strb	r3, [r7, #31]
 80091bc:	bf00      	nop
 80091be:	e0e4      	b.n	800938a <UART_SetConfig+0x34e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a5f      	ldr	r2, [pc, #380]	; (8009344 <UART_SetConfig+0x308>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d120      	bne.n	800920c <UART_SetConfig+0x1d0>
 80091ca:	4b5b      	ldr	r3, [pc, #364]	; (8009338 <UART_SetConfig+0x2fc>)
 80091cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091d4:	2b40      	cmp	r3, #64	; 0x40
 80091d6:	d00f      	beq.n	80091f8 <UART_SetConfig+0x1bc>
 80091d8:	2b40      	cmp	r3, #64	; 0x40
 80091da:	d802      	bhi.n	80091e2 <UART_SetConfig+0x1a6>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <UART_SetConfig+0x1b0>
 80091e0:	e010      	b.n	8009204 <UART_SetConfig+0x1c8>
 80091e2:	2b80      	cmp	r3, #128	; 0x80
 80091e4:	d005      	beq.n	80091f2 <UART_SetConfig+0x1b6>
 80091e6:	2bc0      	cmp	r3, #192	; 0xc0
 80091e8:	d009      	beq.n	80091fe <UART_SetConfig+0x1c2>
 80091ea:	e00b      	b.n	8009204 <UART_SetConfig+0x1c8>
 80091ec:	2300      	movs	r3, #0
 80091ee:	77fb      	strb	r3, [r7, #31]
 80091f0:	e0cb      	b.n	800938a <UART_SetConfig+0x34e>
 80091f2:	2302      	movs	r3, #2
 80091f4:	77fb      	strb	r3, [r7, #31]
 80091f6:	e0c8      	b.n	800938a <UART_SetConfig+0x34e>
 80091f8:	2304      	movs	r3, #4
 80091fa:	77fb      	strb	r3, [r7, #31]
 80091fc:	e0c5      	b.n	800938a <UART_SetConfig+0x34e>
 80091fe:	2308      	movs	r3, #8
 8009200:	77fb      	strb	r3, [r7, #31]
 8009202:	e0c2      	b.n	800938a <UART_SetConfig+0x34e>
 8009204:	2310      	movs	r3, #16
 8009206:	77fb      	strb	r3, [r7, #31]
 8009208:	bf00      	nop
 800920a:	e0be      	b.n	800938a <UART_SetConfig+0x34e>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a4d      	ldr	r2, [pc, #308]	; (8009348 <UART_SetConfig+0x30c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d124      	bne.n	8009260 <UART_SetConfig+0x224>
 8009216:	4b48      	ldr	r3, [pc, #288]	; (8009338 <UART_SetConfig+0x2fc>)
 8009218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800921c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009224:	d012      	beq.n	800924c <UART_SetConfig+0x210>
 8009226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800922a:	d802      	bhi.n	8009232 <UART_SetConfig+0x1f6>
 800922c:	2b00      	cmp	r3, #0
 800922e:	d007      	beq.n	8009240 <UART_SetConfig+0x204>
 8009230:	e012      	b.n	8009258 <UART_SetConfig+0x21c>
 8009232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009236:	d006      	beq.n	8009246 <UART_SetConfig+0x20a>
 8009238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800923c:	d009      	beq.n	8009252 <UART_SetConfig+0x216>
 800923e:	e00b      	b.n	8009258 <UART_SetConfig+0x21c>
 8009240:	2300      	movs	r3, #0
 8009242:	77fb      	strb	r3, [r7, #31]
 8009244:	e0a1      	b.n	800938a <UART_SetConfig+0x34e>
 8009246:	2302      	movs	r3, #2
 8009248:	77fb      	strb	r3, [r7, #31]
 800924a:	e09e      	b.n	800938a <UART_SetConfig+0x34e>
 800924c:	2304      	movs	r3, #4
 800924e:	77fb      	strb	r3, [r7, #31]
 8009250:	e09b      	b.n	800938a <UART_SetConfig+0x34e>
 8009252:	2308      	movs	r3, #8
 8009254:	77fb      	strb	r3, [r7, #31]
 8009256:	e098      	b.n	800938a <UART_SetConfig+0x34e>
 8009258:	2310      	movs	r3, #16
 800925a:	77fb      	strb	r3, [r7, #31]
 800925c:	bf00      	nop
 800925e:	e094      	b.n	800938a <UART_SetConfig+0x34e>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a39      	ldr	r2, [pc, #228]	; (800934c <UART_SetConfig+0x310>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d124      	bne.n	80092b4 <UART_SetConfig+0x278>
 800926a:	4b33      	ldr	r3, [pc, #204]	; (8009338 <UART_SetConfig+0x2fc>)
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009270:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009278:	d012      	beq.n	80092a0 <UART_SetConfig+0x264>
 800927a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800927e:	d802      	bhi.n	8009286 <UART_SetConfig+0x24a>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d007      	beq.n	8009294 <UART_SetConfig+0x258>
 8009284:	e012      	b.n	80092ac <UART_SetConfig+0x270>
 8009286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800928a:	d006      	beq.n	800929a <UART_SetConfig+0x25e>
 800928c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009290:	d009      	beq.n	80092a6 <UART_SetConfig+0x26a>
 8009292:	e00b      	b.n	80092ac <UART_SetConfig+0x270>
 8009294:	2301      	movs	r3, #1
 8009296:	77fb      	strb	r3, [r7, #31]
 8009298:	e077      	b.n	800938a <UART_SetConfig+0x34e>
 800929a:	2302      	movs	r3, #2
 800929c:	77fb      	strb	r3, [r7, #31]
 800929e:	e074      	b.n	800938a <UART_SetConfig+0x34e>
 80092a0:	2304      	movs	r3, #4
 80092a2:	77fb      	strb	r3, [r7, #31]
 80092a4:	e071      	b.n	800938a <UART_SetConfig+0x34e>
 80092a6:	2308      	movs	r3, #8
 80092a8:	77fb      	strb	r3, [r7, #31]
 80092aa:	e06e      	b.n	800938a <UART_SetConfig+0x34e>
 80092ac:	2310      	movs	r3, #16
 80092ae:	77fb      	strb	r3, [r7, #31]
 80092b0:	bf00      	nop
 80092b2:	e06a      	b.n	800938a <UART_SetConfig+0x34e>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a25      	ldr	r2, [pc, #148]	; (8009350 <UART_SetConfig+0x314>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d124      	bne.n	8009308 <UART_SetConfig+0x2cc>
 80092be:	4b1e      	ldr	r3, [pc, #120]	; (8009338 <UART_SetConfig+0x2fc>)
 80092c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80092c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092cc:	d012      	beq.n	80092f4 <UART_SetConfig+0x2b8>
 80092ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d2:	d802      	bhi.n	80092da <UART_SetConfig+0x29e>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d007      	beq.n	80092e8 <UART_SetConfig+0x2ac>
 80092d8:	e012      	b.n	8009300 <UART_SetConfig+0x2c4>
 80092da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092de:	d006      	beq.n	80092ee <UART_SetConfig+0x2b2>
 80092e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092e4:	d009      	beq.n	80092fa <UART_SetConfig+0x2be>
 80092e6:	e00b      	b.n	8009300 <UART_SetConfig+0x2c4>
 80092e8:	2300      	movs	r3, #0
 80092ea:	77fb      	strb	r3, [r7, #31]
 80092ec:	e04d      	b.n	800938a <UART_SetConfig+0x34e>
 80092ee:	2302      	movs	r3, #2
 80092f0:	77fb      	strb	r3, [r7, #31]
 80092f2:	e04a      	b.n	800938a <UART_SetConfig+0x34e>
 80092f4:	2304      	movs	r3, #4
 80092f6:	77fb      	strb	r3, [r7, #31]
 80092f8:	e047      	b.n	800938a <UART_SetConfig+0x34e>
 80092fa:	2308      	movs	r3, #8
 80092fc:	77fb      	strb	r3, [r7, #31]
 80092fe:	e044      	b.n	800938a <UART_SetConfig+0x34e>
 8009300:	2310      	movs	r3, #16
 8009302:	77fb      	strb	r3, [r7, #31]
 8009304:	bf00      	nop
 8009306:	e040      	b.n	800938a <UART_SetConfig+0x34e>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a11      	ldr	r2, [pc, #68]	; (8009354 <UART_SetConfig+0x318>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d139      	bne.n	8009386 <UART_SetConfig+0x34a>
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <UART_SetConfig+0x2fc>)
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800931c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009320:	d027      	beq.n	8009372 <UART_SetConfig+0x336>
 8009322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009326:	d817      	bhi.n	8009358 <UART_SetConfig+0x31c>
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01c      	beq.n	8009366 <UART_SetConfig+0x32a>
 800932c:	e027      	b.n	800937e <UART_SetConfig+0x342>
 800932e:	bf00      	nop
 8009330:	efff69f3 	.word	0xefff69f3
 8009334:	40011000 	.word	0x40011000
 8009338:	40023800 	.word	0x40023800
 800933c:	40004400 	.word	0x40004400
 8009340:	40004800 	.word	0x40004800
 8009344:	40004c00 	.word	0x40004c00
 8009348:	40005000 	.word	0x40005000
 800934c:	40011400 	.word	0x40011400
 8009350:	40007800 	.word	0x40007800
 8009354:	40007c00 	.word	0x40007c00
 8009358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935c:	d006      	beq.n	800936c <UART_SetConfig+0x330>
 800935e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009362:	d009      	beq.n	8009378 <UART_SetConfig+0x33c>
 8009364:	e00b      	b.n	800937e <UART_SetConfig+0x342>
 8009366:	2300      	movs	r3, #0
 8009368:	77fb      	strb	r3, [r7, #31]
 800936a:	e00e      	b.n	800938a <UART_SetConfig+0x34e>
 800936c:	2302      	movs	r3, #2
 800936e:	77fb      	strb	r3, [r7, #31]
 8009370:	e00b      	b.n	800938a <UART_SetConfig+0x34e>
 8009372:	2304      	movs	r3, #4
 8009374:	77fb      	strb	r3, [r7, #31]
 8009376:	e008      	b.n	800938a <UART_SetConfig+0x34e>
 8009378:	2308      	movs	r3, #8
 800937a:	77fb      	strb	r3, [r7, #31]
 800937c:	e005      	b.n	800938a <UART_SetConfig+0x34e>
 800937e:	2310      	movs	r3, #16
 8009380:	77fb      	strb	r3, [r7, #31]
 8009382:	bf00      	nop
 8009384:	e001      	b.n	800938a <UART_SetConfig+0x34e>
 8009386:	2310      	movs	r3, #16
 8009388:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009392:	d17f      	bne.n	8009494 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009394:	7ffb      	ldrb	r3, [r7, #31]
 8009396:	2b08      	cmp	r3, #8
 8009398:	d85c      	bhi.n	8009454 <UART_SetConfig+0x418>
 800939a:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <UART_SetConfig+0x364>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	080093c5 	.word	0x080093c5
 80093a4:	080093e5 	.word	0x080093e5
 80093a8:	08009405 	.word	0x08009405
 80093ac:	08009455 	.word	0x08009455
 80093b0:	0800941d 	.word	0x0800941d
 80093b4:	08009455 	.word	0x08009455
 80093b8:	08009455 	.word	0x08009455
 80093bc:	08009455 	.word	0x08009455
 80093c0:	0800943d 	.word	0x0800943d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093c4:	f7fc fa84 	bl	80058d0 <HAL_RCC_GetPCLK1Freq>
 80093c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	005a      	lsls	r2, r3, #1
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	441a      	add	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	fbb2 f3f3 	udiv	r3, r2, r3
 80093de:	b29b      	uxth	r3, r3
 80093e0:	61bb      	str	r3, [r7, #24]
        break;
 80093e2:	e03a      	b.n	800945a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093e4:	f7fc fa88 	bl	80058f8 <HAL_RCC_GetPCLK2Freq>
 80093e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	005a      	lsls	r2, r3, #1
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	085b      	lsrs	r3, r3, #1
 80093f4:	441a      	add	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fe:	b29b      	uxth	r3, r3
 8009400:	61bb      	str	r3, [r7, #24]
        break;
 8009402:	e02a      	b.n	800945a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	085a      	lsrs	r2, r3, #1
 800940a:	4b5f      	ldr	r3, [pc, #380]	; (8009588 <UART_SetConfig+0x54c>)
 800940c:	4413      	add	r3, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6852      	ldr	r2, [r2, #4]
 8009412:	fbb3 f3f2 	udiv	r3, r3, r2
 8009416:	b29b      	uxth	r3, r3
 8009418:	61bb      	str	r3, [r7, #24]
        break;
 800941a:	e01e      	b.n	800945a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800941c:	f7fc f99a 	bl	8005754 <HAL_RCC_GetSysClockFreq>
 8009420:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	005a      	lsls	r2, r3, #1
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	085b      	lsrs	r3, r3, #1
 800942c:	441a      	add	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	fbb2 f3f3 	udiv	r3, r2, r3
 8009436:	b29b      	uxth	r3, r3
 8009438:	61bb      	str	r3, [r7, #24]
        break;
 800943a:	e00e      	b.n	800945a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	085b      	lsrs	r3, r3, #1
 8009442:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	fbb2 f3f3 	udiv	r3, r2, r3
 800944e:	b29b      	uxth	r3, r3
 8009450:	61bb      	str	r3, [r7, #24]
        break;
 8009452:	e002      	b.n	800945a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	75fb      	strb	r3, [r7, #23]
        break;
 8009458:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	2b0f      	cmp	r3, #15
 800945e:	d916      	bls.n	800948e <UART_SetConfig+0x452>
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009466:	d212      	bcs.n	800948e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	b29b      	uxth	r3, r3
 800946c:	f023 030f 	bic.w	r3, r3, #15
 8009470:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	085b      	lsrs	r3, r3, #1
 8009476:	b29b      	uxth	r3, r3
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	b29a      	uxth	r2, r3
 800947e:	897b      	ldrh	r3, [r7, #10]
 8009480:	4313      	orrs	r3, r2
 8009482:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	897a      	ldrh	r2, [r7, #10]
 800948a:	60da      	str	r2, [r3, #12]
 800948c:	e070      	b.n	8009570 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	75fb      	strb	r3, [r7, #23]
 8009492:	e06d      	b.n	8009570 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009494:	7ffb      	ldrb	r3, [r7, #31]
 8009496:	2b08      	cmp	r3, #8
 8009498:	d859      	bhi.n	800954e <UART_SetConfig+0x512>
 800949a:	a201      	add	r2, pc, #4	; (adr r2, 80094a0 <UART_SetConfig+0x464>)
 800949c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a0:	080094c5 	.word	0x080094c5
 80094a4:	080094e3 	.word	0x080094e3
 80094a8:	08009501 	.word	0x08009501
 80094ac:	0800954f 	.word	0x0800954f
 80094b0:	08009519 	.word	0x08009519
 80094b4:	0800954f 	.word	0x0800954f
 80094b8:	0800954f 	.word	0x0800954f
 80094bc:	0800954f 	.word	0x0800954f
 80094c0:	08009537 	.word	0x08009537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094c4:	f7fc fa04 	bl	80058d0 <HAL_RCC_GetPCLK1Freq>
 80094c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	085a      	lsrs	r2, r3, #1
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	441a      	add	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094dc:	b29b      	uxth	r3, r3
 80094de:	61bb      	str	r3, [r7, #24]
        break;
 80094e0:	e038      	b.n	8009554 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094e2:	f7fc fa09 	bl	80058f8 <HAL_RCC_GetPCLK2Freq>
 80094e6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	085a      	lsrs	r2, r3, #1
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	441a      	add	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	61bb      	str	r3, [r7, #24]
        break;
 80094fe:	e029      	b.n	8009554 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	085a      	lsrs	r2, r3, #1
 8009506:	4b21      	ldr	r3, [pc, #132]	; (800958c <UART_SetConfig+0x550>)
 8009508:	4413      	add	r3, r2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	6852      	ldr	r2, [r2, #4]
 800950e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009512:	b29b      	uxth	r3, r3
 8009514:	61bb      	str	r3, [r7, #24]
        break;
 8009516:	e01d      	b.n	8009554 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009518:	f7fc f91c 	bl	8005754 <HAL_RCC_GetSysClockFreq>
 800951c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	085a      	lsrs	r2, r3, #1
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	441a      	add	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009530:	b29b      	uxth	r3, r3
 8009532:	61bb      	str	r3, [r7, #24]
        break;
 8009534:	e00e      	b.n	8009554 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	085b      	lsrs	r3, r3, #1
 800953c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	fbb2 f3f3 	udiv	r3, r2, r3
 8009548:	b29b      	uxth	r3, r3
 800954a:	61bb      	str	r3, [r7, #24]
        break;
 800954c:	e002      	b.n	8009554 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]
        break;
 8009552:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2b0f      	cmp	r3, #15
 8009558:	d908      	bls.n	800956c <UART_SetConfig+0x530>
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009560:	d204      	bcs.n	800956c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	60da      	str	r2, [r3, #12]
 800956a:	e001      	b.n	8009570 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800957c:	7dfb      	ldrb	r3, [r7, #23]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3720      	adds	r7, #32
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	01e84800 	.word	0x01e84800
 800958c:	00f42400 	.word	0x00f42400

08009590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00a      	beq.n	80095ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	430a      	orrs	r2, r1
 80095b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	f003 0302 	and.w	r3, r3, #2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00a      	beq.n	80095fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00a      	beq.n	8009642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00a      	beq.n	8009664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01a      	beq.n	80096a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800968e:	d10a      	bne.n	80096a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00a      	beq.n	80096c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	605a      	str	r2, [r3, #4]
  }
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af02      	add	r7, sp, #8
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80096e2:	f7fa f855 	bl	8003790 <HAL_GetTick>
 80096e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0308 	and.w	r3, r3, #8
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d10e      	bne.n	8009714 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f82a 	bl	800975e <UART_WaitOnFlagUntilTimeout>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	e020      	b.n	8009756 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0304 	and.w	r3, r3, #4
 800971e:	2b04      	cmp	r3, #4
 8009720:	d10e      	bne.n	8009740 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009722:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f814 	bl	800975e <UART_WaitOnFlagUntilTimeout>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e00a      	b.n	8009756 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2220      	movs	r2, #32
 8009744:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2220      	movs	r2, #32
 800974a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	4613      	mov	r3, r2
 800976c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800976e:	e05d      	b.n	800982c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009776:	d059      	beq.n	800982c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009778:	f7fa f80a 	bl	8003790 <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	69ba      	ldr	r2, [r7, #24]
 8009784:	429a      	cmp	r2, r3
 8009786:	d302      	bcc.n	800978e <UART_WaitOnFlagUntilTimeout+0x30>
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d11b      	bne.n	80097c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800979c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0201 	bic.w	r2, r2, #1
 80097ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2220      	movs	r2, #32
 80097b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2220      	movs	r2, #32
 80097b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e042      	b.n	800984c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d02b      	beq.n	800982c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e2:	d123      	bne.n	800982c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 0201 	bic.w	r2, r2, #1
 800980c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2220      	movs	r2, #32
 8009812:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2220      	movs	r2, #32
 8009818:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2220      	movs	r2, #32
 800981e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e00f      	b.n	800984c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	69da      	ldr	r2, [r3, #28]
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	4013      	ands	r3, r2
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	429a      	cmp	r2, r3
 800983a:	bf0c      	ite	eq
 800983c:	2301      	moveq	r3, #1
 800983e:	2300      	movne	r3, #0
 8009840:	b2db      	uxtb	r3, r3
 8009842:	461a      	mov	r2, r3
 8009844:	79fb      	ldrb	r3, [r7, #7]
 8009846:	429a      	cmp	r2, r3
 8009848:	d092      	beq.n	8009770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800986a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0201 	bic.w	r2, r2, #1
 800987a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f7ff fbae 	bl	8009014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b8:	bf00      	nop
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098d6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2220      	movs	r2, #32
 80098dc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff fb8b 	bl	8009000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009900:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009906:	2b22      	cmp	r3, #34	; 0x22
 8009908:	d13a      	bne.n	8009980 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009912:	89bb      	ldrh	r3, [r7, #12]
 8009914:	b2d9      	uxtb	r1, r3
 8009916:	89fb      	ldrh	r3, [r7, #14]
 8009918:	b2da      	uxtb	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991e:	400a      	ands	r2, r1
 8009920:	b2d2      	uxtb	r2, r2
 8009922:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009934:	b29b      	uxth	r3, r3
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009946:	b29b      	uxth	r3, r3
 8009948:	2b00      	cmp	r3, #0
 800994a:	d121      	bne.n	8009990 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800995a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689a      	ldr	r2, [r3, #8]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f022 0201 	bic.w	r2, r2, #1
 800996a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2220      	movs	r2, #32
 8009970:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7f8 faa3 	bl	8001ec4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800997e:	e007      	b.n	8009990 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699a      	ldr	r2, [r3, #24]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f042 0208 	orr.w	r2, r2, #8
 800998e:	619a      	str	r2, [r3, #24]
}
 8009990:	bf00      	nop
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099a6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ac:	2b22      	cmp	r3, #34	; 0x22
 80099ae:	d13a      	bne.n	8009a26 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099bc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80099be:	89ba      	ldrh	r2, [r7, #12]
 80099c0:	89fb      	ldrh	r3, [r7, #14]
 80099c2:	4013      	ands	r3, r2
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ce:	1c9a      	adds	r2, r3, #2
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3b01      	subs	r3, #1
 80099de:	b29a      	uxth	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d121      	bne.n	8009a36 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a00:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689a      	ldr	r2, [r3, #8]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0201 	bic.w	r2, r2, #1
 8009a10:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2220      	movs	r2, #32
 8009a16:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7f8 fa50 	bl	8001ec4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a24:	e007      	b.n	8009a36 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699a      	ldr	r2, [r3, #24]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0208 	orr.w	r2, r2, #8
 8009a34:	619a      	str	r2, [r3, #24]
}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <atoi>:
 8009a3e:	220a      	movs	r2, #10
 8009a40:	2100      	movs	r1, #0
 8009a42:	f000 b939 	b.w	8009cb8 <strtol>
	...

08009a48 <__errno>:
 8009a48:	4b01      	ldr	r3, [pc, #4]	; (8009a50 <__errno+0x8>)
 8009a4a:	6818      	ldr	r0, [r3, #0]
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	20000010 	.word	0x20000010

08009a54 <__libc_init_array>:
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	4e0d      	ldr	r6, [pc, #52]	; (8009a8c <__libc_init_array+0x38>)
 8009a58:	4c0d      	ldr	r4, [pc, #52]	; (8009a90 <__libc_init_array+0x3c>)
 8009a5a:	1ba4      	subs	r4, r4, r6
 8009a5c:	10a4      	asrs	r4, r4, #2
 8009a5e:	2500      	movs	r5, #0
 8009a60:	42a5      	cmp	r5, r4
 8009a62:	d109      	bne.n	8009a78 <__libc_init_array+0x24>
 8009a64:	4e0b      	ldr	r6, [pc, #44]	; (8009a94 <__libc_init_array+0x40>)
 8009a66:	4c0c      	ldr	r4, [pc, #48]	; (8009a98 <__libc_init_array+0x44>)
 8009a68:	f000 fd4e 	bl	800a508 <_init>
 8009a6c:	1ba4      	subs	r4, r4, r6
 8009a6e:	10a4      	asrs	r4, r4, #2
 8009a70:	2500      	movs	r5, #0
 8009a72:	42a5      	cmp	r5, r4
 8009a74:	d105      	bne.n	8009a82 <__libc_init_array+0x2e>
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a7c:	4798      	blx	r3
 8009a7e:	3501      	adds	r5, #1
 8009a80:	e7ee      	b.n	8009a60 <__libc_init_array+0xc>
 8009a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a86:	4798      	blx	r3
 8009a88:	3501      	adds	r5, #1
 8009a8a:	e7f2      	b.n	8009a72 <__libc_init_array+0x1e>
 8009a8c:	0800a7f0 	.word	0x0800a7f0
 8009a90:	0800a7f0 	.word	0x0800a7f0
 8009a94:	0800a7f0 	.word	0x0800a7f0
 8009a98:	0800a7f4 	.word	0x0800a7f4

08009a9c <memset>:
 8009a9c:	4402      	add	r2, r0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d100      	bne.n	8009aa6 <memset+0xa>
 8009aa4:	4770      	bx	lr
 8009aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aaa:	e7f9      	b.n	8009aa0 <memset+0x4>

08009aac <siprintf>:
 8009aac:	b40e      	push	{r1, r2, r3}
 8009aae:	b500      	push	{lr}
 8009ab0:	b09c      	sub	sp, #112	; 0x70
 8009ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8009ab4:	9002      	str	r0, [sp, #8]
 8009ab6:	9006      	str	r0, [sp, #24]
 8009ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009abc:	4809      	ldr	r0, [pc, #36]	; (8009ae4 <siprintf+0x38>)
 8009abe:	9107      	str	r1, [sp, #28]
 8009ac0:	9104      	str	r1, [sp, #16]
 8009ac2:	4909      	ldr	r1, [pc, #36]	; (8009ae8 <siprintf+0x3c>)
 8009ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac8:	9105      	str	r1, [sp, #20]
 8009aca:	6800      	ldr	r0, [r0, #0]
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	a902      	add	r1, sp, #8
 8009ad0:	f000 fa28 	bl	8009f24 <_svfiprintf_r>
 8009ad4:	9b02      	ldr	r3, [sp, #8]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
 8009ada:	b01c      	add	sp, #112	; 0x70
 8009adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae0:	b003      	add	sp, #12
 8009ae2:	4770      	bx	lr
 8009ae4:	20000010 	.word	0x20000010
 8009ae8:	ffff0208 	.word	0xffff0208

08009aec <strncpy>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	3901      	subs	r1, #1
 8009af0:	4604      	mov	r4, r0
 8009af2:	b902      	cbnz	r2, 8009af6 <strncpy+0xa>
 8009af4:	bd70      	pop	{r4, r5, r6, pc}
 8009af6:	4623      	mov	r3, r4
 8009af8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009afc:	f803 5b01 	strb.w	r5, [r3], #1
 8009b00:	1e56      	subs	r6, r2, #1
 8009b02:	b92d      	cbnz	r5, 8009b10 <strncpy+0x24>
 8009b04:	4414      	add	r4, r2
 8009b06:	42a3      	cmp	r3, r4
 8009b08:	d0f4      	beq.n	8009af4 <strncpy+0x8>
 8009b0a:	f803 5b01 	strb.w	r5, [r3], #1
 8009b0e:	e7fa      	b.n	8009b06 <strncpy+0x1a>
 8009b10:	461c      	mov	r4, r3
 8009b12:	4632      	mov	r2, r6
 8009b14:	e7ed      	b.n	8009af2 <strncpy+0x6>
	...

08009b18 <strtok>:
 8009b18:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <strtok+0x50>)
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	681d      	ldr	r5, [r3, #0]
 8009b20:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	b9b4      	cbnz	r4, 8009b56 <strtok+0x3e>
 8009b28:	2050      	movs	r0, #80	; 0x50
 8009b2a:	f000 f8df 	bl	8009cec <malloc>
 8009b2e:	65a8      	str	r0, [r5, #88]	; 0x58
 8009b30:	e9c0 4400 	strd	r4, r4, [r0]
 8009b34:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009b38:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009b3c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009b40:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009b44:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009b48:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009b4c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009b50:	6184      	str	r4, [r0, #24]
 8009b52:	7704      	strb	r4, [r0, #28]
 8009b54:	6244      	str	r4, [r0, #36]	; 0x24
 8009b56:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009b58:	4639      	mov	r1, r7
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b62:	f000 b803 	b.w	8009b6c <__strtok_r>
 8009b66:	bf00      	nop
 8009b68:	20000010 	.word	0x20000010

08009b6c <__strtok_r>:
 8009b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6e:	b918      	cbnz	r0, 8009b78 <__strtok_r+0xc>
 8009b70:	6810      	ldr	r0, [r2, #0]
 8009b72:	b908      	cbnz	r0, 8009b78 <__strtok_r+0xc>
 8009b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b76:	4620      	mov	r0, r4
 8009b78:	4604      	mov	r4, r0
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009b80:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009b84:	b91e      	cbnz	r6, 8009b8e <__strtok_r+0x22>
 8009b86:	b96d      	cbnz	r5, 8009ba4 <__strtok_r+0x38>
 8009b88:	6015      	str	r5, [r2, #0]
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	e7f2      	b.n	8009b74 <__strtok_r+0x8>
 8009b8e:	42b5      	cmp	r5, r6
 8009b90:	d1f6      	bne.n	8009b80 <__strtok_r+0x14>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1ef      	bne.n	8009b76 <__strtok_r+0xa>
 8009b96:	6014      	str	r4, [r2, #0]
 8009b98:	7003      	strb	r3, [r0, #0]
 8009b9a:	e7eb      	b.n	8009b74 <__strtok_r+0x8>
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	e00d      	b.n	8009bbc <__strtok_r+0x50>
 8009ba0:	b926      	cbnz	r6, 8009bac <__strtok_r+0x40>
 8009ba2:	461c      	mov	r4, r3
 8009ba4:	4623      	mov	r3, r4
 8009ba6:	460f      	mov	r7, r1
 8009ba8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009bac:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009bb0:	42b5      	cmp	r5, r6
 8009bb2:	d1f5      	bne.n	8009ba0 <__strtok_r+0x34>
 8009bb4:	2d00      	cmp	r5, #0
 8009bb6:	d0f1      	beq.n	8009b9c <__strtok_r+0x30>
 8009bb8:	2100      	movs	r1, #0
 8009bba:	7021      	strb	r1, [r4, #0]
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	e7d9      	b.n	8009b74 <__strtok_r+0x8>

08009bc0 <_strtol_l.isra.0>:
 8009bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	4689      	mov	r9, r1
 8009bc8:	4692      	mov	sl, r2
 8009bca:	461e      	mov	r6, r3
 8009bcc:	460f      	mov	r7, r1
 8009bce:	463d      	mov	r5, r7
 8009bd0:	9808      	ldr	r0, [sp, #32]
 8009bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bd6:	f000 f885 	bl	8009ce4 <__locale_ctype_ptr_l>
 8009bda:	4420      	add	r0, r4
 8009bdc:	7843      	ldrb	r3, [r0, #1]
 8009bde:	f013 0308 	ands.w	r3, r3, #8
 8009be2:	d132      	bne.n	8009c4a <_strtol_l.isra.0+0x8a>
 8009be4:	2c2d      	cmp	r4, #45	; 0x2d
 8009be6:	d132      	bne.n	8009c4e <_strtol_l.isra.0+0x8e>
 8009be8:	787c      	ldrb	r4, [r7, #1]
 8009bea:	1cbd      	adds	r5, r7, #2
 8009bec:	2201      	movs	r2, #1
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	d05d      	beq.n	8009cae <_strtol_l.isra.0+0xee>
 8009bf2:	2e10      	cmp	r6, #16
 8009bf4:	d109      	bne.n	8009c0a <_strtol_l.isra.0+0x4a>
 8009bf6:	2c30      	cmp	r4, #48	; 0x30
 8009bf8:	d107      	bne.n	8009c0a <_strtol_l.isra.0+0x4a>
 8009bfa:	782b      	ldrb	r3, [r5, #0]
 8009bfc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c00:	2b58      	cmp	r3, #88	; 0x58
 8009c02:	d14f      	bne.n	8009ca4 <_strtol_l.isra.0+0xe4>
 8009c04:	786c      	ldrb	r4, [r5, #1]
 8009c06:	2610      	movs	r6, #16
 8009c08:	3502      	adds	r5, #2
 8009c0a:	2a00      	cmp	r2, #0
 8009c0c:	bf14      	ite	ne
 8009c0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009c12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009c16:	2700      	movs	r7, #0
 8009c18:	fbb1 fcf6 	udiv	ip, r1, r6
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009c22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009c26:	2b09      	cmp	r3, #9
 8009c28:	d817      	bhi.n	8009c5a <_strtol_l.isra.0+0x9a>
 8009c2a:	461c      	mov	r4, r3
 8009c2c:	42a6      	cmp	r6, r4
 8009c2e:	dd23      	ble.n	8009c78 <_strtol_l.isra.0+0xb8>
 8009c30:	1c7b      	adds	r3, r7, #1
 8009c32:	d007      	beq.n	8009c44 <_strtol_l.isra.0+0x84>
 8009c34:	4584      	cmp	ip, r0
 8009c36:	d31c      	bcc.n	8009c72 <_strtol_l.isra.0+0xb2>
 8009c38:	d101      	bne.n	8009c3e <_strtol_l.isra.0+0x7e>
 8009c3a:	45a6      	cmp	lr, r4
 8009c3c:	db19      	blt.n	8009c72 <_strtol_l.isra.0+0xb2>
 8009c3e:	fb00 4006 	mla	r0, r0, r6, r4
 8009c42:	2701      	movs	r7, #1
 8009c44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c48:	e7eb      	b.n	8009c22 <_strtol_l.isra.0+0x62>
 8009c4a:	462f      	mov	r7, r5
 8009c4c:	e7bf      	b.n	8009bce <_strtol_l.isra.0+0xe>
 8009c4e:	2c2b      	cmp	r4, #43	; 0x2b
 8009c50:	bf04      	itt	eq
 8009c52:	1cbd      	addeq	r5, r7, #2
 8009c54:	787c      	ldrbeq	r4, [r7, #1]
 8009c56:	461a      	mov	r2, r3
 8009c58:	e7c9      	b.n	8009bee <_strtol_l.isra.0+0x2e>
 8009c5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009c5e:	2b19      	cmp	r3, #25
 8009c60:	d801      	bhi.n	8009c66 <_strtol_l.isra.0+0xa6>
 8009c62:	3c37      	subs	r4, #55	; 0x37
 8009c64:	e7e2      	b.n	8009c2c <_strtol_l.isra.0+0x6c>
 8009c66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009c6a:	2b19      	cmp	r3, #25
 8009c6c:	d804      	bhi.n	8009c78 <_strtol_l.isra.0+0xb8>
 8009c6e:	3c57      	subs	r4, #87	; 0x57
 8009c70:	e7dc      	b.n	8009c2c <_strtol_l.isra.0+0x6c>
 8009c72:	f04f 37ff 	mov.w	r7, #4294967295
 8009c76:	e7e5      	b.n	8009c44 <_strtol_l.isra.0+0x84>
 8009c78:	1c7b      	adds	r3, r7, #1
 8009c7a:	d108      	bne.n	8009c8e <_strtol_l.isra.0+0xce>
 8009c7c:	2322      	movs	r3, #34	; 0x22
 8009c7e:	f8c8 3000 	str.w	r3, [r8]
 8009c82:	4608      	mov	r0, r1
 8009c84:	f1ba 0f00 	cmp.w	sl, #0
 8009c88:	d107      	bne.n	8009c9a <_strtol_l.isra.0+0xda>
 8009c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8e:	b102      	cbz	r2, 8009c92 <_strtol_l.isra.0+0xd2>
 8009c90:	4240      	negs	r0, r0
 8009c92:	f1ba 0f00 	cmp.w	sl, #0
 8009c96:	d0f8      	beq.n	8009c8a <_strtol_l.isra.0+0xca>
 8009c98:	b10f      	cbz	r7, 8009c9e <_strtol_l.isra.0+0xde>
 8009c9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8009c9e:	f8ca 9000 	str.w	r9, [sl]
 8009ca2:	e7f2      	b.n	8009c8a <_strtol_l.isra.0+0xca>
 8009ca4:	2430      	movs	r4, #48	; 0x30
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	d1af      	bne.n	8009c0a <_strtol_l.isra.0+0x4a>
 8009caa:	2608      	movs	r6, #8
 8009cac:	e7ad      	b.n	8009c0a <_strtol_l.isra.0+0x4a>
 8009cae:	2c30      	cmp	r4, #48	; 0x30
 8009cb0:	d0a3      	beq.n	8009bfa <_strtol_l.isra.0+0x3a>
 8009cb2:	260a      	movs	r6, #10
 8009cb4:	e7a9      	b.n	8009c0a <_strtol_l.isra.0+0x4a>
	...

08009cb8 <strtol>:
 8009cb8:	4b08      	ldr	r3, [pc, #32]	; (8009cdc <strtol+0x24>)
 8009cba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cbc:	681c      	ldr	r4, [r3, #0]
 8009cbe:	4d08      	ldr	r5, [pc, #32]	; (8009ce0 <strtol+0x28>)
 8009cc0:	6a23      	ldr	r3, [r4, #32]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bf08      	it	eq
 8009cc6:	462b      	moveq	r3, r5
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	460a      	mov	r2, r1
 8009cce:	4601      	mov	r1, r0
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f7ff ff75 	bl	8009bc0 <_strtol_l.isra.0>
 8009cd6:	b003      	add	sp, #12
 8009cd8:	bd30      	pop	{r4, r5, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000010 	.word	0x20000010
 8009ce0:	20000074 	.word	0x20000074

08009ce4 <__locale_ctype_ptr_l>:
 8009ce4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009ce8:	4770      	bx	lr
	...

08009cec <malloc>:
 8009cec:	4b02      	ldr	r3, [pc, #8]	; (8009cf8 <malloc+0xc>)
 8009cee:	4601      	mov	r1, r0
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	f000 b863 	b.w	8009dbc <_malloc_r>
 8009cf6:	bf00      	nop
 8009cf8:	20000010 	.word	0x20000010

08009cfc <__ascii_mbtowc>:
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	b901      	cbnz	r1, 8009d02 <__ascii_mbtowc+0x6>
 8009d00:	a901      	add	r1, sp, #4
 8009d02:	b142      	cbz	r2, 8009d16 <__ascii_mbtowc+0x1a>
 8009d04:	b14b      	cbz	r3, 8009d1a <__ascii_mbtowc+0x1e>
 8009d06:	7813      	ldrb	r3, [r2, #0]
 8009d08:	600b      	str	r3, [r1, #0]
 8009d0a:	7812      	ldrb	r2, [r2, #0]
 8009d0c:	1c10      	adds	r0, r2, #0
 8009d0e:	bf18      	it	ne
 8009d10:	2001      	movne	r0, #1
 8009d12:	b002      	add	sp, #8
 8009d14:	4770      	bx	lr
 8009d16:	4610      	mov	r0, r2
 8009d18:	e7fb      	b.n	8009d12 <__ascii_mbtowc+0x16>
 8009d1a:	f06f 0001 	mvn.w	r0, #1
 8009d1e:	e7f8      	b.n	8009d12 <__ascii_mbtowc+0x16>

08009d20 <_free_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4605      	mov	r5, r0
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d045      	beq.n	8009db4 <_free_r+0x94>
 8009d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2c:	1f0c      	subs	r4, r1, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bfb8      	it	lt
 8009d32:	18e4      	addlt	r4, r4, r3
 8009d34:	f000 fbb7 	bl	800a4a6 <__malloc_lock>
 8009d38:	4a1f      	ldr	r2, [pc, #124]	; (8009db8 <_free_r+0x98>)
 8009d3a:	6813      	ldr	r3, [r2, #0]
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	b933      	cbnz	r3, 8009d4e <_free_r+0x2e>
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	6014      	str	r4, [r2, #0]
 8009d44:	4628      	mov	r0, r5
 8009d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d4a:	f000 bbad 	b.w	800a4a8 <__malloc_unlock>
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	d90c      	bls.n	8009d6c <_free_r+0x4c>
 8009d52:	6821      	ldr	r1, [r4, #0]
 8009d54:	1862      	adds	r2, r4, r1
 8009d56:	4293      	cmp	r3, r2
 8009d58:	bf04      	itt	eq
 8009d5a:	681a      	ldreq	r2, [r3, #0]
 8009d5c:	685b      	ldreq	r3, [r3, #4]
 8009d5e:	6063      	str	r3, [r4, #4]
 8009d60:	bf04      	itt	eq
 8009d62:	1852      	addeq	r2, r2, r1
 8009d64:	6022      	streq	r2, [r4, #0]
 8009d66:	6004      	str	r4, [r0, #0]
 8009d68:	e7ec      	b.n	8009d44 <_free_r+0x24>
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	b10a      	cbz	r2, 8009d74 <_free_r+0x54>
 8009d70:	42a2      	cmp	r2, r4
 8009d72:	d9fa      	bls.n	8009d6a <_free_r+0x4a>
 8009d74:	6819      	ldr	r1, [r3, #0]
 8009d76:	1858      	adds	r0, r3, r1
 8009d78:	42a0      	cmp	r0, r4
 8009d7a:	d10b      	bne.n	8009d94 <_free_r+0x74>
 8009d7c:	6820      	ldr	r0, [r4, #0]
 8009d7e:	4401      	add	r1, r0
 8009d80:	1858      	adds	r0, r3, r1
 8009d82:	4282      	cmp	r2, r0
 8009d84:	6019      	str	r1, [r3, #0]
 8009d86:	d1dd      	bne.n	8009d44 <_free_r+0x24>
 8009d88:	6810      	ldr	r0, [r2, #0]
 8009d8a:	6852      	ldr	r2, [r2, #4]
 8009d8c:	605a      	str	r2, [r3, #4]
 8009d8e:	4401      	add	r1, r0
 8009d90:	6019      	str	r1, [r3, #0]
 8009d92:	e7d7      	b.n	8009d44 <_free_r+0x24>
 8009d94:	d902      	bls.n	8009d9c <_free_r+0x7c>
 8009d96:	230c      	movs	r3, #12
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	e7d3      	b.n	8009d44 <_free_r+0x24>
 8009d9c:	6820      	ldr	r0, [r4, #0]
 8009d9e:	1821      	adds	r1, r4, r0
 8009da0:	428a      	cmp	r2, r1
 8009da2:	bf04      	itt	eq
 8009da4:	6811      	ldreq	r1, [r2, #0]
 8009da6:	6852      	ldreq	r2, [r2, #4]
 8009da8:	6062      	str	r2, [r4, #4]
 8009daa:	bf04      	itt	eq
 8009dac:	1809      	addeq	r1, r1, r0
 8009dae:	6021      	streq	r1, [r4, #0]
 8009db0:	605c      	str	r4, [r3, #4]
 8009db2:	e7c7      	b.n	8009d44 <_free_r+0x24>
 8009db4:	bd38      	pop	{r3, r4, r5, pc}
 8009db6:	bf00      	nop
 8009db8:	2000020c 	.word	0x2000020c

08009dbc <_malloc_r>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	1ccd      	adds	r5, r1, #3
 8009dc0:	f025 0503 	bic.w	r5, r5, #3
 8009dc4:	3508      	adds	r5, #8
 8009dc6:	2d0c      	cmp	r5, #12
 8009dc8:	bf38      	it	cc
 8009dca:	250c      	movcc	r5, #12
 8009dcc:	2d00      	cmp	r5, #0
 8009dce:	4606      	mov	r6, r0
 8009dd0:	db01      	blt.n	8009dd6 <_malloc_r+0x1a>
 8009dd2:	42a9      	cmp	r1, r5
 8009dd4:	d903      	bls.n	8009dde <_malloc_r+0x22>
 8009dd6:	230c      	movs	r3, #12
 8009dd8:	6033      	str	r3, [r6, #0]
 8009dda:	2000      	movs	r0, #0
 8009ddc:	bd70      	pop	{r4, r5, r6, pc}
 8009dde:	f000 fb62 	bl	800a4a6 <__malloc_lock>
 8009de2:	4a21      	ldr	r2, [pc, #132]	; (8009e68 <_malloc_r+0xac>)
 8009de4:	6814      	ldr	r4, [r2, #0]
 8009de6:	4621      	mov	r1, r4
 8009de8:	b991      	cbnz	r1, 8009e10 <_malloc_r+0x54>
 8009dea:	4c20      	ldr	r4, [pc, #128]	; (8009e6c <_malloc_r+0xb0>)
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	b91b      	cbnz	r3, 8009df8 <_malloc_r+0x3c>
 8009df0:	4630      	mov	r0, r6
 8009df2:	f000 fb17 	bl	800a424 <_sbrk_r>
 8009df6:	6020      	str	r0, [r4, #0]
 8009df8:	4629      	mov	r1, r5
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f000 fb12 	bl	800a424 <_sbrk_r>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d124      	bne.n	8009e4e <_malloc_r+0x92>
 8009e04:	230c      	movs	r3, #12
 8009e06:	6033      	str	r3, [r6, #0]
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f000 fb4d 	bl	800a4a8 <__malloc_unlock>
 8009e0e:	e7e4      	b.n	8009dda <_malloc_r+0x1e>
 8009e10:	680b      	ldr	r3, [r1, #0]
 8009e12:	1b5b      	subs	r3, r3, r5
 8009e14:	d418      	bmi.n	8009e48 <_malloc_r+0x8c>
 8009e16:	2b0b      	cmp	r3, #11
 8009e18:	d90f      	bls.n	8009e3a <_malloc_r+0x7e>
 8009e1a:	600b      	str	r3, [r1, #0]
 8009e1c:	50cd      	str	r5, [r1, r3]
 8009e1e:	18cc      	adds	r4, r1, r3
 8009e20:	4630      	mov	r0, r6
 8009e22:	f000 fb41 	bl	800a4a8 <__malloc_unlock>
 8009e26:	f104 000b 	add.w	r0, r4, #11
 8009e2a:	1d23      	adds	r3, r4, #4
 8009e2c:	f020 0007 	bic.w	r0, r0, #7
 8009e30:	1ac3      	subs	r3, r0, r3
 8009e32:	d0d3      	beq.n	8009ddc <_malloc_r+0x20>
 8009e34:	425a      	negs	r2, r3
 8009e36:	50e2      	str	r2, [r4, r3]
 8009e38:	e7d0      	b.n	8009ddc <_malloc_r+0x20>
 8009e3a:	428c      	cmp	r4, r1
 8009e3c:	684b      	ldr	r3, [r1, #4]
 8009e3e:	bf16      	itet	ne
 8009e40:	6063      	strne	r3, [r4, #4]
 8009e42:	6013      	streq	r3, [r2, #0]
 8009e44:	460c      	movne	r4, r1
 8009e46:	e7eb      	b.n	8009e20 <_malloc_r+0x64>
 8009e48:	460c      	mov	r4, r1
 8009e4a:	6849      	ldr	r1, [r1, #4]
 8009e4c:	e7cc      	b.n	8009de8 <_malloc_r+0x2c>
 8009e4e:	1cc4      	adds	r4, r0, #3
 8009e50:	f024 0403 	bic.w	r4, r4, #3
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d005      	beq.n	8009e64 <_malloc_r+0xa8>
 8009e58:	1a21      	subs	r1, r4, r0
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f000 fae2 	bl	800a424 <_sbrk_r>
 8009e60:	3001      	adds	r0, #1
 8009e62:	d0cf      	beq.n	8009e04 <_malloc_r+0x48>
 8009e64:	6025      	str	r5, [r4, #0]
 8009e66:	e7db      	b.n	8009e20 <_malloc_r+0x64>
 8009e68:	2000020c 	.word	0x2000020c
 8009e6c:	20000210 	.word	0x20000210

08009e70 <__ssputs_r>:
 8009e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	688e      	ldr	r6, [r1, #8]
 8009e76:	429e      	cmp	r6, r3
 8009e78:	4682      	mov	sl, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	4690      	mov	r8, r2
 8009e7e:	4699      	mov	r9, r3
 8009e80:	d837      	bhi.n	8009ef2 <__ssputs_r+0x82>
 8009e82:	898a      	ldrh	r2, [r1, #12]
 8009e84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e88:	d031      	beq.n	8009eee <__ssputs_r+0x7e>
 8009e8a:	6825      	ldr	r5, [r4, #0]
 8009e8c:	6909      	ldr	r1, [r1, #16]
 8009e8e:	1a6f      	subs	r7, r5, r1
 8009e90:	6965      	ldr	r5, [r4, #20]
 8009e92:	2302      	movs	r3, #2
 8009e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e98:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e9c:	f109 0301 	add.w	r3, r9, #1
 8009ea0:	443b      	add	r3, r7
 8009ea2:	429d      	cmp	r5, r3
 8009ea4:	bf38      	it	cc
 8009ea6:	461d      	movcc	r5, r3
 8009ea8:	0553      	lsls	r3, r2, #21
 8009eaa:	d530      	bpl.n	8009f0e <__ssputs_r+0x9e>
 8009eac:	4629      	mov	r1, r5
 8009eae:	f7ff ff85 	bl	8009dbc <_malloc_r>
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	b950      	cbnz	r0, 8009ecc <__ssputs_r+0x5c>
 8009eb6:	230c      	movs	r3, #12
 8009eb8:	f8ca 3000 	str.w	r3, [sl]
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ecc:	463a      	mov	r2, r7
 8009ece:	6921      	ldr	r1, [r4, #16]
 8009ed0:	f000 fac5 	bl	800a45e <memcpy>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	6126      	str	r6, [r4, #16]
 8009ee2:	6165      	str	r5, [r4, #20]
 8009ee4:	443e      	add	r6, r7
 8009ee6:	1bed      	subs	r5, r5, r7
 8009ee8:	6026      	str	r6, [r4, #0]
 8009eea:	60a5      	str	r5, [r4, #8]
 8009eec:	464e      	mov	r6, r9
 8009eee:	454e      	cmp	r6, r9
 8009ef0:	d900      	bls.n	8009ef4 <__ssputs_r+0x84>
 8009ef2:	464e      	mov	r6, r9
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	4641      	mov	r1, r8
 8009ef8:	6820      	ldr	r0, [r4, #0]
 8009efa:	f000 fabb 	bl	800a474 <memmove>
 8009efe:	68a3      	ldr	r3, [r4, #8]
 8009f00:	1b9b      	subs	r3, r3, r6
 8009f02:	60a3      	str	r3, [r4, #8]
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	441e      	add	r6, r3
 8009f08:	6026      	str	r6, [r4, #0]
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	e7dc      	b.n	8009ec8 <__ssputs_r+0x58>
 8009f0e:	462a      	mov	r2, r5
 8009f10:	f000 facb 	bl	800a4aa <_realloc_r>
 8009f14:	4606      	mov	r6, r0
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d1e2      	bne.n	8009ee0 <__ssputs_r+0x70>
 8009f1a:	6921      	ldr	r1, [r4, #16]
 8009f1c:	4650      	mov	r0, sl
 8009f1e:	f7ff feff 	bl	8009d20 <_free_r>
 8009f22:	e7c8      	b.n	8009eb6 <__ssputs_r+0x46>

08009f24 <_svfiprintf_r>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	461d      	mov	r5, r3
 8009f2a:	898b      	ldrh	r3, [r1, #12]
 8009f2c:	061f      	lsls	r7, r3, #24
 8009f2e:	b09d      	sub	sp, #116	; 0x74
 8009f30:	4680      	mov	r8, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	4616      	mov	r6, r2
 8009f36:	d50f      	bpl.n	8009f58 <_svfiprintf_r+0x34>
 8009f38:	690b      	ldr	r3, [r1, #16]
 8009f3a:	b96b      	cbnz	r3, 8009f58 <_svfiprintf_r+0x34>
 8009f3c:	2140      	movs	r1, #64	; 0x40
 8009f3e:	f7ff ff3d 	bl	8009dbc <_malloc_r>
 8009f42:	6020      	str	r0, [r4, #0]
 8009f44:	6120      	str	r0, [r4, #16]
 8009f46:	b928      	cbnz	r0, 8009f54 <_svfiprintf_r+0x30>
 8009f48:	230c      	movs	r3, #12
 8009f4a:	f8c8 3000 	str.w	r3, [r8]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f52:	e0c8      	b.n	800a0e6 <_svfiprintf_r+0x1c2>
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	6163      	str	r3, [r4, #20]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f62:	2330      	movs	r3, #48	; 0x30
 8009f64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f68:	9503      	str	r5, [sp, #12]
 8009f6a:	f04f 0b01 	mov.w	fp, #1
 8009f6e:	4637      	mov	r7, r6
 8009f70:	463d      	mov	r5, r7
 8009f72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f76:	b10b      	cbz	r3, 8009f7c <_svfiprintf_r+0x58>
 8009f78:	2b25      	cmp	r3, #37	; 0x25
 8009f7a:	d13e      	bne.n	8009ffa <_svfiprintf_r+0xd6>
 8009f7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f80:	d00b      	beq.n	8009f9a <_svfiprintf_r+0x76>
 8009f82:	4653      	mov	r3, sl
 8009f84:	4632      	mov	r2, r6
 8009f86:	4621      	mov	r1, r4
 8009f88:	4640      	mov	r0, r8
 8009f8a:	f7ff ff71 	bl	8009e70 <__ssputs_r>
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f000 80a4 	beq.w	800a0dc <_svfiprintf_r+0x1b8>
 8009f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f96:	4453      	add	r3, sl
 8009f98:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9a:	783b      	ldrb	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 809d 	beq.w	800a0dc <_svfiprintf_r+0x1b8>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fac:	9304      	str	r3, [sp, #16]
 8009fae:	9307      	str	r3, [sp, #28]
 8009fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009fb6:	462f      	mov	r7, r5
 8009fb8:	2205      	movs	r2, #5
 8009fba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009fbe:	4850      	ldr	r0, [pc, #320]	; (800a100 <_svfiprintf_r+0x1dc>)
 8009fc0:	f7f6 f956 	bl	8000270 <memchr>
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	b9d0      	cbnz	r0, 8009ffe <_svfiprintf_r+0xda>
 8009fc8:	06d9      	lsls	r1, r3, #27
 8009fca:	bf44      	itt	mi
 8009fcc:	2220      	movmi	r2, #32
 8009fce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fd2:	071a      	lsls	r2, r3, #28
 8009fd4:	bf44      	itt	mi
 8009fd6:	222b      	movmi	r2, #43	; 0x2b
 8009fd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fdc:	782a      	ldrb	r2, [r5, #0]
 8009fde:	2a2a      	cmp	r2, #42	; 0x2a
 8009fe0:	d015      	beq.n	800a00e <_svfiprintf_r+0xea>
 8009fe2:	9a07      	ldr	r2, [sp, #28]
 8009fe4:	462f      	mov	r7, r5
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	250a      	movs	r5, #10
 8009fea:	4639      	mov	r1, r7
 8009fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ff0:	3b30      	subs	r3, #48	; 0x30
 8009ff2:	2b09      	cmp	r3, #9
 8009ff4:	d94d      	bls.n	800a092 <_svfiprintf_r+0x16e>
 8009ff6:	b1b8      	cbz	r0, 800a028 <_svfiprintf_r+0x104>
 8009ff8:	e00f      	b.n	800a01a <_svfiprintf_r+0xf6>
 8009ffa:	462f      	mov	r7, r5
 8009ffc:	e7b8      	b.n	8009f70 <_svfiprintf_r+0x4c>
 8009ffe:	4a40      	ldr	r2, [pc, #256]	; (800a100 <_svfiprintf_r+0x1dc>)
 800a000:	1a80      	subs	r0, r0, r2
 800a002:	fa0b f000 	lsl.w	r0, fp, r0
 800a006:	4318      	orrs	r0, r3
 800a008:	9004      	str	r0, [sp, #16]
 800a00a:	463d      	mov	r5, r7
 800a00c:	e7d3      	b.n	8009fb6 <_svfiprintf_r+0x92>
 800a00e:	9a03      	ldr	r2, [sp, #12]
 800a010:	1d11      	adds	r1, r2, #4
 800a012:	6812      	ldr	r2, [r2, #0]
 800a014:	9103      	str	r1, [sp, #12]
 800a016:	2a00      	cmp	r2, #0
 800a018:	db01      	blt.n	800a01e <_svfiprintf_r+0xfa>
 800a01a:	9207      	str	r2, [sp, #28]
 800a01c:	e004      	b.n	800a028 <_svfiprintf_r+0x104>
 800a01e:	4252      	negs	r2, r2
 800a020:	f043 0302 	orr.w	r3, r3, #2
 800a024:	9207      	str	r2, [sp, #28]
 800a026:	9304      	str	r3, [sp, #16]
 800a028:	783b      	ldrb	r3, [r7, #0]
 800a02a:	2b2e      	cmp	r3, #46	; 0x2e
 800a02c:	d10c      	bne.n	800a048 <_svfiprintf_r+0x124>
 800a02e:	787b      	ldrb	r3, [r7, #1]
 800a030:	2b2a      	cmp	r3, #42	; 0x2a
 800a032:	d133      	bne.n	800a09c <_svfiprintf_r+0x178>
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	1d1a      	adds	r2, r3, #4
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	9203      	str	r2, [sp, #12]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	bfb8      	it	lt
 800a040:	f04f 33ff 	movlt.w	r3, #4294967295
 800a044:	3702      	adds	r7, #2
 800a046:	9305      	str	r3, [sp, #20]
 800a048:	4d2e      	ldr	r5, [pc, #184]	; (800a104 <_svfiprintf_r+0x1e0>)
 800a04a:	7839      	ldrb	r1, [r7, #0]
 800a04c:	2203      	movs	r2, #3
 800a04e:	4628      	mov	r0, r5
 800a050:	f7f6 f90e 	bl	8000270 <memchr>
 800a054:	b138      	cbz	r0, 800a066 <_svfiprintf_r+0x142>
 800a056:	2340      	movs	r3, #64	; 0x40
 800a058:	1b40      	subs	r0, r0, r5
 800a05a:	fa03 f000 	lsl.w	r0, r3, r0
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	4303      	orrs	r3, r0
 800a062:	3701      	adds	r7, #1
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	7839      	ldrb	r1, [r7, #0]
 800a068:	4827      	ldr	r0, [pc, #156]	; (800a108 <_svfiprintf_r+0x1e4>)
 800a06a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a06e:	2206      	movs	r2, #6
 800a070:	1c7e      	adds	r6, r7, #1
 800a072:	f7f6 f8fd 	bl	8000270 <memchr>
 800a076:	2800      	cmp	r0, #0
 800a078:	d038      	beq.n	800a0ec <_svfiprintf_r+0x1c8>
 800a07a:	4b24      	ldr	r3, [pc, #144]	; (800a10c <_svfiprintf_r+0x1e8>)
 800a07c:	bb13      	cbnz	r3, 800a0c4 <_svfiprintf_r+0x1a0>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	3307      	adds	r3, #7
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	3308      	adds	r3, #8
 800a088:	9303      	str	r3, [sp, #12]
 800a08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a08c:	444b      	add	r3, r9
 800a08e:	9309      	str	r3, [sp, #36]	; 0x24
 800a090:	e76d      	b.n	8009f6e <_svfiprintf_r+0x4a>
 800a092:	fb05 3202 	mla	r2, r5, r2, r3
 800a096:	2001      	movs	r0, #1
 800a098:	460f      	mov	r7, r1
 800a09a:	e7a6      	b.n	8009fea <_svfiprintf_r+0xc6>
 800a09c:	2300      	movs	r3, #0
 800a09e:	3701      	adds	r7, #1
 800a0a0:	9305      	str	r3, [sp, #20]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	250a      	movs	r5, #10
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ac:	3a30      	subs	r2, #48	; 0x30
 800a0ae:	2a09      	cmp	r2, #9
 800a0b0:	d903      	bls.n	800a0ba <_svfiprintf_r+0x196>
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0c8      	beq.n	800a048 <_svfiprintf_r+0x124>
 800a0b6:	9105      	str	r1, [sp, #20]
 800a0b8:	e7c6      	b.n	800a048 <_svfiprintf_r+0x124>
 800a0ba:	fb05 2101 	mla	r1, r5, r1, r2
 800a0be:	2301      	movs	r3, #1
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	e7f0      	b.n	800a0a6 <_svfiprintf_r+0x182>
 800a0c4:	ab03      	add	r3, sp, #12
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	4622      	mov	r2, r4
 800a0ca:	4b11      	ldr	r3, [pc, #68]	; (800a110 <_svfiprintf_r+0x1ec>)
 800a0cc:	a904      	add	r1, sp, #16
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	f3af 8000 	nop.w
 800a0d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0d8:	4681      	mov	r9, r0
 800a0da:	d1d6      	bne.n	800a08a <_svfiprintf_r+0x166>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	065b      	lsls	r3, r3, #25
 800a0e0:	f53f af35 	bmi.w	8009f4e <_svfiprintf_r+0x2a>
 800a0e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0e6:	b01d      	add	sp, #116	; 0x74
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ec:	ab03      	add	r3, sp, #12
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	4622      	mov	r2, r4
 800a0f2:	4b07      	ldr	r3, [pc, #28]	; (800a110 <_svfiprintf_r+0x1ec>)
 800a0f4:	a904      	add	r1, sp, #16
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f000 f882 	bl	800a200 <_printf_i>
 800a0fc:	e7ea      	b.n	800a0d4 <_svfiprintf_r+0x1b0>
 800a0fe:	bf00      	nop
 800a100:	0800a6b2 	.word	0x0800a6b2
 800a104:	0800a6b8 	.word	0x0800a6b8
 800a108:	0800a6bc 	.word	0x0800a6bc
 800a10c:	00000000 	.word	0x00000000
 800a110:	08009e71 	.word	0x08009e71

0800a114 <_printf_common>:
 800a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a118:	4691      	mov	r9, r2
 800a11a:	461f      	mov	r7, r3
 800a11c:	688a      	ldr	r2, [r1, #8]
 800a11e:	690b      	ldr	r3, [r1, #16]
 800a120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a124:	4293      	cmp	r3, r2
 800a126:	bfb8      	it	lt
 800a128:	4613      	movlt	r3, r2
 800a12a:	f8c9 3000 	str.w	r3, [r9]
 800a12e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a132:	4606      	mov	r6, r0
 800a134:	460c      	mov	r4, r1
 800a136:	b112      	cbz	r2, 800a13e <_printf_common+0x2a>
 800a138:	3301      	adds	r3, #1
 800a13a:	f8c9 3000 	str.w	r3, [r9]
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	0699      	lsls	r1, r3, #26
 800a142:	bf42      	ittt	mi
 800a144:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a148:	3302      	addmi	r3, #2
 800a14a:	f8c9 3000 	strmi.w	r3, [r9]
 800a14e:	6825      	ldr	r5, [r4, #0]
 800a150:	f015 0506 	ands.w	r5, r5, #6
 800a154:	d107      	bne.n	800a166 <_printf_common+0x52>
 800a156:	f104 0a19 	add.w	sl, r4, #25
 800a15a:	68e3      	ldr	r3, [r4, #12]
 800a15c:	f8d9 2000 	ldr.w	r2, [r9]
 800a160:	1a9b      	subs	r3, r3, r2
 800a162:	42ab      	cmp	r3, r5
 800a164:	dc28      	bgt.n	800a1b8 <_printf_common+0xa4>
 800a166:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a16a:	6822      	ldr	r2, [r4, #0]
 800a16c:	3300      	adds	r3, #0
 800a16e:	bf18      	it	ne
 800a170:	2301      	movne	r3, #1
 800a172:	0692      	lsls	r2, r2, #26
 800a174:	d42d      	bmi.n	800a1d2 <_printf_common+0xbe>
 800a176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a17a:	4639      	mov	r1, r7
 800a17c:	4630      	mov	r0, r6
 800a17e:	47c0      	blx	r8
 800a180:	3001      	adds	r0, #1
 800a182:	d020      	beq.n	800a1c6 <_printf_common+0xb2>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	68e5      	ldr	r5, [r4, #12]
 800a188:	f8d9 2000 	ldr.w	r2, [r9]
 800a18c:	f003 0306 	and.w	r3, r3, #6
 800a190:	2b04      	cmp	r3, #4
 800a192:	bf08      	it	eq
 800a194:	1aad      	subeq	r5, r5, r2
 800a196:	68a3      	ldr	r3, [r4, #8]
 800a198:	6922      	ldr	r2, [r4, #16]
 800a19a:	bf0c      	ite	eq
 800a19c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a0:	2500      	movne	r5, #0
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	bfc4      	itt	gt
 800a1a6:	1a9b      	subgt	r3, r3, r2
 800a1a8:	18ed      	addgt	r5, r5, r3
 800a1aa:	f04f 0900 	mov.w	r9, #0
 800a1ae:	341a      	adds	r4, #26
 800a1b0:	454d      	cmp	r5, r9
 800a1b2:	d11a      	bne.n	800a1ea <_printf_common+0xd6>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	e008      	b.n	800a1ca <_printf_common+0xb6>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	4652      	mov	r2, sl
 800a1bc:	4639      	mov	r1, r7
 800a1be:	4630      	mov	r0, r6
 800a1c0:	47c0      	blx	r8
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	d103      	bne.n	800a1ce <_printf_common+0xba>
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ce:	3501      	adds	r5, #1
 800a1d0:	e7c3      	b.n	800a15a <_printf_common+0x46>
 800a1d2:	18e1      	adds	r1, r4, r3
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	2030      	movs	r0, #48	; 0x30
 800a1d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1dc:	4422      	add	r2, r4
 800a1de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1e6:	3302      	adds	r3, #2
 800a1e8:	e7c5      	b.n	800a176 <_printf_common+0x62>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	4622      	mov	r2, r4
 800a1ee:	4639      	mov	r1, r7
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	47c0      	blx	r8
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d0e6      	beq.n	800a1c6 <_printf_common+0xb2>
 800a1f8:	f109 0901 	add.w	r9, r9, #1
 800a1fc:	e7d8      	b.n	800a1b0 <_printf_common+0x9c>
	...

0800a200 <_printf_i>:
 800a200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a204:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a208:	460c      	mov	r4, r1
 800a20a:	7e09      	ldrb	r1, [r1, #24]
 800a20c:	b085      	sub	sp, #20
 800a20e:	296e      	cmp	r1, #110	; 0x6e
 800a210:	4617      	mov	r7, r2
 800a212:	4606      	mov	r6, r0
 800a214:	4698      	mov	r8, r3
 800a216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a218:	f000 80b3 	beq.w	800a382 <_printf_i+0x182>
 800a21c:	d822      	bhi.n	800a264 <_printf_i+0x64>
 800a21e:	2963      	cmp	r1, #99	; 0x63
 800a220:	d036      	beq.n	800a290 <_printf_i+0x90>
 800a222:	d80a      	bhi.n	800a23a <_printf_i+0x3a>
 800a224:	2900      	cmp	r1, #0
 800a226:	f000 80b9 	beq.w	800a39c <_printf_i+0x19c>
 800a22a:	2958      	cmp	r1, #88	; 0x58
 800a22c:	f000 8083 	beq.w	800a336 <_printf_i+0x136>
 800a230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a234:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a238:	e032      	b.n	800a2a0 <_printf_i+0xa0>
 800a23a:	2964      	cmp	r1, #100	; 0x64
 800a23c:	d001      	beq.n	800a242 <_printf_i+0x42>
 800a23e:	2969      	cmp	r1, #105	; 0x69
 800a240:	d1f6      	bne.n	800a230 <_printf_i+0x30>
 800a242:	6820      	ldr	r0, [r4, #0]
 800a244:	6813      	ldr	r3, [r2, #0]
 800a246:	0605      	lsls	r5, r0, #24
 800a248:	f103 0104 	add.w	r1, r3, #4
 800a24c:	d52a      	bpl.n	800a2a4 <_printf_i+0xa4>
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6011      	str	r1, [r2, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	da03      	bge.n	800a25e <_printf_i+0x5e>
 800a256:	222d      	movs	r2, #45	; 0x2d
 800a258:	425b      	negs	r3, r3
 800a25a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a25e:	486f      	ldr	r0, [pc, #444]	; (800a41c <_printf_i+0x21c>)
 800a260:	220a      	movs	r2, #10
 800a262:	e039      	b.n	800a2d8 <_printf_i+0xd8>
 800a264:	2973      	cmp	r1, #115	; 0x73
 800a266:	f000 809d 	beq.w	800a3a4 <_printf_i+0x1a4>
 800a26a:	d808      	bhi.n	800a27e <_printf_i+0x7e>
 800a26c:	296f      	cmp	r1, #111	; 0x6f
 800a26e:	d020      	beq.n	800a2b2 <_printf_i+0xb2>
 800a270:	2970      	cmp	r1, #112	; 0x70
 800a272:	d1dd      	bne.n	800a230 <_printf_i+0x30>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	f043 0320 	orr.w	r3, r3, #32
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	e003      	b.n	800a286 <_printf_i+0x86>
 800a27e:	2975      	cmp	r1, #117	; 0x75
 800a280:	d017      	beq.n	800a2b2 <_printf_i+0xb2>
 800a282:	2978      	cmp	r1, #120	; 0x78
 800a284:	d1d4      	bne.n	800a230 <_printf_i+0x30>
 800a286:	2378      	movs	r3, #120	; 0x78
 800a288:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a28c:	4864      	ldr	r0, [pc, #400]	; (800a420 <_printf_i+0x220>)
 800a28e:	e055      	b.n	800a33c <_printf_i+0x13c>
 800a290:	6813      	ldr	r3, [r2, #0]
 800a292:	1d19      	adds	r1, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6011      	str	r1, [r2, #0]
 800a298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a29c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e08c      	b.n	800a3be <_printf_i+0x1be>
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6011      	str	r1, [r2, #0]
 800a2a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2ac:	bf18      	it	ne
 800a2ae:	b21b      	sxthne	r3, r3
 800a2b0:	e7cf      	b.n	800a252 <_printf_i+0x52>
 800a2b2:	6813      	ldr	r3, [r2, #0]
 800a2b4:	6825      	ldr	r5, [r4, #0]
 800a2b6:	1d18      	adds	r0, r3, #4
 800a2b8:	6010      	str	r0, [r2, #0]
 800a2ba:	0628      	lsls	r0, r5, #24
 800a2bc:	d501      	bpl.n	800a2c2 <_printf_i+0xc2>
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	e002      	b.n	800a2c8 <_printf_i+0xc8>
 800a2c2:	0668      	lsls	r0, r5, #25
 800a2c4:	d5fb      	bpl.n	800a2be <_printf_i+0xbe>
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	4854      	ldr	r0, [pc, #336]	; (800a41c <_printf_i+0x21c>)
 800a2ca:	296f      	cmp	r1, #111	; 0x6f
 800a2cc:	bf14      	ite	ne
 800a2ce:	220a      	movne	r2, #10
 800a2d0:	2208      	moveq	r2, #8
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2d8:	6865      	ldr	r5, [r4, #4]
 800a2da:	60a5      	str	r5, [r4, #8]
 800a2dc:	2d00      	cmp	r5, #0
 800a2de:	f2c0 8095 	blt.w	800a40c <_printf_i+0x20c>
 800a2e2:	6821      	ldr	r1, [r4, #0]
 800a2e4:	f021 0104 	bic.w	r1, r1, #4
 800a2e8:	6021      	str	r1, [r4, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d13d      	bne.n	800a36a <_printf_i+0x16a>
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	f040 808e 	bne.w	800a410 <_printf_i+0x210>
 800a2f4:	4665      	mov	r5, ip
 800a2f6:	2a08      	cmp	r2, #8
 800a2f8:	d10b      	bne.n	800a312 <_printf_i+0x112>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	07db      	lsls	r3, r3, #31
 800a2fe:	d508      	bpl.n	800a312 <_printf_i+0x112>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	6862      	ldr	r2, [r4, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	bfde      	ittt	le
 800a308:	2330      	movle	r3, #48	; 0x30
 800a30a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a30e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a312:	ebac 0305 	sub.w	r3, ip, r5
 800a316:	6123      	str	r3, [r4, #16]
 800a318:	f8cd 8000 	str.w	r8, [sp]
 800a31c:	463b      	mov	r3, r7
 800a31e:	aa03      	add	r2, sp, #12
 800a320:	4621      	mov	r1, r4
 800a322:	4630      	mov	r0, r6
 800a324:	f7ff fef6 	bl	800a114 <_printf_common>
 800a328:	3001      	adds	r0, #1
 800a32a:	d14d      	bne.n	800a3c8 <_printf_i+0x1c8>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b005      	add	sp, #20
 800a332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a336:	4839      	ldr	r0, [pc, #228]	; (800a41c <_printf_i+0x21c>)
 800a338:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a33c:	6813      	ldr	r3, [r2, #0]
 800a33e:	6821      	ldr	r1, [r4, #0]
 800a340:	1d1d      	adds	r5, r3, #4
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6015      	str	r5, [r2, #0]
 800a346:	060a      	lsls	r2, r1, #24
 800a348:	d50b      	bpl.n	800a362 <_printf_i+0x162>
 800a34a:	07ca      	lsls	r2, r1, #31
 800a34c:	bf44      	itt	mi
 800a34e:	f041 0120 	orrmi.w	r1, r1, #32
 800a352:	6021      	strmi	r1, [r4, #0]
 800a354:	b91b      	cbnz	r3, 800a35e <_printf_i+0x15e>
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	f022 0220 	bic.w	r2, r2, #32
 800a35c:	6022      	str	r2, [r4, #0]
 800a35e:	2210      	movs	r2, #16
 800a360:	e7b7      	b.n	800a2d2 <_printf_i+0xd2>
 800a362:	064d      	lsls	r5, r1, #25
 800a364:	bf48      	it	mi
 800a366:	b29b      	uxthmi	r3, r3
 800a368:	e7ef      	b.n	800a34a <_printf_i+0x14a>
 800a36a:	4665      	mov	r5, ip
 800a36c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a370:	fb02 3311 	mls	r3, r2, r1, r3
 800a374:	5cc3      	ldrb	r3, [r0, r3]
 800a376:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a37a:	460b      	mov	r3, r1
 800a37c:	2900      	cmp	r1, #0
 800a37e:	d1f5      	bne.n	800a36c <_printf_i+0x16c>
 800a380:	e7b9      	b.n	800a2f6 <_printf_i+0xf6>
 800a382:	6813      	ldr	r3, [r2, #0]
 800a384:	6825      	ldr	r5, [r4, #0]
 800a386:	6961      	ldr	r1, [r4, #20]
 800a388:	1d18      	adds	r0, r3, #4
 800a38a:	6010      	str	r0, [r2, #0]
 800a38c:	0628      	lsls	r0, r5, #24
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	d501      	bpl.n	800a396 <_printf_i+0x196>
 800a392:	6019      	str	r1, [r3, #0]
 800a394:	e002      	b.n	800a39c <_printf_i+0x19c>
 800a396:	066a      	lsls	r2, r5, #25
 800a398:	d5fb      	bpl.n	800a392 <_printf_i+0x192>
 800a39a:	8019      	strh	r1, [r3, #0]
 800a39c:	2300      	movs	r3, #0
 800a39e:	6123      	str	r3, [r4, #16]
 800a3a0:	4665      	mov	r5, ip
 800a3a2:	e7b9      	b.n	800a318 <_printf_i+0x118>
 800a3a4:	6813      	ldr	r3, [r2, #0]
 800a3a6:	1d19      	adds	r1, r3, #4
 800a3a8:	6011      	str	r1, [r2, #0]
 800a3aa:	681d      	ldr	r5, [r3, #0]
 800a3ac:	6862      	ldr	r2, [r4, #4]
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	f7f5 ff5d 	bl	8000270 <memchr>
 800a3b6:	b108      	cbz	r0, 800a3bc <_printf_i+0x1bc>
 800a3b8:	1b40      	subs	r0, r0, r5
 800a3ba:	6060      	str	r0, [r4, #4]
 800a3bc:	6863      	ldr	r3, [r4, #4]
 800a3be:	6123      	str	r3, [r4, #16]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c6:	e7a7      	b.n	800a318 <_printf_i+0x118>
 800a3c8:	6923      	ldr	r3, [r4, #16]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	47c0      	blx	r8
 800a3d2:	3001      	adds	r0, #1
 800a3d4:	d0aa      	beq.n	800a32c <_printf_i+0x12c>
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	079b      	lsls	r3, r3, #30
 800a3da:	d413      	bmi.n	800a404 <_printf_i+0x204>
 800a3dc:	68e0      	ldr	r0, [r4, #12]
 800a3de:	9b03      	ldr	r3, [sp, #12]
 800a3e0:	4298      	cmp	r0, r3
 800a3e2:	bfb8      	it	lt
 800a3e4:	4618      	movlt	r0, r3
 800a3e6:	e7a3      	b.n	800a330 <_printf_i+0x130>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	464a      	mov	r2, r9
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	47c0      	blx	r8
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	d09a      	beq.n	800a32c <_printf_i+0x12c>
 800a3f6:	3501      	adds	r5, #1
 800a3f8:	68e3      	ldr	r3, [r4, #12]
 800a3fa:	9a03      	ldr	r2, [sp, #12]
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	42ab      	cmp	r3, r5
 800a400:	dcf2      	bgt.n	800a3e8 <_printf_i+0x1e8>
 800a402:	e7eb      	b.n	800a3dc <_printf_i+0x1dc>
 800a404:	2500      	movs	r5, #0
 800a406:	f104 0919 	add.w	r9, r4, #25
 800a40a:	e7f5      	b.n	800a3f8 <_printf_i+0x1f8>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1ac      	bne.n	800a36a <_printf_i+0x16a>
 800a410:	7803      	ldrb	r3, [r0, #0]
 800a412:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a416:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a41a:	e76c      	b.n	800a2f6 <_printf_i+0xf6>
 800a41c:	0800a6c3 	.word	0x0800a6c3
 800a420:	0800a6d4 	.word	0x0800a6d4

0800a424 <_sbrk_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4c06      	ldr	r4, [pc, #24]	; (800a440 <_sbrk_r+0x1c>)
 800a428:	2300      	movs	r3, #0
 800a42a:	4605      	mov	r5, r0
 800a42c:	4608      	mov	r0, r1
 800a42e:	6023      	str	r3, [r4, #0]
 800a430:	f7f9 f8f2 	bl	8003618 <_sbrk>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_sbrk_r+0x1a>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_sbrk_r+0x1a>
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	2005a9d4 	.word	0x2005a9d4

0800a444 <__ascii_wctomb>:
 800a444:	b149      	cbz	r1, 800a45a <__ascii_wctomb+0x16>
 800a446:	2aff      	cmp	r2, #255	; 0xff
 800a448:	bf85      	ittet	hi
 800a44a:	238a      	movhi	r3, #138	; 0x8a
 800a44c:	6003      	strhi	r3, [r0, #0]
 800a44e:	700a      	strbls	r2, [r1, #0]
 800a450:	f04f 30ff 	movhi.w	r0, #4294967295
 800a454:	bf98      	it	ls
 800a456:	2001      	movls	r0, #1
 800a458:	4770      	bx	lr
 800a45a:	4608      	mov	r0, r1
 800a45c:	4770      	bx	lr

0800a45e <memcpy>:
 800a45e:	b510      	push	{r4, lr}
 800a460:	1e43      	subs	r3, r0, #1
 800a462:	440a      	add	r2, r1
 800a464:	4291      	cmp	r1, r2
 800a466:	d100      	bne.n	800a46a <memcpy+0xc>
 800a468:	bd10      	pop	{r4, pc}
 800a46a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a46e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a472:	e7f7      	b.n	800a464 <memcpy+0x6>

0800a474 <memmove>:
 800a474:	4288      	cmp	r0, r1
 800a476:	b510      	push	{r4, lr}
 800a478:	eb01 0302 	add.w	r3, r1, r2
 800a47c:	d807      	bhi.n	800a48e <memmove+0x1a>
 800a47e:	1e42      	subs	r2, r0, #1
 800a480:	4299      	cmp	r1, r3
 800a482:	d00a      	beq.n	800a49a <memmove+0x26>
 800a484:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a488:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a48c:	e7f8      	b.n	800a480 <memmove+0xc>
 800a48e:	4283      	cmp	r3, r0
 800a490:	d9f5      	bls.n	800a47e <memmove+0xa>
 800a492:	1881      	adds	r1, r0, r2
 800a494:	1ad2      	subs	r2, r2, r3
 800a496:	42d3      	cmn	r3, r2
 800a498:	d100      	bne.n	800a49c <memmove+0x28>
 800a49a:	bd10      	pop	{r4, pc}
 800a49c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a4a4:	e7f7      	b.n	800a496 <memmove+0x22>

0800a4a6 <__malloc_lock>:
 800a4a6:	4770      	bx	lr

0800a4a8 <__malloc_unlock>:
 800a4a8:	4770      	bx	lr

0800a4aa <_realloc_r>:
 800a4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ac:	4607      	mov	r7, r0
 800a4ae:	4614      	mov	r4, r2
 800a4b0:	460e      	mov	r6, r1
 800a4b2:	b921      	cbnz	r1, 800a4be <_realloc_r+0x14>
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4ba:	f7ff bc7f 	b.w	8009dbc <_malloc_r>
 800a4be:	b922      	cbnz	r2, 800a4ca <_realloc_r+0x20>
 800a4c0:	f7ff fc2e 	bl	8009d20 <_free_r>
 800a4c4:	4625      	mov	r5, r4
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ca:	f000 f814 	bl	800a4f6 <_malloc_usable_size_r>
 800a4ce:	42a0      	cmp	r0, r4
 800a4d0:	d20f      	bcs.n	800a4f2 <_realloc_r+0x48>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f7ff fc71 	bl	8009dbc <_malloc_r>
 800a4da:	4605      	mov	r5, r0
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d0f2      	beq.n	800a4c6 <_realloc_r+0x1c>
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	f7ff ffbb 	bl	800a45e <memcpy>
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	f7ff fc18 	bl	8009d20 <_free_r>
 800a4f0:	e7e9      	b.n	800a4c6 <_realloc_r+0x1c>
 800a4f2:	4635      	mov	r5, r6
 800a4f4:	e7e7      	b.n	800a4c6 <_realloc_r+0x1c>

0800a4f6 <_malloc_usable_size_r>:
 800a4f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4fa:	1f18      	subs	r0, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bfbc      	itt	lt
 800a500:	580b      	ldrlt	r3, [r1, r0]
 800a502:	18c0      	addlt	r0, r0, r3
 800a504:	4770      	bx	lr
	...

0800a508 <_init>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	bf00      	nop
 800a50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50e:	bc08      	pop	{r3}
 800a510:	469e      	mov	lr, r3
 800a512:	4770      	bx	lr

0800a514 <_fini>:
 800a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a516:	bf00      	nop
 800a518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a51a:	bc08      	pop	{r3}
 800a51c:	469e      	mov	lr, r3
 800a51e:	4770      	bx	lr
