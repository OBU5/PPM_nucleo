
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009040  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a8  080092a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092b0  080092b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092b0  080092b0  000192b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080092b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b814  20000074  0800932c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2002b888  0800932c  0002b888  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015510  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000288a  00000000  00000000  000355b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  00037e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  00039310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000297be  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f73c  00000000  00000000  00063e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010368b  00000000  00000000  000735aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176c35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b58  00000000  00000000  00176cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08009228 	.word	0x08009228

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08009228 	.word	0x08009228

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f002 f8fc 	bl	80027f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f845 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fe7b 	bl	80012f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fe53 	bl	80012ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000606:	f000 f8e1 	bl	80007cc <MX_ADC1_Init>
  MX_SPI1_Init();
 800060a:	f000 f9b1 	bl	8000970 <MX_SPI1_Init>
  MX_TIM1_Init();
 800060e:	f000 fa27 	bl	8000a60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000612:	f000 fae5 	bl	8000be0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000616:	f000 fb37 	bl	8000c88 <MX_TIM3_Init>
  MX_TIM4_Init();
 800061a:	f000 fbad 	bl	8000d78 <MX_TIM4_Init>
  MX_TIM8_Init();
 800061e:	f000 fc89 	bl	8000f34 <MX_TIM8_Init>
  MX_UART5_Init();
 8000622:	f000 fd53 	bl	80010cc <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000626:	f000 fdb1 	bl	800118c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800062a:	f000 fddf 	bl	80011ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800062e:	f000 fe0d 	bl	800124c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000632:	f000 f91d 	bl	8000870 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000636:	f000 f95b 	bl	80008f0 <MX_I2C3_Init>
  MX_SPI4_Init();
 800063a:	f000 f9d3 	bl	80009e4 <MX_SPI4_Init>
  MX_TIM5_Init();
 800063e:	f000 fbf5 	bl	8000e2c <MX_TIM5_Init>
  MX_UART7_Init();
 8000642:	f000 fd73 	bl	800112c <MX_UART7_Init>
  MX_TIM6_Init();
 8000646:	f000 fc3f 	bl	8000ec8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 800064a:	2203      	movs	r2, #3
 800064c:	490a      	ldr	r1, [pc, #40]	; (8000678 <main+0x88>)
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <main+0x8c>)
 8000650:	f007 faaa 	bl	8007ba8 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <main+0x90>)
 8000656:	f005 fc77 	bl	8005f48 <HAL_TIM_Base_Start_IT>
	char msg_buffers[25];
	uint16_t index = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	83fb      	strh	r3, [r7, #30]
	switchingCircuitIdle();
 800065e:	f001 f80d 	bl	800167c <switchingCircuitIdle>
	HAL_Delay(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000666:	f002 f921 	bl	80028ac <HAL_Delay>
		 sprintf(msg_buffers, "Idle phase - %hu\n", index);
		 switchingCircuitIdle();
		 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
		 HAL_Delay(5000);
		 index++;*/
		if (state.preparedToRunPolarizationPhase) {
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <main+0x94>)
 800066c:	79db      	ldrb	r3, [r3, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0fb      	beq.n	800066a <main+0x7a>
			chooseActionByState();
 8000672:	f000 fed3 	bl	800141c <chooseActionByState>
		if (state.preparedToRunPolarizationPhase) {
 8000676:	e7f8      	b.n	800066a <main+0x7a>
 8000678:	200002d0 	.word	0x200002d0
 800067c:	20000204 	.word	0x20000204
 8000680:	20015b5c 	.word	0x20015b5c
 8000684:	20015bdc 	.word	0x20015bdc

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0b8      	sub	sp, #224	; 0xe0
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f008 f9b8 	bl	8008a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2290      	movs	r2, #144	; 0x90
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f008 f9a9 	bl	8008a0c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006ba:	f003 fd75 	bl	80041a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <SystemClock_Config+0x138>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a3f      	ldr	r2, [pc, #252]	; (80007c0 <SystemClock_Config+0x138>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <SystemClock_Config+0x138>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <SystemClock_Config+0x13c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <SystemClock_Config+0x13c>)
 80006dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <SystemClock_Config+0x13c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ee:	2301      	movs	r3, #1
 80006f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 5;
 800070a:	2305      	movs	r3, #5
 800070c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000710:	23d8      	movs	r3, #216	; 0xd8
 8000712:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fd9e 	bl	8004268 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000732:	f001 fabd 	bl	8001cb0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000736:	f003 fd47 	bl	80041c8 <HAL_PWREx_EnableOverDrive>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000740:	f001 fab6 	bl	8001cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000766:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800076a:	2107      	movs	r1, #7
 800076c:	4618      	mov	r0, r3
 800076e:	f004 f829 	bl	80047c4 <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000778:	f001 fa9a 	bl	8001cb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART1
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <SystemClock_Config+0x140>)
 800077e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000780:	2300      	movs	r3, #0
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000784:	2300      	movs	r3, #0
 8000786:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000790:	2300      	movs	r3, #0
 8000792:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000794:	2300      	movs	r3, #0
 8000796:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000798:	2300      	movs	r3, #0
 800079a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800079c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 f9de 	bl	8004b68 <HAL_RCCEx_PeriphCLKConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80007b2:	f001 fa7d 	bl	8001cb0 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	37e0      	adds	r7, #224	; 0xe0
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	000155d0 	.word	0x000155d0

080007cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007e0:	4a22      	ldr	r2, [pc, #136]	; (800086c <MX_ADC1_Init+0xa0>)
 80007e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000810:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_ADC1_Init+0x9c>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_ADC1_Init+0x9c>)
 800082c:	2201      	movs	r2, #1
 800082e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000832:	f002 f85d 	bl	80028f0 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800083c:	f001 fa38 	bl	8001cb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000844:	2301      	movs	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000848:	2301      	movs	r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000852:	f002 f9dd 	bl	8002c10 <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800085c:	f001 fa28 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20015c68 	.word	0x20015c68
 800086c:	40012000 	.word	0x40012000

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	f003 fb54 	bl	8003f58 <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f001 f9fb 	bl	8001cb0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008be:	f003 fbdb 	bl	8004078 <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f001 f9f2 	bl	8001cb0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008d0:	f003 fc1d 	bl	800410e <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f001 f9e9 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000284 	.word	0x20000284
 80008e8:	40005400 	.word	0x40005400
 80008ec:	20404768 	.word	0x20404768

080008f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_I2C3_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_I2C3_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_I2C3_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <MX_I2C3_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_I2C3_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_I2C3_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_I2C3_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_I2C3_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C3_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_I2C3_Init+0x74>)
 800092c:	f003 fb14 	bl	8003f58 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000936:	f001 f9bb 	bl	8001cb0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_I2C3_Init+0x74>)
 800093e:	f003 fb9b 	bl	8004078 <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000948:	f001 f9b2 	bl	8001cb0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_I2C3_Init+0x74>)
 8000950:	f003 fbdd 	bl	800410e <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800095a:	f001 f9a9 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000b8 	.word	0x200000b8
 8000968:	40005c00 	.word	0x40005c00
 800096c:	20404768 	.word	0x20404768

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000976:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <MX_SPI1_Init+0x70>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_SPI1_Init+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_SPI1_Init+0x6c>)
 800098a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800098e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_SPI1_Init+0x6c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009b6:	2207      	movs	r2, #7
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009c8:	f004 fcf4 	bl	80053b4 <HAL_SPI_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80009d2:	f001 f96d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2002b6fc 	.word	0x2002b6fc
 80009e0:	40013000 	.word	0x40013000

080009e4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_SPI4_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_SPI4_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_SPI4_Init+0x74>)
 80009f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_SPI4_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_SPI4_Init+0x74>)
 80009fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a02:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a16:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a44:	f004 fcb6 	bl	80053b4 <HAL_SPI_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f001 f92f 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2002b5b8 	.word	0x2002b5b8
 8000a5c:	40013400 	.word	0x40013400

08000a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09a      	sub	sp, #104	; 0x68
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
 8000a92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	222c      	movs	r2, #44	; 0x2c
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 ffb6 	bl	8008a0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa0:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000aa2:	4a4e      	ldr	r2, [pc, #312]	; (8000bdc <MX_TIM1_Init+0x17c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aa6:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 8000ab2:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000ab4:	f241 3221 	movw	r2, #4897	; 0x1321
 8000ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac0:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000acc:	4842      	ldr	r0, [pc, #264]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000ace:	f005 fa10 	bl	8005ef2 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f001 f8ea 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000aea:	f005 ff85 	bl	80069f8 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000af4:	f001 f8dc 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af8:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000afa:	f005 fa7a 	bl	8005ff2 <HAL_TIM_PWM_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b04:	f001 f8d4 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000b1c:	f006 fe3a 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b26:	f001 f8c3 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b2a:	2370      	movs	r3, #112	; 0x70
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 8000b2e:	f240 336a 	movw	r3, #874	; 0x36a
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	4821      	ldr	r0, [pc, #132]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000b54:	f005 fe38 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000b5e:	f001 f8a7 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b62:	2360      	movs	r3, #96	; 0x60
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000b66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b70:	2204      	movs	r2, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000b76:	f005 fe27 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000b80:	f001 f896 	bl	8001cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000bba:	f006 fe79 	bl	80078b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000bc4:	f001 f874 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000bca:	f001 fb55 	bl	8002278 <HAL_TIM_MspPostInit>

}
 8000bce:	bf00      	nop
 8000bd0:	3768      	adds	r7, #104	; 0x68
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2002b6bc 	.word	0x2002b6bc
 8000bdc:	40010000 	.word	0x40010000

08000be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c28:	f005 fb32 	bl	8006290 <HAL_TIM_IC_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c32:	f001 f83d 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c46:	f006 fda5 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c50:	f001 f82e 	bl	8001cb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c6c:	f005 fd0f 	bl	800668e <HAL_TIM_IC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c76:	f001 f81b 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2002b760 	.word	0x2002b760

08000c88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]
 8000cba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <MX_TIM3_Init+0xec>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ce0:	4823      	ldr	r0, [pc, #140]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000ce2:	f005 f906 	bl	8005ef2 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cec:	f000 ffe0 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cf0:	481f      	ldr	r0, [pc, #124]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cf2:	f005 f97e 	bl	8005ff2 <HAL_TIM_PWM_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cfc:	f000 ffd8 	bl	8001cb0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000d10:	f005 ff2c 	bl	8006b6c <HAL_TIM_SlaveConfigSynchro>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d1a:	f000 ffc9 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000d2e:	f006 fd31 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d38:	f000 ffba 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000d54:	f005 fd38 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d5e:	f000 ffa7 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000d64:	f001 fa88 	bl	8002278 <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3740      	adds	r7, #64	; 0x40
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20015b9c 	.word	0x20015b9c
 8000d74:	40000400 	.word	0x40000400

08000d78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]
 8000d9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000d9e:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <MX_TIM4_Init+0xb0>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000dc2:	f005 f916 	bl	8005ff2 <HAL_TIM_PWM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000dcc:	f000 ff70 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000de0:	f006 fcd8 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000dea:	f000 ff61 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	; 0x60
 8000df0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000e06:	f005 fcdf 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000e10:	f000 ff4e 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000e16:	f001 fa2f 	bl	8002278 <HAL_TIM_MspPostInit>

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001c4 	.word	0x200001c4
 8000e28:	40000800 	.word	0x40000800

08000e2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <MX_TIM5_Init+0x98>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2160-1;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e5e:	f640 026f 	movw	r2, #2159	; 0x86f
 8000e62:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e72:	f005 f83e 	bl	8005ef2 <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e7c:	f000 ff18 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e8e:	f005 fdb3 	bl	80069f8 <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e98:	f000 ff0a 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000eaa:	f006 fc73 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 fefc 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20015b5c 	.word	0x20015b5c
 8000ec4:	40000c00 	.word	0x40000c00

08000ec8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <MX_TIM6_Init+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4898-1;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000eec:	f241 3221 	movw	r2, #4897	; 0x1321
 8000ef0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000efa:	f004 fffa 	bl	8005ef2 <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f04:	f000 fed4 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000f16:	f006 fc3d 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f20:	f000 fec6 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2002b67c 	.word	0x2002b67c
 8000f30:	40001000 	.word	0x40001000

08000f34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09e      	sub	sp, #120	; 0x78
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	222c      	movs	r2, #44	; 0x2c
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 fd44 	bl	8008a0c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f84:	4b4f      	ldr	r3, [pc, #316]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f86:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <MX_TIM8_Init+0x194>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000f96:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f98:	226b      	movs	r2, #107	; 0x6b
 8000f9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9c:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fa4:	2218      	movs	r2, #24
 8000fa6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fae:	4845      	ldr	r0, [pc, #276]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fb0:	f004 ff9f 	bl	8005ef2 <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000fba:	f000 fe79 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000fc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fc8:	4619      	mov	r1, r3
 8000fca:	483e      	ldr	r0, [pc, #248]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fcc:	f005 fd14 	bl	80069f8 <HAL_TIM_ConfigClockSource>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000fd6:	f000 fe6b 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000fda:	483a      	ldr	r0, [pc, #232]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fdc:	f005 f809 	bl	8005ff2 <HAL_TIM_PWM_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000fe6:	f000 fe63 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000fea:	2108      	movs	r1, #8
 8000fec:	4835      	ldr	r0, [pc, #212]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fee:	f005 f9e9 	bl	80063c4 <HAL_TIM_OnePulse_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000ff8:	f000 fe5a 	bl	8001cb0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001000:	2300      	movs	r3, #0
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001004:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001008:	4619      	mov	r1, r3
 800100a:	482e      	ldr	r0, [pc, #184]	; (80010c4 <MX_TIM8_Init+0x190>)
 800100c:	f005 fdae 	bl	8006b6c <HAL_TIM_SlaveConfigSynchro>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8001016:	f000 fe4b 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001026:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102a:	4619      	mov	r1, r3
 800102c:	4825      	ldr	r0, [pc, #148]	; (80010c4 <MX_TIM8_Init+0x190>)
 800102e:	f006 fbb1 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001038:	f000 fe3a 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800103c:	2370      	movs	r3, #112	; 0x70
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 8001040:	2336      	movs	r3, #54	; 0x36
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <MX_TIM8_Init+0x190>)
 8001062:	f005 fbb1 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 800106c:	f000 fe20 	bl	8001cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001096:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_TIM8_Init+0x190>)
 80010a6:	f006 fc03 	bl	80078b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 80010b0:	f000 fdfe 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_TIM8_Init+0x190>)
 80010b6:	f001 f8df 	bl	8002278 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3778      	adds	r7, #120	; 0x78
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000184 	.word	0x20000184
 80010c8:	40010400 	.word	0x40010400

080010cc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_UART5_Init+0x58>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <MX_UART5_Init+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_UART5_Init+0x58>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_UART5_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_UART5_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_UART5_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_UART5_Init+0x58>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_UART5_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_UART5_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_UART5_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_UART5_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_UART5_Init+0x58>)
 8001110:	f006 fc6a 	bl	80079e8 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 fdc9 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20015be8 	.word	0x20015be8
 8001128:	40005000 	.word	0x40005000

0800112c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_UART7_Init+0x58>)
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_UART7_Init+0x5c>)
 8001134:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_UART7_Init+0x58>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_UART7_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_UART7_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_UART7_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_UART7_Init+0x58>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_UART7_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_UART7_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_UART7_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_UART7_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_UART7_Init+0x58>)
 8001170:	f006 fc3a 	bl	80079e8 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800117a:	f000 fd99 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000104 	.word	0x20000104
 8001188:	40007800 	.word	0x40007800

0800118c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_USART1_UART_Init+0x5c>)
 8001194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011d0:	f006 fc0a 	bl	80079e8 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011da:	f000 fd69 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20015cb0 	.word	0x20015cb0
 80011e8:	40011000 	.word	0x40011000

080011ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_USART2_UART_Init+0x58>)
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <MX_USART2_UART_Init+0x5c>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_USART2_UART_Init+0x58>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001230:	f006 fbda 	bl	80079e8 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800123a:	f000 fd39 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2002b7a0 	.word	0x2002b7a0
 8001248:	40004400 	.word	0x40004400

0800124c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001254:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_USART3_UART_Init+0x5c>)
 800125a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001270:	220c      	movs	r2, #12
 8001272:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800128e:	f006 fbab 	bl	80079e8 <HAL_UART_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001298:	f000 fd0a 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000204 	.word	0x20000204
 80012a4:	40004800 	.word	0x40004800
 80012a8:	001e8480 	.word	0x001e8480

080012ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_DMA_Init+0x48>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <MX_DMA_Init+0x48>)
 80012b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <MX_DMA_Init+0x48>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2038      	movs	r0, #56	; 0x38
 80012d0:	f002 f83f 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012d4:	2038      	movs	r0, #56	; 0x38
 80012d6:	f002 f858 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	203c      	movs	r0, #60	; 0x3c
 80012e0:	f002 f837 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80012e4:	203c      	movs	r0, #60	; 0x3c
 80012e6:	f002 f850 	bl	800338a <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130e:	4b40      	ldr	r3, [pc, #256]	; (8001410 <MX_GPIO_Init+0x118>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <MX_GPIO_Init+0x118>)
 8001314:	f043 0310 	orr.w	r3, r3, #16
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <MX_GPIO_Init+0x118>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <MX_GPIO_Init+0x118>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a39      	ldr	r2, [pc, #228]	; (8001410 <MX_GPIO_Init+0x118>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <MX_GPIO_Init+0x118>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b34      	ldr	r3, [pc, #208]	; (8001410 <MX_GPIO_Init+0x118>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a33      	ldr	r2, [pc, #204]	; (8001410 <MX_GPIO_Init+0x118>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <MX_GPIO_Init+0x118>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <MX_GPIO_Init+0x118>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a2d      	ldr	r2, [pc, #180]	; (8001410 <MX_GPIO_Init+0x118>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <MX_GPIO_Init+0x118>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b28      	ldr	r3, [pc, #160]	; (8001410 <MX_GPIO_Init+0x118>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a27      	ldr	r2, [pc, #156]	; (8001410 <MX_GPIO_Init+0x118>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b25      	ldr	r3, [pc, #148]	; (8001410 <MX_GPIO_Init+0x118>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_GPIO_Init+0x118>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a21      	ldr	r2, [pc, #132]	; (8001410 <MX_GPIO_Init+0x118>)
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <MX_GPIO_Init+0x118>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2108      	movs	r1, #8
 80013a2:	481c      	ldr	r0, [pc, #112]	; (8001414 <MX_GPIO_Init+0x11c>)
 80013a4:	f002 fdbe 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 80013a8:	2200      	movs	r2, #0
 80013aa:	f64e 717f 	movw	r1, #61311	; 0xef7f
 80013ae:	481a      	ldr	r0, [pc, #104]	; (8001418 <MX_GPIO_Init+0x120>)
 80013b0:	f002 fdb8 	bl	8003f24 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SN6505_EN_Pin */
  GPIO_InitStruct.Pin = SN6505_EN_Pin;
 80013b4:	2308      	movs	r3, #8
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4812      	ldr	r0, [pc, #72]	; (8001414 <MX_GPIO_Init+0x11c>)
 80013cc:	f002 fc00 	bl	8003bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin 
                           LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin 
                           S1_Pin S2_Pin S3_Pin S4_Pin 
                           S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 80013d0:	f64e 737f 	movw	r3, #61311	; 0xef7f
 80013d4:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <MX_GPIO_Init+0x120>)
 80013ea:	f002 fbf1 	bl	8003bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80013ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_GPIO_Init+0x11c>)
 8001404:	f002 fbe4 	bl	8003bd0 <HAL_GPIO_Init>

}
 8001408:	bf00      	nop
 800140a:	3730      	adds	r7, #48	; 0x30
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020800 	.word	0x40020800
 8001418:	40020c00 	.word	0x40020c00

0800141c <chooseActionByState>:

/* USER CODE BEGIN 4 */

void chooseActionByState() {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	// if new measurement technique was set, update remaining measurements as well
	if (state.measureTechniqueUpdated) {
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <chooseActionByState+0x74>)
 8001422:	799b      	ldrb	r3, [r3, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <chooseActionByState+0x24>
		state.remainingMeasurements = state.setMeasurements;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <chooseActionByState+0x74>)
 800142a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <chooseActionByState+0x74>)
 8001430:	805a      	strh	r2, [r3, #2]
		state.activeMeasureTechnique = state.setMeasureTechnique;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <chooseActionByState+0x74>)
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <chooseActionByState+0x74>)
 8001438:	705a      	strb	r2, [r3, #1]
		state.measureTechniqueUpdated = 0;
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <chooseActionByState+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	719a      	strb	r2, [r3, #6]

	}
	switch (state.activeMeasureTechnique) {
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <chooseActionByState+0x74>)
 8001442:	785b      	ldrb	r3, [r3, #1]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d820      	bhi.n	800148a <chooseActionByState+0x6e>
 8001448:	a201      	add	r2, pc, #4	; (adr r2, 8001450 <chooseActionByState+0x34>)
 800144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144e:	bf00      	nop
 8001450:	08001461 	.word	0x08001461
 8001454:	0800146d 	.word	0x0800146d
 8001458:	08001477 	.word	0x08001477
 800145c:	08001481 	.word	0x08001481

	case 0:
		// Idle state
		set_LED1(0, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2000      	movs	r0, #0
 8001466:	f000 f8e5 	bl	8001634 <set_LED1>
		break;
 800146a:	e00e      	b.n	800148a <chooseActionByState+0x6e>
	case 1:
		// measure with external ADC
		runPolarizationSequence();
 800146c:	f000 f812 	bl	8001494 <runPolarizationSequence>
		measureWithExternalADC();
 8001470:	f000 f962 	bl	8001738 <measureWithExternalADC>
		break;
 8001474:	e009      	b.n	800148a <chooseActionByState+0x6e>
	case 2:
		// measure with internal ADC
		runPolarizationSequence();
 8001476:	f000 f80d 	bl	8001494 <runPolarizationSequence>
		measureWithInternalADC();
 800147a:	f000 f985 	bl	8001788 <measureWithInternalADC>
		break;
 800147e:	e004      	b.n	800148a <chooseActionByState+0x6e>
	case 3:
		// measure with comparator
		runPolarizationSequence();
 8001480:	f000 f808 	bl	8001494 <runPolarizationSequence>
		measureWithComparator();
 8001484:	f000 f99c 	bl	80017c0 <measureWithComparator>
		break;
 8001488:	bf00      	nop

	}
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20015bdc 	.word	0x20015bdc

08001494 <runPolarizationSequence>:
void runPolarizationSequence() {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	//state.preparedToRunPolarizationPhase = 0;
	// visualise
	set_LED1(1, 1, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	2101      	movs	r1, #1
 800149c:	2001      	movs	r0, #1
 800149e:	f000 f8c9 	bl	8001634 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2102      	movs	r1, #2
 80014a6:	4862      	ldr	r0, [pc, #392]	; (8001630 <runPolarizationSequence+0x19c>)
 80014a8:	f002 fd3c 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2104      	movs	r1, #4
 80014b0:	485f      	ldr	r0, [pc, #380]	; (8001630 <runPolarizationSequence+0x19c>)
 80014b2:	f002 fd37 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2108      	movs	r1, #8
 80014ba:	485d      	ldr	r0, [pc, #372]	; (8001630 <runPolarizationSequence+0x19c>)
 80014bc:	f002 fd32 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2110      	movs	r1, #16
 80014c4:	485a      	ldr	r0, [pc, #360]	; (8001630 <runPolarizationSequence+0x19c>)
 80014c6:	f002 fd2d 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2120      	movs	r1, #32
 80014ce:	4858      	ldr	r0, [pc, #352]	; (8001630 <runPolarizationSequence+0x19c>)
 80014d0:	f002 fd28 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4855      	ldr	r0, [pc, #340]	; (8001630 <runPolarizationSequence+0x19c>)
 80014da:	f002 fd23 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80014de:	2005      	movs	r0, #5
 80014e0:	f001 f9e4 	bl	80028ac <HAL_Delay>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2102      	movs	r1, #2
 80014e8:	4851      	ldr	r0, [pc, #324]	; (8001630 <runPolarizationSequence+0x19c>)
 80014ea:	f002 fd1b 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2104      	movs	r1, #4
 80014f2:	484f      	ldr	r0, [pc, #316]	; (8001630 <runPolarizationSequence+0x19c>)
 80014f4:	f002 fd16 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2108      	movs	r1, #8
 80014fc:	484c      	ldr	r0, [pc, #304]	; (8001630 <runPolarizationSequence+0x19c>)
 80014fe:	f002 fd11 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001502:	2201      	movs	r2, #1
 8001504:	2110      	movs	r1, #16
 8001506:	484a      	ldr	r0, [pc, #296]	; (8001630 <runPolarizationSequence+0x19c>)
 8001508:	f002 fd0c 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2120      	movs	r1, #32
 8001510:	4847      	ldr	r0, [pc, #284]	; (8001630 <runPolarizationSequence+0x19c>)
 8001512:	f002 fd07 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001516:	2201      	movs	r2, #1
 8001518:	2140      	movs	r1, #64	; 0x40
 800151a:	4845      	ldr	r0, [pc, #276]	; (8001630 <runPolarizationSequence+0x19c>)
 800151c:	f002 fd02 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8001520:	f241 3088 	movw	r0, #5000	; 0x1388
 8001524:	f001 f9c2 	bl	80028ac <HAL_Delay>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	4840      	ldr	r0, [pc, #256]	; (8001630 <runPolarizationSequence+0x19c>)
 800152e:	f002 fcf9 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2104      	movs	r1, #4
 8001536:	483e      	ldr	r0, [pc, #248]	; (8001630 <runPolarizationSequence+0x19c>)
 8001538:	f002 fcf4 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	2108      	movs	r1, #8
 8001540:	483b      	ldr	r0, [pc, #236]	; (8001630 <runPolarizationSequence+0x19c>)
 8001542:	f002 fcef 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2110      	movs	r1, #16
 800154a:	4839      	ldr	r0, [pc, #228]	; (8001630 <runPolarizationSequence+0x19c>)
 800154c:	f002 fcea 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2120      	movs	r1, #32
 8001554:	4836      	ldr	r0, [pc, #216]	; (8001630 <runPolarizationSequence+0x19c>)
 8001556:	f002 fce5 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	4834      	ldr	r0, [pc, #208]	; (8001630 <runPolarizationSequence+0x19c>)
 8001560:	f002 fce0 	bl	8003f24 <HAL_GPIO_WritePin>
	delay_us(200);
 8001564:	20c8      	movs	r0, #200	; 0xc8
 8001566:	f000 f8d3 	bl	8001710 <delay_us>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2102      	movs	r1, #2
 800156e:	4830      	ldr	r0, [pc, #192]	; (8001630 <runPolarizationSequence+0x19c>)
 8001570:	f002 fcd8 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2104      	movs	r1, #4
 8001578:	482d      	ldr	r0, [pc, #180]	; (8001630 <runPolarizationSequence+0x19c>)
 800157a:	f002 fcd3 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	2108      	movs	r1, #8
 8001582:	482b      	ldr	r0, [pc, #172]	; (8001630 <runPolarizationSequence+0x19c>)
 8001584:	f002 fcce 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2110      	movs	r1, #16
 800158c:	4828      	ldr	r0, [pc, #160]	; (8001630 <runPolarizationSequence+0x19c>)
 800158e:	f002 fcc9 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001592:	2201      	movs	r2, #1
 8001594:	2120      	movs	r1, #32
 8001596:	4826      	ldr	r0, [pc, #152]	; (8001630 <runPolarizationSequence+0x19c>)
 8001598:	f002 fcc4 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800159c:	2201      	movs	r2, #1
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	4823      	ldr	r0, [pc, #140]	; (8001630 <runPolarizationSequence+0x19c>)
 80015a2:	f002 fcbf 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015a6:	200a      	movs	r0, #10
 80015a8:	f001 f980 	bl	80028ac <HAL_Delay>

	//run sequnece T5 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2102      	movs	r1, #2
 80015b0:	481f      	ldr	r0, [pc, #124]	; (8001630 <runPolarizationSequence+0x19c>)
 80015b2:	f002 fcb7 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2104      	movs	r1, #4
 80015ba:	481d      	ldr	r0, [pc, #116]	; (8001630 <runPolarizationSequence+0x19c>)
 80015bc:	f002 fcb2 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2108      	movs	r1, #8
 80015c4:	481a      	ldr	r0, [pc, #104]	; (8001630 <runPolarizationSequence+0x19c>)
 80015c6:	f002 fcad 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2110      	movs	r1, #16
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <runPolarizationSequence+0x19c>)
 80015d0:	f002 fca8 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2120      	movs	r1, #32
 80015d8:	4815      	ldr	r0, [pc, #84]	; (8001630 <runPolarizationSequence+0x19c>)
 80015da:	f002 fca3 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2140      	movs	r1, #64	; 0x40
 80015e2:	4813      	ldr	r0, [pc, #76]	; (8001630 <runPolarizationSequence+0x19c>)
 80015e4:	f002 fc9e 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80015e8:	2005      	movs	r0, #5
 80015ea:	f001 f95f 	bl	80028ac <HAL_Delay>
	//run sequnece T6 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2102      	movs	r1, #2
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <runPolarizationSequence+0x19c>)
 80015f4:	f002 fc96 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2104      	movs	r1, #4
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <runPolarizationSequence+0x19c>)
 80015fe:	f002 fc91 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2108      	movs	r1, #8
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <runPolarizationSequence+0x19c>)
 8001608:	f002 fc8c 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2110      	movs	r1, #16
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <runPolarizationSequence+0x19c>)
 8001612:	f002 fc87 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001616:	2201      	movs	r2, #1
 8001618:	2120      	movs	r1, #32
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <runPolarizationSequence+0x19c>)
 800161c:	f002 fc82 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <runPolarizationSequence+0x19c>)
 8001626:	f002 fc7d 	bl	8003f24 <HAL_GPIO_WritePin>

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40020c00 	.word	0x40020c00

08001634 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	460b      	mov	r3, r1
 8001640:	71bb      	strb	r3, [r7, #6]
 8001642:	4613      	mov	r3, r2
 8001644:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, R);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	461a      	mov	r2, r3
 800164a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164e:	480a      	ldr	r0, [pc, #40]	; (8001678 <set_LED1+0x44>)
 8001650:	f002 fc68 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, G);
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	461a      	mov	r2, r3
 8001658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <set_LED1+0x44>)
 800165e:	f002 fc61 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, B);
 8001662:	797b      	ldrb	r3, [r7, #5]
 8001664:	461a      	mov	r2, r3
 8001666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <set_LED1+0x44>)
 800166c:	f002 fc5a 	bl	8003f24 <HAL_GPIO_WritePin>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40020c00 	.word	0x40020c00

0800167c <switchingCircuitIdle>:

void switchingCircuitIdle() {
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff ffd5 	bl	8001634 <set_LED1>
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 800168a:	2200      	movs	r2, #0
 800168c:	2101      	movs	r1, #1
 800168e:	4811      	ldr	r0, [pc, #68]	; (80016d4 <switchingCircuitIdle+0x58>)
 8001690:	f002 fc48 	bl	8003f24 <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2102      	movs	r1, #2
 8001698:	480e      	ldr	r0, [pc, #56]	; (80016d4 <switchingCircuitIdle+0x58>)
 800169a:	f002 fc43 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2104      	movs	r1, #4
 80016a2:	480c      	ldr	r0, [pc, #48]	; (80016d4 <switchingCircuitIdle+0x58>)
 80016a4:	f002 fc3e 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2108      	movs	r1, #8
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <switchingCircuitIdle+0x58>)
 80016ae:	f002 fc39 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2110      	movs	r1, #16
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <switchingCircuitIdle+0x58>)
 80016b8:	f002 fc34 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <switchingCircuitIdle+0x58>)
 80016c2:	f002 fc2f 	bl	8003f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	4802      	ldr	r0, [pc, #8]	; (80016d4 <switchingCircuitIdle+0x58>)
 80016cc:	f002 fc2a 	bl	8003f24 <HAL_GPIO_WritePin>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020c00 	.word	0x40020c00

080016d8 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d108      	bne.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x24>
		//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		if (timeIndex > 0) {
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 10;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3b0a      	subs	r3, #10
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016fa:	6013      	str	r3, [r2, #0]

	if (htim->Instance == TIM6) {
		//HAL_GPIO_TogglePin(LED1_R_GPIO_Port, LED1_R_Pin);
	}

}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40000c00 	.word	0x40000c00
 800170c:	200000a8 	.word	0x200000a8

08001710 <delay_us>:

void delay_us(uint32_t delay_us) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <delay_us+0x24>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 800171e:	bf00      	nop
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <delay_us+0x24>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1fb      	bne.n	8001720 <delay_us+0x10>
		;
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	200000a8 	.word	0x200000a8

08001738 <measureWithExternalADC>:

void measureWithExternalADC() {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(1, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ff77 	bl	8001634 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <measureWithExternalADC+0x3c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	490a      	ldr	r1, [pc, #40]	; (8001778 <measureWithExternalADC+0x40>)
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <measureWithExternalADC+0x44>)
 8001752:	f003 fec1 	bl	80054d8 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 8001756:	2100      	movs	r1, #0
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <measureWithExternalADC+0x48>)
 800175a:	f004 fc75 	bl	8006048 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 800175e:	2104      	movs	r1, #4
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <measureWithExternalADC+0x48>)
 8001762:	f004 fc71 	bl	8006048 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 8001766:	2100      	movs	r1, #0
 8001768:	4806      	ldr	r0, [pc, #24]	; (8001784 <measureWithExternalADC+0x4c>)
 800176a:	f004 fc6d 	bl	8006048 <HAL_TIM_PWM_Start_IT>
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000000 	.word	0x20000000
 8001778:	20015d30 	.word	0x20015d30
 800177c:	2002b6fc 	.word	0x2002b6fc
 8001780:	2002b6bc 	.word	0x2002b6bc
 8001784:	20000184 	.word	0x20000184

08001788 <measureWithInternalADC>:

void measureWithInternalADC() {
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 1, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2101      	movs	r1, #1
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff ff4f 	bl	8001634 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16, samplesPerPeriod);
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <measureWithInternalADC+0x28>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	4905      	ldr	r1, [pc, #20]	; (80017b4 <measureWithInternalADC+0x2c>)
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <measureWithInternalADC+0x30>)
 80017a0:	f001 f8ea 	bl	8002978 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <measureWithInternalADC+0x34>)
 80017a6:	f004 fbcf 	bl	8005f48 <HAL_TIM_Base_Start_IT>
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20015d30 	.word	0x20015d30
 80017b8:	20015c68 	.word	0x20015c68
 80017bc:	2002b67c 	.word	0x2002b67c

080017c0 <measureWithComparator>:

void measureWithComparator() {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 0, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2100      	movs	r1, #0
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff ff33 	bl	8001634 <set_LED1>
	// run the timer
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80017ce:	2100      	movs	r1, #0
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <measureWithComparator+0x1c>)
 80017d2:	f004 fd89 	bl	80062e8 <HAL_TIM_IC_Start_IT>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2002b760 	.word	0x2002b760

080017e0 <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	if (firstCapturedSample == 0) {
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <measureFrequencyWithTimer+0x90>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10a      	bne.n	8001806 <measureFrequencyWithTimer+0x26>
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017f0:	2100      	movs	r1, #0
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f005 f9fc 	bl	8006bf0 <HAL_TIM_ReadCapturedValue>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <measureFrequencyWithTimer+0x94>)
 80017fc:	601a      	str	r2, [r3, #0]
		firstCapturedSample = 1;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <measureFrequencyWithTimer+0x90>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
			state.activeMeasureTechnique = 0;
		} else {
			state.preparedToRunPolarizationPhase = 1;
		}
	}
}
 8001804:	e02f      	b.n	8001866 <measureFrequencyWithTimer+0x86>
	else if (firstCapturedSample) {
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <measureFrequencyWithTimer+0x90>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d02b      	beq.n	8001866 <measureFrequencyWithTimer+0x86>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800180e:	2100      	movs	r1, #0
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f005 f9ed 	bl	8006bf0 <HAL_TIM_ReadCapturedValue>
 8001816:	4602      	mov	r2, r0
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <measureFrequencyWithTimer+0x98>)
 800181a:	601a      	str	r2, [r3, #0]
		difference = IC_Value2 - IC_Value1;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <measureFrequencyWithTimer+0x98>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <measureFrequencyWithTimer+0x94>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <measureFrequencyWithTimer+0x9c>)
 8001828:	6013      	str	r3, [r2, #0]
		frequency = /*HAL_RCC_GetHCLKFreq() /*/difference;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <measureFrequencyWithTimer+0x9c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <measureFrequencyWithTimer+0xa0>)
 8001830:	6013      	str	r3, [r2, #0]
		firstCapturedSample = 0;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <measureFrequencyWithTimer+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001838:	f000 f836 	bl	80018a8 <sendDataOverUART>
		state.remainingMeasurements--;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <measureFrequencyWithTimer+0xa4>)
 800183e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001842:	b29b      	uxth	r3, r3
 8001844:	3b01      	subs	r3, #1
 8001846:	b29b      	uxth	r3, r3
 8001848:	b21a      	sxth	r2, r3
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <measureFrequencyWithTimer+0xa4>)
 800184c:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <measureFrequencyWithTimer+0xa4>)
 8001850:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <measureFrequencyWithTimer+0x80>
			state.activeMeasureTechnique = 0;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <measureFrequencyWithTimer+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	705a      	strb	r2, [r3, #1]
}
 800185e:	e002      	b.n	8001866 <measureFrequencyWithTimer+0x86>
			state.preparedToRunPolarizationPhase = 1;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <measureFrequencyWithTimer+0xa4>)
 8001862:	2201      	movs	r2, #1
 8001864:	71da      	strb	r2, [r3, #7]
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200000a4 	.word	0x200000a4
 8001874:	20000094 	.word	0x20000094
 8001878:	20000098 	.word	0x20000098
 800187c:	2000009c 	.word	0x2000009c
 8001880:	200000a0 	.word	0x200000a0
 8001884:	20015bdc 	.word	0x20015bdc

08001888 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001898:	d102      	bne.n	80018a0 <HAL_TIM_IC_CaptureCallback+0x18>
		measureFrequencyWithTimer(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa0 	bl	80017e0 <measureFrequencyWithTimer>
	}
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <sendDataOverUART>:
	state.remainingMeasurements = 0;
	state.preparedToRunPolarizationPhase = 0;
	state.index = 0;
}

void sendDataOverUART() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	847b      	strh	r3, [r7, #34]	; 0x22
	int i = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
	if (state.activeMeasureTechnique == 1
 80018b6:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <sendDataOverUART+0x138>)
 80018b8:	785b      	ldrb	r3, [r3, #1]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d003      	beq.n	80018c6 <sendDataOverUART+0x1e>
			|| state.activeMeasureTechnique == 2) {
 80018be:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <sendDataOverUART+0x138>)
 80018c0:	785b      	ldrb	r3, [r3, #1]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d16e      	bne.n	80019a4 <sendDataOverUART+0xfc>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	e025      	b.n	8001918 <sendDataOverUART+0x70>
			adc = (uint16_t) (buffer_rx1.uint8[i])
 80018cc:	4a45      	ldr	r2, [pc, #276]	; (80019e4 <sendDataOverUART+0x13c>)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx1.uint8[i + 1]);
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	3301      	adds	r3, #1
 80018da:	4942      	ldr	r1, [pc, #264]	; (80019e4 <sendDataOverUART+0x13c>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx1.uint8[i])
 80018e4:	4413      	add	r3, r2
 80018e6:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 80018e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80018ea:	463b      	mov	r3, r7
 80018ec:	493e      	ldr	r1, [pc, #248]	; (80019e8 <sendDataOverUART+0x140>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f007 f894 	bl	8008a1c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 80018f4:	463b      	mov	r3, r7
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fca2 	bl	8000240 <strlen>
 80018fc:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4639      	mov	r1, r7
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	4839      	ldr	r0, [pc, #228]	; (80019ec <sendDataOverUART+0x144>)
 8001908:	f006 f8bc 	bl	8007a84 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3301      	adds	r3, #1
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	3301      	adds	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
 8001918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <sendDataOverUART+0x148>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3d4      	bcc.n	80018cc <sendDataOverUART+0x24>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
 8001926:	e025      	b.n	8001974 <sendDataOverUART+0xcc>
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001928:	4a32      	ldr	r2, [pc, #200]	; (80019f4 <sendDataOverUART+0x14c>)
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	4413      	add	r3, r2
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx2.uint8[i + 1]);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	3301      	adds	r3, #1
 8001936:	492f      	ldr	r1, [pc, #188]	; (80019f4 <sendDataOverUART+0x14c>)
 8001938:	5ccb      	ldrb	r3, [r1, r3]
 800193a:	b29b      	uxth	r3, r3
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001940:	4413      	add	r3, r2
 8001942:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 8001944:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001946:	463b      	mov	r3, r7
 8001948:	4927      	ldr	r1, [pc, #156]	; (80019e8 <sendDataOverUART+0x140>)
 800194a:	4618      	mov	r0, r3
 800194c:	f007 f866 	bl	8008a1c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001950:	463b      	mov	r3, r7
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fc74 	bl	8000240 <strlen>
 8001958:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800195a:	b29a      	uxth	r2, r3
 800195c:	4639      	mov	r1, r7
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	4822      	ldr	r0, [pc, #136]	; (80019ec <sendDataOverUART+0x144>)
 8001964:	f006 f88e 	bl	8007a84 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3301      	adds	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	3301      	adds	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <sendDataOverUART+0x148>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3d4      	bcc.n	8001928 <sendDataOverUART+0x80>
		}
		sprintf(msg_buffers, ";%hu\n", 50);
 800197e:	463b      	mov	r3, r7
 8001980:	2232      	movs	r2, #50	; 0x32
 8001982:	491d      	ldr	r1, [pc, #116]	; (80019f8 <sendDataOverUART+0x150>)
 8001984:	4618      	mov	r0, r3
 8001986:	f007 f849 	bl	8008a1c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800198a:	463b      	mov	r3, r7
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fc57 	bl	8000240 <strlen>
 8001992:	4603      	mov	r3, r0
 8001994:	b29a      	uxth	r2, r3
 8001996:	4639      	mov	r1, r7
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	4813      	ldr	r0, [pc, #76]	; (80019ec <sendDataOverUART+0x144>)
 800199e:	f006 f871 	bl	8007a84 <HAL_UART_Transmit>
		sprintf(msg_freq, "%d\n", frequency);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
		HAL_MAX_DELAY);
	}

}
 80019a2:	e019      	b.n	80019d8 <sendDataOverUART+0x130>
	} else if (state.activeMeasureTechnique == 3) {
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <sendDataOverUART+0x138>)
 80019a6:	785b      	ldrb	r3, [r3, #1]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d115      	bne.n	80019d8 <sendDataOverUART+0x130>
		sprintf(msg_freq, "%d\n", frequency);
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <sendDataOverUART+0x154>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4912      	ldr	r1, [pc, #72]	; (8001a00 <sendDataOverUART+0x158>)
 80019b6:	4618      	mov	r0, r3
 80019b8:	f007 f830 	bl	8008a1c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fc3d 	bl	8000240 <strlen>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	f107 0110 	add.w	r1, r7, #16
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	4806      	ldr	r0, [pc, #24]	; (80019ec <sendDataOverUART+0x144>)
 80019d4:	f006 f856 	bl	8007a84 <HAL_UART_Transmit>
}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20015bdc 	.word	0x20015bdc
 80019e4:	20015d30 	.word	0x20015d30
 80019e8:	08009240 	.word	0x08009240
 80019ec:	20000204 	.word	0x20000204
 80019f0:	20000000 	.word	0x20000000
 80019f4:	200002d4 	.word	0x200002d4
 80019f8:	08009248 	.word	0x08009248
 80019fc:	200000a0 	.word	0x200000a0
 8001a00:	08009250 	.word	0x08009250

08001a04 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	//stop the ADC when in interrupt
	HAL_ADC_Stop_DMA(&hadc1);
 8001a0c:	481f      	ldr	r0, [pc, #124]	; (8001a8c <HAL_ADC_ConvCpltCallback+0x88>)
 8001a0e:	f001 f8a1 	bl	8002b54 <HAL_ADC_Stop_DMA>
	filledBuffers++;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a1c:	701a      	strb	r2, [r3, #0]
	// observe interval of SPI receiving
	// Run the measurement again

	//first buffer is filled
	if (filledBuffers == 1) {
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_ADC_ConvCpltCallback+0x32>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx2.uint16,
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_ADC_ConvCpltCallback+0x90>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	491a      	ldr	r1, [pc, #104]	; (8001a98 <HAL_ADC_ConvCpltCallback+0x94>)
 8001a2e:	4817      	ldr	r0, [pc, #92]	; (8001a8c <HAL_ADC_ConvCpltCallback+0x88>)
 8001a30:	f000 ffa2 	bl	8002978 <HAL_ADC_Start_DMA>
		} else {
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
					samplesPerPeriod);
		}
	}
}
 8001a34:	e026      	b.n	8001a84 <HAL_ADC_ConvCpltCallback+0x80>
	else if (filledBuffers == 2) {
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d122      	bne.n	8001a84 <HAL_ADC_ConvCpltCallback+0x80>
		switchingCircuitIdle();
 8001a3e:	f7ff fe1d 	bl	800167c <switchingCircuitIdle>
		filledBuffers = 0;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001a48:	f7ff ff2e 	bl	80018a8 <sendDataOverUART>
		state.remainingMeasurements--;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_ADC_ConvCpltCallback+0x98>)
 8001a4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_ADC_ConvCpltCallback+0x98>)
 8001a5c:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_ADC_ConvCpltCallback+0x98>)
 8001a60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d106      	bne.n	8001a76 <HAL_ADC_ConvCpltCallback+0x72>
			state.activeMeasureTechnique = 0;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_ADC_ConvCpltCallback+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim6);
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a70:	f004 fa94 	bl	8005f9c <HAL_TIM_Base_Stop_IT>
}
 8001a74:	e006      	b.n	8001a84 <HAL_ADC_ConvCpltCallback+0x80>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_ADC_ConvCpltCallback+0x90>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4909      	ldr	r1, [pc, #36]	; (8001aa4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <HAL_ADC_ConvCpltCallback+0x88>)
 8001a80:	f000 ff7a 	bl	8002978 <HAL_ADC_Start_DMA>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20015c68 	.word	0x20015c68
 8001a90:	20000090 	.word	0x20000090
 8001a94:	20000000 	.word	0x20000000
 8001a98:	200002d4 	.word	0x200002d4
 8001a9c:	20015bdc 	.word	0x20015bdc
 8001aa0:	2002b67c 	.word	0x2002b67c
 8001aa4:	20015d30 	.word	0x20015d30

08001aa8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_UART_RxCpltCallback+0x4c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d117      	bne.n	8001aea <HAL_UART_RxCpltCallback+0x42>
		state.measureTechniqueUpdated = 1;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_UART_RxCpltCallback+0x50>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	719a      	strb	r2, [r3, #6]
		prepareForNextMeasurements(buffer_uart_rx);
 8001ac0:	480e      	ldr	r0, [pc, #56]	; (8001afc <HAL_UART_RxCpltCallback+0x54>)
 8001ac2:	f000 f81f 	bl	8001b04 <prepareForNextMeasurements>
		char msg_buffer[18];
		//sprintf(msg_buffer, "Mode %u selected\n\r", state.setMeasureTechnique);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffer, strlen(msg_buffer),
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fbb8 	bl	8000240 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	f107 010c 	add.w	r1, r7, #12
 8001ad8:	230a      	movs	r3, #10
 8001ada:	4809      	ldr	r0, [pc, #36]	; (8001b00 <HAL_UART_RxCpltCallback+0x58>)
 8001adc:	f005 ffd2 	bl	8007a84 <HAL_UART_Transmit>
				10);
		//wait for next incomming data
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4906      	ldr	r1, [pc, #24]	; (8001afc <HAL_UART_RxCpltCallback+0x54>)
 8001ae4:	4806      	ldr	r0, [pc, #24]	; (8001b00 <HAL_UART_RxCpltCallback+0x58>)
 8001ae6:	f006 f85f 	bl	8007ba8 <HAL_UART_Receive_IT>
	}
}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40004800 	.word	0x40004800
 8001af8:	20015bdc 	.word	0x20015bdc
 8001afc:	200002d0 	.word	0x200002d0
 8001b00:	20000204 	.word	0x20000204

08001b04 <prepareForNextMeasurements>:

prepareForNextMeasurements(char *receivedData) {
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

	//set measurement method
	switch (receivedData[0]) {
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	3b30      	subs	r3, #48	; 0x30
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d81a      	bhi.n	8001b4c <prepareForNextMeasurements+0x48>
 8001b16:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <prepareForNextMeasurements+0x18>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b35 	.word	0x08001b35
 8001b24:	08001b3d 	.word	0x08001b3d
 8001b28:	08001b45 	.word	0x08001b45
	case '0':
		state.setMeasureTechnique = 0;
 8001b2c:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
		break;
 8001b32:	e00f      	b.n	8001b54 <prepareForNextMeasurements+0x50>
	case '1':
		state.setMeasureTechnique = 1;
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
		break;
 8001b3a:	e00b      	b.n	8001b54 <prepareForNextMeasurements+0x50>
	case '2':
		state.setMeasureTechnique = 2;
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001b3e:	2202      	movs	r2, #2
 8001b40:	701a      	strb	r2, [r3, #0]
		break;
 8001b42:	e007      	b.n	8001b54 <prepareForNextMeasurements+0x50>
	case '3':
		state.setMeasureTechnique = 3;
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001b46:	2203      	movs	r2, #3
 8001b48:	701a      	strb	r2, [r3, #0]
		break;
 8001b4a:	e003      	b.n	8001b54 <prepareForNextMeasurements+0x50>
	default:
		state.setMeasureTechnique = 0;
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
		break;
 8001b52:	bf00      	nop
	}

	//set number of measurements
	switch (receivedData[1]) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3301      	adds	r3, #1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3b30      	subs	r3, #48	; 0x30
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d840      	bhi.n	8001be2 <prepareForNextMeasurements+0xde>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <prepareForNextMeasurements+0x64>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b91 	.word	0x08001b91
 8001b6c:	08001b9b 	.word	0x08001b9b
 8001b70:	08001ba3 	.word	0x08001ba3
 8001b74:	08001bab 	.word	0x08001bab
 8001b78:	08001bb3 	.word	0x08001bb3
 8001b7c:	08001bbb 	.word	0x08001bbb
 8001b80:	08001bc3 	.word	0x08001bc3
 8001b84:	08001bcb 	.word	0x08001bcb
 8001b88:	08001bd3 	.word	0x08001bd3
 8001b8c:	08001bdb 	.word	0x08001bdb
	case '0':
		state.setMeasurements = -1;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b96:	809a      	strh	r2, [r3, #4]
		break;
 8001b98:	e027      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '1':
		state.setMeasurements = 1;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	809a      	strh	r2, [r3, #4]
		break;
 8001ba0:	e023      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '2':
		state.setMeasurements = 2;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	809a      	strh	r2, [r3, #4]
		break;
 8001ba8:	e01f      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '3':
		state.setMeasurements = 3;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001bac:	2203      	movs	r2, #3
 8001bae:	809a      	strh	r2, [r3, #4]
		break;
 8001bb0:	e01b      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '4':
		state.setMeasurements = 4;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	809a      	strh	r2, [r3, #4]
		break;
 8001bb8:	e017      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '5':
		state.setMeasurements = 5;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	809a      	strh	r2, [r3, #4]
		break;
 8001bc0:	e013      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '6':
		state.setMeasurements = 6;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001bc4:	2206      	movs	r2, #6
 8001bc6:	809a      	strh	r2, [r3, #4]
		break;
 8001bc8:	e00f      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '7':
		state.setMeasurements = 7;
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	809a      	strh	r2, [r3, #4]
		break;
 8001bd0:	e00b      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '8':
		state.setMeasurements = 8;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	809a      	strh	r2, [r3, #4]
		break;
 8001bd8:	e007      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	case '9':
		state.setMeasurements = 9;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001bdc:	2209      	movs	r2, #9
 8001bde:	809a      	strh	r2, [r3, #4]
		break;
 8001be0:	e003      	b.n	8001bea <prepareForNextMeasurements+0xe6>
	default:
		state.setMeasurements = 1;
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	809a      	strh	r2, [r3, #4]
		break;
 8001be8:	bf00      	nop
	}
	state.preparedToRunPolarizationPhase = 1;
 8001bea:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <prepareForNextMeasurements+0xfc>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	71da      	strb	r2, [r3, #7]
}
 8001bf0:	bf00      	nop
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20015bdc 	.word	0x20015bdc

08001c04 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	filledBuffers++;
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_SPI_RxCpltCallback+0x90>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_SPI_RxCpltCallback+0x90>)
 8001c16:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_SPI_RxCpltCallback+0x90>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_SPI_RxCpltCallback+0x2e>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2.uint8, samplesPerPeriod);
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_SPI_RxCpltCallback+0x94>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	491c      	ldr	r1, [pc, #112]	; (8001c9c <HAL_SPI_RxCpltCallback+0x98>)
 8001c2a:	481d      	ldr	r0, [pc, #116]	; (8001ca0 <HAL_SPI_RxCpltCallback+0x9c>)
 8001c2c:	f003 fc54 	bl	80054d8 <HAL_SPI_Receive_DMA>
	 samplesPerPeriod++;
	 sprintf(msg_buffers, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);

	 }*/
}
 8001c30:	e02b      	b.n	8001c8a <HAL_SPI_RxCpltCallback+0x86>
	else if (filledBuffers == 2) {
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_SPI_RxCpltCallback+0x90>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d127      	bne.n	8001c8a <HAL_SPI_RxCpltCallback+0x86>
		switchingCircuitIdle();
 8001c3a:	f7ff fd1f 	bl	800167c <switchingCircuitIdle>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <HAL_SPI_RxCpltCallback+0xa0>)
 8001c42:	f004 fa8b 	bl	800615c <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001c46:	2104      	movs	r1, #4
 8001c48:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <HAL_SPI_RxCpltCallback+0xa0>)
 8001c4a:	f004 fa87 	bl	800615c <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4815      	ldr	r0, [pc, #84]	; (8001ca8 <HAL_SPI_RxCpltCallback+0xa4>)
 8001c52:	f004 fa83 	bl	800615c <HAL_TIM_PWM_Stop_IT>
		filledBuffers = 0;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_SPI_RxCpltCallback+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001c5c:	f7ff fe24 	bl	80018a8 <sendDataOverUART>
		state.remainingMeasurements--;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_SPI_RxCpltCallback+0xa8>)
 8001c62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_SPI_RxCpltCallback+0xa8>)
 8001c70:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_SPI_RxCpltCallback+0xa8>)
 8001c74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d103      	bne.n	8001c84 <HAL_SPI_RxCpltCallback+0x80>
			state.activeMeasureTechnique = 0;
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_SPI_RxCpltCallback+0xa8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	705a      	strb	r2, [r3, #1]
}
 8001c82:	e002      	b.n	8001c8a <HAL_SPI_RxCpltCallback+0x86>
			state.preparedToRunPolarizationPhase = 1;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HAL_SPI_RxCpltCallback+0xa8>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	71da      	strb	r2, [r3, #7]
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000090 	.word	0x20000090
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	200002d4 	.word	0x200002d4
 8001ca0:	2002b6fc 	.word	0x2002b6fc
 8001ca4:	2002b6bc 	.word	0x2002b6bc
 8001ca8:	20000184 	.word	0x20000184
 8001cac:	20015bdc 	.word	0x20015bdc

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_MspInit+0x44>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_MspInit+0x44>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_MspInit+0x44>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_MspInit+0x44>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_MspInit+0x44>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_MspInit+0x44>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800

08001d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <HAL_ADC_MspInit+0xd0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d152      	bne.n	8001dd0 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_ADC_MspInit+0xd4>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a2b      	ldr	r2, [pc, #172]	; (8001ddc <HAL_ADC_MspInit+0xd4>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_ADC_MspInit+0xd4>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_ADC_MspInit+0xd4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <HAL_ADC_MspInit+0xd4>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_ADC_MspInit+0xd4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481c      	ldr	r0, [pc, #112]	; (8001de0 <HAL_ADC_MspInit+0xd8>)
 8001d6e:	f001 ff2f 	bl	8003bd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_ADC_MspInit+0xe0>)
 8001d76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001d9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001db6:	f001 fb03 	bl	80033c0 <HAL_DMA_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001dc0:	f7ff ff76 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dca:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <HAL_ADC_MspInit+0xdc>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	2002b61c 	.word	0x2002b61c
 8001de8:	40026470 	.word	0x40026470

08001dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	; 0x30
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <HAL_I2C_MspInit+0x114>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d128      	bne.n	8001e60 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2a:	2312      	movs	r3, #18
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e36:	2304      	movs	r3, #4
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4831      	ldr	r0, [pc, #196]	; (8001f08 <HAL_I2C_MspInit+0x11c>)
 8001e42:	f001 fec5 	bl	8003bd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a2e      	ldr	r2, [pc, #184]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e5e:	e04a      	b.n	8001ef6 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a29      	ldr	r2, [pc, #164]	; (8001f0c <HAL_I2C_MspInit+0x120>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d145      	bne.n	8001ef6 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eac:	2304      	movs	r3, #4
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4816      	ldr	r0, [pc, #88]	; (8001f10 <HAL_I2C_MspInit+0x124>)
 8001eb8:	f001 fe8a 	bl	8003bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480e      	ldr	r0, [pc, #56]	; (8001f14 <HAL_I2C_MspInit+0x128>)
 8001eda:	f001 fe79 	bl	8003bd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_I2C_MspInit+0x118>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	3730      	adds	r7, #48	; 0x30
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40005400 	.word	0x40005400
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400
 8001f0c:	40005c00 	.word	0x40005c00
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020000 	.word	0x40020000

08001f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	; 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a46      	ldr	r2, [pc, #280]	; (8002050 <HAL_SPI_MspInit+0x138>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d158      	bne.n	8001fec <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3a:	4b46      	ldr	r3, [pc, #280]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a45      	ldr	r2, [pc, #276]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8001f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a3f      	ldr	r2, [pc, #252]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8001f6a:	23b0      	movs	r3, #176	; 0xb0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	4834      	ldr	r0, [pc, #208]	; (8002058 <HAL_SPI_MspInit+0x140>)
 8001f86:	f001 fe23 	bl	8003bd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001f8a:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001f8c:	4a34      	ldr	r2, [pc, #208]	; (8002060 <HAL_SPI_MspInit+0x148>)
 8001f8e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001f92:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f96:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f98:	4b30      	ldr	r3, [pc, #192]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001faa:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fb2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fb4:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fba:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001fce:	4823      	ldr	r0, [pc, #140]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fd0:	f001 f9f6 	bl	80033c0 <HAL_DMA_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8001fda:	f7ff fe69 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_SPI_MspInit+0x144>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001fea:	e02c      	b.n	8002046 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <HAL_SPI_MspInit+0x14c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d127      	bne.n	8002046 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8001ffc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_SPI_MspInit+0x13c>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002026:	2374      	movs	r3, #116	; 0x74
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002036:	2305      	movs	r3, #5
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203a:	f107 031c 	add.w	r3, r7, #28
 800203e:	4619      	mov	r1, r3
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <HAL_SPI_MspInit+0x150>)
 8002042:	f001 fdc5 	bl	8003bd0 <HAL_GPIO_Init>
}
 8002046:	bf00      	nop
 8002048:	3730      	adds	r7, #48	; 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40013000 	.word	0x40013000
 8002054:	40023800 	.word	0x40023800
 8002058:	40020000 	.word	0x40020000
 800205c:	2002b820 	.word	0x2002b820
 8002060:	40026410 	.word	0x40026410
 8002064:	40013400 	.word	0x40013400
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a41      	ldr	r2, [pc, #260]	; (8002180 <HAL_TIM_Base_MspInit+0x114>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d114      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a40      	ldr	r2, [pc, #256]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2101      	movs	r1, #1
 800209a:	201b      	movs	r0, #27
 800209c:	f001 f959 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020a0:	201b      	movs	r0, #27
 80020a2:	f001 f972 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020a6:	e066      	b.n	8002176 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a36      	ldr	r2, [pc, #216]	; (8002188 <HAL_TIM_Base_MspInit+0x11c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d114      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	4a33      	ldr	r2, [pc, #204]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6413      	str	r3, [r2, #64]	; 0x40
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2101      	movs	r1, #1
 80020ce:	201d      	movs	r0, #29
 80020d0:	f001 f93f 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020d4:	201d      	movs	r0, #29
 80020d6:	f001 f958 	bl	800338a <HAL_NVIC_EnableIRQ>
}
 80020da:	e04c      	b.n	8002176 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM5)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2a      	ldr	r2, [pc, #168]	; (800218c <HAL_TIM_Base_MspInit+0x120>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d114      	bne.n	8002110 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2101      	movs	r1, #1
 8002102:	2032      	movs	r0, #50	; 0x32
 8002104:	f001 f925 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002108:	2032      	movs	r0, #50	; 0x32
 800210a:	f001 f93e 	bl	800338a <HAL_NVIC_EnableIRQ>
}
 800210e:	e032      	b.n	8002176 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <HAL_TIM_Base_MspInit+0x124>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d114      	bne.n	8002144 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 8002120:	f043 0310 	orr.w	r3, r3, #16
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2036      	movs	r0, #54	; 0x36
 8002138:	f001 f90b 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800213c:	2036      	movs	r0, #54	; 0x36
 800213e:	f001 f924 	bl	800338a <HAL_NVIC_EnableIRQ>
}
 8002142:	e018      	b.n	8002176 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM8)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <HAL_TIM_Base_MspInit+0x128>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d113      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_TIM_Base_MspInit+0x118>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2101      	movs	r1, #1
 800216a:	202e      	movs	r0, #46	; 0x2e
 800216c:	f001 f8f1 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002170:	202e      	movs	r0, #46	; 0x2e
 8002172:	f001 f90a 	bl	800338a <HAL_NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40010000 	.word	0x40010000
 8002184:	40023800 	.word	0x40023800
 8002188:	40000400 	.word	0x40000400
 800218c:	40000c00 	.word	0x40000c00
 8002190:	40001000 	.word	0x40001000
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b8:	d130      	bne.n	800221c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_TIM_IC_MspInit+0x8c>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_TIM_IC_MspInit+0x8c>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_TIM_IC_MspInit+0x8c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_TIM_IC_MspInit+0x8c>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_TIM_IC_MspInit+0x8c>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_TIM_IC_MspInit+0x8c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 80021ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021fc:	2301      	movs	r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <HAL_TIM_IC_MspInit+0x90>)
 8002208:	f001 fce2 	bl	8003bd0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2101      	movs	r1, #1
 8002210:	201c      	movs	r0, #28
 8002212:	f001 f89e 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002216:	201c      	movs	r0, #28
 8002218:	f001 f8b7 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000

0800222c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_TIM_PWM_MspInit+0x44>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d113      	bne.n	8002266 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_TIM_PWM_MspInit+0x48>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <HAL_TIM_PWM_MspInit+0x48>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_TIM_PWM_MspInit+0x48>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2101      	movs	r1, #1
 800225a:	201e      	movs	r0, #30
 800225c:	f001 f879 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002260:	201e      	movs	r0, #30
 8002262:	f001 f892 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40000800 	.word	0x40000800
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a45      	ldr	r2, [pc, #276]	; (80023ac <HAL_TIM_MspPostInit+0x134>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d11d      	bne.n	80022d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800229a:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a44      	ldr	r2, [pc, #272]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	61bb      	str	r3, [r7, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 80022b2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4839      	ldr	r0, [pc, #228]	; (80023b4 <HAL_TIM_MspPostInit+0x13c>)
 80022d0:	f001 fc7e 	bl	8003bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80022d4:	e065      	b.n	80023a2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <HAL_TIM_MspPostInit+0x140>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d11c      	bne.n	800231a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a32      	ldr	r2, [pc, #200]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 80022f8:	2340      	movs	r3, #64	; 0x40
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002308:	2302      	movs	r3, #2
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	482a      	ldr	r0, [pc, #168]	; (80023bc <HAL_TIM_MspPostInit+0x144>)
 8002314:	f001 fc5c 	bl	8003bd0 <HAL_GPIO_Init>
}
 8002318:	e043      	b.n	80023a2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <HAL_TIM_MspPostInit+0x148>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d11d      	bne.n	8002360 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002324:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6313      	str	r3, [r2, #48]	; 0x30
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 800233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800234e:	2302      	movs	r3, #2
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	481a      	ldr	r0, [pc, #104]	; (80023c4 <HAL_TIM_MspPostInit+0x14c>)
 800235a:	f001 fc39 	bl	8003bd0 <HAL_GPIO_Init>
}
 800235e:	e020      	b.n	80023a2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_TIM_MspPostInit+0x150>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11b      	bne.n	80023a2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_TIM_MspPostInit+0x138>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8002382:	2340      	movs	r3, #64	; 0x40
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002392:	2303      	movs	r3, #3
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4619      	mov	r1, r3
 800239c:	480b      	ldr	r0, [pc, #44]	; (80023cc <HAL_TIM_MspPostInit+0x154>)
 800239e:	f001 fc17 	bl	8003bd0 <HAL_GPIO_Init>
}
 80023a2:	bf00      	nop
 80023a4:	3730      	adds	r7, #48	; 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40020000 	.word	0x40020000
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40010400 	.word	0x40010400
 80023cc:	40020800 	.word	0x40020800

080023d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b092      	sub	sp, #72	; 0x48
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a79      	ldr	r2, [pc, #484]	; (80025d4 <HAL_UART_MspInit+0x204>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d129      	bne.n	8002446 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80023f2:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <HAL_UART_MspInit+0x208>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a78      	ldr	r2, [pc, #480]	; (80025d8 <HAL_UART_MspInit+0x208>)
 80023f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	4b73      	ldr	r3, [pc, #460]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a72      	ldr	r2, [pc, #456]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b70      	ldr	r3, [pc, #448]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 8002422:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002434:	2308      	movs	r3, #8
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002438:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800243c:	4619      	mov	r1, r3
 800243e:	4867      	ldr	r0, [pc, #412]	; (80025dc <HAL_UART_MspInit+0x20c>)
 8002440:	f001 fbc6 	bl	8003bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002444:	e0c1      	b.n	80025ca <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a65      	ldr	r2, [pc, #404]	; (80025e0 <HAL_UART_MspInit+0x210>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d129      	bne.n	80024a4 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002450:	4b61      	ldr	r3, [pc, #388]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a60      	ldr	r2, [pc, #384]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002456:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800245a:	6413      	str	r3, [r2, #64]	; 0x40
 800245c:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002468:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	6313      	str	r3, [r2, #48]	; 0x30
 8002474:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002480:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002492:	2308      	movs	r3, #8
 8002494:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002496:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800249a:	4619      	mov	r1, r3
 800249c:	4851      	ldr	r0, [pc, #324]	; (80025e4 <HAL_UART_MspInit+0x214>)
 800249e:	f001 fb97 	bl	8003bd0 <HAL_GPIO_Init>
}
 80024a2:	e092      	b.n	80025ca <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a4f      	ldr	r2, [pc, #316]	; (80025e8 <HAL_UART_MspInit+0x218>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d129      	bne.n	8002502 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_UART_MspInit+0x208>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_UART_MspInit+0x208>)
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_UART_MspInit+0x208>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	4b44      	ldr	r3, [pc, #272]	; (80025d8 <HAL_UART_MspInit+0x208>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a43      	ldr	r2, [pc, #268]	; (80025d8 <HAL_UART_MspInit+0x208>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_UART_MspInit+0x208>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 80024de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80024f0:	2304      	movs	r3, #4
 80024f2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024f8:	4619      	mov	r1, r3
 80024fa:	4838      	ldr	r0, [pc, #224]	; (80025dc <HAL_UART_MspInit+0x20c>)
 80024fc:	f001 fb68 	bl	8003bd0 <HAL_GPIO_Init>
}
 8002500:	e063      	b.n	80025ca <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a39      	ldr	r2, [pc, #228]	; (80025ec <HAL_UART_MspInit+0x21c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d128      	bne.n	800255e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800250c:	4b32      	ldr	r3, [pc, #200]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a31      	ldr	r2, [pc, #196]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
 8002518:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	61bb      	str	r3, [r7, #24]
 8002522:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	4a2b      	ldr	r2, [pc, #172]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6313      	str	r3, [r2, #48]	; 0x30
 8002530:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 800253c:	230c      	movs	r3, #12
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800254c:	2307      	movs	r3, #7
 800254e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002554:	4619      	mov	r1, r3
 8002556:	4826      	ldr	r0, [pc, #152]	; (80025f0 <HAL_UART_MspInit+0x220>)
 8002558:	f001 fb3a 	bl	8003bd0 <HAL_GPIO_Init>
}
 800255c:	e035      	b.n	80025ca <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <HAL_UART_MspInit+0x224>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d130      	bne.n	80025ca <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800256e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002572:	6413      	str	r3, [r2, #64]	; 0x40
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_UART_MspInit+0x208>)
 8002586:	f043 0302 	orr.w	r3, r3, #2
 800258a:	6313      	str	r3, [r2, #48]	; 0x30
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_UART_MspInit+0x208>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8002598:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025aa:	2307      	movs	r3, #7
 80025ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b2:	4619      	mov	r1, r3
 80025b4:	4809      	ldr	r0, [pc, #36]	; (80025dc <HAL_UART_MspInit+0x20c>)
 80025b6:	f001 fb0b 	bl	8003bd0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2027      	movs	r0, #39	; 0x27
 80025c0:	f000 fec7 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025c4:	2027      	movs	r0, #39	; 0x27
 80025c6:	f000 fee0 	bl	800338a <HAL_NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3748      	adds	r7, #72	; 0x48
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40005000 	.word	0x40005000
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40007800 	.word	0x40007800
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40011000 	.word	0x40011000
 80025ec:	40004400 	.word	0x40004400
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40004800 	.word	0x40004800

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler+0x4>

08002612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <UsageFault_Handler+0x4>

0800261e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264c:	f000 f90e 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <TIM1_CC_IRQHandler+0x10>)
 800265a:	f003 fef9 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2002b6bc 	.word	0x2002b6bc

08002668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800266c:	4802      	ldr	r0, [pc, #8]	; (8002678 <TIM2_IRQHandler+0x10>)
 800266e:	f003 feef 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2002b760 	.word	0x2002b760

0800267c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <TIM3_IRQHandler+0x10>)
 8002682:	f003 fee5 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20015b9c 	.word	0x20015b9c

08002690 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <TIM4_IRQHandler+0x10>)
 8002696:	f003 fedb 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200001c4 	.word	0x200001c4

080026a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <USART3_IRQHandler+0x10>)
 80026aa:	f005 fb1f 	bl	8007cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000204 	.word	0x20000204

080026b8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <TIM8_CC_IRQHandler+0x10>)
 80026be:	f003 fec7 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000184 	.word	0x20000184

080026cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <TIM5_IRQHandler+0x10>)
 80026d2:	f003 febd 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20015b5c 	.word	0x20015b5c

080026e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <TIM6_DAC_IRQHandler+0x10>)
 80026e6:	f003 feb3 	bl	8006450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2002b67c 	.word	0x2002b67c

080026f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <DMA2_Stream0_IRQHandler+0x10>)
 80026fa:	f001 f801 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2002b820 	.word	0x2002b820

08002708 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <DMA2_Stream4_IRQHandler+0x10>)
 800270e:	f000 fff7 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	2002b61c 	.word	0x2002b61c

0800271c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <_sbrk+0x50>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <_sbrk+0x16>
		heap_end = &end;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <_sbrk+0x50>)
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <_sbrk+0x54>)
 8002730:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <_sbrk+0x50>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <_sbrk+0x50>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	466a      	mov	r2, sp
 8002742:	4293      	cmp	r3, r2
 8002744:	d907      	bls.n	8002756 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002746:	f006 f937 	bl	80089b8 <__errno>
 800274a:	4602      	mov	r2, r0
 800274c:	230c      	movs	r3, #12
 800274e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
 8002754:	e006      	b.n	8002764 <_sbrk+0x48>
	}

	heap_end += incr;
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <_sbrk+0x50>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	4a03      	ldr	r2, [pc, #12]	; (800276c <_sbrk+0x50>)
 8002760:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	200000ac 	.word	0x200000ac
 8002770:	2002b888 	.word	0x2002b888

08002774 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <SystemInit+0x28>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <SystemInit+0x28>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <SystemInit+0x28>)
 800278a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800278e:	609a      	str	r2, [r3, #8]
#endif
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027a6:	e003      	b.n	80027b0 <LoopCopyDataInit>

080027a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027ae:	3104      	adds	r1, #4

080027b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027b0:	480b      	ldr	r0, [pc, #44]	; (80027e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027b8:	d3f6      	bcc.n	80027a8 <CopyDataInit>
  ldr  r2, =_sbss
 80027ba:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027bc:	e002      	b.n	80027c4 <LoopFillZerobss>

080027be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027c0:	f842 3b04 	str.w	r3, [r2], #4

080027c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027c8:	d3f9      	bcc.n	80027be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027ca:	f7ff ffd3 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ce:	f006 f8f9 	bl	80089c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d2:	f7fd ff0d 	bl	80005f0 <main>
  bx  lr    
 80027d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80027dc:	080092b8 	.word	0x080092b8
  ldr  r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027e4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80027e8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80027ec:	2002b888 	.word	0x2002b888

080027f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC_IRQHandler>

080027f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f6:	2003      	movs	r0, #3
 80027f8:	f000 fda0 	bl	800333c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f000 f805 	bl	800280c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002802:	f7ff fa5d 	bl	8001cc0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_InitTick+0x54>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_InitTick+0x58>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	fbb3 f3f1 	udiv	r3, r3, r1
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fdbb 	bl	80033a6 <HAL_SYSTICK_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00e      	b.n	8002858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d80a      	bhi.n	8002856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f000 fd83 	bl	8003352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <HAL_InitTick+0x5c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000004 	.word	0x20000004
 8002864:	2000000c 	.word	0x2000000c
 8002868:	20000008 	.word	0x20000008

0800286c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_IncTick+0x20>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x24>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_IncTick+0x24>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	2000000c 	.word	0x2000000c
 8002890:	2002b880 	.word	0x2002b880

08002894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return uwTick;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_GetTick+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	2002b880 	.word	0x2002b880

080028ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff ffee 	bl	8002894 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d005      	beq.n	80028d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_Delay+0x40>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028d2:	bf00      	nop
 80028d4:	f7ff ffde 	bl	8002894 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d8f7      	bhi.n	80028d4 <HAL_Delay+0x28>
  {
  }
}
 80028e4:	bf00      	nop
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	2000000c 	.word	0x2000000c

080028f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e031      	b.n	800296a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff f9fa 	bl	8001d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b00      	cmp	r3, #0
 800292c:	d116      	bne.n	800295c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_ADC_Init+0x84>)
 8002934:	4013      	ands	r3, r2
 8002936:	f043 0202 	orr.w	r2, r3, #2
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fab0 	bl	8002ea4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f023 0303 	bic.w	r3, r3, #3
 8002952:	f043 0201 	orr.w	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
 800295a:	e001      	b.n	8002960 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	ffffeefd 	.word	0xffffeefd

08002978 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_ADC_Start_DMA+0x1e>
 8002992:	2302      	movs	r3, #2
 8002994:	e0c7      	b.n	8002b26 <HAL_ADC_Start_DMA+0x1ae>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d018      	beq.n	80029de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80029bc:	4b5c      	ldr	r3, [pc, #368]	; (8002b30 <HAL_ADC_Start_DMA+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5c      	ldr	r2, [pc, #368]	; (8002b34 <HAL_ADC_Start_DMA+0x1bc>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0c9a      	lsrs	r2, r3, #18
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80029d0:	e002      	b.n	80029d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f9      	bne.n	80029d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f040 809b 	bne.w	8002b24 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f2:	4b51      	ldr	r3, [pc, #324]	; (8002b38 <HAL_ADC_Start_DMA+0x1c0>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a28:	d106      	bne.n	8002a38 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f023 0206 	bic.w	r2, r3, #6
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
 8002a36:	e002      	b.n	8002a3e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	4a3c      	ldr	r2, [pc, #240]	; (8002b3c <HAL_ADC_Start_DMA+0x1c4>)
 8002a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <HAL_ADC_Start_DMA+0x1c8>)
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	4a3a      	ldr	r2, [pc, #232]	; (8002b44 <HAL_ADC_Start_DMA+0x1cc>)
 8002a5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	334c      	adds	r3, #76	; 0x4c
 8002a92:	4619      	mov	r1, r3
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f000 fd40 	bl	800351c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <HAL_ADC_Start_DMA+0x1d0>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d136      	bne.n	8002b24 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	e02d      	b.n	8002b24 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <HAL_ADC_Start_DMA+0x1d4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10e      	bne.n	8002af0 <HAL_ADC_Start_DMA+0x178>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d107      	bne.n	8002af0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aee:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_ADC_Start_DMA+0x1d0>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d113      	bne.n	8002b24 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <HAL_ADC_Start_DMA+0x1d8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10e      	bne.n	8002b24 <HAL_ADC_Start_DMA+0x1ac>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b22:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000004 	.word	0x20000004
 8002b34:	431bde83 	.word	0x431bde83
 8002b38:	fffff8fe 	.word	0xfffff8fe
 8002b3c:	08003099 	.word	0x08003099
 8002b40:	08003153 	.word	0x08003153
 8002b44:	0800316f 	.word	0x0800316f
 8002b48:	40012300 	.word	0x40012300
 8002b4c:	40012000 	.word	0x40012000
 8002b50:	40012200 	.word	0x40012200

08002b54 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_Stop_DMA+0x1a>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e036      	b.n	8002bdc <HAL_ADC_Stop_DMA+0x88>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11e      	bne.n	8002bd2 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fd17 	bl	80035dc <HAL_DMA_Abort>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002bc0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_ADC_Stop_DMA+0x90>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	ffffeefe 	.word	0xffffeefe

08002be8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1c>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e12a      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x272>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	d93a      	bls.n	8002cb2 <HAL_ADC_ConfigChannel+0xa2>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c44:	d035      	beq.n	8002cb2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68d9      	ldr	r1, [r3, #12]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b1e      	subs	r3, #30
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	400a      	ands	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a87      	ldr	r2, [pc, #540]	; (8002e90 <HAL_ADC_ConfigChannel+0x280>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10a      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68d9      	ldr	r1, [r3, #12]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	061a      	lsls	r2, r3, #24
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c8a:	e035      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68d9      	ldr	r1, [r3, #12]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4403      	add	r3, r0
 8002ca4:	3b1e      	subs	r3, #30
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb0:	e022      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6919      	ldr	r1, [r3, #16]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6919      	ldr	r1, [r3, #16]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	4603      	mov	r3, r0
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4403      	add	r3, r0
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b06      	cmp	r3, #6
 8002cfe:	d824      	bhi.n	8002d4a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	3b05      	subs	r3, #5
 8002d12:	221f      	movs	r2, #31
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	400a      	ands	r2, r1
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b05      	subs	r3, #5
 8002d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	635a      	str	r2, [r3, #52]	; 0x34
 8002d48:	e04c      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d824      	bhi.n	8002d9c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	3b23      	subs	r3, #35	; 0x23
 8002d64:	221f      	movs	r2, #31
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	400a      	ands	r2, r1
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4618      	mov	r0, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b23      	subs	r3, #35	; 0x23
 8002d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9a:	e023      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3b41      	subs	r3, #65	; 0x41
 8002dae:	221f      	movs	r2, #31
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43da      	mvns	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b41      	subs	r3, #65	; 0x41
 8002dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <HAL_ADC_ConfigChannel+0x284>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10a      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1f4>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002df6:	d105      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_ADC_ConfigChannel+0x288>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a26      	ldr	r2, [pc, #152]	; (8002e98 <HAL_ADC_ConfigChannel+0x288>)
 8002dfe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e02:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <HAL_ADC_ConfigChannel+0x284>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d109      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x212>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b12      	cmp	r3, #18
 8002e14:	d105      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e16:	4b20      	ldr	r3, [pc, #128]	; (8002e98 <HAL_ADC_ConfigChannel+0x288>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a1f      	ldr	r2, [pc, #124]	; (8002e98 <HAL_ADC_ConfigChannel+0x288>)
 8002e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e20:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_ADC_ConfigChannel+0x284>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d125      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x268>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <HAL_ADC_ConfigChannel+0x280>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <HAL_ADC_ConfigChannel+0x22e>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b11      	cmp	r3, #17
 8002e3c:	d11c      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e3e:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_ADC_ConfigChannel+0x288>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <HAL_ADC_ConfigChannel+0x288>)
 8002e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <HAL_ADC_ConfigChannel+0x280>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d111      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_ADC_ConfigChannel+0x28c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a11      	ldr	r2, [pc, #68]	; (8002ea0 <HAL_ADC_ConfigChannel+0x290>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0c9a      	lsrs	r2, r3, #18
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e6a:	e002      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f9      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	10000012 	.word	0x10000012
 8002e94:	40012000 	.word	0x40012000
 8002e98:	40012300 	.word	0x40012300
 8002e9c:	20000004 	.word	0x20000004
 8002ea0:	431bde83 	.word	0x431bde83

08002ea4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002eac:	4b78      	ldr	r3, [pc, #480]	; (8003090 <ADC_Init+0x1ec>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a77      	ldr	r2, [pc, #476]	; (8003090 <ADC_Init+0x1ec>)
 8002eb2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002eb6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002eb8:	4b75      	ldr	r3, [pc, #468]	; (8003090 <ADC_Init+0x1ec>)
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4973      	ldr	r1, [pc, #460]	; (8003090 <ADC_Init+0x1ec>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	021a      	lsls	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ef8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	4a58      	ldr	r2, [pc, #352]	; (8003094 <ADC_Init+0x1f0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d022      	beq.n	8002f7e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	e00f      	b.n	8002f9e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0202 	bic.w	r2, r2, #2
 8002fac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6899      	ldr	r1, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	005a      	lsls	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01b      	beq.n	8003004 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	035a      	lsls	r2, r3, #13
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	e007      	b.n	8003014 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003012:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	3b01      	subs	r3, #1
 8003030:	051a      	lsls	r2, r3, #20
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003056:	025a      	lsls	r2, r3, #9
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	029a      	lsls	r2, r3, #10
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40012300 	.word	0x40012300
 8003094:	0f000001 	.word	0x0f000001

08003098 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d13c      	bne.n	800312c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d12b      	bne.n	8003124 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d127      	bne.n	8003124 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d119      	bne.n	8003124 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0220 	bic.w	r2, r2, #32
 80030fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d105      	bne.n	8003124 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0201 	orr.w	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7fe fc6d 	bl	8001a04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800312a:	e00e      	b.n	800314a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fd5f 	bl	8002bfc <HAL_ADC_ErrorCallback>
}
 800313e:	e004      	b.n	800314a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff fd41 	bl	8002be8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2240      	movs	r2, #64	; 0x40
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f043 0204 	orr.w	r2, r3, #4
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff fd34 	bl	8002bfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <__NVIC_SetPriorityGrouping+0x40>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ca:	4a04      	ldr	r2, [pc, #16]	; (80031dc <__NVIC_SetPriorityGrouping+0x40>)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	60d3      	str	r3, [r2, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000ed00 	.word	0xe000ed00
 80031e0:	05fa0000 	.word	0x05fa0000

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db0b      	blt.n	800322a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	4907      	ldr	r1, [pc, #28]	; (8003238 <__NVIC_EnableIRQ+0x38>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2001      	movs	r0, #1
 8003222:	fa00 f202 	lsl.w	r2, r0, r2
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000e100 	.word	0xe000e100

0800323c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	2b00      	cmp	r3, #0
 800324e:	db0a      	blt.n	8003266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <__NVIC_SetPriority+0x4c>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	440b      	add	r3, r1
 8003260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003264:	e00a      	b.n	800327c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <__NVIC_SetPriority+0x50>)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	3b04      	subs	r3, #4
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	440b      	add	r3, r1
 800327a:	761a      	strb	r2, [r3, #24]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f1c3 0307 	rsb	r3, r3, #7
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	bf28      	it	cs
 80032ae:	2304      	movcs	r3, #4
 80032b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d902      	bls.n	80032c0 <NVIC_EncodePriority+0x30>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3b03      	subs	r3, #3
 80032be:	e000      	b.n	80032c2 <NVIC_EncodePriority+0x32>
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	401a      	ands	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d8:	f04f 31ff 	mov.w	r1, #4294967295
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43d9      	mvns	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	4313      	orrs	r3, r2
         );
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003308:	d301      	bcc.n	800330e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330a:	2301      	movs	r3, #1
 800330c:	e00f      	b.n	800332e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <SysTick_Config+0x40>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003316:	210f      	movs	r1, #15
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f7ff ff8e 	bl	800323c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <SysTick_Config+0x40>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <SysTick_Config+0x40>)
 8003328:	2207      	movs	r2, #7
 800332a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000e010 	.word	0xe000e010

0800333c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff29 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003364:	f7ff ff3e 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 8003368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	6978      	ldr	r0, [r7, #20]
 8003370:	f7ff ff8e 	bl	8003290 <NVIC_EncodePriority>
 8003374:	4602      	mov	r2, r0
 8003376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff5d 	bl	800323c <__NVIC_SetPriority>
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff31 	bl	8003200 <__NVIC_EnableIRQ>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ffa2 	bl	80032f8 <SysTick_Config>
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033cc:	f7ff fa62 	bl	8002894 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e099      	b.n	8003510 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033fc:	e00f      	b.n	800341e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033fe:	f7ff fa49 	bl	8002894 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b05      	cmp	r3, #5
 800340a:	d908      	bls.n	800341e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2203      	movs	r2, #3
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e078      	b.n	8003510 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e8      	bne.n	80033fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4b38      	ldr	r3, [pc, #224]	; (8003518 <HAL_DMA_Init+0x158>)
 8003438:	4013      	ands	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800344a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	2b04      	cmp	r3, #4
 8003476:	d107      	bne.n	8003488 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4313      	orrs	r3, r2
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d117      	bne.n	80034e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00e      	beq.n	80034e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fb09 	bl	8003adc <DMA_CheckFifoParam>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2240      	movs	r2, #64	; 0x40
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034de:	2301      	movs	r3, #1
 80034e0:	e016      	b.n	8003510 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fac0 	bl	8003a70 <DMA_CalcBaseAndBitshift>
 80034f0:	4603      	mov	r3, r0
 80034f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	223f      	movs	r2, #63	; 0x3f
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	e010803f 	.word	0xe010803f

0800351c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_DMA_Start_IT+0x26>
 800353e:	2302      	movs	r3, #2
 8003540:	e048      	b.n	80035d4 <HAL_DMA_Start_IT+0xb8>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d137      	bne.n	80035c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fa52 	bl	8003a14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	223f      	movs	r2, #63	; 0x3f
 8003576:	409a      	lsls	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0216 	orr.w	r2, r2, #22
 800358a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800359a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0208 	orr.w	r2, r2, #8
 80035b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e005      	b.n	80035d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
 80035d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035ea:	f7ff f953 	bl	8002894 <HAL_GetTick>
 80035ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d008      	beq.n	800360e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e052      	b.n	80036b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0216 	bic.w	r2, r2, #22
 800361c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800362c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_DMA_Abort+0x62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0208 	bic.w	r2, r2, #8
 800364c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365e:	e013      	b.n	8003688 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003660:	f7ff f918 	bl	8002894 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b05      	cmp	r3, #5
 800366c:	d90c      	bls.n	8003688 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2203      	movs	r2, #3
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e015      	b.n	80036b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e4      	bne.n	8003660 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	223f      	movs	r2, #63	; 0x3f
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d004      	beq.n	80036da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2280      	movs	r2, #128	; 0x80
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00c      	b.n	80036f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2205      	movs	r2, #5
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800370c:	4b92      	ldr	r3, [pc, #584]	; (8003958 <HAL_DMA_IRQHandler+0x258>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a92      	ldr	r2, [pc, #584]	; (800395c <HAL_DMA_IRQHandler+0x25c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a9b      	lsrs	r3, r3, #10
 8003718:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	2208      	movs	r2, #8
 800372c:	409a      	lsls	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01a      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d013      	beq.n	800376c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	2208      	movs	r2, #8
 800375a:	409a      	lsls	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	2201      	movs	r2, #1
 8003772:	409a      	lsls	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	2204      	movs	r2, #4
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	2204      	movs	r2, #4
 80037c6:	409a      	lsls	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	2210      	movs	r2, #16
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d043      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03c      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	2210      	movs	r2, #16
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d018      	beq.n	8003842 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d108      	bne.n	8003830 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d024      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
 800382e:	e01f      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01b      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e016      	b.n	8003870 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d107      	bne.n	8003860 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0208 	bic.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	2220      	movs	r2, #32
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 808e 	beq.w	800399e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8086 	beq.w	800399e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2220      	movs	r2, #32
 8003898:	409a      	lsls	r2, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d136      	bne.n	8003918 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0216 	bic.w	r2, r2, #22
 80038b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <HAL_DMA_IRQHandler+0x1da>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0208 	bic.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	223f      	movs	r2, #63	; 0x3f
 80038f0:	409a      	lsls	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07d      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
        }
        return;
 8003916:	e078      	b.n	8003a0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01c      	beq.n	8003960 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d108      	bne.n	8003946 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	2b00      	cmp	r3, #0
 800393a:	d030      	beq.n	800399e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	e02b      	b.n	800399e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d027      	beq.n	800399e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
 8003956:	e022      	b.n	800399e <HAL_DMA_IRQHandler+0x29e>
 8003958:	20000004 	.word	0x20000004
 800395c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10f      	bne.n	800398e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0210 	bic.w	r2, r2, #16
 800397c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d032      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d022      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2205      	movs	r2, #5
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3301      	adds	r3, #1
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d307      	bcc.n	80039e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f2      	bne.n	80039ca <HAL_DMA_IRQHandler+0x2ca>
 80039e4:	e000      	b.n	80039e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e000      	b.n	8003a0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a0a:	bf00      	nop
    }
  }
}
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop

08003a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d108      	bne.n	8003a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a52:	e007      	b.n	8003a64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3b10      	subs	r3, #16
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <DMA_CalcBaseAndBitshift+0x60>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8a:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d908      	bls.n	8003ab0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	1d1a      	adds	r2, r3, #4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	659a      	str	r2, [r3, #88]	; 0x58
 8003aae:	e006      	b.n	8003abe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x68>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	aaaaaaab 	.word	0xaaaaaaab
 8003ad4:	0800926c 	.word	0x0800926c
 8003ad8:	fffffc00 	.word	0xfffffc00

08003adc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d11f      	bne.n	8003b36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d855      	bhi.n	8003ba8 <DMA_CheckFifoParam+0xcc>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <DMA_CheckFifoParam+0x28>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b27 	.word	0x08003b27
 8003b0c:	08003b15 	.word	0x08003b15
 8003b10:	08003ba9 	.word	0x08003ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d045      	beq.n	8003bac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e042      	b.n	8003bac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b2e:	d13f      	bne.n	8003bb0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b34:	e03c      	b.n	8003bb0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3e:	d121      	bne.n	8003b84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d836      	bhi.n	8003bb4 <DMA_CheckFifoParam+0xd8>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <DMA_CheckFifoParam+0x70>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b63 	.word	0x08003b63
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003b75 	.word	0x08003b75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b60:	e02f      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d024      	beq.n	8003bb8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b72:	e021      	b.n	8003bb8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b7c:	d11e      	bne.n	8003bbc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b82:	e01b      	b.n	8003bbc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <DMA_CheckFifoParam+0xb4>
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d003      	beq.n	8003b96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b8e:	e018      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	e015      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba6:	e00b      	b.n	8003bc0 <DMA_CheckFifoParam+0xe4>
      break;
 8003ba8:	bf00      	nop
 8003baa:	e00a      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bac:	bf00      	nop
 8003bae:	e008      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bb0:	bf00      	nop
 8003bb2:	e006      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bb4:	bf00      	nop
 8003bb6:	e004      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bc0:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e175      	b.n	8003edc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f040 8164 	bne.w	8003ed6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d00b      	beq.n	8003c2e <HAL_GPIO_Init+0x5e>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d007      	beq.n	8003c2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c22:	2b11      	cmp	r3, #17
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b12      	cmp	r3, #18
 8003c2c:	d130      	bne.n	8003c90 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c64:	2201      	movs	r2, #1
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 0201 	and.w	r2, r3, #1
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x100>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b12      	cmp	r3, #18
 8003cce:	d123      	bne.n	8003d18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	08da      	lsrs	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3208      	adds	r2, #8
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80be 	beq.w	8003ed6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5a:	4b65      	ldr	r3, [pc, #404]	; (8003ef0 <HAL_GPIO_Init+0x320>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	4a64      	ldr	r2, [pc, #400]	; (8003ef0 <HAL_GPIO_Init+0x320>)
 8003d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d64:	6453      	str	r3, [r2, #68]	; 0x44
 8003d66:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_GPIO_Init+0x320>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d72:	4a60      	ldr	r2, [pc, #384]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	3302      	adds	r3, #2
 8003d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	220f      	movs	r2, #15
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a57      	ldr	r2, [pc, #348]	; (8003ef8 <HAL_GPIO_Init+0x328>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d037      	beq.n	8003e0e <HAL_GPIO_Init+0x23e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a56      	ldr	r2, [pc, #344]	; (8003efc <HAL_GPIO_Init+0x32c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d031      	beq.n	8003e0a <HAL_GPIO_Init+0x23a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a55      	ldr	r2, [pc, #340]	; (8003f00 <HAL_GPIO_Init+0x330>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02b      	beq.n	8003e06 <HAL_GPIO_Init+0x236>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a54      	ldr	r2, [pc, #336]	; (8003f04 <HAL_GPIO_Init+0x334>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d025      	beq.n	8003e02 <HAL_GPIO_Init+0x232>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a53      	ldr	r2, [pc, #332]	; (8003f08 <HAL_GPIO_Init+0x338>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01f      	beq.n	8003dfe <HAL_GPIO_Init+0x22e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a52      	ldr	r2, [pc, #328]	; (8003f0c <HAL_GPIO_Init+0x33c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d019      	beq.n	8003dfa <HAL_GPIO_Init+0x22a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a51      	ldr	r2, [pc, #324]	; (8003f10 <HAL_GPIO_Init+0x340>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_GPIO_Init+0x226>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a50      	ldr	r2, [pc, #320]	; (8003f14 <HAL_GPIO_Init+0x344>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00d      	beq.n	8003df2 <HAL_GPIO_Init+0x222>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4f      	ldr	r2, [pc, #316]	; (8003f18 <HAL_GPIO_Init+0x348>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d007      	beq.n	8003dee <HAL_GPIO_Init+0x21e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4e      	ldr	r2, [pc, #312]	; (8003f1c <HAL_GPIO_Init+0x34c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <HAL_GPIO_Init+0x21a>
 8003de6:	2309      	movs	r3, #9
 8003de8:	e012      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003dea:	230a      	movs	r3, #10
 8003dec:	e010      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003dee:	2308      	movs	r3, #8
 8003df0:	e00e      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003df2:	2307      	movs	r3, #7
 8003df4:	e00c      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003df6:	2306      	movs	r3, #6
 8003df8:	e00a      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003dfa:	2305      	movs	r3, #5
 8003dfc:	e008      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003dfe:	2304      	movs	r3, #4
 8003e00:	e006      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003e02:	2303      	movs	r3, #3
 8003e04:	e004      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e002      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_GPIO_Init+0x240>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	f002 0203 	and.w	r2, r2, #3
 8003e16:	0092      	lsls	r2, r2, #2
 8003e18:	4093      	lsls	r3, r2
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e20:	4934      	ldr	r1, [pc, #208]	; (8003ef4 <HAL_GPIO_Init+0x324>)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	3302      	adds	r3, #2
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2e:	4b3c      	ldr	r3, [pc, #240]	; (8003f20 <HAL_GPIO_Init+0x350>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e52:	4a33      	ldr	r2, [pc, #204]	; (8003f20 <HAL_GPIO_Init+0x350>)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e58:	4b31      	ldr	r3, [pc, #196]	; (8003f20 <HAL_GPIO_Init+0x350>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e7c:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <HAL_GPIO_Init+0x350>)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e82:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <HAL_GPIO_Init+0x350>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <HAL_GPIO_Init+0x350>)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <HAL_GPIO_Init+0x350>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed0:	4a13      	ldr	r2, [pc, #76]	; (8003f20 <HAL_GPIO_Init+0x350>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b0f      	cmp	r3, #15
 8003ee0:	f67f ae86 	bls.w	8003bf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3724      	adds	r7, #36	; 0x24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40020800 	.word	0x40020800
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40021400 	.word	0x40021400
 8003f10:	40021800 	.word	0x40021800
 8003f14:	40021c00 	.word	0x40021c00
 8003f18:	40022000 	.word	0x40022000
 8003f1c:	40022400 	.word	0x40022400
 8003f20:	40013c00 	.word	0x40013c00

08003f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f34:	787b      	ldrb	r3, [r7, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f40:	e003      	b.n	8003f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	619a      	str	r2, [r3, #24]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fd ff34 	bl	8001dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	e006      	b.n	8003fe0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d104      	bne.n	8003ff2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_I2C_Init+0x11c>)
 8003ffe:	430b      	orrs	r3, r1
 8004000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	ea42 0103 	orr.w	r1, r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	021a      	lsls	r2, r3, #8
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69d9      	ldr	r1, [r3, #28]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	02008000 	.word	0x02008000

08004078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	d138      	bne.n	8004100 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004098:	2302      	movs	r3, #2
 800409a:	e032      	b.n	8004102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2224      	movs	r2, #36	; 0x24
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b20      	cmp	r3, #32
 8004122:	d139      	bne.n	8004198 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800412e:	2302      	movs	r3, #2
 8004130:	e033      	b.n	800419a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2224      	movs	r2, #36	; 0x24
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004160:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40007000 	.word	0x40007000

080041c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_PWREx_EnableOverDrive+0x98>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4a22      	ldr	r2, [pc, #136]	; (8004260 <HAL_PWREx_EnableOverDrive+0x98>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	; 0x40
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_PWREx_EnableOverDrive+0x98>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041ea:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_PWREx_EnableOverDrive+0x9c>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041f6:	f7fe fb4d 	bl	8002894 <HAL_GetTick>
 80041fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041fc:	e009      	b.n	8004212 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041fe:	f7fe fb49 	bl	8002894 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420c:	d901      	bls.n	8004212 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e022      	b.n	8004258 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421e:	d1ee      	bne.n	80041fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0f      	ldr	r2, [pc, #60]	; (8004264 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800422c:	f7fe fb32 	bl	8002894 <HAL_GetTick>
 8004230:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004232:	e009      	b.n	8004248 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004234:	f7fe fb2e 	bl	8002894 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004242:	d901      	bls.n	8004248 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e007      	b.n	8004258 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_PWREx_EnableOverDrive+0x9c>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004254:	d1ee      	bne.n	8004234 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	40007000 	.word	0x40007000

08004268 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e29b      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8087 	beq.w	800439a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800428c:	4b96      	ldr	r3, [pc, #600]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b04      	cmp	r3, #4
 8004296:	d00c      	beq.n	80042b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004298:	4b93      	ldr	r3, [pc, #588]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d112      	bne.n	80042ca <HAL_RCC_OscConfig+0x62>
 80042a4:	4b90      	ldr	r3, [pc, #576]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b0:	d10b      	bne.n	80042ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b2:	4b8d      	ldr	r3, [pc, #564]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d06c      	beq.n	8004398 <HAL_RCC_OscConfig+0x130>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d168      	bne.n	8004398 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e275      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x7a>
 80042d4:	4b84      	ldr	r3, [pc, #528]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a83      	ldr	r2, [pc, #524]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	e02e      	b.n	8004340 <HAL_RCC_OscConfig+0xd8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x9c>
 80042ea:	4b7f      	ldr	r3, [pc, #508]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7e      	ldr	r2, [pc, #504]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b7c      	ldr	r3, [pc, #496]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7b      	ldr	r2, [pc, #492]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80042fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e01d      	b.n	8004340 <HAL_RCC_OscConfig+0xd8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0xc0>
 800430e:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a75      	ldr	r2, [pc, #468]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b73      	ldr	r3, [pc, #460]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a72      	ldr	r2, [pc, #456]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0xd8>
 8004328:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6e      	ldr	r2, [pc, #440]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800432e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b6c      	ldr	r3, [pc, #432]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a6b      	ldr	r2, [pc, #428]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800433a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d013      	beq.n	8004370 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fe faa4 	bl	8002894 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fe faa0 	bl	8002894 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e229      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004362:	4b61      	ldr	r3, [pc, #388]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0xe8>
 800436e:	e014      	b.n	800439a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fe fa90 	bl	8002894 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fe fa8c 	bl	8002894 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	; 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e215      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438a:	4b57      	ldr	r3, [pc, #348]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x110>
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d069      	beq.n	800447a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043a6:	4b50      	ldr	r3, [pc, #320]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x190>
 80043be:	4b4a      	ldr	r3, [pc, #296]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x17a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e1e9      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	493d      	ldr	r1, [pc, #244]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	e040      	b.n	800447a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d023      	beq.n	8004448 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a38      	ldr	r2, [pc, #224]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fe fa42 	bl	8002894 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fe fa3e 	bl	8002894 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1c7      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004426:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b2d      	ldr	r3, [pc, #180]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4929      	ldr	r1, [pc, #164]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
 8004446:	e018      	b.n	800447a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a26      	ldr	r2, [pc, #152]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fe fa1e 	bl	8002894 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445c:	f7fe fa1a 	bl	8002894 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1a3      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d038      	beq.n	80044f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d019      	beq.n	80044c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004492:	4a15      	ldr	r2, [pc, #84]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fe f9fb 	bl	8002894 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fe f9f7 	bl	8002894 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e180      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b4:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80044b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x23a>
 80044c0:	e01a      	b.n	80044f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80044c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c6:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <HAL_RCC_OscConfig+0x280>)
 80044c8:	f023 0301 	bic.w	r3, r3, #1
 80044cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ce:	f7fe f9e1 	bl	8002894 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	e00a      	b.n	80044ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fe f9dd 	bl	8002894 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d903      	bls.n	80044ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e166      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
 80044e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	4b92      	ldr	r3, [pc, #584]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80044ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1ee      	bne.n	80044d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80a4 	beq.w	800464e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004506:	4b8c      	ldr	r3, [pc, #560]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10d      	bne.n	800452e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	4b89      	ldr	r3, [pc, #548]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	4a88      	ldr	r2, [pc, #544]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451c:	6413      	str	r3, [r2, #64]	; 0x40
 800451e:	4b86      	ldr	r3, [pc, #536]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452e:	4b83      	ldr	r3, [pc, #524]	; (800473c <HAL_RCC_OscConfig+0x4d4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d118      	bne.n	800456c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800453a:	4b80      	ldr	r3, [pc, #512]	; (800473c <HAL_RCC_OscConfig+0x4d4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7f      	ldr	r2, [pc, #508]	; (800473c <HAL_RCC_OscConfig+0x4d4>)
 8004540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004546:	f7fe f9a5 	bl	8002894 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454e:	f7fe f9a1 	bl	8002894 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b64      	cmp	r3, #100	; 0x64
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e12a      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004560:	4b76      	ldr	r3, [pc, #472]	; (800473c <HAL_RCC_OscConfig+0x4d4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <HAL_RCC_OscConfig+0x31a>
 8004574:	4b70      	ldr	r3, [pc, #448]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	4a6f      	ldr	r2, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6713      	str	r3, [r2, #112]	; 0x70
 8004580:	e02d      	b.n	80045de <HAL_RCC_OscConfig+0x376>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x33c>
 800458a:	4b6b      	ldr	r3, [pc, #428]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a6a      	ldr	r2, [pc, #424]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
 8004596:	4b68      	ldr	r3, [pc, #416]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	4a67      	ldr	r2, [pc, #412]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70
 80045a2:	e01c      	b.n	80045de <HAL_RCC_OscConfig+0x376>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	d10c      	bne.n	80045c6 <HAL_RCC_OscConfig+0x35e>
 80045ac:	4b62      	ldr	r3, [pc, #392]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a61      	ldr	r2, [pc, #388]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80045b2:	f043 0304 	orr.w	r3, r3, #4
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	4b5f      	ldr	r3, [pc, #380]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	4a5e      	ldr	r2, [pc, #376]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70
 80045c4:	e00b      	b.n	80045de <HAL_RCC_OscConfig+0x376>
 80045c6:	4b5c      	ldr	r3, [pc, #368]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4a5b      	ldr	r2, [pc, #364]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70
 80045d2:	4b59      	ldr	r3, [pc, #356]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	4a58      	ldr	r2, [pc, #352]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d015      	beq.n	8004612 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fe f955 	bl	8002894 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fe f951 	bl	8002894 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0d8      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004604:	4b4c      	ldr	r3, [pc, #304]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ee      	beq.n	80045ee <HAL_RCC_OscConfig+0x386>
 8004610:	e014      	b.n	800463c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fe f93f 	bl	8002894 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fe f93b 	bl	8002894 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0c2      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004630:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ee      	bne.n	800461a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80ae 	beq.w	80047b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004658:	4b37      	ldr	r3, [pc, #220]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d06d      	beq.n	8004740 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d14b      	bne.n	8004704 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a31      	ldr	r2, [pc, #196]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fe f90c 	bl	8002894 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7fe f908 	bl	8002894 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e091      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b29      	ldr	r3, [pc, #164]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	3b01      	subs	r3, #1
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	071b      	lsls	r3, r3, #28
 80046ca:	491b      	ldr	r1, [pc, #108]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80046d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fe f8da 	bl	8002894 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fe f8d6 	bl	8002894 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e05f      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x47c>
 8004702:	e057      	b.n	80047b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0b      	ldr	r2, [pc, #44]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800470e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fe f8c0 	bl	8002894 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004718:	f7fe f8bc 	bl	8002894 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e045      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	4b03      	ldr	r3, [pc, #12]	; (8004738 <HAL_RCC_OscConfig+0x4d0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x4b0>
 8004736:	e03d      	b.n	80047b4 <HAL_RCC_OscConfig+0x54c>
 8004738:	40023800 	.word	0x40023800
 800473c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004740:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <HAL_RCC_OscConfig+0x558>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d030      	beq.n	80047b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d129      	bne.n	80047b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d122      	bne.n	80047b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004776:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004778:	4293      	cmp	r3, r2
 800477a:	d119      	bne.n	80047b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	3b01      	subs	r3, #1
 800478a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d10f      	bne.n	80047b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023800 	.word	0x40023800

080047c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0d0      	b.n	800497e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d910      	bls.n	800480c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b67      	ldr	r3, [pc, #412]	; (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 020f 	bic.w	r2, r3, #15
 80047f2:	4965      	ldr	r1, [pc, #404]	; (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b63      	ldr	r3, [pc, #396]	; (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0b8      	b.n	800497e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d020      	beq.n	800485a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004824:	4b59      	ldr	r3, [pc, #356]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	4a58      	ldr	r2, [pc, #352]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 800482a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800482e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800483c:	4b53      	ldr	r3, [pc, #332]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a52      	ldr	r2, [pc, #328]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004846:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b50      	ldr	r3, [pc, #320]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	494d      	ldr	r1, [pc, #308]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d040      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	4b47      	ldr	r3, [pc, #284]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d115      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e07f      	b.n	800497e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004886:	4b41      	ldr	r3, [pc, #260]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e073      	b.n	800497e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e06b      	b.n	800497e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048a6:	4b39      	ldr	r3, [pc, #228]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f023 0203 	bic.w	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4936      	ldr	r1, [pc, #216]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7fd ffec 	bl	8002894 <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c0:	f7fd ffe8 	bl	8002894 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e053      	b.n	800497e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	4b2d      	ldr	r3, [pc, #180]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 020c 	and.w	r2, r3, #12
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1eb      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d210      	bcs.n	8004918 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f023 020f 	bic.w	r2, r3, #15
 80048fe:	4922      	ldr	r1, [pc, #136]	; (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b20      	ldr	r3, [pc, #128]	; (8004988 <HAL_RCC_ClockConfig+0x1c4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e032      	b.n	800497e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004924:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4916      	ldr	r1, [pc, #88]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004942:	4b12      	ldr	r3, [pc, #72]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	490e      	ldr	r1, [pc, #56]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004956:	f000 f821 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800495a:	4601      	mov	r1, r0
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_ClockConfig+0x1c8>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x1cc>)
 8004968:	5cd3      	ldrb	r3, [r2, r3]
 800496a:	fa21 f303 	lsr.w	r3, r1, r3
 800496e:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_RCC_ClockConfig+0x1d0>)
 8004970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <HAL_RCC_ClockConfig+0x1d4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7fd ff48 	bl	800280c <HAL_InitTick>

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023c00 	.word	0x40023c00
 800498c:	40023800 	.word	0x40023800
 8004990:	08009254 	.word	0x08009254
 8004994:	20000004 	.word	0x20000004
 8004998:	20000008 	.word	0x20000008

0800499c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	2300      	movs	r3, #0
 80049ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b2:	4b50      	ldr	r3, [pc, #320]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d007      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0x32>
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d008      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x38>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 808d 	bne.w	8004ae2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b4b      	ldr	r3, [pc, #300]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80049ca:	60bb      	str	r3, [r7, #8]
      break;
 80049cc:	e08c      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ce:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCC_GetSysClockFreq+0x160>)
 80049d0:	60bb      	str	r3, [r7, #8]
      break;
 80049d2:	e089      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049d4:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049de:	4b45      	ldr	r3, [pc, #276]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d023      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ea:	4b42      	ldr	r3, [pc, #264]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x158>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	f04f 0400 	mov.w	r4, #0
 80049f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	ea03 0501 	and.w	r5, r3, r1
 8004a00:	ea04 0602 	and.w	r6, r4, r2
 8004a04:	4a3d      	ldr	r2, [pc, #244]	; (8004afc <HAL_RCC_GetSysClockFreq+0x160>)
 8004a06:	fb02 f106 	mul.w	r1, r2, r6
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	fb02 f205 	mul.w	r2, r2, r5
 8004a10:	440a      	add	r2, r1
 8004a12:	493a      	ldr	r1, [pc, #232]	; (8004afc <HAL_RCC_GetSysClockFreq+0x160>)
 8004a14:	fba5 0101 	umull	r0, r1, r5, r1
 8004a18:	1853      	adds	r3, r2, r1
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f04f 0400 	mov.w	r4, #0
 8004a22:	461a      	mov	r2, r3
 8004a24:	4623      	mov	r3, r4
 8004a26:	f7fb fc63 	bl	80002f0 <__aeabi_uldivmod>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	e049      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	f04f 0400 	mov.w	r4, #0
 8004a3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	ea03 0501 	and.w	r5, r3, r1
 8004a48:	ea04 0602 	and.w	r6, r4, r2
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	4632      	mov	r2, r6
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	f04f 0400 	mov.w	r4, #0
 8004a58:	0154      	lsls	r4, r2, #5
 8004a5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a5e:	014b      	lsls	r3, r1, #5
 8004a60:	4619      	mov	r1, r3
 8004a62:	4622      	mov	r2, r4
 8004a64:	1b49      	subs	r1, r1, r5
 8004a66:	eb62 0206 	sbc.w	r2, r2, r6
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	f04f 0400 	mov.w	r4, #0
 8004a72:	0194      	lsls	r4, r2, #6
 8004a74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a78:	018b      	lsls	r3, r1, #6
 8004a7a:	1a5b      	subs	r3, r3, r1
 8004a7c:	eb64 0402 	sbc.w	r4, r4, r2
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	00e2      	lsls	r2, r4, #3
 8004a8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a8e:	00d9      	lsls	r1, r3, #3
 8004a90:	460b      	mov	r3, r1
 8004a92:	4614      	mov	r4, r2
 8004a94:	195b      	adds	r3, r3, r5
 8004a96:	eb44 0406 	adc.w	r4, r4, r6
 8004a9a:	f04f 0100 	mov.w	r1, #0
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	02a2      	lsls	r2, r4, #10
 8004aa4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004aa8:	0299      	lsls	r1, r3, #10
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4614      	mov	r4, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f04f 0400 	mov.w	r4, #0
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4623      	mov	r3, r4
 8004abc:	f7fb fc18 	bl	80002f0 <__aeabi_uldivmod>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	0c1b      	lsrs	r3, r3, #16
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	60bb      	str	r3, [r7, #8]
      break;
 8004ae0:	e002      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ae4:	60bb      	str	r3, [r7, #8]
      break;
 8004ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	00989680 	.word	0x00989680

08004b00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b04:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000004 	.word	0x20000004

08004b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b1c:	f7ff fff0 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b20:	4601      	mov	r1, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0a9b      	lsrs	r3, r3, #10
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4a03      	ldr	r2, [pc, #12]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2e:	5cd3      	ldrb	r3, [r2, r3]
 8004b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	08009264 	.word	0x08009264

08004b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b44:	f7ff ffdc 	bl	8004b00 <HAL_RCC_GetHCLKFreq>
 8004b48:	4601      	mov	r1, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0b5b      	lsrs	r3, r3, #13
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4a03      	ldr	r2, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b56:	5cd3      	ldrb	r3, [r2, r3]
 8004b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	08009264 	.word	0x08009264

08004b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d012      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b90:	4b69      	ldr	r3, [pc, #420]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a68      	ldr	r2, [pc, #416]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b9a:	6093      	str	r3, [r2, #8]
 8004b9c:	4b66      	ldr	r3, [pc, #408]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba4:	4964      	ldr	r1, [pc, #400]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d017      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bc2:	4b5d      	ldr	r3, [pc, #372]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	4959      	ldr	r1, [pc, #356]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be0:	d101      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004be2:	2301      	movs	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d017      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bfe:	4b4e      	ldr	r3, [pc, #312]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	494a      	ldr	r1, [pc, #296]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 808b 	beq.w	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c4c:	4b3a      	ldr	r3, [pc, #232]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	4a39      	ldr	r2, [pc, #228]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6413      	str	r3, [r2, #64]	; 0x40
 8004c58:	4b37      	ldr	r3, [pc, #220]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a34      	ldr	r2, [pc, #208]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fd fe10 	bl	8002894 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c78:	f7fd fe0c 	bl	8002894 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b64      	cmp	r3, #100	; 0x64
 8004c84:	d901      	bls.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e38d      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c8a:	4b2c      	ldr	r3, [pc, #176]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c96:	4b28      	ldr	r3, [pc, #160]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d035      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d02e      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb4:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cd6:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cdc:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d114      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fdd4 	bl	8002894 <HAL_GetTick>
 8004cec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cee:	e00a      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf0:	f7fd fdd0 	bl	8002894 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e34f      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0ee      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1e:	d111      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d2e:	400b      	ands	r3, r1
 8004d30:	4901      	ldr	r1, [pc, #4]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
 8004d36:	e00b      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	0ffffcff 	.word	0x0ffffcff
 8004d44:	4bb3      	ldr	r3, [pc, #716]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	4ab2      	ldr	r2, [pc, #712]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d4e:	6093      	str	r3, [r2, #8]
 8004d50:	4bb0      	ldr	r3, [pc, #704]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5c:	49ad      	ldr	r1, [pc, #692]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d010      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d6e:	4ba9      	ldr	r3, [pc, #676]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d74:	4aa7      	ldr	r2, [pc, #668]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d7e:	4ba5      	ldr	r3, [pc, #660]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	49a2      	ldr	r1, [pc, #648]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d9c:	4b9d      	ldr	r3, [pc, #628]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004daa:	499a      	ldr	r1, [pc, #616]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dbe:	4b95      	ldr	r3, [pc, #596]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dcc:	4991      	ldr	r1, [pc, #580]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004de0:	4b8c      	ldr	r3, [pc, #560]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dee:	4989      	ldr	r1, [pc, #548]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e02:	4b84      	ldr	r3, [pc, #528]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	4980      	ldr	r1, [pc, #512]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e24:	4b7b      	ldr	r3, [pc, #492]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	f023 0203 	bic.w	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	4978      	ldr	r1, [pc, #480]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e46:	4b73      	ldr	r3, [pc, #460]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4c:	f023 020c 	bic.w	r2, r3, #12
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e54:	496f      	ldr	r1, [pc, #444]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e68:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	4967      	ldr	r1, [pc, #412]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e8a:	4b62      	ldr	r3, [pc, #392]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e98:	495e      	ldr	r1, [pc, #376]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eac:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	4956      	ldr	r1, [pc, #344]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ece:	4b51      	ldr	r3, [pc, #324]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	494d      	ldr	r1, [pc, #308]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ef0:	4b48      	ldr	r3, [pc, #288]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efe:	4945      	ldr	r1, [pc, #276]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f12:	4b40      	ldr	r3, [pc, #256]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f20:	493c      	ldr	r1, [pc, #240]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f34:	4b37      	ldr	r3, [pc, #220]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f42:	4934      	ldr	r1, [pc, #208]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d011      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f56:	4b2f      	ldr	r3, [pc, #188]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f64:	492b      	ldr	r1, [pc, #172]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f74:	d101      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f76:	2301      	movs	r3, #1
 8004f78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa4:	491b      	ldr	r1, [pc, #108]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc8:	4912      	ldr	r1, [pc, #72]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fec:	4909      	ldr	r1, [pc, #36]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00f      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005006:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	e002      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800
 8005018:	4985      	ldr	r1, [pc, #532]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800502c:	4b80      	ldr	r3, [pc, #512]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800502e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005032:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503c:	497c      	ldr	r1, [pc, #496]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d005      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005052:	f040 80d6 	bne.w	8005202 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005056:	4b76      	ldr	r3, [pc, #472]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a75      	ldr	r2, [pc, #468]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800505c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005062:	f7fd fc17 	bl	8002894 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005068:	e008      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800506a:	f7fd fc13 	bl	8002894 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b64      	cmp	r3, #100	; 0x64
 8005076:	d901      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e194      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800507c:	4b6c      	ldr	r3, [pc, #432]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d021      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	d11d      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800509c:	4b64      	ldr	r3, [pc, #400]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800509e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050aa:	4b61      	ldr	r3, [pc, #388]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	019a      	lsls	r2, r3, #6
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	041b      	lsls	r3, r3, #16
 80050c2:	431a      	orrs	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	061b      	lsls	r3, r3, #24
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	071b      	lsls	r3, r3, #28
 80050d0:	4957      	ldr	r1, [pc, #348]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x586>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02e      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005102:	d129      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005104:	4b4a      	ldr	r3, [pc, #296]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510a:	0c1b      	lsrs	r3, r3, #16
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005112:	4b47      	ldr	r3, [pc, #284]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005118:	0f1b      	lsrs	r3, r3, #28
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	019a      	lsls	r2, r3, #6
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	431a      	orrs	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	071b      	lsls	r3, r3, #28
 8005138:	493d      	ldr	r1, [pc, #244]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005140:	4b3b      	ldr	r3, [pc, #236]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005146:	f023 021f 	bic.w	r2, r3, #31
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	3b01      	subs	r3, #1
 8005150:	4937      	ldr	r1, [pc, #220]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01d      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516a:	0e1b      	lsrs	r3, r3, #24
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005172:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005178:	0f1b      	lsrs	r3, r3, #28
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	019a      	lsls	r2, r3, #6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	431a      	orrs	r2, r3
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	431a      	orrs	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	071b      	lsls	r3, r3, #28
 8005198:	4925      	ldr	r1, [pc, #148]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d011      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	019a      	lsls	r2, r3, #6
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	071b      	lsls	r3, r3, #28
 80051c8:	4919      	ldr	r1, [pc, #100]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051d0:	4b17      	ldr	r3, [pc, #92]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a16      	ldr	r2, [pc, #88]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fd fb5a 	bl	8002894 <HAL_GetTick>
 80051e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051e4:	f7fd fb56 	bl	8002894 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0d7      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f6:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b01      	cmp	r3, #1
 8005206:	f040 80cd 	bne.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a08      	ldr	r2, [pc, #32]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005216:	f7fd fb3d 	bl	8002894 <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800521c:	e00a      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800521e:	f7fd fb39 	bl	8002894 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b64      	cmp	r3, #100	; 0x64
 800522a:	d903      	bls.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e0ba      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005230:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005234:	4b5e      	ldr	r3, [pc, #376]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005240:	d0ed      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800525e:	2b00      	cmp	r3, #0
 8005260:	d02e      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12a      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800526a:	4b51      	ldr	r3, [pc, #324]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005278:	4b4d      	ldr	r3, [pc, #308]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	0f1b      	lsrs	r3, r3, #28
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	019a      	lsls	r2, r3, #6
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	061b      	lsls	r3, r3, #24
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	071b      	lsls	r3, r3, #28
 800529e:	4944      	ldr	r1, [pc, #272]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052a6:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	3b01      	subs	r3, #1
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	493d      	ldr	r1, [pc, #244]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d022      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d4:	d11d      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052d6:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052e4:	4b32      	ldr	r3, [pc, #200]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	0f1b      	lsrs	r3, r3, #28
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	019a      	lsls	r2, r3, #6
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	431a      	orrs	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	061b      	lsls	r3, r3, #24
 8005304:	431a      	orrs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	071b      	lsls	r3, r3, #28
 800530a:	4929      	ldr	r1, [pc, #164]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d028      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800531e:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	0e1b      	lsrs	r3, r3, #24
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800532c:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	019a      	lsls	r2, r3, #6
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	431a      	orrs	r2, r3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	071b      	lsls	r3, r3, #28
 8005352:	4917      	ldr	r1, [pc, #92]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800535a:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800535c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4911      	ldr	r1, [pc, #68]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a0e      	ldr	r2, [pc, #56]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537c:	f7fd fa8a 	bl	8002894 <HAL_GetTick>
 8005380:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005384:	f7fd fa86 	bl	8002894 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	; 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e007      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800539e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a2:	d1ef      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800

080053b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e084      	b.n	80054d0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fc fd99 	bl	8001f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005406:	d902      	bls.n	800540e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e002      	b.n	8005414 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800540e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800541c:	d007      	beq.n	800542e <HAL_SPI_Init+0x7a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005426:	d002      	beq.n	800542e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800543e:	d903      	bls.n	8005448 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
 8005446:	e002      	b.n	800544e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	ea42 0103 	orr.w	r1, r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	f003 0204 	and.w	r2, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	ea42 0103 	orr.w	r1, r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d110      	bne.n	8005514 <HAL_SPI_Receive_DMA+0x3c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fa:	d10b      	bne.n	8005514 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2204      	movs	r2, #4
 8005500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f900 	bl	8005710 <HAL_SPI_TransmitReceive_DMA>
 8005510:	4603      	mov	r3, r0
 8005512:	e0f3      	b.n	80056fc <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_SPI_Receive_DMA+0x4a>
 800551e:	2302      	movs	r3, #2
 8005520:	e0ec      	b.n	80056fc <HAL_SPI_Receive_DMA+0x224>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d002      	beq.n	800553c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005536:	2302      	movs	r3, #2
 8005538:	75fb      	strb	r3, [r7, #23]
    goto error;
 800553a:	e0da      	b.n	80056f2 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_Receive_DMA+0x70>
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800554c:	e0d1      	b.n	80056f2 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2204      	movs	r2, #4
 8005552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	88fa      	ldrh	r2, [r7, #6]
 8005566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005592:	d107      	bne.n	80055a4 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055b2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055bc:	d908      	bls.n	80055d0 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	e042      	b.n	8005656 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055de:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d134      	bne.n	8005656 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055fa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005602:	b29b      	uxth	r3, r3
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d111      	bne.n	8005630 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800561a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005622:	b29b      	uxth	r3, r3
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800562e:	e012      	b.n	8005656 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800563e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005646:	b29b      	uxth	r3, r3
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	b29b      	uxth	r3, r3
 800564c:	3301      	adds	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <HAL_SPI_Receive_DMA+0x22c>)
 800565c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005662:	4a29      	ldr	r2, [pc, #164]	; (8005708 <HAL_SPI_Receive_DMA+0x230>)
 8005664:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_SPI_Receive_DMA+0x234>)
 800566c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005672:	2200      	movs	r2, #0
 8005674:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	330c      	adds	r3, #12
 8005680:	4619      	mov	r1, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800568e:	b29b      	uxth	r3, r3
 8005690:	f7fd ff44 	bl	800351c <HAL_DMA_Start_IT>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569e:	f043 0210 	orr.w	r2, r3, #16
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80056b2:	e01e      	b.n	80056f2 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d007      	beq.n	80056d2 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056d0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0220 	orr.w	r2, r2, #32
 80056e0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 0201 	orr.w	r2, r2, #1
 80056f0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	08005b91 	.word	0x08005b91
 8005708:	08005a79 	.word	0x08005a79
 800570c:	08005bc9 	.word	0x08005bc9

08005710 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_SPI_TransmitReceive_DMA+0x20>
 800572c:	2302      	movs	r3, #2
 800572e:	e16c      	b.n	8005a0a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800573e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005746:	7dbb      	ldrb	r3, [r7, #22]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d00d      	beq.n	8005768 <HAL_SPI_TransmitReceive_DMA+0x58>
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005752:	d106      	bne.n	8005762 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <HAL_SPI_TransmitReceive_DMA+0x52>
 800575c:	7dbb      	ldrb	r3, [r7, #22]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d002      	beq.n	8005768 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005762:	2302      	movs	r3, #2
 8005764:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005766:	e14b      	b.n	8005a00 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005774:	887b      	ldrh	r3, [r7, #2]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d102      	bne.n	8005780 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800577e:	e13f      	b.n	8005a00 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b04      	cmp	r3, #4
 800578a:	d003      	beq.n	8005794 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2205      	movs	r2, #5
 8005790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	887a      	ldrh	r2, [r7, #2]
 80057a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	887a      	ldrh	r2, [r7, #2]
 80057aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	887a      	ldrh	r2, [r7, #2]
 80057b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	887a      	ldrh	r2, [r7, #2]
 80057be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80057dc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057e6:	d908      	bls.n	80057fa <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057f6:	605a      	str	r2, [r3, #4]
 80057f8:	e06f      	b.n	80058da <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005808:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d126      	bne.n	8005864 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005830:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005836:	b29b      	uxth	r3, r3
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005840:	e010      	b.n	8005864 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005850:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	b29b      	uxth	r3, r3
 800585c:	3301      	adds	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800586e:	d134      	bne.n	80058da <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800587e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005886:	b29b      	uxth	r3, r3
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d111      	bne.n	80058b4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058b2:	e012      	b.n	80058da <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3301      	adds	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d108      	bne.n	80058f8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	4a4a      	ldr	r2, [pc, #296]	; (8005a14 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	4a49      	ldr	r2, [pc, #292]	; (8005a18 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80058f6:	e007      	b.n	8005908 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	4a47      	ldr	r2, [pc, #284]	; (8005a1c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005904:	4a46      	ldr	r2, [pc, #280]	; (8005a20 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005906:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	4a45      	ldr	r2, [pc, #276]	; (8005a24 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800590e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	2200      	movs	r2, #0
 8005916:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	4619      	mov	r1, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	461a      	mov	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005930:	b29b      	uxth	r3, r3
 8005932:	f7fd fdf3 	bl	800351c <HAL_DMA_Start_IT>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005940:	f043 0210 	orr.w	r2, r3, #16
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005954:	e054      	b.n	8005a00 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596a:	2200      	movs	r2, #0
 800596c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	2200      	movs	r2, #0
 8005974:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597a:	2200      	movs	r2, #0
 800597c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	2200      	movs	r2, #0
 8005984:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	4619      	mov	r1, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	461a      	mov	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599c:	b29b      	uxth	r3, r3
 800599e:	f7fd fdbd 	bl	800351c <HAL_DMA_Start_IT>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ac:	f043 0210 	orr.w	r2, r3, #16
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80059c0:	e01e      	b.n	8005a00 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d007      	beq.n	80059e0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059de:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0220 	orr.w	r2, r2, #32
 80059ee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0202 	orr.w	r2, r2, #2
 80059fe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	08005b91 	.word	0x08005b91
 8005a18:	08005a79 	.word	0x08005a79
 8005a1c:	08005bad 	.word	0x08005bad
 8005a20:	08005aff 	.word	0x08005aff
 8005a24:	08005bc9 	.word	0x08005bc9

08005a28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a86:	f7fc ff05 	bl	8002894 <HAL_GetTick>
 8005a8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9a:	d02a      	beq.n	8005af2 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0220 	bic.w	r2, r2, #32
 8005aaa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0203 	bic.w	r2, r2, #3
 8005aba:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	2164      	movs	r1, #100	; 0x64
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f978 	bl	8005db6 <SPI_EndRxTransaction>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff ffba 	bl	8005a64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005af0:	e002      	b.n	8005af8 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7fc f886 	bl	8001c04 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b0c:	f7fc fec2 	bl	8002894 <HAL_GetTick>
 8005b10:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b20:	d030      	beq.n	8005b84 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0220 	bic.w	r2, r2, #32
 8005b30:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	2164      	movs	r1, #100	; 0x64
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f995 	bl	8005e66 <SPI_EndRxTxTransaction>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b46:	f043 0220 	orr.w	r2, r3, #32
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0203 	bic.w	r2, r2, #3
 8005b5c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff ff71 	bl	8005a64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005b82:	e002      	b.n	8005b8a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff ff4f 	bl	8005a28 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7ff ff4c 	bl	8005a3c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7ff ff48 	bl	8005a50 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0203 	bic.w	r2, r2, #3
 8005be4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	f043 0210 	orr.w	r2, r3, #16
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7ff ff32 	bl	8005a64 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	4613      	mov	r3, r2
 8005c16:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c18:	e04c      	b.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d048      	beq.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c22:	f7fc fe37 	bl	8002894 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d902      	bls.n	8005c38 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d13d      	bne.n	8005cb4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c50:	d111      	bne.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5a:	d004      	beq.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c64:	d107      	bne.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7e:	d10f      	bne.n	8005ca0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e00f      	b.n	8005cd4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2301      	moveq	r3, #1
 8005cc6:	2300      	movne	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d1a3      	bne.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cea:	e057      	b.n	8005d9c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005cf2:	d106      	bne.n	8005d02 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d048      	beq.n	8005d9c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d0a:	f7fc fdc3 	bl	8002894 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d902      	bls.n	8005d20 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d13d      	bne.n	8005d9c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d38:	d111      	bne.n	8005d5e <SPI_WaitFifoStateUntilTimeout+0x82>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d42:	d004      	beq.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4c:	d107      	bne.n	8005d5e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d66:	d10f      	bne.n	8005d88 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e008      	b.n	8005dae <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d19f      	bne.n	8005cec <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b086      	sub	sp, #24
 8005dba:	af02      	add	r7, sp, #8
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dca:	d111      	bne.n	8005df0 <SPI_EndRxTransaction+0x3a>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd4:	d004      	beq.n	8005de0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d107      	bne.n	8005df0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dee:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2200      	movs	r2, #0
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f7ff ff04 	bl	8005c08 <SPI_WaitFlagStateUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e023      	b.n	8005e5e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1e:	d11d      	bne.n	8005e5c <SPI_EndRxTransaction+0xa6>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e28:	d004      	beq.n	8005e34 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e32:	d113      	bne.n	8005e5c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff ff4b 	bl	8005cdc <SPI_WaitFifoStateUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d007      	beq.n	8005e5c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e50:	f043 0220 	orr.w	r2, r3, #32
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e000      	b.n	8005e5e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b086      	sub	sp, #24
 8005e6a:	af02      	add	r7, sp, #8
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff ff2c 	bl	8005cdc <SPI_WaitFifoStateUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8e:	f043 0220 	orr.w	r2, r3, #32
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e027      	b.n	8005eea <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2180      	movs	r1, #128	; 0x80
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7ff feaf 	bl	8005c08 <SPI_WaitFlagStateUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d007      	beq.n	8005ec0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e014      	b.n	8005eea <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff ff05 	bl	8005cdc <SPI_WaitFifoStateUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e000      	b.n	8005eea <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e01d      	b.n	8005f40 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fc f8a7 	bl	800206c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f000 febf 	bl	8006cb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <HAL_TIM_Base_Start_IT+0x50>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b06      	cmp	r3, #6
 8005f70:	d00b      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x42>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f78:	d007      	beq.n	8005f8a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	00010007 	.word	0x00010007

08005f9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0201 	bic.w	r2, r2, #1
 8005fb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6a1a      	ldr	r2, [r3, #32]
 8005fba:	f241 1311 	movw	r3, #4369	; 0x1111
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10f      	bne.n	8005fe4 <HAL_TIM_Base_Stop_IT+0x48>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a1a      	ldr	r2, [r3, #32]
 8005fca:	f240 4344 	movw	r3, #1092	; 0x444
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d107      	bne.n	8005fe4 <HAL_TIM_Base_Stop_IT+0x48>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e01d      	b.n	8006040 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fc f907 	bl	800222c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f000 fe3f 	bl	8006cb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b0c      	cmp	r3, #12
 8006056:	d841      	bhi.n	80060dc <HAL_TIM_PWM_Start_IT+0x94>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <HAL_TIM_PWM_Start_IT+0x18>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006095 	.word	0x08006095
 8006064:	080060dd 	.word	0x080060dd
 8006068:	080060dd 	.word	0x080060dd
 800606c:	080060dd 	.word	0x080060dd
 8006070:	080060a7 	.word	0x080060a7
 8006074:	080060dd 	.word	0x080060dd
 8006078:	080060dd 	.word	0x080060dd
 800607c:	080060dd 	.word	0x080060dd
 8006080:	080060b9 	.word	0x080060b9
 8006084:	080060dd 	.word	0x080060dd
 8006088:	080060dd 	.word	0x080060dd
 800608c:	080060dd 	.word	0x080060dd
 8006090:	080060cb 	.word	0x080060cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0202 	orr.w	r2, r2, #2
 80060a2:	60da      	str	r2, [r3, #12]
      break;
 80060a4:	e01b      	b.n	80060de <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0204 	orr.w	r2, r2, #4
 80060b4:	60da      	str	r2, [r3, #12]
      break;
 80060b6:	e012      	b.n	80060de <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	60da      	str	r2, [r3, #12]
      break;
 80060c8:	e009      	b.n	80060de <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0210 	orr.w	r2, r2, #16
 80060d8:	60da      	str	r2, [r3, #12]
      break;
 80060da:	e000      	b.n	80060de <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80060dc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2201      	movs	r2, #1
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 fb2e 	bl	8007748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a17      	ldr	r2, [pc, #92]	; (8006150 <HAL_TIM_PWM_Start_IT+0x108>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_TIM_PWM_Start_IT+0xb8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a16      	ldr	r2, [pc, #88]	; (8006154 <HAL_TIM_PWM_Start_IT+0x10c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d101      	bne.n	8006104 <HAL_TIM_PWM_Start_IT+0xbc>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_TIM_PWM_Start_IT+0xbe>
 8006104:	2300      	movs	r3, #0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	4b0d      	ldr	r3, [pc, #52]	; (8006158 <HAL_TIM_PWM_Start_IT+0x110>)
 8006122:	4013      	ands	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b06      	cmp	r3, #6
 800612a:	d00b      	beq.n	8006144 <HAL_TIM_PWM_Start_IT+0xfc>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006132:	d007      	beq.n	8006144 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40010400 	.word	0x40010400
 8006158:	00010007 	.word	0x00010007

0800615c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b0c      	cmp	r3, #12
 800616a:	d841      	bhi.n	80061f0 <HAL_TIM_PWM_Stop_IT+0x94>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <HAL_TIM_PWM_Stop_IT+0x18>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	080061a9 	.word	0x080061a9
 8006178:	080061f1 	.word	0x080061f1
 800617c:	080061f1 	.word	0x080061f1
 8006180:	080061f1 	.word	0x080061f1
 8006184:	080061bb 	.word	0x080061bb
 8006188:	080061f1 	.word	0x080061f1
 800618c:	080061f1 	.word	0x080061f1
 8006190:	080061f1 	.word	0x080061f1
 8006194:	080061cd 	.word	0x080061cd
 8006198:	080061f1 	.word	0x080061f1
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	080061f1 	.word	0x080061f1
 80061a4:	080061df 	.word	0x080061df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0202 	bic.w	r2, r2, #2
 80061b6:	60da      	str	r2, [r3, #12]
      break;
 80061b8:	e01b      	b.n	80061f2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0204 	bic.w	r2, r2, #4
 80061c8:	60da      	str	r2, [r3, #12]
      break;
 80061ca:	e012      	b.n	80061f2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0208 	bic.w	r2, r2, #8
 80061da:	60da      	str	r2, [r3, #12]
      break;
 80061dc:	e009      	b.n	80061f2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0210 	bic.w	r2, r2, #16
 80061ec:	60da      	str	r2, [r3, #12]
      break;
 80061ee:	e000      	b.n	80061f2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80061f0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 faa4 	bl	8007748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a20      	ldr	r2, [pc, #128]	; (8006288 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d004      	beq.n	8006214 <HAL_TIM_PWM_Stop_IT+0xb8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1f      	ldr	r2, [pc, #124]	; (800628c <HAL_TIM_PWM_Stop_IT+0x130>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d101      	bne.n	8006218 <HAL_TIM_PWM_Stop_IT+0xbc>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <HAL_TIM_PWM_Stop_IT+0xbe>
 8006218:	2300      	movs	r3, #0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d017      	beq.n	800624e <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	f241 1311 	movw	r3, #4369	; 0x1111
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10f      	bne.n	800624e <HAL_TIM_PWM_Stop_IT+0xf2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6a1a      	ldr	r2, [r3, #32]
 8006234:	f240 4344 	movw	r3, #1092	; 0x444
 8006238:	4013      	ands	r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d107      	bne.n	800624e <HAL_TIM_PWM_Stop_IT+0xf2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800624c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a1a      	ldr	r2, [r3, #32]
 8006254:	f241 1311 	movw	r3, #4369	; 0x1111
 8006258:	4013      	ands	r3, r2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <HAL_TIM_PWM_Stop_IT+0x122>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	f240 4344 	movw	r3, #1092	; 0x444
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d107      	bne.n	800627e <HAL_TIM_PWM_Stop_IT+0x122>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e01d      	b.n	80062de <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fb ff6e 	bl	8002198 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f000 fcf0 	bl	8006cb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d841      	bhi.n	800637c <HAL_TIM_IC_Start_IT+0x94>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <HAL_TIM_IC_Start_IT+0x18>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006335 	.word	0x08006335
 8006304:	0800637d 	.word	0x0800637d
 8006308:	0800637d 	.word	0x0800637d
 800630c:	0800637d 	.word	0x0800637d
 8006310:	08006347 	.word	0x08006347
 8006314:	0800637d 	.word	0x0800637d
 8006318:	0800637d 	.word	0x0800637d
 800631c:	0800637d 	.word	0x0800637d
 8006320:	08006359 	.word	0x08006359
 8006324:	0800637d 	.word	0x0800637d
 8006328:	0800637d 	.word	0x0800637d
 800632c:	0800637d 	.word	0x0800637d
 8006330:	0800636b 	.word	0x0800636b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0202 	orr.w	r2, r2, #2
 8006342:	60da      	str	r2, [r3, #12]
      break;
 8006344:	e01b      	b.n	800637e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0204 	orr.w	r2, r2, #4
 8006354:	60da      	str	r2, [r3, #12]
      break;
 8006356:	e012      	b.n	800637e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	60da      	str	r2, [r3, #12]
      break;
 8006368:	e009      	b.n	800637e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0210 	orr.w	r2, r2, #16
 8006378:	60da      	str	r2, [r3, #12]
      break;
 800637a:	e000      	b.n	800637e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800637c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2201      	movs	r2, #1
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f001 f9de 	bl	8007748 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <HAL_TIM_IC_Start_IT+0xd8>)
 8006394:	4013      	ands	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b06      	cmp	r3, #6
 800639c:	d00b      	beq.n	80063b6 <HAL_TIM_IC_Start_IT+0xce>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a4:	d007      	beq.n	80063b6 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0201 	orr.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	00010007 	.word	0x00010007

080063c4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e02d      	b.n	8006434 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f825 	bl	800643c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2202      	movs	r2, #2
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f000 fc55 	bl	8006cb4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0208 	bic.w	r2, r2, #8
 8006418:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6819      	ldr	r1, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b02      	cmp	r3, #2
 8006464:	d122      	bne.n	80064ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d11b      	bne.n	80064ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0202 	mvn.w	r2, #2
 800647c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb f9f8 	bl	8001888 <HAL_TIM_IC_CaptureCallback>
 8006498:	e005      	b.n	80064a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fbec 	bl	8006c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fbf3 	bl	8006c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d122      	bne.n	8006500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d11b      	bne.n	8006500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0204 	mvn.w	r2, #4
 80064d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb f9ce 	bl	8001888 <HAL_TIM_IC_CaptureCallback>
 80064ec:	e005      	b.n	80064fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fbc2 	bl	8006c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fbc9 	bl	8006c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b08      	cmp	r3, #8
 800650c:	d122      	bne.n	8006554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b08      	cmp	r3, #8
 800651a:	d11b      	bne.n	8006554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0208 	mvn.w	r2, #8
 8006524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2204      	movs	r2, #4
 800652a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fb f9a4 	bl	8001888 <HAL_TIM_IC_CaptureCallback>
 8006540:	e005      	b.n	800654e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fb98 	bl	8006c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb9f 	bl	8006c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	2b10      	cmp	r3, #16
 8006560:	d122      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b10      	cmp	r3, #16
 800656e:	d11b      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f06f 0210 	mvn.w	r2, #16
 8006578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2208      	movs	r2, #8
 800657e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fb f97a 	bl	8001888 <HAL_TIM_IC_CaptureCallback>
 8006594:	e005      	b.n	80065a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fb6e 	bl	8006c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb75 	bl	8006c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d10e      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d107      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0201 	mvn.w	r2, #1
 80065cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb f882 	bl	80016d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065de:	2b80      	cmp	r3, #128	; 0x80
 80065e0:	d10e      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	2b80      	cmp	r3, #128	; 0x80
 80065ee:	d107      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 f9e0 	bl	80079c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660e:	d10e      	bne.n	800662e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d107      	bne.n	800662e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 f9d3 	bl	80079d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d10e      	bne.n	800665a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006646:	2b40      	cmp	r3, #64	; 0x40
 8006648:	d107      	bne.n	800665a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fb23 	bl	8006ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b20      	cmp	r3, #32
 8006666:	d10e      	bne.n	8006686 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b20      	cmp	r3, #32
 8006674:	d107      	bne.n	8006686 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f06f 0220 	mvn.w	r2, #32
 800667e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 f993 	bl	80079ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e08a      	b.n	80067be <HAL_TIM_IC_ConfigChannel+0x130>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d11b      	bne.n	80066f6 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f000 fe77 	bl	80073c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 020c 	bic.w	r2, r2, #12
 80066e0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6999      	ldr	r1, [r3, #24]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	619a      	str	r2, [r3, #24]
 80066f4:	e05a      	b.n	80067ac <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d11c      	bne.n	8006736 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6818      	ldr	r0, [r3, #0]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6819      	ldr	r1, [r3, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f000 fefb 	bl	8007506 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800671e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6999      	ldr	r1, [r3, #24]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	021a      	lsls	r2, r3, #8
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	619a      	str	r2, [r3, #24]
 8006734:	e03a      	b.n	80067ac <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b08      	cmp	r3, #8
 800673a:	d11b      	bne.n	8006774 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f000 ff48 	bl	80075e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69da      	ldr	r2, [r3, #28]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 020c 	bic.w	r2, r2, #12
 800675e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69d9      	ldr	r1, [r3, #28]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	61da      	str	r2, [r3, #28]
 8006772:	e01b      	b.n	80067ac <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6819      	ldr	r1, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f000 ff68 	bl	8007658 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69da      	ldr	r2, [r3, #28]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006796:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69d9      	ldr	r1, [r3, #28]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	021a      	lsls	r2, r3, #8
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067de:	2302      	movs	r3, #2
 80067e0:	e105      	b.n	80069ee <HAL_TIM_PWM_ConfigChannel+0x226>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b14      	cmp	r3, #20
 80067f6:	f200 80f0 	bhi.w	80069da <HAL_TIM_PWM_ConfigChannel+0x212>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006855 	.word	0x08006855
 8006804:	080069db 	.word	0x080069db
 8006808:	080069db 	.word	0x080069db
 800680c:	080069db 	.word	0x080069db
 8006810:	08006895 	.word	0x08006895
 8006814:	080069db 	.word	0x080069db
 8006818:	080069db 	.word	0x080069db
 800681c:	080069db 	.word	0x080069db
 8006820:	080068d7 	.word	0x080068d7
 8006824:	080069db 	.word	0x080069db
 8006828:	080069db 	.word	0x080069db
 800682c:	080069db 	.word	0x080069db
 8006830:	08006917 	.word	0x08006917
 8006834:	080069db 	.word	0x080069db
 8006838:	080069db 	.word	0x080069db
 800683c:	080069db 	.word	0x080069db
 8006840:	08006959 	.word	0x08006959
 8006844:	080069db 	.word	0x080069db
 8006848:	080069db 	.word	0x080069db
 800684c:	080069db 	.word	0x080069db
 8006850:	08006999 	.word	0x08006999
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 faca 	bl	8006df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0204 	bic.w	r2, r2, #4
 800687e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6999      	ldr	r1, [r3, #24]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	619a      	str	r2, [r3, #24]
      break;
 8006892:	e0a3      	b.n	80069dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fb1c 	bl	8006ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6999      	ldr	r1, [r3, #24]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	619a      	str	r2, [r3, #24]
      break;
 80068d4:	e082      	b.n	80069dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fb73 	bl	8006fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0208 	orr.w	r2, r2, #8
 80068f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0204 	bic.w	r2, r2, #4
 8006900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69d9      	ldr	r1, [r3, #28]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	61da      	str	r2, [r3, #28]
      break;
 8006914:	e062      	b.n	80069dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fbc9 	bl	80070b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69d9      	ldr	r1, [r3, #28]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	021a      	lsls	r2, r3, #8
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	61da      	str	r2, [r3, #28]
      break;
 8006956:	e041      	b.n	80069dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fc00 	bl	8007164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0208 	orr.w	r2, r2, #8
 8006972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006996:	e021      	b.n	80069dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fc32 	bl	8007208 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	021a      	lsls	r2, r3, #8
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069d8:	e000      	b.n	80069dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80069da:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop

080069f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIM_ConfigClockSource+0x18>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e0a6      	b.n	8006b5e <HAL_TIM_ConfigClockSource+0x166>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4b4f      	ldr	r3, [pc, #316]	; (8006b68 <HAL_TIM_ConfigClockSource+0x170>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d067      	beq.n	8006b18 <HAL_TIM_ConfigClockSource+0x120>
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d80b      	bhi.n	8006a64 <HAL_TIM_ConfigClockSource+0x6c>
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d073      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x140>
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d802      	bhi.n	8006a5a <HAL_TIM_ConfigClockSource+0x62>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d06f      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006a58:	e078      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d06c      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x140>
 8006a5e:	2b30      	cmp	r3, #48	; 0x30
 8006a60:	d06a      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006a62:	e073      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a64:	2b70      	cmp	r3, #112	; 0x70
 8006a66:	d00d      	beq.n	8006a84 <HAL_TIM_ConfigClockSource+0x8c>
 8006a68:	2b70      	cmp	r3, #112	; 0x70
 8006a6a:	d804      	bhi.n	8006a76 <HAL_TIM_ConfigClockSource+0x7e>
 8006a6c:	2b50      	cmp	r3, #80	; 0x50
 8006a6e:	d033      	beq.n	8006ad8 <HAL_TIM_ConfigClockSource+0xe0>
 8006a70:	2b60      	cmp	r3, #96	; 0x60
 8006a72:	d041      	beq.n	8006af8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006a74:	e06a      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7a:	d066      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x152>
 8006a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a80:	d017      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006a82:	e063      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6899      	ldr	r1, [r3, #8]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f000 fe38 	bl	8007708 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006aa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	609a      	str	r2, [r3, #8]
      break;
 8006ab0:	e04c      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6899      	ldr	r1, [r3, #8]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f000 fe21 	bl	8007708 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ad4:	609a      	str	r2, [r3, #8]
      break;
 8006ad6:	e039      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	6859      	ldr	r1, [r3, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f000 fcdf 	bl	80074a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2150      	movs	r1, #80	; 0x50
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 fdee 	bl	80076d2 <TIM_ITRx_SetConfig>
      break;
 8006af6:	e029      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6859      	ldr	r1, [r3, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	461a      	mov	r2, r3
 8006b06:	f000 fd3b 	bl	8007580 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2160      	movs	r1, #96	; 0x60
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fdde 	bl	80076d2 <TIM_ITRx_SetConfig>
      break;
 8006b16:	e019      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6859      	ldr	r1, [r3, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	461a      	mov	r2, r3
 8006b26:	f000 fcbf 	bl	80074a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2140      	movs	r1, #64	; 0x40
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fdce 	bl	80076d2 <TIM_ITRx_SetConfig>
      break;
 8006b36:	e009      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4619      	mov	r1, r3
 8006b42:	4610      	mov	r0, r2
 8006b44:	f000 fdc5 	bl	80076d2 <TIM_ITRx_SetConfig>
      break;
 8006b48:	e000      	b.n	8006b4c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	fffeff88 	.word	0xfffeff88

08006b6c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e031      	b.n	8006be8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fb8a 	bl	80072b0 <TIM_SlaveTimer_SetConfig>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e018      	b.n	8006be8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bd4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b0c      	cmp	r3, #12
 8006c02:	d831      	bhi.n	8006c68 <HAL_TIM_ReadCapturedValue+0x78>
 8006c04:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c41 	.word	0x08006c41
 8006c10:	08006c69 	.word	0x08006c69
 8006c14:	08006c69 	.word	0x08006c69
 8006c18:	08006c69 	.word	0x08006c69
 8006c1c:	08006c4b 	.word	0x08006c4b
 8006c20:	08006c69 	.word	0x08006c69
 8006c24:	08006c69 	.word	0x08006c69
 8006c28:	08006c69 	.word	0x08006c69
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c69 	.word	0x08006c69
 8006c34:	08006c69 	.word	0x08006c69
 8006c38:	08006c69 	.word	0x08006c69
 8006c3c:	08006c5f 	.word	0x08006c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c46:	60fb      	str	r3, [r7, #12]

      break;
 8006c48:	e00f      	b.n	8006c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	60fb      	str	r3, [r7, #12]

      break;
 8006c52:	e00a      	b.n	8006c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	60fb      	str	r3, [r7, #12]

      break;
 8006c5c:	e005      	b.n	8006c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	60fb      	str	r3, [r7, #12]

      break;
 8006c66:	e000      	b.n	8006c6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006c68:	bf00      	nop
  }

  return tmpreg;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a40      	ldr	r2, [pc, #256]	; (8006dc8 <TIM_Base_SetConfig+0x114>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d013      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd2:	d00f      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a3d      	ldr	r2, [pc, #244]	; (8006dcc <TIM_Base_SetConfig+0x118>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00b      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a3c      	ldr	r2, [pc, #240]	; (8006dd0 <TIM_Base_SetConfig+0x11c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d007      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a3b      	ldr	r2, [pc, #236]	; (8006dd4 <TIM_Base_SetConfig+0x120>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d003      	beq.n	8006cf4 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a3a      	ldr	r2, [pc, #232]	; (8006dd8 <TIM_Base_SetConfig+0x124>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d108      	bne.n	8006d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a2f      	ldr	r2, [pc, #188]	; (8006dc8 <TIM_Base_SetConfig+0x114>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d02b      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d14:	d027      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2c      	ldr	r2, [pc, #176]	; (8006dcc <TIM_Base_SetConfig+0x118>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d023      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a2b      	ldr	r2, [pc, #172]	; (8006dd0 <TIM_Base_SetConfig+0x11c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d01f      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <TIM_Base_SetConfig+0x120>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d01b      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a29      	ldr	r2, [pc, #164]	; (8006dd8 <TIM_Base_SetConfig+0x124>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d017      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a28      	ldr	r2, [pc, #160]	; (8006ddc <TIM_Base_SetConfig+0x128>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a27      	ldr	r2, [pc, #156]	; (8006de0 <TIM_Base_SetConfig+0x12c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00f      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <TIM_Base_SetConfig+0x130>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a25      	ldr	r2, [pc, #148]	; (8006de8 <TIM_Base_SetConfig+0x134>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d007      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a24      	ldr	r2, [pc, #144]	; (8006dec <TIM_Base_SetConfig+0x138>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a23      	ldr	r2, [pc, #140]	; (8006df0 <TIM_Base_SetConfig+0x13c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d108      	bne.n	8006d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <TIM_Base_SetConfig+0x114>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_Base_SetConfig+0xf8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a0c      	ldr	r2, [pc, #48]	; (8006dd8 <TIM_Base_SetConfig+0x124>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d103      	bne.n	8006db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	615a      	str	r2, [r3, #20]
}
 8006dba:	bf00      	nop
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40000c00 	.word	0x40000c00
 8006dd8:	40010400 	.word	0x40010400
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800
 8006de8:	40001800 	.word	0x40001800
 8006dec:	40001c00 	.word	0x40001c00
 8006df0:	40002000 	.word	0x40002000

08006df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4b2b      	ldr	r3, [pc, #172]	; (8006ecc <TIM_OC1_SetConfig+0xd8>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f023 0302 	bic.w	r3, r3, #2
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a21      	ldr	r2, [pc, #132]	; (8006ed0 <TIM_OC1_SetConfig+0xdc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC1_SetConfig+0x64>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a20      	ldr	r2, [pc, #128]	; (8006ed4 <TIM_OC1_SetConfig+0xe0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d10c      	bne.n	8006e72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f023 0308 	bic.w	r3, r3, #8
 8006e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 0304 	bic.w	r3, r3, #4
 8006e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <TIM_OC1_SetConfig+0xdc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_OC1_SetConfig+0x8e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a15      	ldr	r2, [pc, #84]	; (8006ed4 <TIM_OC1_SetConfig+0xe0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d111      	bne.n	8006ea6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	621a      	str	r2, [r3, #32]
}
 8006ec0:	bf00      	nop
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	fffeff8f 	.word	0xfffeff8f
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40010400 	.word	0x40010400

08006ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0210 	bic.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4b2e      	ldr	r3, [pc, #184]	; (8006fbc <TIM_OC2_SetConfig+0xe4>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f023 0320 	bic.w	r3, r3, #32
 8006f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a23      	ldr	r2, [pc, #140]	; (8006fc0 <TIM_OC2_SetConfig+0xe8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_OC2_SetConfig+0x68>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a22      	ldr	r2, [pc, #136]	; (8006fc4 <TIM_OC2_SetConfig+0xec>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d10d      	bne.n	8006f5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a18      	ldr	r2, [pc, #96]	; (8006fc0 <TIM_OC2_SetConfig+0xe8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC2_SetConfig+0x94>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a17      	ldr	r2, [pc, #92]	; (8006fc4 <TIM_OC2_SetConfig+0xec>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d113      	bne.n	8006f94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	feff8fff 	.word	0xfeff8fff
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40010400 	.word	0x40010400

08006fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <TIM_OC3_SetConfig+0xe0>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a22      	ldr	r2, [pc, #136]	; (80070ac <TIM_OC3_SetConfig+0xe4>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d003      	beq.n	800702e <TIM_OC3_SetConfig+0x66>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a21      	ldr	r2, [pc, #132]	; (80070b0 <TIM_OC3_SetConfig+0xe8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d10d      	bne.n	800704a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a17      	ldr	r2, [pc, #92]	; (80070ac <TIM_OC3_SetConfig+0xe4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d003      	beq.n	800705a <TIM_OC3_SetConfig+0x92>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <TIM_OC3_SetConfig+0xe8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d113      	bne.n	8007082 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4313      	orrs	r3, r2
 8007074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	621a      	str	r2, [r3, #32]
}
 800709c:	bf00      	nop
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	fffeff8f 	.word	0xfffeff8f
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40010400 	.word	0x40010400

080070b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4b1e      	ldr	r3, [pc, #120]	; (8007158 <TIM_OC4_SetConfig+0xa4>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	031b      	lsls	r3, r3, #12
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a13      	ldr	r2, [pc, #76]	; (800715c <TIM_OC4_SetConfig+0xa8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_OC4_SetConfig+0x68>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a12      	ldr	r2, [pc, #72]	; (8007160 <TIM_OC4_SetConfig+0xac>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d109      	bne.n	8007130 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007122:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	019b      	lsls	r3, r3, #6
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	621a      	str	r2, [r3, #32]
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	feff8fff 	.word	0xfeff8fff
 800715c:	40010000 	.word	0x40010000
 8007160:	40010400 	.word	0x40010400

08007164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4b1b      	ldr	r3, [pc, #108]	; (80071fc <TIM_OC5_SetConfig+0x98>)
 8007190:	4013      	ands	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a12      	ldr	r2, [pc, #72]	; (8007200 <TIM_OC5_SetConfig+0x9c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <TIM_OC5_SetConfig+0x5e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a11      	ldr	r2, [pc, #68]	; (8007204 <TIM_OC5_SetConfig+0xa0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d109      	bne.n	80071d6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	621a      	str	r2, [r3, #32]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	fffeff8f 	.word	0xfffeff8f
 8007200:	40010000 	.word	0x40010000
 8007204:	40010400 	.word	0x40010400

08007208 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4b1c      	ldr	r3, [pc, #112]	; (80072a4 <TIM_OC6_SetConfig+0x9c>)
 8007234:	4013      	ands	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800724a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	051b      	lsls	r3, r3, #20
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <TIM_OC6_SetConfig+0xa0>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_OC6_SetConfig+0x60>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a12      	ldr	r2, [pc, #72]	; (80072ac <TIM_OC6_SetConfig+0xa4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d109      	bne.n	800727c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800726e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	029b      	lsls	r3, r3, #10
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	feff8fff 	.word	0xfeff8fff
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40010400 	.word	0x40010400

080072b0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4b39      	ldr	r3, [pc, #228]	; (80073bc <TIM_SlaveTimer_SetConfig+0x10c>)
 80072d8:	4013      	ands	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2b30      	cmp	r3, #48	; 0x30
 80072f4:	d05c      	beq.n	80073b0 <TIM_SlaveTimer_SetConfig+0x100>
 80072f6:	2b30      	cmp	r3, #48	; 0x30
 80072f8:	d806      	bhi.n	8007308 <TIM_SlaveTimer_SetConfig+0x58>
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d058      	beq.n	80073b0 <TIM_SlaveTimer_SetConfig+0x100>
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d056      	beq.n	80073b0 <TIM_SlaveTimer_SetConfig+0x100>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d054      	beq.n	80073b0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007306:	e054      	b.n	80073b2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007308:	2b50      	cmp	r3, #80	; 0x50
 800730a:	d03d      	beq.n	8007388 <TIM_SlaveTimer_SetConfig+0xd8>
 800730c:	2b50      	cmp	r3, #80	; 0x50
 800730e:	d802      	bhi.n	8007316 <TIM_SlaveTimer_SetConfig+0x66>
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	d010      	beq.n	8007336 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007314:	e04d      	b.n	80073b2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007316:	2b60      	cmp	r3, #96	; 0x60
 8007318:	d040      	beq.n	800739c <TIM_SlaveTimer_SetConfig+0xec>
 800731a:	2b70      	cmp	r3, #112	; 0x70
 800731c:	d000      	beq.n	8007320 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800731e:	e048      	b.n	80073b2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68d9      	ldr	r1, [r3, #12]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f000 f9ea 	bl	8007708 <TIM_ETR_SetConfig>
      break;
 8007334:	e03d      	b.n	80073b2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b05      	cmp	r3, #5
 800733c:	d101      	bne.n	8007342 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e038      	b.n	80073b4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6a1a      	ldr	r2, [r3, #32]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007368:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	621a      	str	r2, [r3, #32]
      break;
 8007386:	e014      	b.n	80073b2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6899      	ldr	r1, [r3, #8]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	461a      	mov	r2, r3
 8007396:	f000 f887 	bl	80074a8 <TIM_TI1_ConfigInputStage>
      break;
 800739a:	e00a      	b.n	80073b2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	6899      	ldr	r1, [r3, #8]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	461a      	mov	r2, r3
 80073aa:	f000 f8e9 	bl	8007580 <TIM_TI2_ConfigInputStage>
      break;
 80073ae:	e000      	b.n	80073b2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80073b0:	bf00      	nop
  }
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	fffefff8 	.word	0xfffefff8

080073c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f023 0201 	bic.w	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4a28      	ldr	r2, [pc, #160]	; (800748c <TIM_TI1_SetConfig+0xcc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01b      	beq.n	8007426 <TIM_TI1_SetConfig+0x66>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f4:	d017      	beq.n	8007426 <TIM_TI1_SetConfig+0x66>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <TIM_TI1_SetConfig+0xd0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <TIM_TI1_SetConfig+0x66>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4a24      	ldr	r2, [pc, #144]	; (8007494 <TIM_TI1_SetConfig+0xd4>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d00f      	beq.n	8007426 <TIM_TI1_SetConfig+0x66>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a23      	ldr	r2, [pc, #140]	; (8007498 <TIM_TI1_SetConfig+0xd8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00b      	beq.n	8007426 <TIM_TI1_SetConfig+0x66>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4a22      	ldr	r2, [pc, #136]	; (800749c <TIM_TI1_SetConfig+0xdc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d007      	beq.n	8007426 <TIM_TI1_SetConfig+0x66>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <TIM_TI1_SetConfig+0xe0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d003      	beq.n	8007426 <TIM_TI1_SetConfig+0x66>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4a20      	ldr	r2, [pc, #128]	; (80074a4 <TIM_TI1_SetConfig+0xe4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d101      	bne.n	800742a <TIM_TI1_SetConfig+0x6a>
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <TIM_TI1_SetConfig+0x6c>
 800742a:	2300      	movs	r3, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d008      	beq.n	8007442 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4313      	orrs	r3, r2
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e003      	b.n	800744a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f043 0301 	orr.w	r3, r3, #1
 8007448:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	b2db      	uxtb	r3, r3
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f023 030a 	bic.w	r3, r3, #10
 8007464:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f003 030a 	and.w	r3, r3, #10
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	697a      	ldr	r2, [r7, #20]
 8007476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40010000 	.word	0x40010000
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40010400 	.word	0x40010400
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40001800 	.word	0x40001800

080074a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	f023 0201 	bic.w	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f023 030a 	bic.w	r3, r3, #10
 80074e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	f023 0210 	bic.w	r2, r3, #16
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007532:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	021b      	lsls	r3, r3, #8
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	4313      	orrs	r3, r2
 800753c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	031b      	lsls	r3, r3, #12
 800754a:	b29b      	uxth	r3, r3
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007558:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	621a      	str	r2, [r3, #32]
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	f023 0210 	bic.w	r2, r3, #16
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	031b      	lsls	r3, r3, #12
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	011b      	lsls	r3, r3, #4
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	621a      	str	r2, [r3, #32]
}
 80075d4:	bf00      	nop
 80075d6:	371c      	adds	r7, #28
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
 80075ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f023 0303 	bic.w	r3, r3, #3
 800760c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800761c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	b2db      	uxtb	r3, r3
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007630:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	621a      	str	r2, [r3, #32]
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007684:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007696:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	031b      	lsls	r3, r3, #12
 800769c:	b29b      	uxth	r3, r3
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80076aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	031b      	lsls	r3, r3, #12
 80076b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f043 0307 	orr.w	r3, r3, #7
 80076f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	609a      	str	r2, [r3, #8]
}
 80076fc:	bf00      	nop
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	021a      	lsls	r2, r3, #8
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	431a      	orrs	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4313      	orrs	r3, r2
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	4313      	orrs	r3, r2
 8007734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	609a      	str	r2, [r3, #8]
}
 800773c:	bf00      	nop
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f003 031f 	and.w	r3, r3, #31
 800775a:	2201      	movs	r2, #1
 800775c:	fa02 f303 	lsl.w	r3, r2, r3
 8007760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a1a      	ldr	r2, [r3, #32]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	43db      	mvns	r3, r3
 800776a:	401a      	ands	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a1a      	ldr	r2, [r3, #32]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f003 031f 	and.w	r3, r3, #31
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	fa01 f303 	lsl.w	r3, r1, r3
 8007780:	431a      	orrs	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	621a      	str	r2, [r3, #32]
}
 8007786:	bf00      	nop
 8007788:	371c      	adds	r7, #28
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
	...

08007794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e06d      	b.n	8007888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a30      	ldr	r2, [pc, #192]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d004      	beq.n	80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a2f      	ldr	r2, [pc, #188]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d108      	bne.n	80077f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a20      	ldr	r2, [pc, #128]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d022      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781e:	d01d      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a1d      	ldr	r2, [pc, #116]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d018      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a1c      	ldr	r2, [pc, #112]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d013      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00e      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a15      	ldr	r2, [pc, #84]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d009      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a16      	ldr	r2, [pc, #88]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a15      	ldr	r2, [pc, #84]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d10c      	bne.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	4313      	orrs	r3, r2
 800786c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	40010000 	.word	0x40010000
 8007898:	40010400 	.word	0x40010400
 800789c:	40000400 	.word	0x40000400
 80078a0:	40000800 	.word	0x40000800
 80078a4:	40000c00 	.word	0x40000c00
 80078a8:	40014000 	.word	0x40014000
 80078ac:	40001800 	.word	0x40001800

080078b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d101      	bne.n	80078cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078c8:	2302      	movs	r3, #2
 80078ca:	e065      	b.n	8007998 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	041b      	lsls	r3, r3, #16
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a14      	ldr	r2, [pc, #80]	; (80079a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d115      	bne.n	8007986 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	051b      	lsls	r3, r3, #20
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40010400 	.word	0x40010400

080079ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e040      	b.n	8007a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fa fce0 	bl	80023d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2224      	movs	r2, #36	; 0x24
 8007a14:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0201 	bic.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fac4 	bl	8007fb4 <UART_SetConfig>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e022      	b.n	8007a7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fd62 	bl	8008508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689a      	ldr	r2, [r3, #8]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 fde9 	bl	800864c <UART_CheckIdleState>
 8007a7a:	4603      	mov	r3, r0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08a      	sub	sp, #40	; 0x28
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	4613      	mov	r3, r2
 8007a92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d17f      	bne.n	8007b9c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_UART_Transmit+0x24>
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e078      	b.n	8007b9e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Transmit+0x36>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e071      	b.n	8007b9e <HAL_UART_Transmit+0x11a>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2221      	movs	r2, #33	; 0x21
 8007acc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007ace:	f7fa fee1 	bl	8002894 <HAL_GetTick>
 8007ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	88fa      	ldrh	r2, [r7, #6]
 8007ad8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aec:	d108      	bne.n	8007b00 <HAL_UART_Transmit+0x7c>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007af6:	2300      	movs	r3, #0
 8007af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	e003      	b.n	8007b08 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007b10:	e02c      	b.n	8007b6c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2180      	movs	r1, #128	; 0x80
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 fdda 	bl	80086d6 <UART_WaitOnFlagUntilTimeout>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e038      	b.n	8007b9e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	3302      	adds	r3, #2
 8007b46:	61bb      	str	r3, [r7, #24]
 8007b48:	e007      	b.n	8007b5a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	781a      	ldrb	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	3301      	adds	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1cc      	bne.n	8007b12 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2140      	movs	r1, #64	; 0x40
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fda7 	bl	80086d6 <UART_WaitOnFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e005      	b.n	8007b9e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2220      	movs	r2, #32
 8007b96:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e000      	b.n	8007b9e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007b9c:	2302      	movs	r3, #2
  }
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	f040 808a 	bne.w	8007cd4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <HAL_UART_Receive_IT+0x24>
 8007bc6:	88fb      	ldrh	r3, [r7, #6]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e082      	b.n	8007cd6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_UART_Receive_IT+0x36>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e07b      	b.n	8007cd6 <HAL_UART_Receive_IT+0x12e>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	88fa      	ldrh	r2, [r7, #6]
 8007bf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	88fa      	ldrh	r2, [r7, #6]
 8007bf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0a:	d10e      	bne.n	8007c2a <HAL_UART_Receive_IT+0x82>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d105      	bne.n	8007c20 <HAL_UART_Receive_IT+0x78>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c1e:	e02d      	b.n	8007c7c <HAL_UART_Receive_IT+0xd4>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	22ff      	movs	r2, #255	; 0xff
 8007c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c28:	e028      	b.n	8007c7c <HAL_UART_Receive_IT+0xd4>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10d      	bne.n	8007c4e <HAL_UART_Receive_IT+0xa6>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d104      	bne.n	8007c44 <HAL_UART_Receive_IT+0x9c>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	22ff      	movs	r2, #255	; 0xff
 8007c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c42:	e01b      	b.n	8007c7c <HAL_UART_Receive_IT+0xd4>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	227f      	movs	r2, #127	; 0x7f
 8007c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c4c:	e016      	b.n	8007c7c <HAL_UART_Receive_IT+0xd4>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c56:	d10d      	bne.n	8007c74 <HAL_UART_Receive_IT+0xcc>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <HAL_UART_Receive_IT+0xc2>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	227f      	movs	r2, #127	; 0x7f
 8007c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c68:	e008      	b.n	8007c7c <HAL_UART_Receive_IT+0xd4>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	223f      	movs	r2, #63	; 0x3f
 8007c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c72:	e003      	b.n	8007c7c <HAL_UART_Receive_IT+0xd4>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2222      	movs	r2, #34	; 0x22
 8007c86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca0:	d107      	bne.n	8007cb2 <HAL_UART_Receive_IT+0x10a>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4a0d      	ldr	r2, [pc, #52]	; (8007ce4 <HAL_UART_Receive_IT+0x13c>)
 8007cae:	661a      	str	r2, [r3, #96]	; 0x60
 8007cb0:	e002      	b.n	8007cb8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4a0c      	ldr	r2, [pc, #48]	; (8007ce8 <HAL_UART_Receive_IT+0x140>)
 8007cb6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007cce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	08008911 	.word	0x08008911
 8007ce8:	0800886b 	.word	0x0800886b

08007cec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d12:	4013      	ands	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d113      	bne.n	8007d44 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00e      	beq.n	8007d44 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	f003 0320 	and.w	r3, r3, #32
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d009      	beq.n	8007d44 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8114 	beq.w	8007f62 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
      }
      return;
 8007d42:	e10e      	b.n	8007f62 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80d6 	beq.w	8007ef8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d105      	bne.n	8007d62 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 80cb 	beq.w	8007ef8 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00e      	beq.n	8007d8a <HAL_UART_IRQHandler+0x9e>
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d82:	f043 0201 	orr.w	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00e      	beq.n	8007db2 <HAL_UART_IRQHandler+0xc6>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2202      	movs	r2, #2
 8007da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007daa:	f043 0204 	orr.w	r2, r3, #4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00e      	beq.n	8007dda <HAL_UART_IRQHandler+0xee>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d009      	beq.n	8007dda <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2204      	movs	r2, #4
 8007dcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd2:	f043 0202 	orr.w	r2, r3, #2
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	f003 0308 	and.w	r3, r3, #8
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d013      	beq.n	8007e0c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e04:	f043 0208 	orr.w	r2, r3, #8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00f      	beq.n	8007e36 <HAL_UART_IRQHandler+0x14a>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e2e:	f043 0220 	orr.w	r2, r3, #32
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 8093 	beq.w	8007f66 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e68:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e74:	2b40      	cmp	r3, #64	; 0x40
 8007e76:	d004      	beq.n	8007e82 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d031      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fca2 	bl	80087cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e92:	2b40      	cmp	r3, #64	; 0x40
 8007e94:	d123      	bne.n	8007ede <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ea4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d013      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb2:	4a30      	ldr	r2, [pc, #192]	; (8007f74 <HAL_UART_IRQHandler+0x288>)
 8007eb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fb fbfe 	bl	80036bc <HAL_DMA_Abort_IT>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d016      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed4:	e00e      	b.n	8007ef4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f858 	bl	8007f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007edc:	e00a      	b.n	8007ef4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f854 	bl	8007f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee4:	e006      	b.n	8007ef4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f850 	bl	8007f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007ef2:	e038      	b.n	8007f66 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef4:	bf00      	nop
    return;
 8007ef6:	e036      	b.n	8007f66 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00d      	beq.n	8007f1e <HAL_UART_IRQHandler+0x232>
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d008      	beq.n	8007f1e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f842 	bl	8007fa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f1c:	e026      	b.n	8007f6c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00d      	beq.n	8007f44 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d008      	beq.n	8007f44 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d017      	beq.n	8007f6a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3
    }
    return;
 8007f42:	e012      	b.n	8007f6a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00e      	beq.n	8007f6c <HAL_UART_IRQHandler+0x280>
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fc6d 	bl	8008838 <UART_EndTransmit_IT>
    return;
 8007f5e:	bf00      	nop
 8007f60:	e004      	b.n	8007f6c <HAL_UART_IRQHandler+0x280>
      return;
 8007f62:	bf00      	nop
 8007f64:	e002      	b.n	8007f6c <HAL_UART_IRQHandler+0x280>
    return;
 8007f66:	bf00      	nop
 8007f68:	e000      	b.n	8007f6c <HAL_UART_IRQHandler+0x280>
    return;
 8007f6a:	bf00      	nop
  }

}
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	0800880d 	.word	0x0800880d

08007f78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4bb1      	ldr	r3, [pc, #708]	; (80082a8 <UART_SetConfig+0x2f4>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	6939      	ldr	r1, [r7, #16]
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	430a      	orrs	r2, r1
 8008028:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a9f      	ldr	r2, [pc, #636]	; (80082ac <UART_SetConfig+0x2f8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d121      	bne.n	8008078 <UART_SetConfig+0xc4>
 8008034:	4b9e      	ldr	r3, [pc, #632]	; (80082b0 <UART_SetConfig+0x2fc>)
 8008036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	2b03      	cmp	r3, #3
 8008040:	d816      	bhi.n	8008070 <UART_SetConfig+0xbc>
 8008042:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <UART_SetConfig+0x94>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	08008059 	.word	0x08008059
 800804c:	08008065 	.word	0x08008065
 8008050:	0800805f 	.word	0x0800805f
 8008054:	0800806b 	.word	0x0800806b
 8008058:	2301      	movs	r3, #1
 800805a:	77fb      	strb	r3, [r7, #31]
 800805c:	e151      	b.n	8008302 <UART_SetConfig+0x34e>
 800805e:	2302      	movs	r3, #2
 8008060:	77fb      	strb	r3, [r7, #31]
 8008062:	e14e      	b.n	8008302 <UART_SetConfig+0x34e>
 8008064:	2304      	movs	r3, #4
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e14b      	b.n	8008302 <UART_SetConfig+0x34e>
 800806a:	2308      	movs	r3, #8
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e148      	b.n	8008302 <UART_SetConfig+0x34e>
 8008070:	2310      	movs	r3, #16
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	bf00      	nop
 8008076:	e144      	b.n	8008302 <UART_SetConfig+0x34e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a8d      	ldr	r2, [pc, #564]	; (80082b4 <UART_SetConfig+0x300>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d134      	bne.n	80080ec <UART_SetConfig+0x138>
 8008082:	4b8b      	ldr	r3, [pc, #556]	; (80082b0 <UART_SetConfig+0x2fc>)
 8008084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008088:	f003 030c 	and.w	r3, r3, #12
 800808c:	2b0c      	cmp	r3, #12
 800808e:	d829      	bhi.n	80080e4 <UART_SetConfig+0x130>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0xe4>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080080e5 	.word	0x080080e5
 80080a0:	080080e5 	.word	0x080080e5
 80080a4:	080080e5 	.word	0x080080e5
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	080080e5 	.word	0x080080e5
 80080b0:	080080e5 	.word	0x080080e5
 80080b4:	080080e5 	.word	0x080080e5
 80080b8:	080080d3 	.word	0x080080d3
 80080bc:	080080e5 	.word	0x080080e5
 80080c0:	080080e5 	.word	0x080080e5
 80080c4:	080080e5 	.word	0x080080e5
 80080c8:	080080df 	.word	0x080080df
 80080cc:	2300      	movs	r3, #0
 80080ce:	77fb      	strb	r3, [r7, #31]
 80080d0:	e117      	b.n	8008302 <UART_SetConfig+0x34e>
 80080d2:	2302      	movs	r3, #2
 80080d4:	77fb      	strb	r3, [r7, #31]
 80080d6:	e114      	b.n	8008302 <UART_SetConfig+0x34e>
 80080d8:	2304      	movs	r3, #4
 80080da:	77fb      	strb	r3, [r7, #31]
 80080dc:	e111      	b.n	8008302 <UART_SetConfig+0x34e>
 80080de:	2308      	movs	r3, #8
 80080e0:	77fb      	strb	r3, [r7, #31]
 80080e2:	e10e      	b.n	8008302 <UART_SetConfig+0x34e>
 80080e4:	2310      	movs	r3, #16
 80080e6:	77fb      	strb	r3, [r7, #31]
 80080e8:	bf00      	nop
 80080ea:	e10a      	b.n	8008302 <UART_SetConfig+0x34e>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a71      	ldr	r2, [pc, #452]	; (80082b8 <UART_SetConfig+0x304>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d120      	bne.n	8008138 <UART_SetConfig+0x184>
 80080f6:	4b6e      	ldr	r3, [pc, #440]	; (80082b0 <UART_SetConfig+0x2fc>)
 80080f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008100:	2b10      	cmp	r3, #16
 8008102:	d00f      	beq.n	8008124 <UART_SetConfig+0x170>
 8008104:	2b10      	cmp	r3, #16
 8008106:	d802      	bhi.n	800810e <UART_SetConfig+0x15a>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <UART_SetConfig+0x164>
 800810c:	e010      	b.n	8008130 <UART_SetConfig+0x17c>
 800810e:	2b20      	cmp	r3, #32
 8008110:	d005      	beq.n	800811e <UART_SetConfig+0x16a>
 8008112:	2b30      	cmp	r3, #48	; 0x30
 8008114:	d009      	beq.n	800812a <UART_SetConfig+0x176>
 8008116:	e00b      	b.n	8008130 <UART_SetConfig+0x17c>
 8008118:	2300      	movs	r3, #0
 800811a:	77fb      	strb	r3, [r7, #31]
 800811c:	e0f1      	b.n	8008302 <UART_SetConfig+0x34e>
 800811e:	2302      	movs	r3, #2
 8008120:	77fb      	strb	r3, [r7, #31]
 8008122:	e0ee      	b.n	8008302 <UART_SetConfig+0x34e>
 8008124:	2304      	movs	r3, #4
 8008126:	77fb      	strb	r3, [r7, #31]
 8008128:	e0eb      	b.n	8008302 <UART_SetConfig+0x34e>
 800812a:	2308      	movs	r3, #8
 800812c:	77fb      	strb	r3, [r7, #31]
 800812e:	e0e8      	b.n	8008302 <UART_SetConfig+0x34e>
 8008130:	2310      	movs	r3, #16
 8008132:	77fb      	strb	r3, [r7, #31]
 8008134:	bf00      	nop
 8008136:	e0e4      	b.n	8008302 <UART_SetConfig+0x34e>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a5f      	ldr	r2, [pc, #380]	; (80082bc <UART_SetConfig+0x308>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d120      	bne.n	8008184 <UART_SetConfig+0x1d0>
 8008142:	4b5b      	ldr	r3, [pc, #364]	; (80082b0 <UART_SetConfig+0x2fc>)
 8008144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008148:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d00f      	beq.n	8008170 <UART_SetConfig+0x1bc>
 8008150:	2b40      	cmp	r3, #64	; 0x40
 8008152:	d802      	bhi.n	800815a <UART_SetConfig+0x1a6>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d005      	beq.n	8008164 <UART_SetConfig+0x1b0>
 8008158:	e010      	b.n	800817c <UART_SetConfig+0x1c8>
 800815a:	2b80      	cmp	r3, #128	; 0x80
 800815c:	d005      	beq.n	800816a <UART_SetConfig+0x1b6>
 800815e:	2bc0      	cmp	r3, #192	; 0xc0
 8008160:	d009      	beq.n	8008176 <UART_SetConfig+0x1c2>
 8008162:	e00b      	b.n	800817c <UART_SetConfig+0x1c8>
 8008164:	2300      	movs	r3, #0
 8008166:	77fb      	strb	r3, [r7, #31]
 8008168:	e0cb      	b.n	8008302 <UART_SetConfig+0x34e>
 800816a:	2302      	movs	r3, #2
 800816c:	77fb      	strb	r3, [r7, #31]
 800816e:	e0c8      	b.n	8008302 <UART_SetConfig+0x34e>
 8008170:	2304      	movs	r3, #4
 8008172:	77fb      	strb	r3, [r7, #31]
 8008174:	e0c5      	b.n	8008302 <UART_SetConfig+0x34e>
 8008176:	2308      	movs	r3, #8
 8008178:	77fb      	strb	r3, [r7, #31]
 800817a:	e0c2      	b.n	8008302 <UART_SetConfig+0x34e>
 800817c:	2310      	movs	r3, #16
 800817e:	77fb      	strb	r3, [r7, #31]
 8008180:	bf00      	nop
 8008182:	e0be      	b.n	8008302 <UART_SetConfig+0x34e>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a4d      	ldr	r2, [pc, #308]	; (80082c0 <UART_SetConfig+0x30c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d124      	bne.n	80081d8 <UART_SetConfig+0x224>
 800818e:	4b48      	ldr	r3, [pc, #288]	; (80082b0 <UART_SetConfig+0x2fc>)
 8008190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819c:	d012      	beq.n	80081c4 <UART_SetConfig+0x210>
 800819e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081a2:	d802      	bhi.n	80081aa <UART_SetConfig+0x1f6>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <UART_SetConfig+0x204>
 80081a8:	e012      	b.n	80081d0 <UART_SetConfig+0x21c>
 80081aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ae:	d006      	beq.n	80081be <UART_SetConfig+0x20a>
 80081b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081b4:	d009      	beq.n	80081ca <UART_SetConfig+0x216>
 80081b6:	e00b      	b.n	80081d0 <UART_SetConfig+0x21c>
 80081b8:	2300      	movs	r3, #0
 80081ba:	77fb      	strb	r3, [r7, #31]
 80081bc:	e0a1      	b.n	8008302 <UART_SetConfig+0x34e>
 80081be:	2302      	movs	r3, #2
 80081c0:	77fb      	strb	r3, [r7, #31]
 80081c2:	e09e      	b.n	8008302 <UART_SetConfig+0x34e>
 80081c4:	2304      	movs	r3, #4
 80081c6:	77fb      	strb	r3, [r7, #31]
 80081c8:	e09b      	b.n	8008302 <UART_SetConfig+0x34e>
 80081ca:	2308      	movs	r3, #8
 80081cc:	77fb      	strb	r3, [r7, #31]
 80081ce:	e098      	b.n	8008302 <UART_SetConfig+0x34e>
 80081d0:	2310      	movs	r3, #16
 80081d2:	77fb      	strb	r3, [r7, #31]
 80081d4:	bf00      	nop
 80081d6:	e094      	b.n	8008302 <UART_SetConfig+0x34e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a39      	ldr	r2, [pc, #228]	; (80082c4 <UART_SetConfig+0x310>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d124      	bne.n	800822c <UART_SetConfig+0x278>
 80081e2:	4b33      	ldr	r3, [pc, #204]	; (80082b0 <UART_SetConfig+0x2fc>)
 80081e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f0:	d012      	beq.n	8008218 <UART_SetConfig+0x264>
 80081f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f6:	d802      	bhi.n	80081fe <UART_SetConfig+0x24a>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <UART_SetConfig+0x258>
 80081fc:	e012      	b.n	8008224 <UART_SetConfig+0x270>
 80081fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008202:	d006      	beq.n	8008212 <UART_SetConfig+0x25e>
 8008204:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008208:	d009      	beq.n	800821e <UART_SetConfig+0x26a>
 800820a:	e00b      	b.n	8008224 <UART_SetConfig+0x270>
 800820c:	2301      	movs	r3, #1
 800820e:	77fb      	strb	r3, [r7, #31]
 8008210:	e077      	b.n	8008302 <UART_SetConfig+0x34e>
 8008212:	2302      	movs	r3, #2
 8008214:	77fb      	strb	r3, [r7, #31]
 8008216:	e074      	b.n	8008302 <UART_SetConfig+0x34e>
 8008218:	2304      	movs	r3, #4
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	e071      	b.n	8008302 <UART_SetConfig+0x34e>
 800821e:	2308      	movs	r3, #8
 8008220:	77fb      	strb	r3, [r7, #31]
 8008222:	e06e      	b.n	8008302 <UART_SetConfig+0x34e>
 8008224:	2310      	movs	r3, #16
 8008226:	77fb      	strb	r3, [r7, #31]
 8008228:	bf00      	nop
 800822a:	e06a      	b.n	8008302 <UART_SetConfig+0x34e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a25      	ldr	r2, [pc, #148]	; (80082c8 <UART_SetConfig+0x314>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d124      	bne.n	8008280 <UART_SetConfig+0x2cc>
 8008236:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <UART_SetConfig+0x2fc>)
 8008238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008244:	d012      	beq.n	800826c <UART_SetConfig+0x2b8>
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	d802      	bhi.n	8008252 <UART_SetConfig+0x29e>
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <UART_SetConfig+0x2ac>
 8008250:	e012      	b.n	8008278 <UART_SetConfig+0x2c4>
 8008252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008256:	d006      	beq.n	8008266 <UART_SetConfig+0x2b2>
 8008258:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800825c:	d009      	beq.n	8008272 <UART_SetConfig+0x2be>
 800825e:	e00b      	b.n	8008278 <UART_SetConfig+0x2c4>
 8008260:	2300      	movs	r3, #0
 8008262:	77fb      	strb	r3, [r7, #31]
 8008264:	e04d      	b.n	8008302 <UART_SetConfig+0x34e>
 8008266:	2302      	movs	r3, #2
 8008268:	77fb      	strb	r3, [r7, #31]
 800826a:	e04a      	b.n	8008302 <UART_SetConfig+0x34e>
 800826c:	2304      	movs	r3, #4
 800826e:	77fb      	strb	r3, [r7, #31]
 8008270:	e047      	b.n	8008302 <UART_SetConfig+0x34e>
 8008272:	2308      	movs	r3, #8
 8008274:	77fb      	strb	r3, [r7, #31]
 8008276:	e044      	b.n	8008302 <UART_SetConfig+0x34e>
 8008278:	2310      	movs	r3, #16
 800827a:	77fb      	strb	r3, [r7, #31]
 800827c:	bf00      	nop
 800827e:	e040      	b.n	8008302 <UART_SetConfig+0x34e>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a11      	ldr	r2, [pc, #68]	; (80082cc <UART_SetConfig+0x318>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d139      	bne.n	80082fe <UART_SetConfig+0x34a>
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <UART_SetConfig+0x2fc>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008290:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008298:	d027      	beq.n	80082ea <UART_SetConfig+0x336>
 800829a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800829e:	d817      	bhi.n	80082d0 <UART_SetConfig+0x31c>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01c      	beq.n	80082de <UART_SetConfig+0x32a>
 80082a4:	e027      	b.n	80082f6 <UART_SetConfig+0x342>
 80082a6:	bf00      	nop
 80082a8:	efff69f3 	.word	0xefff69f3
 80082ac:	40011000 	.word	0x40011000
 80082b0:	40023800 	.word	0x40023800
 80082b4:	40004400 	.word	0x40004400
 80082b8:	40004800 	.word	0x40004800
 80082bc:	40004c00 	.word	0x40004c00
 80082c0:	40005000 	.word	0x40005000
 80082c4:	40011400 	.word	0x40011400
 80082c8:	40007800 	.word	0x40007800
 80082cc:	40007c00 	.word	0x40007c00
 80082d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d4:	d006      	beq.n	80082e4 <UART_SetConfig+0x330>
 80082d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082da:	d009      	beq.n	80082f0 <UART_SetConfig+0x33c>
 80082dc:	e00b      	b.n	80082f6 <UART_SetConfig+0x342>
 80082de:	2300      	movs	r3, #0
 80082e0:	77fb      	strb	r3, [r7, #31]
 80082e2:	e00e      	b.n	8008302 <UART_SetConfig+0x34e>
 80082e4:	2302      	movs	r3, #2
 80082e6:	77fb      	strb	r3, [r7, #31]
 80082e8:	e00b      	b.n	8008302 <UART_SetConfig+0x34e>
 80082ea:	2304      	movs	r3, #4
 80082ec:	77fb      	strb	r3, [r7, #31]
 80082ee:	e008      	b.n	8008302 <UART_SetConfig+0x34e>
 80082f0:	2308      	movs	r3, #8
 80082f2:	77fb      	strb	r3, [r7, #31]
 80082f4:	e005      	b.n	8008302 <UART_SetConfig+0x34e>
 80082f6:	2310      	movs	r3, #16
 80082f8:	77fb      	strb	r3, [r7, #31]
 80082fa:	bf00      	nop
 80082fc:	e001      	b.n	8008302 <UART_SetConfig+0x34e>
 80082fe:	2310      	movs	r3, #16
 8008300:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800830a:	d17f      	bne.n	800840c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800830c:	7ffb      	ldrb	r3, [r7, #31]
 800830e:	2b08      	cmp	r3, #8
 8008310:	d85c      	bhi.n	80083cc <UART_SetConfig+0x418>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <UART_SetConfig+0x364>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	0800833d 	.word	0x0800833d
 800831c:	0800835d 	.word	0x0800835d
 8008320:	0800837d 	.word	0x0800837d
 8008324:	080083cd 	.word	0x080083cd
 8008328:	08008395 	.word	0x08008395
 800832c:	080083cd 	.word	0x080083cd
 8008330:	080083cd 	.word	0x080083cd
 8008334:	080083cd 	.word	0x080083cd
 8008338:	080083b5 	.word	0x080083b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800833c:	f7fc fbec 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8008340:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	005a      	lsls	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	085b      	lsrs	r3, r3, #1
 800834c:	441a      	add	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	fbb2 f3f3 	udiv	r3, r2, r3
 8008356:	b29b      	uxth	r3, r3
 8008358:	61bb      	str	r3, [r7, #24]
        break;
 800835a:	e03a      	b.n	80083d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800835c:	f7fc fbf0 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 8008360:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	005a      	lsls	r2, r3, #1
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	085b      	lsrs	r3, r3, #1
 800836c:	441a      	add	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	fbb2 f3f3 	udiv	r3, r2, r3
 8008376:	b29b      	uxth	r3, r3
 8008378:	61bb      	str	r3, [r7, #24]
        break;
 800837a:	e02a      	b.n	80083d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	085a      	lsrs	r2, r3, #1
 8008382:	4b5f      	ldr	r3, [pc, #380]	; (8008500 <UART_SetConfig+0x54c>)
 8008384:	4413      	add	r3, r2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6852      	ldr	r2, [r2, #4]
 800838a:	fbb3 f3f2 	udiv	r3, r3, r2
 800838e:	b29b      	uxth	r3, r3
 8008390:	61bb      	str	r3, [r7, #24]
        break;
 8008392:	e01e      	b.n	80083d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008394:	f7fc fb02 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8008398:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	005a      	lsls	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	085b      	lsrs	r3, r3, #1
 80083a4:	441a      	add	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	61bb      	str	r3, [r7, #24]
        break;
 80083b2:	e00e      	b.n	80083d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	085b      	lsrs	r3, r3, #1
 80083ba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	61bb      	str	r3, [r7, #24]
        break;
 80083ca:	e002      	b.n	80083d2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]
        break;
 80083d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	2b0f      	cmp	r3, #15
 80083d6:	d916      	bls.n	8008406 <UART_SetConfig+0x452>
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083de:	d212      	bcs.n	8008406 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	f023 030f 	bic.w	r3, r3, #15
 80083e8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	085b      	lsrs	r3, r3, #1
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f003 0307 	and.w	r3, r3, #7
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	897b      	ldrh	r3, [r7, #10]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	897a      	ldrh	r2, [r7, #10]
 8008402:	60da      	str	r2, [r3, #12]
 8008404:	e070      	b.n	80084e8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]
 800840a:	e06d      	b.n	80084e8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800840c:	7ffb      	ldrb	r3, [r7, #31]
 800840e:	2b08      	cmp	r3, #8
 8008410:	d859      	bhi.n	80084c6 <UART_SetConfig+0x512>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <UART_SetConfig+0x464>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	0800843d 	.word	0x0800843d
 800841c:	0800845b 	.word	0x0800845b
 8008420:	08008479 	.word	0x08008479
 8008424:	080084c7 	.word	0x080084c7
 8008428:	08008491 	.word	0x08008491
 800842c:	080084c7 	.word	0x080084c7
 8008430:	080084c7 	.word	0x080084c7
 8008434:	080084c7 	.word	0x080084c7
 8008438:	080084af 	.word	0x080084af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800843c:	f7fc fb6c 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8008440:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	085a      	lsrs	r2, r3, #1
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	441a      	add	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	fbb2 f3f3 	udiv	r3, r2, r3
 8008454:	b29b      	uxth	r3, r3
 8008456:	61bb      	str	r3, [r7, #24]
        break;
 8008458:	e038      	b.n	80084cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800845a:	f7fc fb71 	bl	8004b40 <HAL_RCC_GetPCLK2Freq>
 800845e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	085a      	lsrs	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	441a      	add	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008472:	b29b      	uxth	r3, r3
 8008474:	61bb      	str	r3, [r7, #24]
        break;
 8008476:	e029      	b.n	80084cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	085a      	lsrs	r2, r3, #1
 800847e:	4b21      	ldr	r3, [pc, #132]	; (8008504 <UART_SetConfig+0x550>)
 8008480:	4413      	add	r3, r2
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6852      	ldr	r2, [r2, #4]
 8008486:	fbb3 f3f2 	udiv	r3, r3, r2
 800848a:	b29b      	uxth	r3, r3
 800848c:	61bb      	str	r3, [r7, #24]
        break;
 800848e:	e01d      	b.n	80084cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008490:	f7fc fa84 	bl	800499c <HAL_RCC_GetSysClockFreq>
 8008494:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	085a      	lsrs	r2, r3, #1
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	441a      	add	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	61bb      	str	r3, [r7, #24]
        break;
 80084ac:	e00e      	b.n	80084cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	61bb      	str	r3, [r7, #24]
        break;
 80084c4:	e002      	b.n	80084cc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]
        break;
 80084ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	2b0f      	cmp	r3, #15
 80084d0:	d908      	bls.n	80084e4 <UART_SetConfig+0x530>
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084d8:	d204      	bcs.n	80084e4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	60da      	str	r2, [r3, #12]
 80084e2:	e001      	b.n	80084e8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3720      	adds	r7, #32
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	01e84800 	.word	0x01e84800
 8008504:	00f42400 	.word	0x00f42400

08008508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	f003 0310 	and.w	r3, r3, #16
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d01a      	beq.n	800861e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008606:	d10a      	bne.n	800861e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	605a      	str	r2, [r3, #4]
  }
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af02      	add	r7, sp, #8
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800865a:	f7fa f91b 	bl	8002894 <HAL_GetTick>
 800865e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b08      	cmp	r3, #8
 800866c:	d10e      	bne.n	800868c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800866e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f82a 	bl	80086d6 <UART_WaitOnFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e020      	b.n	80086ce <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	2b04      	cmp	r3, #4
 8008698:	d10e      	bne.n	80086b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800869a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f814 	bl	80086d6 <UART_WaitOnFlagUntilTimeout>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e00a      	b.n	80086ce <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	603b      	str	r3, [r7, #0]
 80086e2:	4613      	mov	r3, r2
 80086e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e6:	e05d      	b.n	80087a4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	d059      	beq.n	80087a4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f0:	f7fa f8d0 	bl	8002894 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d302      	bcc.n	8008706 <UART_WaitOnFlagUntilTimeout+0x30>
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d11b      	bne.n	800873e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008714:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0201 	bic.w	r2, r2, #1
 8008724:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2220      	movs	r2, #32
 8008730:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e042      	b.n	80087c4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d02b      	beq.n	80087a4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800875a:	d123      	bne.n	80087a4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008764:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008774:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0201 	bic.w	r2, r2, #1
 8008784:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2220      	movs	r2, #32
 8008790:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2220      	movs	r2, #32
 8008796:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e00f      	b.n	80087c4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69da      	ldr	r2, [r3, #28]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	4013      	ands	r3, r2
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	bf0c      	ite	eq
 80087b4:	2301      	moveq	r3, #1
 80087b6:	2300      	movne	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	461a      	mov	r2, r3
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d092      	beq.n	80086e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0201 	bic.w	r2, r2, #1
 80087f2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff fbae 	bl	8007f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800884e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff fb8b 	bl	8007f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008878:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800887e:	2b22      	cmp	r3, #34	; 0x22
 8008880:	d13a      	bne.n	80088f8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800888a:	89bb      	ldrh	r3, [r7, #12]
 800888c:	b2d9      	uxtb	r1, r3
 800888e:	89fb      	ldrh	r3, [r7, #14]
 8008890:	b2da      	uxtb	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008896:	400a      	ands	r2, r1
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088be:	b29b      	uxth	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d121      	bne.n	8008908 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088d2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f022 0201 	bic.w	r2, r2, #1
 80088e2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7f9 f8d9 	bl	8001aa8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088f6:	e007      	b.n	8008908 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0208 	orr.w	r2, r2, #8
 8008906:	619a      	str	r2, [r3, #24]
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800891e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008924:	2b22      	cmp	r3, #34	; 0x22
 8008926:	d13a      	bne.n	800899e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008934:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008936:	89ba      	ldrh	r2, [r7, #12]
 8008938:	89fb      	ldrh	r3, [r7, #14]
 800893a:	4013      	ands	r3, r2
 800893c:	b29a      	uxth	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008946:	1c9a      	adds	r2, r3, #2
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008952:	b29b      	uxth	r3, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d121      	bne.n	80089ae <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008978:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0201 	bic.w	r2, r2, #1
 8008988:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7f9 f886 	bl	8001aa8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800899c:	e007      	b.n	80089ae <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0208 	orr.w	r2, r2, #8
 80089ac:	619a      	str	r2, [r3, #24]
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <__errno>:
 80089b8:	4b01      	ldr	r3, [pc, #4]	; (80089c0 <__errno+0x8>)
 80089ba:	6818      	ldr	r0, [r3, #0]
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	20000010 	.word	0x20000010

080089c4 <__libc_init_array>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	4e0d      	ldr	r6, [pc, #52]	; (80089fc <__libc_init_array+0x38>)
 80089c8:	4c0d      	ldr	r4, [pc, #52]	; (8008a00 <__libc_init_array+0x3c>)
 80089ca:	1ba4      	subs	r4, r4, r6
 80089cc:	10a4      	asrs	r4, r4, #2
 80089ce:	2500      	movs	r5, #0
 80089d0:	42a5      	cmp	r5, r4
 80089d2:	d109      	bne.n	80089e8 <__libc_init_array+0x24>
 80089d4:	4e0b      	ldr	r6, [pc, #44]	; (8008a04 <__libc_init_array+0x40>)
 80089d6:	4c0c      	ldr	r4, [pc, #48]	; (8008a08 <__libc_init_array+0x44>)
 80089d8:	f000 fc26 	bl	8009228 <_init>
 80089dc:	1ba4      	subs	r4, r4, r6
 80089de:	10a4      	asrs	r4, r4, #2
 80089e0:	2500      	movs	r5, #0
 80089e2:	42a5      	cmp	r5, r4
 80089e4:	d105      	bne.n	80089f2 <__libc_init_array+0x2e>
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089ec:	4798      	blx	r3
 80089ee:	3501      	adds	r5, #1
 80089f0:	e7ee      	b.n	80089d0 <__libc_init_array+0xc>
 80089f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089f6:	4798      	blx	r3
 80089f8:	3501      	adds	r5, #1
 80089fa:	e7f2      	b.n	80089e2 <__libc_init_array+0x1e>
 80089fc:	080092b0 	.word	0x080092b0
 8008a00:	080092b0 	.word	0x080092b0
 8008a04:	080092b0 	.word	0x080092b0
 8008a08:	080092b4 	.word	0x080092b4

08008a0c <memset>:
 8008a0c:	4402      	add	r2, r0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d100      	bne.n	8008a16 <memset+0xa>
 8008a14:	4770      	bx	lr
 8008a16:	f803 1b01 	strb.w	r1, [r3], #1
 8008a1a:	e7f9      	b.n	8008a10 <memset+0x4>

08008a1c <siprintf>:
 8008a1c:	b40e      	push	{r1, r2, r3}
 8008a1e:	b500      	push	{lr}
 8008a20:	b09c      	sub	sp, #112	; 0x70
 8008a22:	ab1d      	add	r3, sp, #116	; 0x74
 8008a24:	9002      	str	r0, [sp, #8]
 8008a26:	9006      	str	r0, [sp, #24]
 8008a28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a2c:	4809      	ldr	r0, [pc, #36]	; (8008a54 <siprintf+0x38>)
 8008a2e:	9107      	str	r1, [sp, #28]
 8008a30:	9104      	str	r1, [sp, #16]
 8008a32:	4909      	ldr	r1, [pc, #36]	; (8008a58 <siprintf+0x3c>)
 8008a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a38:	9105      	str	r1, [sp, #20]
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	a902      	add	r1, sp, #8
 8008a40:	f000 f866 	bl	8008b10 <_svfiprintf_r>
 8008a44:	9b02      	ldr	r3, [sp, #8]
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	b01c      	add	sp, #112	; 0x70
 8008a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a50:	b003      	add	sp, #12
 8008a52:	4770      	bx	lr
 8008a54:	20000010 	.word	0x20000010
 8008a58:	ffff0208 	.word	0xffff0208

08008a5c <__ssputs_r>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	688e      	ldr	r6, [r1, #8]
 8008a62:	429e      	cmp	r6, r3
 8008a64:	4682      	mov	sl, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	4690      	mov	r8, r2
 8008a6a:	4699      	mov	r9, r3
 8008a6c:	d837      	bhi.n	8008ade <__ssputs_r+0x82>
 8008a6e:	898a      	ldrh	r2, [r1, #12]
 8008a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a74:	d031      	beq.n	8008ada <__ssputs_r+0x7e>
 8008a76:	6825      	ldr	r5, [r4, #0]
 8008a78:	6909      	ldr	r1, [r1, #16]
 8008a7a:	1a6f      	subs	r7, r5, r1
 8008a7c:	6965      	ldr	r5, [r4, #20]
 8008a7e:	2302      	movs	r3, #2
 8008a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a84:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a88:	f109 0301 	add.w	r3, r9, #1
 8008a8c:	443b      	add	r3, r7
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	bf38      	it	cc
 8008a92:	461d      	movcc	r5, r3
 8008a94:	0553      	lsls	r3, r2, #21
 8008a96:	d530      	bpl.n	8008afa <__ssputs_r+0x9e>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f000 fb2b 	bl	80090f4 <_malloc_r>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	b950      	cbnz	r0, 8008ab8 <__ssputs_r+0x5c>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	f8ca 3000 	str.w	r3, [sl]
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab8:	463a      	mov	r2, r7
 8008aba:	6921      	ldr	r1, [r4, #16]
 8008abc:	f000 faa8 	bl	8009010 <memcpy>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	6126      	str	r6, [r4, #16]
 8008ace:	6165      	str	r5, [r4, #20]
 8008ad0:	443e      	add	r6, r7
 8008ad2:	1bed      	subs	r5, r5, r7
 8008ad4:	6026      	str	r6, [r4, #0]
 8008ad6:	60a5      	str	r5, [r4, #8]
 8008ad8:	464e      	mov	r6, r9
 8008ada:	454e      	cmp	r6, r9
 8008adc:	d900      	bls.n	8008ae0 <__ssputs_r+0x84>
 8008ade:	464e      	mov	r6, r9
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	6820      	ldr	r0, [r4, #0]
 8008ae6:	f000 fa9e 	bl	8009026 <memmove>
 8008aea:	68a3      	ldr	r3, [r4, #8]
 8008aec:	1b9b      	subs	r3, r3, r6
 8008aee:	60a3      	str	r3, [r4, #8]
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	441e      	add	r6, r3
 8008af4:	6026      	str	r6, [r4, #0]
 8008af6:	2000      	movs	r0, #0
 8008af8:	e7dc      	b.n	8008ab4 <__ssputs_r+0x58>
 8008afa:	462a      	mov	r2, r5
 8008afc:	f000 fb54 	bl	80091a8 <_realloc_r>
 8008b00:	4606      	mov	r6, r0
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d1e2      	bne.n	8008acc <__ssputs_r+0x70>
 8008b06:	6921      	ldr	r1, [r4, #16]
 8008b08:	4650      	mov	r0, sl
 8008b0a:	f000 faa5 	bl	8009058 <_free_r>
 8008b0e:	e7c8      	b.n	8008aa2 <__ssputs_r+0x46>

08008b10 <_svfiprintf_r>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	461d      	mov	r5, r3
 8008b16:	898b      	ldrh	r3, [r1, #12]
 8008b18:	061f      	lsls	r7, r3, #24
 8008b1a:	b09d      	sub	sp, #116	; 0x74
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	4616      	mov	r6, r2
 8008b22:	d50f      	bpl.n	8008b44 <_svfiprintf_r+0x34>
 8008b24:	690b      	ldr	r3, [r1, #16]
 8008b26:	b96b      	cbnz	r3, 8008b44 <_svfiprintf_r+0x34>
 8008b28:	2140      	movs	r1, #64	; 0x40
 8008b2a:	f000 fae3 	bl	80090f4 <_malloc_r>
 8008b2e:	6020      	str	r0, [r4, #0]
 8008b30:	6120      	str	r0, [r4, #16]
 8008b32:	b928      	cbnz	r0, 8008b40 <_svfiprintf_r+0x30>
 8008b34:	230c      	movs	r3, #12
 8008b36:	f8c8 3000 	str.w	r3, [r8]
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3e:	e0c8      	b.n	8008cd2 <_svfiprintf_r+0x1c2>
 8008b40:	2340      	movs	r3, #64	; 0x40
 8008b42:	6163      	str	r3, [r4, #20]
 8008b44:	2300      	movs	r3, #0
 8008b46:	9309      	str	r3, [sp, #36]	; 0x24
 8008b48:	2320      	movs	r3, #32
 8008b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b4e:	2330      	movs	r3, #48	; 0x30
 8008b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b54:	9503      	str	r5, [sp, #12]
 8008b56:	f04f 0b01 	mov.w	fp, #1
 8008b5a:	4637      	mov	r7, r6
 8008b5c:	463d      	mov	r5, r7
 8008b5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b62:	b10b      	cbz	r3, 8008b68 <_svfiprintf_r+0x58>
 8008b64:	2b25      	cmp	r3, #37	; 0x25
 8008b66:	d13e      	bne.n	8008be6 <_svfiprintf_r+0xd6>
 8008b68:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b6c:	d00b      	beq.n	8008b86 <_svfiprintf_r+0x76>
 8008b6e:	4653      	mov	r3, sl
 8008b70:	4632      	mov	r2, r6
 8008b72:	4621      	mov	r1, r4
 8008b74:	4640      	mov	r0, r8
 8008b76:	f7ff ff71 	bl	8008a5c <__ssputs_r>
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	f000 80a4 	beq.w	8008cc8 <_svfiprintf_r+0x1b8>
 8008b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b82:	4453      	add	r3, sl
 8008b84:	9309      	str	r3, [sp, #36]	; 0x24
 8008b86:	783b      	ldrb	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 809d 	beq.w	8008cc8 <_svfiprintf_r+0x1b8>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f04f 32ff 	mov.w	r2, #4294967295
 8008b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ba2:	462f      	mov	r7, r5
 8008ba4:	2205      	movs	r2, #5
 8008ba6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008baa:	4850      	ldr	r0, [pc, #320]	; (8008cec <_svfiprintf_r+0x1dc>)
 8008bac:	f7f7 fb50 	bl	8000250 <memchr>
 8008bb0:	9b04      	ldr	r3, [sp, #16]
 8008bb2:	b9d0      	cbnz	r0, 8008bea <_svfiprintf_r+0xda>
 8008bb4:	06d9      	lsls	r1, r3, #27
 8008bb6:	bf44      	itt	mi
 8008bb8:	2220      	movmi	r2, #32
 8008bba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bbe:	071a      	lsls	r2, r3, #28
 8008bc0:	bf44      	itt	mi
 8008bc2:	222b      	movmi	r2, #43	; 0x2b
 8008bc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008bc8:	782a      	ldrb	r2, [r5, #0]
 8008bca:	2a2a      	cmp	r2, #42	; 0x2a
 8008bcc:	d015      	beq.n	8008bfa <_svfiprintf_r+0xea>
 8008bce:	9a07      	ldr	r2, [sp, #28]
 8008bd0:	462f      	mov	r7, r5
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	250a      	movs	r5, #10
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bdc:	3b30      	subs	r3, #48	; 0x30
 8008bde:	2b09      	cmp	r3, #9
 8008be0:	d94d      	bls.n	8008c7e <_svfiprintf_r+0x16e>
 8008be2:	b1b8      	cbz	r0, 8008c14 <_svfiprintf_r+0x104>
 8008be4:	e00f      	b.n	8008c06 <_svfiprintf_r+0xf6>
 8008be6:	462f      	mov	r7, r5
 8008be8:	e7b8      	b.n	8008b5c <_svfiprintf_r+0x4c>
 8008bea:	4a40      	ldr	r2, [pc, #256]	; (8008cec <_svfiprintf_r+0x1dc>)
 8008bec:	1a80      	subs	r0, r0, r2
 8008bee:	fa0b f000 	lsl.w	r0, fp, r0
 8008bf2:	4318      	orrs	r0, r3
 8008bf4:	9004      	str	r0, [sp, #16]
 8008bf6:	463d      	mov	r5, r7
 8008bf8:	e7d3      	b.n	8008ba2 <_svfiprintf_r+0x92>
 8008bfa:	9a03      	ldr	r2, [sp, #12]
 8008bfc:	1d11      	adds	r1, r2, #4
 8008bfe:	6812      	ldr	r2, [r2, #0]
 8008c00:	9103      	str	r1, [sp, #12]
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	db01      	blt.n	8008c0a <_svfiprintf_r+0xfa>
 8008c06:	9207      	str	r2, [sp, #28]
 8008c08:	e004      	b.n	8008c14 <_svfiprintf_r+0x104>
 8008c0a:	4252      	negs	r2, r2
 8008c0c:	f043 0302 	orr.w	r3, r3, #2
 8008c10:	9207      	str	r2, [sp, #28]
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	783b      	ldrb	r3, [r7, #0]
 8008c16:	2b2e      	cmp	r3, #46	; 0x2e
 8008c18:	d10c      	bne.n	8008c34 <_svfiprintf_r+0x124>
 8008c1a:	787b      	ldrb	r3, [r7, #1]
 8008c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c1e:	d133      	bne.n	8008c88 <_svfiprintf_r+0x178>
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	1d1a      	adds	r2, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	9203      	str	r2, [sp, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bfb8      	it	lt
 8008c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c30:	3702      	adds	r7, #2
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	4d2e      	ldr	r5, [pc, #184]	; (8008cf0 <_svfiprintf_r+0x1e0>)
 8008c36:	7839      	ldrb	r1, [r7, #0]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f7f7 fb08 	bl	8000250 <memchr>
 8008c40:	b138      	cbz	r0, 8008c52 <_svfiprintf_r+0x142>
 8008c42:	2340      	movs	r3, #64	; 0x40
 8008c44:	1b40      	subs	r0, r0, r5
 8008c46:	fa03 f000 	lsl.w	r0, r3, r0
 8008c4a:	9b04      	ldr	r3, [sp, #16]
 8008c4c:	4303      	orrs	r3, r0
 8008c4e:	3701      	adds	r7, #1
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	7839      	ldrb	r1, [r7, #0]
 8008c54:	4827      	ldr	r0, [pc, #156]	; (8008cf4 <_svfiprintf_r+0x1e4>)
 8008c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c5a:	2206      	movs	r2, #6
 8008c5c:	1c7e      	adds	r6, r7, #1
 8008c5e:	f7f7 faf7 	bl	8000250 <memchr>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d038      	beq.n	8008cd8 <_svfiprintf_r+0x1c8>
 8008c66:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <_svfiprintf_r+0x1e8>)
 8008c68:	bb13      	cbnz	r3, 8008cb0 <_svfiprintf_r+0x1a0>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	3307      	adds	r3, #7
 8008c6e:	f023 0307 	bic.w	r3, r3, #7
 8008c72:	3308      	adds	r3, #8
 8008c74:	9303      	str	r3, [sp, #12]
 8008c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c78:	444b      	add	r3, r9
 8008c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7c:	e76d      	b.n	8008b5a <_svfiprintf_r+0x4a>
 8008c7e:	fb05 3202 	mla	r2, r5, r2, r3
 8008c82:	2001      	movs	r0, #1
 8008c84:	460f      	mov	r7, r1
 8008c86:	e7a6      	b.n	8008bd6 <_svfiprintf_r+0xc6>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	3701      	adds	r7, #1
 8008c8c:	9305      	str	r3, [sp, #20]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	250a      	movs	r5, #10
 8008c92:	4638      	mov	r0, r7
 8008c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c98:	3a30      	subs	r2, #48	; 0x30
 8008c9a:	2a09      	cmp	r2, #9
 8008c9c:	d903      	bls.n	8008ca6 <_svfiprintf_r+0x196>
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0c8      	beq.n	8008c34 <_svfiprintf_r+0x124>
 8008ca2:	9105      	str	r1, [sp, #20]
 8008ca4:	e7c6      	b.n	8008c34 <_svfiprintf_r+0x124>
 8008ca6:	fb05 2101 	mla	r1, r5, r1, r2
 8008caa:	2301      	movs	r3, #1
 8008cac:	4607      	mov	r7, r0
 8008cae:	e7f0      	b.n	8008c92 <_svfiprintf_r+0x182>
 8008cb0:	ab03      	add	r3, sp, #12
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	4b11      	ldr	r3, [pc, #68]	; (8008cfc <_svfiprintf_r+0x1ec>)
 8008cb8:	a904      	add	r1, sp, #16
 8008cba:	4640      	mov	r0, r8
 8008cbc:	f3af 8000 	nop.w
 8008cc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008cc4:	4681      	mov	r9, r0
 8008cc6:	d1d6      	bne.n	8008c76 <_svfiprintf_r+0x166>
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	065b      	lsls	r3, r3, #25
 8008ccc:	f53f af35 	bmi.w	8008b3a <_svfiprintf_r+0x2a>
 8008cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd2:	b01d      	add	sp, #116	; 0x74
 8008cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd8:	ab03      	add	r3, sp, #12
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <_svfiprintf_r+0x1ec>)
 8008ce0:	a904      	add	r1, sp, #16
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	f000 f882 	bl	8008dec <_printf_i>
 8008ce8:	e7ea      	b.n	8008cc0 <_svfiprintf_r+0x1b0>
 8008cea:	bf00      	nop
 8008cec:	08009274 	.word	0x08009274
 8008cf0:	0800927a 	.word	0x0800927a
 8008cf4:	0800927e 	.word	0x0800927e
 8008cf8:	00000000 	.word	0x00000000
 8008cfc:	08008a5d 	.word	0x08008a5d

08008d00 <_printf_common>:
 8008d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d04:	4691      	mov	r9, r2
 8008d06:	461f      	mov	r7, r3
 8008d08:	688a      	ldr	r2, [r1, #8]
 8008d0a:	690b      	ldr	r3, [r1, #16]
 8008d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d10:	4293      	cmp	r3, r2
 8008d12:	bfb8      	it	lt
 8008d14:	4613      	movlt	r3, r2
 8008d16:	f8c9 3000 	str.w	r3, [r9]
 8008d1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d1e:	4606      	mov	r6, r0
 8008d20:	460c      	mov	r4, r1
 8008d22:	b112      	cbz	r2, 8008d2a <_printf_common+0x2a>
 8008d24:	3301      	adds	r3, #1
 8008d26:	f8c9 3000 	str.w	r3, [r9]
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	0699      	lsls	r1, r3, #26
 8008d2e:	bf42      	ittt	mi
 8008d30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d34:	3302      	addmi	r3, #2
 8008d36:	f8c9 3000 	strmi.w	r3, [r9]
 8008d3a:	6825      	ldr	r5, [r4, #0]
 8008d3c:	f015 0506 	ands.w	r5, r5, #6
 8008d40:	d107      	bne.n	8008d52 <_printf_common+0x52>
 8008d42:	f104 0a19 	add.w	sl, r4, #25
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	f8d9 2000 	ldr.w	r2, [r9]
 8008d4c:	1a9b      	subs	r3, r3, r2
 8008d4e:	42ab      	cmp	r3, r5
 8008d50:	dc28      	bgt.n	8008da4 <_printf_common+0xa4>
 8008d52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	3300      	adds	r3, #0
 8008d5a:	bf18      	it	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	0692      	lsls	r2, r2, #26
 8008d60:	d42d      	bmi.n	8008dbe <_printf_common+0xbe>
 8008d62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d66:	4639      	mov	r1, r7
 8008d68:	4630      	mov	r0, r6
 8008d6a:	47c0      	blx	r8
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d020      	beq.n	8008db2 <_printf_common+0xb2>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	68e5      	ldr	r5, [r4, #12]
 8008d74:	f8d9 2000 	ldr.w	r2, [r9]
 8008d78:	f003 0306 	and.w	r3, r3, #6
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	bf08      	it	eq
 8008d80:	1aad      	subeq	r5, r5, r2
 8008d82:	68a3      	ldr	r3, [r4, #8]
 8008d84:	6922      	ldr	r2, [r4, #16]
 8008d86:	bf0c      	ite	eq
 8008d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d8c:	2500      	movne	r5, #0
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	bfc4      	itt	gt
 8008d92:	1a9b      	subgt	r3, r3, r2
 8008d94:	18ed      	addgt	r5, r5, r3
 8008d96:	f04f 0900 	mov.w	r9, #0
 8008d9a:	341a      	adds	r4, #26
 8008d9c:	454d      	cmp	r5, r9
 8008d9e:	d11a      	bne.n	8008dd6 <_printf_common+0xd6>
 8008da0:	2000      	movs	r0, #0
 8008da2:	e008      	b.n	8008db6 <_printf_common+0xb6>
 8008da4:	2301      	movs	r3, #1
 8008da6:	4652      	mov	r2, sl
 8008da8:	4639      	mov	r1, r7
 8008daa:	4630      	mov	r0, r6
 8008dac:	47c0      	blx	r8
 8008dae:	3001      	adds	r0, #1
 8008db0:	d103      	bne.n	8008dba <_printf_common+0xba>
 8008db2:	f04f 30ff 	mov.w	r0, #4294967295
 8008db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dba:	3501      	adds	r5, #1
 8008dbc:	e7c3      	b.n	8008d46 <_printf_common+0x46>
 8008dbe:	18e1      	adds	r1, r4, r3
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	2030      	movs	r0, #48	; 0x30
 8008dc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dc8:	4422      	add	r2, r4
 8008dca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dd2:	3302      	adds	r3, #2
 8008dd4:	e7c5      	b.n	8008d62 <_printf_common+0x62>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4639      	mov	r1, r7
 8008ddc:	4630      	mov	r0, r6
 8008dde:	47c0      	blx	r8
 8008de0:	3001      	adds	r0, #1
 8008de2:	d0e6      	beq.n	8008db2 <_printf_common+0xb2>
 8008de4:	f109 0901 	add.w	r9, r9, #1
 8008de8:	e7d8      	b.n	8008d9c <_printf_common+0x9c>
	...

08008dec <_printf_i>:
 8008dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008df0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008df4:	460c      	mov	r4, r1
 8008df6:	7e09      	ldrb	r1, [r1, #24]
 8008df8:	b085      	sub	sp, #20
 8008dfa:	296e      	cmp	r1, #110	; 0x6e
 8008dfc:	4617      	mov	r7, r2
 8008dfe:	4606      	mov	r6, r0
 8008e00:	4698      	mov	r8, r3
 8008e02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e04:	f000 80b3 	beq.w	8008f6e <_printf_i+0x182>
 8008e08:	d822      	bhi.n	8008e50 <_printf_i+0x64>
 8008e0a:	2963      	cmp	r1, #99	; 0x63
 8008e0c:	d036      	beq.n	8008e7c <_printf_i+0x90>
 8008e0e:	d80a      	bhi.n	8008e26 <_printf_i+0x3a>
 8008e10:	2900      	cmp	r1, #0
 8008e12:	f000 80b9 	beq.w	8008f88 <_printf_i+0x19c>
 8008e16:	2958      	cmp	r1, #88	; 0x58
 8008e18:	f000 8083 	beq.w	8008f22 <_printf_i+0x136>
 8008e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e24:	e032      	b.n	8008e8c <_printf_i+0xa0>
 8008e26:	2964      	cmp	r1, #100	; 0x64
 8008e28:	d001      	beq.n	8008e2e <_printf_i+0x42>
 8008e2a:	2969      	cmp	r1, #105	; 0x69
 8008e2c:	d1f6      	bne.n	8008e1c <_printf_i+0x30>
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	6813      	ldr	r3, [r2, #0]
 8008e32:	0605      	lsls	r5, r0, #24
 8008e34:	f103 0104 	add.w	r1, r3, #4
 8008e38:	d52a      	bpl.n	8008e90 <_printf_i+0xa4>
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6011      	str	r1, [r2, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da03      	bge.n	8008e4a <_printf_i+0x5e>
 8008e42:	222d      	movs	r2, #45	; 0x2d
 8008e44:	425b      	negs	r3, r3
 8008e46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e4a:	486f      	ldr	r0, [pc, #444]	; (8009008 <_printf_i+0x21c>)
 8008e4c:	220a      	movs	r2, #10
 8008e4e:	e039      	b.n	8008ec4 <_printf_i+0xd8>
 8008e50:	2973      	cmp	r1, #115	; 0x73
 8008e52:	f000 809d 	beq.w	8008f90 <_printf_i+0x1a4>
 8008e56:	d808      	bhi.n	8008e6a <_printf_i+0x7e>
 8008e58:	296f      	cmp	r1, #111	; 0x6f
 8008e5a:	d020      	beq.n	8008e9e <_printf_i+0xb2>
 8008e5c:	2970      	cmp	r1, #112	; 0x70
 8008e5e:	d1dd      	bne.n	8008e1c <_printf_i+0x30>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	f043 0320 	orr.w	r3, r3, #32
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	e003      	b.n	8008e72 <_printf_i+0x86>
 8008e6a:	2975      	cmp	r1, #117	; 0x75
 8008e6c:	d017      	beq.n	8008e9e <_printf_i+0xb2>
 8008e6e:	2978      	cmp	r1, #120	; 0x78
 8008e70:	d1d4      	bne.n	8008e1c <_printf_i+0x30>
 8008e72:	2378      	movs	r3, #120	; 0x78
 8008e74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e78:	4864      	ldr	r0, [pc, #400]	; (800900c <_printf_i+0x220>)
 8008e7a:	e055      	b.n	8008f28 <_printf_i+0x13c>
 8008e7c:	6813      	ldr	r3, [r2, #0]
 8008e7e:	1d19      	adds	r1, r3, #4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6011      	str	r1, [r2, #0]
 8008e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e08c      	b.n	8008faa <_printf_i+0x1be>
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6011      	str	r1, [r2, #0]
 8008e94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e98:	bf18      	it	ne
 8008e9a:	b21b      	sxthne	r3, r3
 8008e9c:	e7cf      	b.n	8008e3e <_printf_i+0x52>
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	6825      	ldr	r5, [r4, #0]
 8008ea2:	1d18      	adds	r0, r3, #4
 8008ea4:	6010      	str	r0, [r2, #0]
 8008ea6:	0628      	lsls	r0, r5, #24
 8008ea8:	d501      	bpl.n	8008eae <_printf_i+0xc2>
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	e002      	b.n	8008eb4 <_printf_i+0xc8>
 8008eae:	0668      	lsls	r0, r5, #25
 8008eb0:	d5fb      	bpl.n	8008eaa <_printf_i+0xbe>
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	4854      	ldr	r0, [pc, #336]	; (8009008 <_printf_i+0x21c>)
 8008eb6:	296f      	cmp	r1, #111	; 0x6f
 8008eb8:	bf14      	ite	ne
 8008eba:	220a      	movne	r2, #10
 8008ebc:	2208      	moveq	r2, #8
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ec4:	6865      	ldr	r5, [r4, #4]
 8008ec6:	60a5      	str	r5, [r4, #8]
 8008ec8:	2d00      	cmp	r5, #0
 8008eca:	f2c0 8095 	blt.w	8008ff8 <_printf_i+0x20c>
 8008ece:	6821      	ldr	r1, [r4, #0]
 8008ed0:	f021 0104 	bic.w	r1, r1, #4
 8008ed4:	6021      	str	r1, [r4, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d13d      	bne.n	8008f56 <_printf_i+0x16a>
 8008eda:	2d00      	cmp	r5, #0
 8008edc:	f040 808e 	bne.w	8008ffc <_printf_i+0x210>
 8008ee0:	4665      	mov	r5, ip
 8008ee2:	2a08      	cmp	r2, #8
 8008ee4:	d10b      	bne.n	8008efe <_printf_i+0x112>
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	07db      	lsls	r3, r3, #31
 8008eea:	d508      	bpl.n	8008efe <_printf_i+0x112>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	6862      	ldr	r2, [r4, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	bfde      	ittt	le
 8008ef4:	2330      	movle	r3, #48	; 0x30
 8008ef6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008efa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008efe:	ebac 0305 	sub.w	r3, ip, r5
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	f8cd 8000 	str.w	r8, [sp]
 8008f08:	463b      	mov	r3, r7
 8008f0a:	aa03      	add	r2, sp, #12
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7ff fef6 	bl	8008d00 <_printf_common>
 8008f14:	3001      	adds	r0, #1
 8008f16:	d14d      	bne.n	8008fb4 <_printf_i+0x1c8>
 8008f18:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1c:	b005      	add	sp, #20
 8008f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f22:	4839      	ldr	r0, [pc, #228]	; (8009008 <_printf_i+0x21c>)
 8008f24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008f28:	6813      	ldr	r3, [r2, #0]
 8008f2a:	6821      	ldr	r1, [r4, #0]
 8008f2c:	1d1d      	adds	r5, r3, #4
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6015      	str	r5, [r2, #0]
 8008f32:	060a      	lsls	r2, r1, #24
 8008f34:	d50b      	bpl.n	8008f4e <_printf_i+0x162>
 8008f36:	07ca      	lsls	r2, r1, #31
 8008f38:	bf44      	itt	mi
 8008f3a:	f041 0120 	orrmi.w	r1, r1, #32
 8008f3e:	6021      	strmi	r1, [r4, #0]
 8008f40:	b91b      	cbnz	r3, 8008f4a <_printf_i+0x15e>
 8008f42:	6822      	ldr	r2, [r4, #0]
 8008f44:	f022 0220 	bic.w	r2, r2, #32
 8008f48:	6022      	str	r2, [r4, #0]
 8008f4a:	2210      	movs	r2, #16
 8008f4c:	e7b7      	b.n	8008ebe <_printf_i+0xd2>
 8008f4e:	064d      	lsls	r5, r1, #25
 8008f50:	bf48      	it	mi
 8008f52:	b29b      	uxthmi	r3, r3
 8008f54:	e7ef      	b.n	8008f36 <_printf_i+0x14a>
 8008f56:	4665      	mov	r5, ip
 8008f58:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f5c:	fb02 3311 	mls	r3, r2, r1, r3
 8008f60:	5cc3      	ldrb	r3, [r0, r3]
 8008f62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f66:	460b      	mov	r3, r1
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	d1f5      	bne.n	8008f58 <_printf_i+0x16c>
 8008f6c:	e7b9      	b.n	8008ee2 <_printf_i+0xf6>
 8008f6e:	6813      	ldr	r3, [r2, #0]
 8008f70:	6825      	ldr	r5, [r4, #0]
 8008f72:	6961      	ldr	r1, [r4, #20]
 8008f74:	1d18      	adds	r0, r3, #4
 8008f76:	6010      	str	r0, [r2, #0]
 8008f78:	0628      	lsls	r0, r5, #24
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	d501      	bpl.n	8008f82 <_printf_i+0x196>
 8008f7e:	6019      	str	r1, [r3, #0]
 8008f80:	e002      	b.n	8008f88 <_printf_i+0x19c>
 8008f82:	066a      	lsls	r2, r5, #25
 8008f84:	d5fb      	bpl.n	8008f7e <_printf_i+0x192>
 8008f86:	8019      	strh	r1, [r3, #0]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	4665      	mov	r5, ip
 8008f8e:	e7b9      	b.n	8008f04 <_printf_i+0x118>
 8008f90:	6813      	ldr	r3, [r2, #0]
 8008f92:	1d19      	adds	r1, r3, #4
 8008f94:	6011      	str	r1, [r2, #0]
 8008f96:	681d      	ldr	r5, [r3, #0]
 8008f98:	6862      	ldr	r2, [r4, #4]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f7f7 f957 	bl	8000250 <memchr>
 8008fa2:	b108      	cbz	r0, 8008fa8 <_printf_i+0x1bc>
 8008fa4:	1b40      	subs	r0, r0, r5
 8008fa6:	6060      	str	r0, [r4, #4]
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	2300      	movs	r3, #0
 8008fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fb2:	e7a7      	b.n	8008f04 <_printf_i+0x118>
 8008fb4:	6923      	ldr	r3, [r4, #16]
 8008fb6:	462a      	mov	r2, r5
 8008fb8:	4639      	mov	r1, r7
 8008fba:	4630      	mov	r0, r6
 8008fbc:	47c0      	blx	r8
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d0aa      	beq.n	8008f18 <_printf_i+0x12c>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	079b      	lsls	r3, r3, #30
 8008fc6:	d413      	bmi.n	8008ff0 <_printf_i+0x204>
 8008fc8:	68e0      	ldr	r0, [r4, #12]
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	4298      	cmp	r0, r3
 8008fce:	bfb8      	it	lt
 8008fd0:	4618      	movlt	r0, r3
 8008fd2:	e7a3      	b.n	8008f1c <_printf_i+0x130>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	464a      	mov	r2, r9
 8008fd8:	4639      	mov	r1, r7
 8008fda:	4630      	mov	r0, r6
 8008fdc:	47c0      	blx	r8
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d09a      	beq.n	8008f18 <_printf_i+0x12c>
 8008fe2:	3501      	adds	r5, #1
 8008fe4:	68e3      	ldr	r3, [r4, #12]
 8008fe6:	9a03      	ldr	r2, [sp, #12]
 8008fe8:	1a9b      	subs	r3, r3, r2
 8008fea:	42ab      	cmp	r3, r5
 8008fec:	dcf2      	bgt.n	8008fd4 <_printf_i+0x1e8>
 8008fee:	e7eb      	b.n	8008fc8 <_printf_i+0x1dc>
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	f104 0919 	add.w	r9, r4, #25
 8008ff6:	e7f5      	b.n	8008fe4 <_printf_i+0x1f8>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1ac      	bne.n	8008f56 <_printf_i+0x16a>
 8008ffc:	7803      	ldrb	r3, [r0, #0]
 8008ffe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009002:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009006:	e76c      	b.n	8008ee2 <_printf_i+0xf6>
 8009008:	08009285 	.word	0x08009285
 800900c:	08009296 	.word	0x08009296

08009010 <memcpy>:
 8009010:	b510      	push	{r4, lr}
 8009012:	1e43      	subs	r3, r0, #1
 8009014:	440a      	add	r2, r1
 8009016:	4291      	cmp	r1, r2
 8009018:	d100      	bne.n	800901c <memcpy+0xc>
 800901a:	bd10      	pop	{r4, pc}
 800901c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009024:	e7f7      	b.n	8009016 <memcpy+0x6>

08009026 <memmove>:
 8009026:	4288      	cmp	r0, r1
 8009028:	b510      	push	{r4, lr}
 800902a:	eb01 0302 	add.w	r3, r1, r2
 800902e:	d807      	bhi.n	8009040 <memmove+0x1a>
 8009030:	1e42      	subs	r2, r0, #1
 8009032:	4299      	cmp	r1, r3
 8009034:	d00a      	beq.n	800904c <memmove+0x26>
 8009036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800903a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800903e:	e7f8      	b.n	8009032 <memmove+0xc>
 8009040:	4283      	cmp	r3, r0
 8009042:	d9f5      	bls.n	8009030 <memmove+0xa>
 8009044:	1881      	adds	r1, r0, r2
 8009046:	1ad2      	subs	r2, r2, r3
 8009048:	42d3      	cmn	r3, r2
 800904a:	d100      	bne.n	800904e <memmove+0x28>
 800904c:	bd10      	pop	{r4, pc}
 800904e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009052:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009056:	e7f7      	b.n	8009048 <memmove+0x22>

08009058 <_free_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4605      	mov	r5, r0
 800905c:	2900      	cmp	r1, #0
 800905e:	d045      	beq.n	80090ec <_free_r+0x94>
 8009060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009064:	1f0c      	subs	r4, r1, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfb8      	it	lt
 800906a:	18e4      	addlt	r4, r4, r3
 800906c:	f000 f8d2 	bl	8009214 <__malloc_lock>
 8009070:	4a1f      	ldr	r2, [pc, #124]	; (80090f0 <_free_r+0x98>)
 8009072:	6813      	ldr	r3, [r2, #0]
 8009074:	4610      	mov	r0, r2
 8009076:	b933      	cbnz	r3, 8009086 <_free_r+0x2e>
 8009078:	6063      	str	r3, [r4, #4]
 800907a:	6014      	str	r4, [r2, #0]
 800907c:	4628      	mov	r0, r5
 800907e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009082:	f000 b8c8 	b.w	8009216 <__malloc_unlock>
 8009086:	42a3      	cmp	r3, r4
 8009088:	d90c      	bls.n	80090a4 <_free_r+0x4c>
 800908a:	6821      	ldr	r1, [r4, #0]
 800908c:	1862      	adds	r2, r4, r1
 800908e:	4293      	cmp	r3, r2
 8009090:	bf04      	itt	eq
 8009092:	681a      	ldreq	r2, [r3, #0]
 8009094:	685b      	ldreq	r3, [r3, #4]
 8009096:	6063      	str	r3, [r4, #4]
 8009098:	bf04      	itt	eq
 800909a:	1852      	addeq	r2, r2, r1
 800909c:	6022      	streq	r2, [r4, #0]
 800909e:	6004      	str	r4, [r0, #0]
 80090a0:	e7ec      	b.n	800907c <_free_r+0x24>
 80090a2:	4613      	mov	r3, r2
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	b10a      	cbz	r2, 80090ac <_free_r+0x54>
 80090a8:	42a2      	cmp	r2, r4
 80090aa:	d9fa      	bls.n	80090a2 <_free_r+0x4a>
 80090ac:	6819      	ldr	r1, [r3, #0]
 80090ae:	1858      	adds	r0, r3, r1
 80090b0:	42a0      	cmp	r0, r4
 80090b2:	d10b      	bne.n	80090cc <_free_r+0x74>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	4401      	add	r1, r0
 80090b8:	1858      	adds	r0, r3, r1
 80090ba:	4282      	cmp	r2, r0
 80090bc:	6019      	str	r1, [r3, #0]
 80090be:	d1dd      	bne.n	800907c <_free_r+0x24>
 80090c0:	6810      	ldr	r0, [r2, #0]
 80090c2:	6852      	ldr	r2, [r2, #4]
 80090c4:	605a      	str	r2, [r3, #4]
 80090c6:	4401      	add	r1, r0
 80090c8:	6019      	str	r1, [r3, #0]
 80090ca:	e7d7      	b.n	800907c <_free_r+0x24>
 80090cc:	d902      	bls.n	80090d4 <_free_r+0x7c>
 80090ce:	230c      	movs	r3, #12
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	e7d3      	b.n	800907c <_free_r+0x24>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	1821      	adds	r1, r4, r0
 80090d8:	428a      	cmp	r2, r1
 80090da:	bf04      	itt	eq
 80090dc:	6811      	ldreq	r1, [r2, #0]
 80090de:	6852      	ldreq	r2, [r2, #4]
 80090e0:	6062      	str	r2, [r4, #4]
 80090e2:	bf04      	itt	eq
 80090e4:	1809      	addeq	r1, r1, r0
 80090e6:	6021      	streq	r1, [r4, #0]
 80090e8:	605c      	str	r4, [r3, #4]
 80090ea:	e7c7      	b.n	800907c <_free_r+0x24>
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
 80090ee:	bf00      	nop
 80090f0:	200000b0 	.word	0x200000b0

080090f4 <_malloc_r>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	1ccd      	adds	r5, r1, #3
 80090f8:	f025 0503 	bic.w	r5, r5, #3
 80090fc:	3508      	adds	r5, #8
 80090fe:	2d0c      	cmp	r5, #12
 8009100:	bf38      	it	cc
 8009102:	250c      	movcc	r5, #12
 8009104:	2d00      	cmp	r5, #0
 8009106:	4606      	mov	r6, r0
 8009108:	db01      	blt.n	800910e <_malloc_r+0x1a>
 800910a:	42a9      	cmp	r1, r5
 800910c:	d903      	bls.n	8009116 <_malloc_r+0x22>
 800910e:	230c      	movs	r3, #12
 8009110:	6033      	str	r3, [r6, #0]
 8009112:	2000      	movs	r0, #0
 8009114:	bd70      	pop	{r4, r5, r6, pc}
 8009116:	f000 f87d 	bl	8009214 <__malloc_lock>
 800911a:	4a21      	ldr	r2, [pc, #132]	; (80091a0 <_malloc_r+0xac>)
 800911c:	6814      	ldr	r4, [r2, #0]
 800911e:	4621      	mov	r1, r4
 8009120:	b991      	cbnz	r1, 8009148 <_malloc_r+0x54>
 8009122:	4c20      	ldr	r4, [pc, #128]	; (80091a4 <_malloc_r+0xb0>)
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	b91b      	cbnz	r3, 8009130 <_malloc_r+0x3c>
 8009128:	4630      	mov	r0, r6
 800912a:	f000 f863 	bl	80091f4 <_sbrk_r>
 800912e:	6020      	str	r0, [r4, #0]
 8009130:	4629      	mov	r1, r5
 8009132:	4630      	mov	r0, r6
 8009134:	f000 f85e 	bl	80091f4 <_sbrk_r>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d124      	bne.n	8009186 <_malloc_r+0x92>
 800913c:	230c      	movs	r3, #12
 800913e:	6033      	str	r3, [r6, #0]
 8009140:	4630      	mov	r0, r6
 8009142:	f000 f868 	bl	8009216 <__malloc_unlock>
 8009146:	e7e4      	b.n	8009112 <_malloc_r+0x1e>
 8009148:	680b      	ldr	r3, [r1, #0]
 800914a:	1b5b      	subs	r3, r3, r5
 800914c:	d418      	bmi.n	8009180 <_malloc_r+0x8c>
 800914e:	2b0b      	cmp	r3, #11
 8009150:	d90f      	bls.n	8009172 <_malloc_r+0x7e>
 8009152:	600b      	str	r3, [r1, #0]
 8009154:	50cd      	str	r5, [r1, r3]
 8009156:	18cc      	adds	r4, r1, r3
 8009158:	4630      	mov	r0, r6
 800915a:	f000 f85c 	bl	8009216 <__malloc_unlock>
 800915e:	f104 000b 	add.w	r0, r4, #11
 8009162:	1d23      	adds	r3, r4, #4
 8009164:	f020 0007 	bic.w	r0, r0, #7
 8009168:	1ac3      	subs	r3, r0, r3
 800916a:	d0d3      	beq.n	8009114 <_malloc_r+0x20>
 800916c:	425a      	negs	r2, r3
 800916e:	50e2      	str	r2, [r4, r3]
 8009170:	e7d0      	b.n	8009114 <_malloc_r+0x20>
 8009172:	428c      	cmp	r4, r1
 8009174:	684b      	ldr	r3, [r1, #4]
 8009176:	bf16      	itet	ne
 8009178:	6063      	strne	r3, [r4, #4]
 800917a:	6013      	streq	r3, [r2, #0]
 800917c:	460c      	movne	r4, r1
 800917e:	e7eb      	b.n	8009158 <_malloc_r+0x64>
 8009180:	460c      	mov	r4, r1
 8009182:	6849      	ldr	r1, [r1, #4]
 8009184:	e7cc      	b.n	8009120 <_malloc_r+0x2c>
 8009186:	1cc4      	adds	r4, r0, #3
 8009188:	f024 0403 	bic.w	r4, r4, #3
 800918c:	42a0      	cmp	r0, r4
 800918e:	d005      	beq.n	800919c <_malloc_r+0xa8>
 8009190:	1a21      	subs	r1, r4, r0
 8009192:	4630      	mov	r0, r6
 8009194:	f000 f82e 	bl	80091f4 <_sbrk_r>
 8009198:	3001      	adds	r0, #1
 800919a:	d0cf      	beq.n	800913c <_malloc_r+0x48>
 800919c:	6025      	str	r5, [r4, #0]
 800919e:	e7db      	b.n	8009158 <_malloc_r+0x64>
 80091a0:	200000b0 	.word	0x200000b0
 80091a4:	200000b4 	.word	0x200000b4

080091a8 <_realloc_r>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	4607      	mov	r7, r0
 80091ac:	4614      	mov	r4, r2
 80091ae:	460e      	mov	r6, r1
 80091b0:	b921      	cbnz	r1, 80091bc <_realloc_r+0x14>
 80091b2:	4611      	mov	r1, r2
 80091b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80091b8:	f7ff bf9c 	b.w	80090f4 <_malloc_r>
 80091bc:	b922      	cbnz	r2, 80091c8 <_realloc_r+0x20>
 80091be:	f7ff ff4b 	bl	8009058 <_free_r>
 80091c2:	4625      	mov	r5, r4
 80091c4:	4628      	mov	r0, r5
 80091c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c8:	f000 f826 	bl	8009218 <_malloc_usable_size_r>
 80091cc:	42a0      	cmp	r0, r4
 80091ce:	d20f      	bcs.n	80091f0 <_realloc_r+0x48>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4638      	mov	r0, r7
 80091d4:	f7ff ff8e 	bl	80090f4 <_malloc_r>
 80091d8:	4605      	mov	r5, r0
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0f2      	beq.n	80091c4 <_realloc_r+0x1c>
 80091de:	4631      	mov	r1, r6
 80091e0:	4622      	mov	r2, r4
 80091e2:	f7ff ff15 	bl	8009010 <memcpy>
 80091e6:	4631      	mov	r1, r6
 80091e8:	4638      	mov	r0, r7
 80091ea:	f7ff ff35 	bl	8009058 <_free_r>
 80091ee:	e7e9      	b.n	80091c4 <_realloc_r+0x1c>
 80091f0:	4635      	mov	r5, r6
 80091f2:	e7e7      	b.n	80091c4 <_realloc_r+0x1c>

080091f4 <_sbrk_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4c06      	ldr	r4, [pc, #24]	; (8009210 <_sbrk_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4605      	mov	r5, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	f7f9 fa8c 	bl	800271c <_sbrk>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_sbrk_r+0x1a>
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	b103      	cbz	r3, 800920e <_sbrk_r+0x1a>
 800920c:	602b      	str	r3, [r5, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	2002b884 	.word	0x2002b884

08009214 <__malloc_lock>:
 8009214:	4770      	bx	lr

08009216 <__malloc_unlock>:
 8009216:	4770      	bx	lr

08009218 <_malloc_usable_size_r>:
 8009218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800921c:	1f18      	subs	r0, r3, #4
 800921e:	2b00      	cmp	r3, #0
 8009220:	bfbc      	itt	lt
 8009222:	580b      	ldrlt	r3, [r1, r0]
 8009224:	18c0      	addlt	r0, r0, r3
 8009226:	4770      	bx	lr

08009228 <_init>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr

08009234 <_fini>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	bf00      	nop
 8009238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923a:	bc08      	pop	{r3}
 800923c:	469e      	mov	lr, r3
 800923e:	4770      	bx	lr
