
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006080  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006280  08006280  00016280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d8  080062d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080062d8  080062d8  000162d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e0  080062e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080062e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000070  08006358  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08006358  00020608  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ee5  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000246e  00000000  00000000  00032f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001348  00000000  00000000  000353f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  00036740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028779  00000000  00000000  00037950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e75b  00000000  00000000  000600c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001029c4  00000000  00000000  0006e824  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001711e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000553c  00000000  00000000  00171264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08006268 	.word	0x08006268

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08006268 	.word	0x08006268

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 faba 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f851 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fdb1 	bl	8001164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000602:	f000 f8eb 	bl	80007dc <MX_ADC1_Init>
  MX_SPI1_Init();
 8000606:	f000 f9bb 	bl	8000980 <MX_SPI1_Init>
  MX_TIM1_Init();
 800060a:	f000 fa31 	bl	8000a70 <MX_TIM1_Init>
  MX_TIM2_Init();
 800060e:	f000 fae7 	bl	8000be0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000612:	f000 fb37 	bl	8000c84 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000616:	f000 fb8f 	bl	8000d38 <MX_TIM4_Init>
  MX_TIM8_Init();
 800061a:	f000 fbe7 	bl	8000dec <MX_TIM8_Init>
  MX_UART5_Init();
 800061e:	f000 fcb1 	bl	8000f84 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000622:	f000 fd0f 	bl	8001044 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000626:	f000 fd3d 	bl	80010a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800062a:	f000 fd6b 	bl	8001104 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800062e:	f000 f927 	bl	8000880 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000632:	f000 f965 	bl	8000900 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000636:	f000 f9dd 	bl	80009f4 <MX_SPI4_Init>
  MX_UART7_Init();
 800063a:	f000 fcd3 	bl	8000fe4 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

	char msg_buffers[16];
	uint16_t index = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LED1_R_GPIO_Port, LED1_R_Pin);
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <main+0xa4>)
 8000648:	f002 f841 	bl	80026ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_G_GPIO_Port, LED1_G_Pin);
 800064c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <main+0xa4>)
 8000652:	f002 f83c 	bl	80026ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_B_GPIO_Port, LED1_B_Pin);
 8000656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <main+0xa4>)
 800065c:	f002 f837 	bl	80026ce <HAL_GPIO_TogglePin>

		sprintf(msg_buffers, "ahoj %hu\n", index);
 8000660:	8afa      	ldrh	r2, [r7, #22]
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <main+0xa8>)
 8000666:	4618      	mov	r0, r3
 8000668:	f005 f9f8 	bl	8005a5c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fde6 	bl	8000240 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	b29a      	uxth	r2, r3
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <main+0xac>)
 8000680:	f004 fd1c 	bl	80050bc <HAL_UART_Transmit>
				HAL_MAX_DELAY);
		HAL_Delay(1000);
 8000684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000688:	f001 face 	bl	8001c28 <HAL_Delay>
		index++;
 800068c:	8afb      	ldrh	r3, [r7, #22]
 800068e:	3301      	adds	r3, #1
 8000690:	82fb      	strh	r3, [r7, #22]
	while (1) {
 8000692:	e7d6      	b.n	8000642 <main+0x52>
 8000694:	40020c00 	.word	0x40020c00
 8000698:	08006280 	.word	0x08006280
 800069c:	200001e4 	.word	0x200001e4

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0b8      	sub	sp, #224	; 0xe0
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006aa:	2234      	movs	r2, #52	; 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 f9cc 	bl	8005a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2290      	movs	r2, #144	; 0x90
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 f9bd 	bl	8005a4c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006d2:	f002 f93f 	bl	8002954 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <SystemClock_Config+0x130>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4a3d      	ldr	r2, [pc, #244]	; (80007d0 <SystemClock_Config+0x130>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
 80006e2:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <SystemClock_Config+0x130>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <SystemClock_Config+0x134>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a38      	ldr	r2, [pc, #224]	; (80007d4 <SystemClock_Config+0x134>)
 80006f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f8:	6013      	str	r3, [r2, #0]
 80006fa:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <SystemClock_Config+0x134>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000706:	2301      	movs	r3, #1
 8000708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000722:	2305      	movs	r3, #5
 8000724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000728:	23d8      	movs	r3, #216	; 0xd8
 800072a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f968 	bl	8002a14 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800074a:	f000 fd9d 	bl	8001288 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074e:	f002 f911 	bl	8002974 <HAL_PWREx_EnableOverDrive>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000758:	f000 fd96 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800077e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000782:	2107      	movs	r1, #7
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fbf3 	bl	8002f70 <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000790:	f000 fd7a 	bl	8001288 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <SystemClock_Config+0x138>)
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000798:	2300      	movs	r3, #0
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800079c:	2300      	movs	r3, #0
 800079e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fdab 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80007c4:	f000 fd60 	bl	8001288 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	37e0      	adds	r7, #224	; 0xe0
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000
 80007d8:	000155c0 	.word	0x000155c0

080007dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_ADC1_Init+0x98>)
 80007f0:	4a21      	ldr	r2, [pc, #132]	; (8000878 <MX_ADC1_Init+0x9c>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_ADC1_Init+0x98>)
 80007f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_ADC1_Init+0x98>)
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_ADC1_Init+0xa0>)
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_ADC1_Init+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_ADC1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_ADC1_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_ADC1_Init+0x98>)
 800083e:	f001 fa15 	bl	8001c6c <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000848:	f000 fd1e 	bl	8001288 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_ADC1_Init+0x98>)
 800085e:	f001 fa49 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000868:	f000 fd0e 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000370 	.word	0x20000370
 8000878:	40012000 	.word	0x40012000
 800087c:	0f000001 	.word	0x0f000001

08000880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_I2C1_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_I2C1_Init+0x74>)
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <MX_I2C1_Init+0x7c>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008bc:	f001 ff22 	bl	8002704 <HAL_I2C_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008c6:	f000 fcdf 	bl	8001288 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008ce:	f001 ffa9 	bl	8002824 <HAL_I2CEx_ConfigAnalogFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d8:	f000 fcd6 	bl	8001288 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008e0:	f001 ffeb 	bl	80028ba <HAL_I2CEx_ConfigDigitalFilter>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 fccd 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000264 	.word	0x20000264
 80008f8:	40005400 	.word	0x40005400
 80008fc:	20404768 	.word	0x20404768

08000900 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_I2C3_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_I2C3_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_I2C3_Init+0x74>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <MX_I2C3_Init+0x7c>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_I2C3_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_I2C3_Init+0x74>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_I2C3_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C3_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C3_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C3_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <MX_I2C3_Init+0x74>)
 800093c:	f001 fee2 	bl	8002704 <HAL_I2C_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000946:	f000 fc9f 	bl	8001288 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_I2C3_Init+0x74>)
 800094e:	f001 ff69 	bl	8002824 <HAL_I2CEx_ConfigAnalogFilter>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 fc96 	bl	8001288 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_I2C3_Init+0x74>)
 8000960:	f001 ffab 	bl	80028ba <HAL_I2CEx_ConfigDigitalFilter>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 fc8d 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000098 	.word	0x20000098
 8000978:	40005c00 	.word	0x40005c00
 800097c:	20404768 	.word	0x20404768

08000980 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_SPI1_Init+0x6c>)
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <MX_SPI1_Init+0x70>)
 8000988:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_SPI1_Init+0x6c>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_SPI1_Init+0x6c>)
 8000992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000996:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_SPI1_Init+0x6c>)
 800099a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800099e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009c6:	2207      	movs	r2, #7
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_SPI1_Init+0x6c>)
 80009d8:	f003 f8c2 	bl	8003b60 <HAL_SPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80009e2:	f000 fc51 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200004dc 	.word	0x200004dc
 80009f0:	40013000 	.word	0x40013000

080009f4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_SPI4_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_SPI4_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a12:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a26:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a42:	2207      	movs	r2, #7
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_SPI4_Init+0x74>)
 8000a54:	f003 f884 	bl	8003b60 <HAL_SPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fc13 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000438 	.word	0x20000438
 8000a6c:	40013400 	.word	0x40013400

08000a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09a      	sub	sp, #104	; 0x68
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	222c      	movs	r2, #44	; 0x2c
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 ffce 	bl	8005a4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab0:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000ab2:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <MX_TIM1_Init+0x16c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab6:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000ac2:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ace:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad4:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ada:	483f      	ldr	r0, [pc, #252]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000adc:	f003 f8d2 	bl	8003c84 <HAL_TIM_Base_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ae6:	f000 fbcf 	bl	8001288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000af4:	4619      	mov	r1, r3
 8000af6:	4838      	ldr	r0, [pc, #224]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000af8:	f003 fb40 	bl	800417c <HAL_TIM_ConfigClockSource>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b02:	f000 fbc1 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b06:	4834      	ldr	r0, [pc, #208]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000b08:	f003 f8e7 	bl	8003cda <HAL_TIM_PWM_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b12:	f000 fbb9 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b26:	4619      	mov	r1, r3
 8000b28:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000b2a:	f004 f96d 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000b34:	f000 fba8 	bl	8001288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b38:	2360      	movs	r3, #96	; 0x60
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000b5e:	f003 f9f5 	bl	8003f4c <HAL_TIM_PWM_ConfigChannel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000b68:	f000 fb8e 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b70:	2204      	movs	r2, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000b76:	f003 f9e9 	bl	8003f4c <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000b80:	f000 fb82 	bl	8001288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000bba:	f004 f9b3 	bl	8004f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000bc4:	f000 fb60 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM1_Init+0x168>)
 8000bca:	f000 fd7f 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8000bce:	bf00      	nop
 8000bd0:	3768      	adds	r7, #104	; 0x68
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000049c 	.word	0x2000049c
 8000bdc:	40010000 	.word	0x40010000

08000be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c26:	f003 f883 	bl	8003d30 <HAL_TIM_IC_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c30:	f000 fb2a 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480f      	ldr	r0, [pc, #60]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c44:	f004 f8e0 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c4e:	f000 fb1b 	bl	8001288 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c56:	2301      	movs	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_TIM2_Init+0xa0>)
 8000c6a:	f003 f8d2 	bl	8003e12 <HAL_TIM_IC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c74:	f000 fb08 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000540 	.word	0x20000540

08000c84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c96:	463b      	mov	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000caa:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <MX_TIM3_Init+0xb0>)
 8000cac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ccc:	4818      	ldr	r0, [pc, #96]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000cce:	f003 f804 	bl	8003cda <HAL_TIM_PWM_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f000 fad6 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000cec:	f004 f88c 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cf6:	f000 fac7 	bl	8001288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfa:	2360      	movs	r3, #96	; 0x60
 8000cfc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000d12:	f003 f91b 	bl	8003f4c <HAL_TIM_PWM_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d1c:	f000 fab4 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <MX_TIM3_Init+0xac>)
 8000d22:	f000 fcd3 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200002b0 	.word	0x200002b0
 8000d34:	40000400 	.word	0x40000400

08000d38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <MX_TIM4_Init+0xb0>)
 8000d60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d80:	4818      	ldr	r0, [pc, #96]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000d82:	f002 ffaa 	bl	8003cda <HAL_TIM_PWM_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d8c:	f000 fa7c 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000da0:	f004 f832 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000daa:	f000 fa6d 	bl	8001288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	; 0x60
 8000db0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000dc6:	f003 f8c1 	bl	8003f4c <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000dd0:	f000 fa5a 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <MX_TIM4_Init+0xac>)
 8000dd6:	f000 fc79 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200001a4 	.word	0x200001a4
 8000de8:	40000800 	.word	0x40000800

08000dec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09e      	sub	sp, #120	; 0x78
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e30:	463b      	mov	r3, r7
 8000e32:	222c      	movs	r2, #44	; 0x2c
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fe08 	bl	8005a4c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e3c:	4b4f      	ldr	r3, [pc, #316]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e3e:	4a50      	ldr	r2, [pc, #320]	; (8000f80 <MX_TIM8_Init+0x194>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e42:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8000e4e:	4b4b      	ldr	r3, [pc, #300]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e5a:	4b48      	ldr	r3, [pc, #288]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e66:	4845      	ldr	r0, [pc, #276]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e68:	f002 ff0c 	bl	8003c84 <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000e72:	f000 fa09 	bl	8001288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e80:	4619      	mov	r1, r3
 8000e82:	483e      	ldr	r0, [pc, #248]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e84:	f003 f97a 	bl	800417c <HAL_TIM_ConfigClockSource>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000e8e:	f000 f9fb 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e92:	483a      	ldr	r0, [pc, #232]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000e94:	f002 ff21 	bl	8003cda <HAL_TIM_PWM_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000e9e:	f000 f9f3 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ea2:	2108      	movs	r1, #8
 8000ea4:	4835      	ldr	r0, [pc, #212]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000ea6:	f002 ff6e 	bl	8003d86 <HAL_TIM_OnePulse_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000eb0:	f000 f9ea 	bl	8001288 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000ebc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	482e      	ldr	r0, [pc, #184]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000ec4:	f003 fa14 	bl	80042f0 <HAL_TIM_SlaveConfigSynchro>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000ece:	f000 f9db 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4825      	ldr	r0, [pc, #148]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000ee6:	f003 ff8f 	bl	8004e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000ef0:	f000 f9ca 	bl	8001288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	2360      	movs	r3, #96	; 0x60
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efc:	2300      	movs	r3, #0
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4818      	ldr	r0, [pc, #96]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000f1a:	f003 f817 	bl	8003f4c <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8000f24:	f000 f9b0 	bl	8001288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f4e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000f5e:	f003 ffe1 	bl	8004f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8000f68:	f000 f98e 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM8_Init+0x190>)
 8000f6e:	f000 fbad 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8000f72:	bf00      	nop
 8000f74:	3778      	adds	r7, #120	; 0x78
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000164 	.word	0x20000164
 8000f80:	40010400 	.word	0x40010400

08000f84 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_UART5_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <MX_UART5_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_UART5_Init+0x58>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_UART5_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_UART5_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_UART5_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_UART5_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_UART5_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_UART5_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_UART5_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_UART5_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_UART5_Init+0x58>)
 8000fc8:	f004 f82a 	bl	8005020 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 f959 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002f0 	.word	0x200002f0
 8000fe0:	40005000 	.word	0x40005000

08000fe4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_UART7_Init+0x58>)
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <MX_UART7_Init+0x5c>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_UART7_Init+0x58>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_UART7_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_UART7_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_UART7_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_UART7_Init+0x58>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_UART7_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_UART7_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_UART7_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_UART7_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_UART7_Init+0x58>)
 8001028:	f003 fffa 	bl	8005020 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 f929 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000e4 	.word	0x200000e4
 8001040:	40007800 	.word	0x40007800

08001044 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_USART1_UART_Init+0x58>)
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <MX_USART1_UART_Init+0x5c>)
 800104c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_USART1_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART1_UART_Init+0x58>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART1_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_USART1_UART_Init+0x58>)
 8001088:	f003 ffca 	bl	8005020 <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001092:	f000 f8f9 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200003b8 	.word	0x200003b8
 80010a0:	40011000 	.word	0x40011000

080010a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <MX_USART2_UART_Init+0x5c>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART2_UART_Init+0x58>)
 80010e8:	f003 ff9a 	bl	8005020 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010f2:	f000 f8c9 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000580 	.word	0x20000580
 8001100:	40004400 	.word	0x40004400

08001104 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <MX_USART3_UART_Init+0x54>)
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <MX_USART3_UART_Init+0x58>)
 800110c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_USART3_UART_Init+0x54>)
 8001110:	4a13      	ldr	r2, [pc, #76]	; (8001160 <MX_USART3_UART_Init+0x5c>)
 8001112:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART3_UART_Init+0x54>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_USART3_UART_Init+0x54>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <MX_USART3_UART_Init+0x54>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART3_UART_Init+0x54>)
 8001128:	220c      	movs	r2, #12
 800112a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_USART3_UART_Init+0x54>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART3_UART_Init+0x54>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <MX_USART3_UART_Init+0x54>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART3_UART_Init+0x54>)
 8001140:	2200      	movs	r2, #0
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_USART3_UART_Init+0x54>)
 8001146:	f003 ff6b 	bl	8005020 <HAL_UART_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001150:	f000 f89a 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001e4 	.word	0x200001e4
 800115c:	40004800 	.word	0x40004800
 8001160:	001e8480 	.word	0x001e8480

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <MX_GPIO_Init+0x118>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a3f      	ldr	r2, [pc, #252]	; (800127c <MX_GPIO_Init+0x118>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <MX_GPIO_Init+0x118>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b3a      	ldr	r3, [pc, #232]	; (800127c <MX_GPIO_Init+0x118>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a39      	ldr	r2, [pc, #228]	; (800127c <MX_GPIO_Init+0x118>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <MX_GPIO_Init+0x118>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <MX_GPIO_Init+0x118>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a33      	ldr	r2, [pc, #204]	; (800127c <MX_GPIO_Init+0x118>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <MX_GPIO_Init+0x118>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b2e      	ldr	r3, [pc, #184]	; (800127c <MX_GPIO_Init+0x118>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a2d      	ldr	r2, [pc, #180]	; (800127c <MX_GPIO_Init+0x118>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <MX_GPIO_Init+0x118>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_GPIO_Init+0x118>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a27      	ldr	r2, [pc, #156]	; (800127c <MX_GPIO_Init+0x118>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_GPIO_Init+0x118>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_GPIO_Init+0x118>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <MX_GPIO_Init+0x118>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_GPIO_Init+0x118>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2108      	movs	r1, #8
 800120e:	481c      	ldr	r0, [pc, #112]	; (8001280 <MX_GPIO_Init+0x11c>)
 8001210:	f001 fa44 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 8001214:	2200      	movs	r2, #0
 8001216:	f64e 717f 	movw	r1, #61311	; 0xef7f
 800121a:	481a      	ldr	r0, [pc, #104]	; (8001284 <MX_GPIO_Init+0x120>)
 800121c:	f001 fa3e 	bl	800269c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SN6505_EN_Pin */
  GPIO_InitStruct.Pin = SN6505_EN_Pin;
 8001220:	2308      	movs	r3, #8
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <MX_GPIO_Init+0x11c>)
 8001238:	f001 f886 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin 
                           LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin 
                           S1_Pin S2_Pin S3_Pin S4_Pin 
                           S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 800123c:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001240:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <MX_GPIO_Init+0x120>)
 8001256:	f001 f877 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800125a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0x11c>)
 8001270:	f001 f86a 	bl	8002348 <HAL_GPIO_Init>

}
 8001274:	bf00      	nop
 8001276:	3730      	adds	r7, #48	; 0x30
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_MspInit+0x44>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_MspInit+0x44>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_MspInit+0x44>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_MspInit+0x44>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_MspInit+0x44>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <HAL_ADC_MspInit+0x74>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d123      	bne.n	800134a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_ADC_MspInit+0x78>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_ADC_MspInit+0x78>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8001332:	2301      	movs	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_ADC_MspInit+0x7c>)
 8001346:	f000 ffff 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40012000 	.word	0x40012000
 8001358:	40023800 	.word	0x40023800
 800135c:	40020000 	.word	0x40020000

08001360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a3d      	ldr	r2, [pc, #244]	; (8001474 <HAL_I2C_MspInit+0x114>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d128      	bne.n	80013d4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_I2C_MspInit+0x118>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a3c      	ldr	r2, [pc, #240]	; (8001478 <HAL_I2C_MspInit+0x118>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_I2C_MspInit+0x118>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	2312      	movs	r3, #18
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4831      	ldr	r0, [pc, #196]	; (800147c <HAL_I2C_MspInit+0x11c>)
 80013b6:	f000 ffc7 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_I2C_MspInit+0x118>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <HAL_I2C_MspInit+0x118>)
 80013c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_I2C_MspInit+0x118>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80013d2:	e04a      	b.n	800146a <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <HAL_I2C_MspInit+0x120>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d145      	bne.n	800146a <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_I2C_MspInit+0x118>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a25      	ldr	r2, [pc, #148]	; (8001478 <HAL_I2C_MspInit+0x118>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_I2C_MspInit+0x118>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_I2C_MspInit+0x118>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_I2C_MspInit+0x118>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_I2C_MspInit+0x118>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001420:	2304      	movs	r3, #4
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4816      	ldr	r0, [pc, #88]	; (8001484 <HAL_I2C_MspInit+0x124>)
 800142c:	f000 ff8c 	bl	8002348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143a:	2301      	movs	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001442:	2304      	movs	r3, #4
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	480e      	ldr	r0, [pc, #56]	; (8001488 <HAL_I2C_MspInit+0x128>)
 800144e:	f000 ff7b 	bl	8002348 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_I2C_MspInit+0x118>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_I2C_MspInit+0x118>)
 8001458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_I2C_MspInit+0x118>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40005400 	.word	0x40005400
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400
 8001480:	40005c00 	.word	0x40005c00
 8001484:	40020800 	.word	0x40020800
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2e      	ldr	r2, [pc, #184]	; (8001564 <HAL_SPI_MspInit+0xd8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d128      	bne.n	8001500 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 80014b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a27      	ldr	r2, [pc, #156]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 80014de:	23b0      	movs	r3, #176	; 0xb0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ee:	2305      	movs	r3, #5
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <HAL_SPI_MspInit+0xe0>)
 80014fa:	f000 ff25 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80014fe:	e02c      	b.n	800155a <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI4)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_SPI_MspInit+0xe4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d127      	bne.n	800155a <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a16      	ldr	r2, [pc, #88]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 8001510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_SPI_MspInit+0xdc>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800153a:	2374      	movs	r3, #116	; 0x74
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800154a:	2305      	movs	r3, #5
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <HAL_SPI_MspInit+0xe8>)
 8001556:	f000 fef7 	bl	8002348 <HAL_GPIO_Init>
}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40013000 	.word	0x40013000
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000
 8001570:	40013400 	.word	0x40013400
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_TIM_Base_MspInit+0x5c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10c      	bne.n	80015a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_TIM_Base_MspInit+0x60>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <HAL_TIM_Base_MspInit+0x60>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_TIM_Base_MspInit+0x60>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015a2:	e010      	b.n	80015c6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_TIM_Base_MspInit+0x64>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10b      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_TIM_Base_MspInit+0x60>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_TIM_Base_MspInit+0x60>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_TIM_Base_MspInit+0x60>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001600:	d128      	bne.n	8001654 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_TIM_IC_MspInit+0x7c>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <HAL_TIM_IC_MspInit+0x7c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_TIM_IC_MspInit+0x7c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_TIM_IC_MspInit+0x7c>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <HAL_TIM_IC_MspInit+0x7c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_TIM_IC_MspInit+0x7c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8001632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <HAL_TIM_IC_MspInit+0x80>)
 8001650:	f000 fe7a 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10c      	bne.n	8001690 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_TIM_PWM_MspInit+0x60>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <HAL_TIM_PWM_MspInit+0x60>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_TIM_PWM_MspInit+0x60>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800168e:	e010      	b.n	80016b2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <HAL_TIM_PWM_MspInit+0x64>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10b      	bne.n	80016b2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_TIM_PWM_MspInit+0x60>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <HAL_TIM_PWM_MspInit+0x60>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_TIM_PWM_MspInit+0x60>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40000800 	.word	0x40000800

080016cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a45      	ldr	r2, [pc, #276]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11d      	bne.n	800172a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ee:	4b45      	ldr	r3, [pc, #276]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a44      	ldr	r2, [pc, #272]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 80016f4:	f043 0310 	orr.w	r3, r3, #16
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8001706:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	4839      	ldr	r0, [pc, #228]	; (8001808 <HAL_TIM_MspPostInit+0x13c>)
 8001724:	f000 fe10 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001728:	e065      	b.n	80017f6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a37      	ldr	r2, [pc, #220]	; (800180c <HAL_TIM_MspPostInit+0x140>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d11c      	bne.n	800176e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b33      	ldr	r3, [pc, #204]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a32      	ldr	r2, [pc, #200]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 800174c:	2340      	movs	r3, #64	; 0x40
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800175c:	2302      	movs	r3, #2
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	482a      	ldr	r0, [pc, #168]	; (8001810 <HAL_TIM_MspPostInit+0x144>)
 8001768:	f000 fdee 	bl	8002348 <HAL_GPIO_Init>
}
 800176c:	e043      	b.n	80017f6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a28      	ldr	r2, [pc, #160]	; (8001814 <HAL_TIM_MspPostInit+0x148>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d11d      	bne.n	80017b4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 800177e:	f043 0308 	orr.w	r3, r3, #8
 8001782:	6313      	str	r3, [r2, #48]	; 0x30
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017a2:	2302      	movs	r3, #2
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	481a      	ldr	r0, [pc, #104]	; (8001818 <HAL_TIM_MspPostInit+0x14c>)
 80017ae:	f000 fdcb 	bl	8002348 <HAL_GPIO_Init>
}
 80017b2:	e020      	b.n	80017f6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_TIM_MspPostInit+0x150>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d11b      	bne.n	80017f6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 80017d6:	2340      	movs	r3, #64	; 0x40
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017e6:	2303      	movs	r3, #3
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	480b      	ldr	r0, [pc, #44]	; (8001820 <HAL_TIM_MspPostInit+0x154>)
 80017f2:	f000 fda9 	bl	8002348 <HAL_GPIO_Init>
}
 80017f6:	bf00      	nop
 80017f8:	3730      	adds	r7, #48	; 0x30
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40010000 	.word	0x40010000
 8001804:	40023800 	.word	0x40023800
 8001808:	40021000 	.word	0x40021000
 800180c:	40000400 	.word	0x40000400
 8001810:	40020000 	.word	0x40020000
 8001814:	40000800 	.word	0x40000800
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40010400 	.word	0x40010400
 8001820:	40020800 	.word	0x40020800

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b092      	sub	sp, #72	; 0x48
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a75      	ldr	r2, [pc, #468]	; (8001a18 <HAL_UART_MspInit+0x1f4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d129      	bne.n	800189a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001846:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a74      	ldr	r2, [pc, #464]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 800184c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b72      	ldr	r3, [pc, #456]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
 800185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b6c      	ldr	r3, [pc, #432]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 8001876:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001888:	2308      	movs	r3, #8
 800188a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001890:	4619      	mov	r1, r3
 8001892:	4863      	ldr	r0, [pc, #396]	; (8001a20 <HAL_UART_MspInit+0x1fc>)
 8001894:	f000 fd58 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001898:	e0b9      	b.n	8001a0e <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==UART7)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a61      	ldr	r2, [pc, #388]	; (8001a24 <HAL_UART_MspInit+0x200>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d129      	bne.n	80018f8 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 80018a4:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80018aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018bc:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	4a56      	ldr	r2, [pc, #344]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
 80018c8:	4b54      	ldr	r3, [pc, #336]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80018d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80018e6:	2308      	movs	r3, #8
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ee:	4619      	mov	r1, r3
 80018f0:	484d      	ldr	r0, [pc, #308]	; (8001a28 <HAL_UART_MspInit+0x204>)
 80018f2:	f000 fd29 	bl	8002348 <HAL_GPIO_Init>
}
 80018f6:	e08a      	b.n	8001a0e <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a4b      	ldr	r2, [pc, #300]	; (8001a2c <HAL_UART_MspInit+0x208>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d129      	bne.n	8001956 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a45      	ldr	r2, [pc, #276]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001908:	f043 0310 	orr.w	r3, r3, #16
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	623b      	str	r3, [r7, #32]
 8001918:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a3f      	ldr	r2, [pc, #252]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8001932:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001944:	2304      	movs	r3, #4
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800194c:	4619      	mov	r1, r3
 800194e:	4834      	ldr	r0, [pc, #208]	; (8001a20 <HAL_UART_MspInit+0x1fc>)
 8001950:	f000 fcfa 	bl	8002348 <HAL_GPIO_Init>
}
 8001954:	e05b      	b.n	8001a0e <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a35      	ldr	r2, [pc, #212]	; (8001a30 <HAL_UART_MspInit+0x20c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d128      	bne.n	80019b2 <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 8001990:	230c      	movs	r3, #12
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a0:	2307      	movs	r3, #7
 80019a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019a8:	4619      	mov	r1, r3
 80019aa:	4822      	ldr	r0, [pc, #136]	; (8001a34 <HAL_UART_MspInit+0x210>)
 80019ac:	f000 fccc 	bl	8002348 <HAL_GPIO_Init>
}
 80019b0:	e02d      	b.n	8001a0e <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_UART_MspInit+0x214>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d128      	bne.n	8001a0e <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80019c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_UART_MspInit+0x1f8>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 80019ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019fe:	2307      	movs	r3, #7
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <HAL_UART_MspInit+0x1fc>)
 8001a0a:	f000 fc9d 	bl	8002348 <HAL_GPIO_Init>
}
 8001a0e:	bf00      	nop
 8001a10:	3748      	adds	r7, #72	; 0x48
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40005000 	.word	0x40005000
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40007800 	.word	0x40007800
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40004400 	.word	0x40004400
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40004800 	.word	0x40004800

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a90:	f000 f8aa 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <_sbrk+0x50>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x16>
		heap_end = &end;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <_sbrk+0x50>)
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <_sbrk+0x54>)
 8001aac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <_sbrk+0x50>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <_sbrk+0x50>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	466a      	mov	r2, sp
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d907      	bls.n	8001ad2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ac2:	f003 ff99 	bl	80059f8 <__errno>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	230c      	movs	r3, #12
 8001aca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	e006      	b.n	8001ae0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <_sbrk+0x50>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <_sbrk+0x50>)
 8001adc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000008c 	.word	0x2000008c
 8001aec:	20000608 	.word	0x20000608

08001af0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <SystemInit+0x28>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afa:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <SystemInit+0x28>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SystemInit+0x28>)
 8001b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b22:	e003      	b.n	8001b2c <LoopCopyDataInit>

08001b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b2a:	3104      	adds	r1, #4

08001b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b2c:	480b      	ldr	r0, [pc, #44]	; (8001b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b34:	d3f6      	bcc.n	8001b24 <CopyDataInit>
  ldr  r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b38:	e002      	b.n	8001b40 <LoopFillZerobss>

08001b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b3c:	f842 3b04 	str.w	r3, [r2], #4

08001b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b44:	d3f9      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b46:	f7ff ffd3 	bl	8001af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f003 ff5b 	bl	8005a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7fe fd4f 	bl	80005f0 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001b58:	080062e8 	.word	0x080062e8
  ldr  r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b60:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001b64:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001b68:	20000608 	.word	0x20000608

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>

08001b6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 fbb4 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f000 f805 	bl	8001b88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b7e:	f7ff fb8b 	bl	8001298 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fbc1 	bl	800232e <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 fb97 	bl	80022f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000600 	.word	0x20000600

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000600 	.word	0x20000600

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_Delay+0x40>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000008 	.word	0x20000008

08001c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e031      	b.n	8001ce6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fb28 	bl	80012e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_ADC_Init+0x84>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f964 	bl	8001f88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd6:	e001      	b.n	8001cdc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	ffffeefd 	.word	0xffffeefd

08001cf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x1c>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e12a      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x272>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d93a      	bls.n	8001d96 <HAL_ADC_ConfigChannel+0xa2>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d28:	d035      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b1e      	subs	r3, #30
 8001d40:	2207      	movs	r2, #7
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a87      	ldr	r2, [pc, #540]	; (8001f74 <HAL_ADC_ConfigChannel+0x280>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10a      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68d9      	ldr	r1, [r3, #12]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	061a      	lsls	r2, r3, #24
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d6e:	e035      	b.n	8001ddc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68d9      	ldr	r1, [r3, #12]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4403      	add	r3, r0
 8001d88:	3b1e      	subs	r3, #30
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d94:	e022      	b.n	8001ddc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6919      	ldr	r1, [r3, #16]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	2207      	movs	r2, #7
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43da      	mvns	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	400a      	ands	r2, r1
 8001db8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6919      	ldr	r1, [r3, #16]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	4603      	mov	r3, r0
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4403      	add	r3, r0
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b06      	cmp	r3, #6
 8001de2:	d824      	bhi.n	8001e2e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b05      	subs	r3, #5
 8001df6:	221f      	movs	r2, #31
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b05      	subs	r3, #5
 8001e20:	fa00 f203 	lsl.w	r2, r0, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2c:	e04c      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d824      	bhi.n	8001e80 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b23      	subs	r3, #35	; 0x23
 8001e48:	221f      	movs	r2, #31
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4618      	mov	r0, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b23      	subs	r3, #35	; 0x23
 8001e72:	fa00 f203 	lsl.w	r2, r0, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7e:	e023      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b41      	subs	r3, #65	; 0x41
 8001e92:	221f      	movs	r2, #31
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	; 0x41
 8001ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <HAL_ADC_ConfigChannel+0x284>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_ADC_ConfigChannel+0x288>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <HAL_ADC_ConfigChannel+0x288>)
 8001ee2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ee6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_ADC_ConfigChannel+0x284>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d109      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x212>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d105      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_ADC_ConfigChannel+0x288>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <HAL_ADC_ConfigChannel+0x288>)
 8001f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f04:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_ADC_ConfigChannel+0x284>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d125      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x268>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_ADC_ConfigChannel+0x280>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <HAL_ADC_ConfigChannel+0x22e>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b11      	cmp	r3, #17
 8001f20:	d11c      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_ADC_ConfigChannel+0x288>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <HAL_ADC_ConfigChannel+0x288>)
 8001f28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f2c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_ADC_ConfigChannel+0x280>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d111      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_ADC_ConfigChannel+0x28c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_ADC_ConfigChannel+0x290>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	0c9a      	lsrs	r2, r3, #18
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f4e:	e002      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f9      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	10000012 	.word	0x10000012
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	20000000 	.word	0x20000000
 8001f84:	431bde83 	.word	0x431bde83

08001f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f90:	4b78      	ldr	r3, [pc, #480]	; (8002174 <ADC_Init+0x1ec>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a77      	ldr	r2, [pc, #476]	; (8002174 <ADC_Init+0x1ec>)
 8001f96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f9a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f9c:	4b75      	ldr	r3, [pc, #468]	; (8002174 <ADC_Init+0x1ec>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4973      	ldr	r1, [pc, #460]	; (8002174 <ADC_Init+0x1ec>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	021a      	lsls	r2, r3, #8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	4a58      	ldr	r2, [pc, #352]	; (8002178 <ADC_Init+0x1f0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d022      	beq.n	8002062 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800202a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6899      	ldr	r1, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800204c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6899      	ldr	r1, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	e00f      	b.n	8002082 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002080:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0202 	bic.w	r2, r2, #2
 8002090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	005a      	lsls	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01b      	beq.n	80020e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6859      	ldr	r1, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	035a      	lsls	r2, r3, #13
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	e007      	b.n	80020f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	3b01      	subs	r3, #1
 8002114:	051a      	lsls	r2, r3, #20
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800212c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6899      	ldr	r1, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800213a:	025a      	lsls	r2, r3, #9
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002152:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6899      	ldr	r1, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	029a      	lsls	r2, r3, #10
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40012300 	.word	0x40012300
 8002178:	0f000001 	.word	0x0f000001

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	; (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00
 80021c0:	05fa0000 	.word	0x05fa0000

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff47 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff5c 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffb0 	bl	800229c <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e175      	b.n	8002654 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	429a      	cmp	r2, r3
 8002382:	f040 8164 	bne.w	800264e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d00b      	beq.n	80023a6 <HAL_GPIO_Init+0x5e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d007      	beq.n	80023a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239a:	2b11      	cmp	r3, #17
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b12      	cmp	r3, #18
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x100>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b12      	cmp	r3, #18
 8002446:	d123      	bne.n	8002490 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80be 	beq.w	800264e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_GPIO_Init+0x320>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a64      	ldr	r2, [pc, #400]	; (8002668 <HAL_GPIO_Init+0x320>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b62      	ldr	r3, [pc, #392]	; (8002668 <HAL_GPIO_Init+0x320>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024ea:	4a60      	ldr	r2, [pc, #384]	; (800266c <HAL_GPIO_Init+0x324>)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_GPIO_Init+0x328>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d037      	beq.n	8002586 <HAL_GPIO_Init+0x23e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a56      	ldr	r2, [pc, #344]	; (8002674 <HAL_GPIO_Init+0x32c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d031      	beq.n	8002582 <HAL_GPIO_Init+0x23a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a55      	ldr	r2, [pc, #340]	; (8002678 <HAL_GPIO_Init+0x330>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02b      	beq.n	800257e <HAL_GPIO_Init+0x236>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a54      	ldr	r2, [pc, #336]	; (800267c <HAL_GPIO_Init+0x334>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d025      	beq.n	800257a <HAL_GPIO_Init+0x232>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a53      	ldr	r2, [pc, #332]	; (8002680 <HAL_GPIO_Init+0x338>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <HAL_GPIO_Init+0x22e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_GPIO_Init+0x33c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x22a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a51      	ldr	r2, [pc, #324]	; (8002688 <HAL_GPIO_Init+0x340>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x226>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a50      	ldr	r2, [pc, #320]	; (800268c <HAL_GPIO_Init+0x344>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x222>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4f      	ldr	r2, [pc, #316]	; (8002690 <HAL_GPIO_Init+0x348>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x21e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4e      	ldr	r2, [pc, #312]	; (8002694 <HAL_GPIO_Init+0x34c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x21a>
 800255e:	2309      	movs	r3, #9
 8002560:	e012      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002562:	230a      	movs	r3, #10
 8002564:	e010      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002566:	2308      	movs	r3, #8
 8002568:	e00e      	b.n	8002588 <HAL_GPIO_Init+0x240>
 800256a:	2307      	movs	r3, #7
 800256c:	e00c      	b.n	8002588 <HAL_GPIO_Init+0x240>
 800256e:	2306      	movs	r3, #6
 8002570:	e00a      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002572:	2305      	movs	r3, #5
 8002574:	e008      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002576:	2304      	movs	r3, #4
 8002578:	e006      	b.n	8002588 <HAL_GPIO_Init+0x240>
 800257a:	2303      	movs	r3, #3
 800257c:	e004      	b.n	8002588 <HAL_GPIO_Init+0x240>
 800257e:	2302      	movs	r3, #2
 8002580:	e002      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <HAL_GPIO_Init+0x240>
 8002586:	2300      	movs	r3, #0
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	f002 0203 	and.w	r2, r2, #3
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	4093      	lsls	r3, r2
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002598:	4934      	ldr	r1, [pc, #208]	; (800266c <HAL_GPIO_Init+0x324>)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	089b      	lsrs	r3, r3, #2
 800259e:	3302      	adds	r3, #2
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a6:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ca:	4a33      	ldr	r2, [pc, #204]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025d0:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f4:	4a28      	ldr	r2, [pc, #160]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_GPIO_Init+0x350>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <HAL_GPIO_Init+0x350>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <HAL_GPIO_Init+0x350>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a13      	ldr	r2, [pc, #76]	; (8002698 <HAL_GPIO_Init+0x350>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3301      	adds	r3, #1
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b0f      	cmp	r3, #15
 8002658:	f67f ae86 	bls.w	8002368 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800265c:	bf00      	nop
 800265e:	3724      	adds	r7, #36	; 0x24
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40023800 	.word	0x40023800
 800266c:	40013800 	.word	0x40013800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40021000 	.word	0x40021000
 8002684:	40021400 	.word	0x40021400
 8002688:	40021800 	.word	0x40021800
 800268c:	40021c00 	.word	0x40021c00
 8002690:	40022000 	.word	0x40022000
 8002694:	40022400 	.word	0x40022400
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026b8:	e003      	b.n	80026c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	619a      	str	r2, [r3, #24]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026e6:	887b      	ldrh	r3, [r7, #2]
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80026ee:	e002      	b.n	80026f6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07f      	b.n	8002816 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fe18 	bl	8001360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002754:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002764:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	e006      	b.n	800278c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800278a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d104      	bne.n	800279e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800279c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_I2C_Init+0x11c>)
 80027aa:	430b      	orrs	r3, r1
 80027ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	ea42 0103 	orr.w	r1, r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	021a      	lsls	r2, r3, #8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69d9      	ldr	r1, [r3, #28]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1a      	ldr	r2, [r3, #32]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	02008000 	.word	0x02008000

08002824 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	d138      	bne.n	80028ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002844:	2302      	movs	r3, #2
 8002846:	e032      	b.n	80028ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002876:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6819      	ldr	r1, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d139      	bne.n	8002944 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028da:	2302      	movs	r3, #2
 80028dc:	e033      	b.n	8002946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2224      	movs	r2, #36	; 0x24
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800290c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40007000 	.word	0x40007000

08002974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_PWREx_EnableOverDrive+0x98>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a2:	f7ff f935 	bl	8001c10 <HAL_GetTick>
 80029a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029a8:	e009      	b.n	80029be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029aa:	f7ff f931 	bl	8001c10 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b8:	d901      	bls.n	80029be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e022      	b.n	8002a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ca:	d1ee      	bne.n	80029aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d8:	f7ff f91a 	bl	8001c10 <HAL_GetTick>
 80029dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029de:	e009      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029e0:	f7ff f916 	bl	8001c10 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029ee:	d901      	bls.n	80029f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e007      	b.n	8002a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a00:	d1ee      	bne.n	80029e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e29b      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8087 	beq.w	8002b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a38:	4b96      	ldr	r3, [pc, #600]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d00c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a44:	4b93      	ldr	r3, [pc, #588]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d112      	bne.n	8002a76 <HAL_RCC_OscConfig+0x62>
 8002a50:	4b90      	ldr	r3, [pc, #576]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a5c:	d10b      	bne.n	8002a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5e:	4b8d      	ldr	r3, [pc, #564]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d06c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x130>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d168      	bne.n	8002b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e275      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x7a>
 8002a80:	4b84      	ldr	r3, [pc, #528]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a83      	ldr	r2, [pc, #524]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	e02e      	b.n	8002aec <HAL_RCC_OscConfig+0xd8>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x9c>
 8002a96:	4b7f      	ldr	r3, [pc, #508]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7e      	ldr	r2, [pc, #504]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b7c      	ldr	r3, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7b      	ldr	r2, [pc, #492]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e01d      	b.n	8002aec <HAL_RCC_OscConfig+0xd8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xc0>
 8002aba:	4b76      	ldr	r3, [pc, #472]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a75      	ldr	r2, [pc, #468]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b73      	ldr	r3, [pc, #460]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a72      	ldr	r2, [pc, #456]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0xd8>
 8002ad4:	4b6f      	ldr	r3, [pc, #444]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a6e      	ldr	r2, [pc, #440]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6b      	ldr	r2, [pc, #428]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7ff f88c 	bl	8001c10 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7ff f888 	bl	8001c10 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e229      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0xe8>
 8002b1a:	e014      	b.n	8002b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7ff f878 	bl	8001c10 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7ff f874 	bl	8001c10 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e215      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x110>
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d069      	beq.n	8002c26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b52:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5e:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d11c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x190>
 8002b6a:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d116      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1e9      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	493d      	ldr	r1, [pc, #244]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	e040      	b.n	8002c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d023      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a38      	ldr	r2, [pc, #224]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7ff f82a 	bl	8001c10 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7ff f826 	bl	8001c10 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1c7      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4929      	ldr	r1, [pc, #164]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
 8002bf2:	e018      	b.n	8002c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf4:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7ff f806 	bl	8001c10 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7ff f802 	bl	8001c10 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1a3      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d038      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7fe ffe3 	bl	8001c10 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7fe ffdf 	bl	8001c10 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e180      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x23a>
 8002c6c:	e01a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_RCC_OscConfig+0x280>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe ffc9 	bl	8001c10 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c82:	f7fe ffc5 	bl	8001c10 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d903      	bls.n	8002c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e166      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
 8002c94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b92      	ldr	r3, [pc, #584]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a4 	beq.w	8002dfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb2:	4b8c      	ldr	r3, [pc, #560]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b89      	ldr	r3, [pc, #548]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a88      	ldr	r2, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b86      	ldr	r3, [pc, #536]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cda:	4b83      	ldr	r3, [pc, #524]	; (8002ee8 <HAL_RCC_OscConfig+0x4d4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ce6:	4b80      	ldr	r3, [pc, #512]	; (8002ee8 <HAL_RCC_OscConfig+0x4d4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7f      	ldr	r2, [pc, #508]	; (8002ee8 <HAL_RCC_OscConfig+0x4d4>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe ff8d 	bl	8001c10 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7fe ff89 	bl	8001c10 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b64      	cmp	r3, #100	; 0x64
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e12a      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0c:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x4d4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x31a>
 8002d20:	4b70      	ldr	r3, [pc, #448]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a6f      	ldr	r2, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	e02d      	b.n	8002d8a <HAL_RCC_OscConfig+0x376>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x33c>
 8002d36:	4b6b      	ldr	r3, [pc, #428]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a6a      	ldr	r2, [pc, #424]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a67      	ldr	r2, [pc, #412]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	e01c      	b.n	8002d8a <HAL_RCC_OscConfig+0x376>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCC_OscConfig+0x35e>
 8002d58:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a61      	ldr	r2, [pc, #388]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a5e      	ldr	r2, [pc, #376]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	e00b      	b.n	8002d8a <HAL_RCC_OscConfig+0x376>
 8002d72:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a5b      	ldr	r2, [pc, #364]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	4b59      	ldr	r3, [pc, #356]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a58      	ldr	r2, [pc, #352]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d92:	f7fe ff3d 	bl	8001c10 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe ff39 	bl	8001c10 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0d8      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	4b4c      	ldr	r3, [pc, #304]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ee      	beq.n	8002d9a <HAL_RCC_OscConfig+0x386>
 8002dbc:	e014      	b.n	8002de8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7fe ff27 	bl	8001c10 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7fe ff23 	bl	8001c10 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0c2      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ee      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80ae 	beq.w	8002f60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e04:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d06d      	beq.n	8002eec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d14b      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a31      	ldr	r2, [pc, #196]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fef4 	bl	8001c10 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fef0 	bl	8001c10 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e091      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	019b      	lsls	r3, r3, #6
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	3b01      	subs	r3, #1
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	071b      	lsls	r3, r3, #28
 8002e76:	491b      	ldr	r1, [pc, #108]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fec2 	bl	8001c10 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe febe 	bl	8001c10 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e05f      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x47c>
 8002eae:	e057      	b.n	8002f60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fea8 	bl	8001c10 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe fea4 	bl	8001c10 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e045      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x4b0>
 8002ee2:	e03d      	b.n	8002f60 <HAL_RCC_OscConfig+0x54c>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_RCC_OscConfig+0x558>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d030      	beq.n	8002f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d129      	bne.n	8002f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d122      	bne.n	8002f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d119      	bne.n	8002f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	3b01      	subs	r3, #1
 8002f36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d10f      	bne.n	8002f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800

08002f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 020f 	bic.w	r2, r3, #15
 8002f9e:	4965      	ldr	r1, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d040      	beq.n	8003094 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e073      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	4313      	orrs	r3, r2
 8003062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fe fdd4 	bl	8001c10 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fe fdd0 	bl	8001c10 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 020f 	bic.w	r2, r3, #15
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4601      	mov	r1, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1c8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1cc>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	fa21 f303 	lsr.w	r3, r1, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1d0>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fd30 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023c00 	.word	0x40023c00
 8003138:	40023800 	.word	0x40023800
 800313c:	0800628c 	.word	0x0800628c
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	2300      	movs	r3, #0
 8003158:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800315e:	4b50      	ldr	r3, [pc, #320]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b04      	cmp	r3, #4
 8003168:	d007      	beq.n	800317a <HAL_RCC_GetSysClockFreq+0x32>
 800316a:	2b08      	cmp	r3, #8
 800316c:	d008      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x38>
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 808d 	bne.w	800328e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003176:	60bb      	str	r3, [r7, #8]
      break;
 8003178:	e08c      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800317a:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800317c:	60bb      	str	r3, [r7, #8]
      break;
 800317e:	e089      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003180:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003188:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800318a:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d023      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003196:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	f04f 0400 	mov.w	r4, #0
 80031a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	ea03 0501 	and.w	r5, r3, r1
 80031ac:	ea04 0602 	and.w	r6, r4, r2
 80031b0:	4a3d      	ldr	r2, [pc, #244]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031b2:	fb02 f106 	mul.w	r1, r2, r6
 80031b6:	2200      	movs	r2, #0
 80031b8:	fb02 f205 	mul.w	r2, r2, r5
 80031bc:	440a      	add	r2, r1
 80031be:	493a      	ldr	r1, [pc, #232]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031c0:	fba5 0101 	umull	r0, r1, r5, r1
 80031c4:	1853      	adds	r3, r2, r1
 80031c6:	4619      	mov	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f04f 0400 	mov.w	r4, #0
 80031ce:	461a      	mov	r2, r3
 80031d0:	4623      	mov	r3, r4
 80031d2:	f7fd f88d 	bl	80002f0 <__aeabi_uldivmod>
 80031d6:	4603      	mov	r3, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e049      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031de:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	f04f 0400 	mov.w	r4, #0
 80031e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	ea03 0501 	and.w	r5, r3, r1
 80031f4:	ea04 0602 	and.w	r6, r4, r2
 80031f8:	4629      	mov	r1, r5
 80031fa:	4632      	mov	r2, r6
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	f04f 0400 	mov.w	r4, #0
 8003204:	0154      	lsls	r4, r2, #5
 8003206:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800320a:	014b      	lsls	r3, r1, #5
 800320c:	4619      	mov	r1, r3
 800320e:	4622      	mov	r2, r4
 8003210:	1b49      	subs	r1, r1, r5
 8003212:	eb62 0206 	sbc.w	r2, r2, r6
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	f04f 0400 	mov.w	r4, #0
 800321e:	0194      	lsls	r4, r2, #6
 8003220:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003224:	018b      	lsls	r3, r1, #6
 8003226:	1a5b      	subs	r3, r3, r1
 8003228:	eb64 0402 	sbc.w	r4, r4, r2
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	00e2      	lsls	r2, r4, #3
 8003236:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800323a:	00d9      	lsls	r1, r3, #3
 800323c:	460b      	mov	r3, r1
 800323e:	4614      	mov	r4, r2
 8003240:	195b      	adds	r3, r3, r5
 8003242:	eb44 0406 	adc.w	r4, r4, r6
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	02a2      	lsls	r2, r4, #10
 8003250:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003254:	0299      	lsls	r1, r3, #10
 8003256:	460b      	mov	r3, r1
 8003258:	4614      	mov	r4, r2
 800325a:	4618      	mov	r0, r3
 800325c:	4621      	mov	r1, r4
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f04f 0400 	mov.w	r4, #0
 8003264:	461a      	mov	r2, r3
 8003266:	4623      	mov	r3, r4
 8003268:	f7fd f842 	bl	80002f0 <__aeabi_uldivmod>
 800326c:	4603      	mov	r3, r0
 800326e:	460c      	mov	r4, r1
 8003270:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	3301      	adds	r3, #1
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	60bb      	str	r3, [r7, #8]
      break;
 800328c:	e002      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003290:	60bb      	str	r3, [r7, #8]
      break;
 8003292:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003294:	68bb      	ldr	r3, [r7, #8]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	00f42400 	.word	0x00f42400
 80032a8:	00989680 	.word	0x00989680

080032ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000000 	.word	0x20000000

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f7ff fff0 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032cc:	4601      	mov	r1, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0a9b      	lsrs	r3, r3, #10
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032da:	5cd3      	ldrb	r3, [r2, r3]
 80032dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	0800629c 	.word	0x0800629c

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032f0:	f7ff ffdc 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032f4:	4601      	mov	r1, r0
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0b5b      	lsrs	r3, r3, #13
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4a03      	ldr	r2, [pc, #12]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	0800629c 	.word	0x0800629c

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d012      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800333c:	4b69      	ldr	r3, [pc, #420]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a68      	ldr	r2, [pc, #416]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003346:	6093      	str	r3, [r2, #8]
 8003348:	4b66      	ldr	r3, [pc, #408]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	4964      	ldr	r1, [pc, #400]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800335e:	2301      	movs	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d017      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800336e:	4b5d      	ldr	r3, [pc, #372]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	4959      	ldr	r1, [pc, #356]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800338c:	d101      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800338e:	2301      	movs	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800339a:	2301      	movs	r3, #1
 800339c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d017      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033aa:	4b4e      	ldr	r3, [pc, #312]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	494a      	ldr	r1, [pc, #296]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c8:	d101      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 808b 	beq.w	800350e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f8:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	4a39      	ldr	r2, [pc, #228]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003402:	6413      	str	r3, [r2, #64]	; 0x40
 8003404:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fe fbf8 	bl	8001c10 <HAL_GetTick>
 8003420:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fe fbf4 	bl	8001c10 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e38d      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003442:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d035      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	429a      	cmp	r2, r3
 800345e:	d02e      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003460:	4b20      	ldr	r3, [pc, #128]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800346a:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003476:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003480:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003488:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d114      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe fbbc 	bl	8001c10 <HAL_GetTick>
 8003498:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349a:	e00a      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349c:	f7fe fbb8 	bl	8001c10 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e34f      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ee      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d111      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034da:	400b      	ands	r3, r1
 80034dc:	4901      	ldr	r1, [pc, #4]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
 80034e2:	e00b      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40007000 	.word	0x40007000
 80034ec:	0ffffcff 	.word	0x0ffffcff
 80034f0:	4bb3      	ldr	r3, [pc, #716]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4ab2      	ldr	r2, [pc, #712]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034fa:	6093      	str	r3, [r2, #8]
 80034fc:	4bb0      	ldr	r3, [pc, #704]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	49ad      	ldr	r1, [pc, #692]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800350a:	4313      	orrs	r3, r2
 800350c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	d010      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800351a:	4ba9      	ldr	r3, [pc, #676]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800351c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003520:	4aa7      	ldr	r2, [pc, #668]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003526:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800352a:	4ba5      	ldr	r3, [pc, #660]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800352c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	49a2      	ldr	r1, [pc, #648]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003548:	4b9d      	ldr	r3, [pc, #628]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003556:	499a      	ldr	r1, [pc, #616]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800356a:	4b95      	ldr	r3, [pc, #596]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003578:	4991      	ldr	r1, [pc, #580]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800358c:	4b8c      	ldr	r3, [pc, #560]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	4989      	ldr	r1, [pc, #548]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035ae:	4b84      	ldr	r3, [pc, #528]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4980      	ldr	r1, [pc, #512]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d0:	4b7b      	ldr	r3, [pc, #492]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f023 0203 	bic.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	4978      	ldr	r1, [pc, #480]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f2:	4b73      	ldr	r3, [pc, #460]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f023 020c 	bic.w	r2, r3, #12
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003600:	496f      	ldr	r1, [pc, #444]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003614:	4b6a      	ldr	r3, [pc, #424]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003622:	4967      	ldr	r1, [pc, #412]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003636:	4b62      	ldr	r3, [pc, #392]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	495e      	ldr	r1, [pc, #376]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	4956      	ldr	r1, [pc, #344]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800367a:	4b51      	ldr	r3, [pc, #324]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	494d      	ldr	r1, [pc, #308]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800369c:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	4945      	ldr	r1, [pc, #276]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036be:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036cc:	493c      	ldr	r1, [pc, #240]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036e0:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ee:	4934      	ldr	r1, [pc, #208]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003710:	492b      	ldr	r1, [pc, #172]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800371c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003748:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003750:	491b      	ldr	r1, [pc, #108]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00b      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003764:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003774:	4912      	ldr	r1, [pc, #72]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003798:	4909      	ldr	r1, [pc, #36]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	e002      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	4985      	ldr	r1, [pc, #532]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037d8:	4b80      	ldr	r3, [pc, #512]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e8:	497c      	ldr	r1, [pc, #496]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d005      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037fe:	f040 80d6 	bne.w	80039ae <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003802:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a75      	ldr	r2, [pc, #468]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800380c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fe f9ff 	bl	8001c10 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003816:	f7fe f9fb 	bl	8001c10 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b64      	cmp	r3, #100	; 0x64
 8003822:	d901      	bls.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e194      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003828:	4b6c      	ldr	r3, [pc, #432]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d021      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11d      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003848:	4b64      	ldr	r3, [pc, #400]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003856:	4b61      	ldr	r3, [pc, #388]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385c:	0e1b      	lsrs	r3, r3, #24
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	019a      	lsls	r2, r3, #6
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	071b      	lsls	r3, r3, #28
 800387c:	4957      	ldr	r1, [pc, #348]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d02e      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ae:	d129      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038b0:	4b4a      	ldr	r3, [pc, #296]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c4:	0f1b      	lsrs	r3, r3, #28
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	019a      	lsls	r2, r3, #6
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	041b      	lsls	r3, r3, #16
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	071b      	lsls	r3, r3, #28
 80038e4:	493d      	ldr	r1, [pc, #244]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80038ec:	4b3b      	ldr	r3, [pc, #236]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f2:	f023 021f 	bic.w	r2, r3, #31
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	3b01      	subs	r3, #1
 80038fc:	4937      	ldr	r1, [pc, #220]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01d      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003910:	4b32      	ldr	r3, [pc, #200]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003916:	0e1b      	lsrs	r3, r3, #24
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800391e:	4b2f      	ldr	r3, [pc, #188]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003924:	0f1b      	lsrs	r3, r3, #28
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	019a      	lsls	r2, r3, #6
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	431a      	orrs	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	061b      	lsls	r3, r3, #24
 800393e:	431a      	orrs	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	071b      	lsls	r3, r3, #28
 8003944:	4925      	ldr	r1, [pc, #148]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d011      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	019a      	lsls	r2, r3, #6
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	041b      	lsls	r3, r3, #16
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	061b      	lsls	r3, r3, #24
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	071b      	lsls	r3, r3, #28
 8003974:	4919      	ldr	r1, [pc, #100]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800397c:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a16      	ldr	r2, [pc, #88]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003982:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003988:	f7fe f942 	bl	8001c10 <HAL_GetTick>
 800398c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003990:	f7fe f93e 	bl	8001c10 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e0d7      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	f040 80cd 	bne.w	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a08      	ldr	r2, [pc, #32]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c2:	f7fe f925 	bl	8001c10 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039ca:	f7fe f921 	bl	8001c10 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d903      	bls.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0ba      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80039dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039e0:	4b5e      	ldr	r3, [pc, #376]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ec:	d0ed      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d02e      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d12a      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a16:	4b51      	ldr	r3, [pc, #324]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a24:	4b4d      	ldr	r3, [pc, #308]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	0f1b      	lsrs	r3, r3, #28
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	019a      	lsls	r2, r3, #6
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	041b      	lsls	r3, r3, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	071b      	lsls	r3, r3, #28
 8003a4a:	4944      	ldr	r1, [pc, #272]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a52:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	493d      	ldr	r1, [pc, #244]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d022      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a80:	d11d      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a82:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	0e1b      	lsrs	r3, r3, #24
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a90:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	0f1b      	lsrs	r3, r3, #28
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	019a      	lsls	r2, r3, #6
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	061b      	lsls	r3, r3, #24
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	071b      	lsls	r3, r3, #28
 8003ab6:	4929      	ldr	r1, [pc, #164]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d028      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003aca:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	0e1b      	lsrs	r3, r3, #24
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ad8:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	019a      	lsls	r2, r3, #6
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	061b      	lsls	r3, r3, #24
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	071b      	lsls	r3, r3, #28
 8003afe:	4917      	ldr	r1, [pc, #92]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	4911      	ldr	r1, [pc, #68]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b28:	f7fe f872 	bl	8001c10 <HAL_GetTick>
 8003b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b30:	f7fe f86e 	bl	8001c10 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e007      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b4e:	d1ef      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800

08003b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e084      	b.n	8003c7c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fd fc7d 	bl	800148c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb2:	d902      	bls.n	8003bba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e002      	b.n	8003bc0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bc8:	d007      	beq.n	8003bda <HAL_SPI_Init+0x7a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bea:	d903      	bls.n	8003bf4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf2:	e002      	b.n	8003bfa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	ea42 0103 	orr.w	r1, r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	f003 0204 	and.w	r2, r3, #4
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	ea42 0103 	orr.w	r1, r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e01d      	b.n	8003cd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7fd fc64 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f000 fb56 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e01d      	b.n	8003d28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fd fcaf 	bl	8001664 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f000 fb2b 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e01d      	b.n	8003d7e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd fc42 	bl	80015e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fb00 	bl	8004374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e02d      	b.n	8003df6 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f825 	bl	8003dfe <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fad4 	bl	8004374 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0208 	bic.w	r2, r2, #8
 8003dda:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_IC_ConfigChannel+0x1a>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e08a      	b.n	8003f42 <HAL_TIM_IC_ConfigChannel+0x130>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d11b      	bne.n	8003e7a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f000 fe15 	bl	8004a80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 020c 	bic.w	r2, r2, #12
 8003e64:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6999      	ldr	r1, [r3, #24]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	619a      	str	r2, [r3, #24]
 8003e78:	e05a      	b.n	8003f30 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d11c      	bne.n	8003eba <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	6819      	ldr	r1, [r3, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f000 fe99 	bl	8004bc6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ea2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6999      	ldr	r1, [r3, #24]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	021a      	lsls	r2, r3, #8
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	619a      	str	r2, [r3, #24]
 8003eb8:	e03a      	b.n	8003f30 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6819      	ldr	r1, [r3, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f000 fee6 	bl	8004ca0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69da      	ldr	r2, [r3, #28]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 020c 	bic.w	r2, r2, #12
 8003ee2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69d9      	ldr	r1, [r3, #28]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	61da      	str	r2, [r3, #28]
 8003ef6:	e01b      	b.n	8003f30 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6819      	ldr	r1, [r3, #0]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f000 ff06 	bl	8004d18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69d9      	ldr	r1, [r3, #28]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e105      	b.n	8004172 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b14      	cmp	r3, #20
 8003f7a:	f200 80f0 	bhi.w	800415e <HAL_TIM_PWM_ConfigChannel+0x212>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	0800415f 	.word	0x0800415f
 8003f8c:	0800415f 	.word	0x0800415f
 8003f90:	0800415f 	.word	0x0800415f
 8003f94:	08004019 	.word	0x08004019
 8003f98:	0800415f 	.word	0x0800415f
 8003f9c:	0800415f 	.word	0x0800415f
 8003fa0:	0800415f 	.word	0x0800415f
 8003fa4:	0800405b 	.word	0x0800405b
 8003fa8:	0800415f 	.word	0x0800415f
 8003fac:	0800415f 	.word	0x0800415f
 8003fb0:	0800415f 	.word	0x0800415f
 8003fb4:	0800409b 	.word	0x0800409b
 8003fb8:	0800415f 	.word	0x0800415f
 8003fbc:	0800415f 	.word	0x0800415f
 8003fc0:	0800415f 	.word	0x0800415f
 8003fc4:	080040dd 	.word	0x080040dd
 8003fc8:	0800415f 	.word	0x0800415f
 8003fcc:	0800415f 	.word	0x0800415f
 8003fd0:	0800415f 	.word	0x0800415f
 8003fd4:	0800411d 	.word	0x0800411d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fa68 	bl	80044b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0208 	orr.w	r2, r2, #8
 8003ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0204 	bic.w	r2, r2, #4
 8004002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6999      	ldr	r1, [r3, #24]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	619a      	str	r2, [r3, #24]
      break;
 8004016:	e0a3      	b.n	8004160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 faba 	bl	8004598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6999      	ldr	r1, [r3, #24]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	021a      	lsls	r2, r3, #8
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	619a      	str	r2, [r3, #24]
      break;
 8004058:	e082      	b.n	8004160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fb11 	bl	8004688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0208 	orr.w	r2, r2, #8
 8004074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0204 	bic.w	r2, r2, #4
 8004084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]
      break;
 8004098:	e062      	b.n	8004160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fb67 	bl	8004774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69d9      	ldr	r1, [r3, #28]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	021a      	lsls	r2, r3, #8
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	61da      	str	r2, [r3, #28]
      break;
 80040da:	e041      	b.n	8004160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fb9e 	bl	8004824 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0208 	orr.w	r2, r2, #8
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0204 	bic.w	r2, r2, #4
 8004106:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800411a:	e021      	b.n	8004160 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fbd0 	bl	80048c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004136:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	021a      	lsls	r2, r3, #8
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800415c:	e000      	b.n	8004160 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800415e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_TIM_ConfigClockSource+0x18>
 8004190:	2302      	movs	r3, #2
 8004192:	e0a6      	b.n	80042e2 <HAL_TIM_ConfigClockSource+0x166>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4b4f      	ldr	r3, [pc, #316]	; (80042ec <HAL_TIM_ConfigClockSource+0x170>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d067      	beq.n	800429c <HAL_TIM_ConfigClockSource+0x120>
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	d80b      	bhi.n	80041e8 <HAL_TIM_ConfigClockSource+0x6c>
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d073      	beq.n	80042bc <HAL_TIM_ConfigClockSource+0x140>
 80041d4:	2b10      	cmp	r3, #16
 80041d6:	d802      	bhi.n	80041de <HAL_TIM_ConfigClockSource+0x62>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d06f      	beq.n	80042bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80041dc:	e078      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d06c      	beq.n	80042bc <HAL_TIM_ConfigClockSource+0x140>
 80041e2:	2b30      	cmp	r3, #48	; 0x30
 80041e4:	d06a      	beq.n	80042bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80041e6:	e073      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041e8:	2b70      	cmp	r3, #112	; 0x70
 80041ea:	d00d      	beq.n	8004208 <HAL_TIM_ConfigClockSource+0x8c>
 80041ec:	2b70      	cmp	r3, #112	; 0x70
 80041ee:	d804      	bhi.n	80041fa <HAL_TIM_ConfigClockSource+0x7e>
 80041f0:	2b50      	cmp	r3, #80	; 0x50
 80041f2:	d033      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xe0>
 80041f4:	2b60      	cmp	r3, #96	; 0x60
 80041f6:	d041      	beq.n	800427c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80041f8:	e06a      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d066      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x152>
 8004200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004204:	d017      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004206:	e063      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6899      	ldr	r1, [r3, #8]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f000 fdd6 	bl	8004dc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800422a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	609a      	str	r2, [r3, #8]
      break;
 8004234:	e04c      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6899      	ldr	r1, [r3, #8]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f000 fdbf 	bl	8004dc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e039      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	461a      	mov	r2, r3
 800426a:	f000 fc7d 	bl	8004b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2150      	movs	r1, #80	; 0x50
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fd8c 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 800427a:	e029      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	461a      	mov	r2, r3
 800428a:	f000 fcd9 	bl	8004c40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2160      	movs	r1, #96	; 0x60
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fd7c 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 800429a:	e019      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6859      	ldr	r1, [r3, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	461a      	mov	r2, r3
 80042aa:	f000 fc5d 	bl	8004b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2140      	movs	r1, #64	; 0x40
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fd6c 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 80042ba:	e009      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f000 fd63 	bl	8004d92 <TIM_ITRx_SetConfig>
      break;
 80042cc:	e000      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80042ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	fffeff88 	.word	0xfffeff88

080042f0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004304:	2302      	movs	r3, #2
 8004306:	e031      	b.n	800436c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004318:	6839      	ldr	r1, [r7, #0]
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fb28 	bl	8004970 <TIM_SlaveTimer_SetConfig>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e018      	b.n	800436c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004348:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004358:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a40      	ldr	r2, [pc, #256]	; (8004488 <TIM_Base_SetConfig+0x114>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004392:	d00f      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3d      	ldr	r2, [pc, #244]	; (800448c <TIM_Base_SetConfig+0x118>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00b      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3c      	ldr	r2, [pc, #240]	; (8004490 <TIM_Base_SetConfig+0x11c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <TIM_Base_SetConfig+0x120>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3a      	ldr	r2, [pc, #232]	; (8004498 <TIM_Base_SetConfig+0x124>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2f      	ldr	r2, [pc, #188]	; (8004488 <TIM_Base_SetConfig+0x114>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d027      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2c      	ldr	r2, [pc, #176]	; (800448c <TIM_Base_SetConfig+0x118>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d023      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2b      	ldr	r2, [pc, #172]	; (8004490 <TIM_Base_SetConfig+0x11c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <TIM_Base_SetConfig+0x120>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a29      	ldr	r2, [pc, #164]	; (8004498 <TIM_Base_SetConfig+0x124>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d017      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a28      	ldr	r2, [pc, #160]	; (800449c <TIM_Base_SetConfig+0x128>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <TIM_Base_SetConfig+0x12c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <TIM_Base_SetConfig+0x130>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <TIM_Base_SetConfig+0x134>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a24      	ldr	r2, [pc, #144]	; (80044ac <TIM_Base_SetConfig+0x138>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a23      	ldr	r2, [pc, #140]	; (80044b0 <TIM_Base_SetConfig+0x13c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <TIM_Base_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0xf8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <TIM_Base_SetConfig+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d103      	bne.n	8004474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	615a      	str	r2, [r3, #20]
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40010400 	.word	0x40010400
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800
 80044a8:	40001800 	.word	0x40001800
 80044ac:	40001c00 	.word	0x40001c00
 80044b0:	40002000 	.word	0x40002000

080044b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4b2b      	ldr	r3, [pc, #172]	; (800458c <TIM_OC1_SetConfig+0xd8>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0302 	bic.w	r3, r3, #2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a21      	ldr	r2, [pc, #132]	; (8004590 <TIM_OC1_SetConfig+0xdc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_OC1_SetConfig+0x64>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a20      	ldr	r2, [pc, #128]	; (8004594 <TIM_OC1_SetConfig+0xe0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10c      	bne.n	8004532 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f023 0308 	bic.w	r3, r3, #8
 800451e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 0304 	bic.w	r3, r3, #4
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a16      	ldr	r2, [pc, #88]	; (8004590 <TIM_OC1_SetConfig+0xdc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_OC1_SetConfig+0x8e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a15      	ldr	r2, [pc, #84]	; (8004594 <TIM_OC1_SetConfig+0xe0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d111      	bne.n	8004566 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	621a      	str	r2, [r3, #32]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	fffeff8f 	.word	0xfffeff8f
 8004590:	40010000 	.word	0x40010000
 8004594:	40010400 	.word	0x40010400

08004598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f023 0210 	bic.w	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4b2e      	ldr	r3, [pc, #184]	; (800467c <TIM_OC2_SetConfig+0xe4>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0320 	bic.w	r3, r3, #32
 80045e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a23      	ldr	r2, [pc, #140]	; (8004680 <TIM_OC2_SetConfig+0xe8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_OC2_SetConfig+0x68>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a22      	ldr	r2, [pc, #136]	; (8004684 <TIM_OC2_SetConfig+0xec>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d10d      	bne.n	800461c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a18      	ldr	r2, [pc, #96]	; (8004680 <TIM_OC2_SetConfig+0xe8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_OC2_SetConfig+0x94>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a17      	ldr	r2, [pc, #92]	; (8004684 <TIM_OC2_SetConfig+0xec>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d113      	bne.n	8004654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800463a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	feff8fff 	.word	0xfeff8fff
 8004680:	40010000 	.word	0x40010000
 8004684:	40010400 	.word	0x40010400

08004688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <TIM_OC3_SetConfig+0xe0>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a22      	ldr	r2, [pc, #136]	; (800476c <TIM_OC3_SetConfig+0xe4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_OC3_SetConfig+0x66>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a21      	ldr	r2, [pc, #132]	; (8004770 <TIM_OC3_SetConfig+0xe8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d10d      	bne.n	800470a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a17      	ldr	r2, [pc, #92]	; (800476c <TIM_OC3_SetConfig+0xe4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <TIM_OC3_SetConfig+0x92>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a16      	ldr	r2, [pc, #88]	; (8004770 <TIM_OC3_SetConfig+0xe8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d113      	bne.n	8004742 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	fffeff8f 	.word	0xfffeff8f
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400

08004774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <TIM_OC4_SetConfig+0xa4>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	031b      	lsls	r3, r3, #12
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a13      	ldr	r2, [pc, #76]	; (800481c <TIM_OC4_SetConfig+0xa8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC4_SetConfig+0x68>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a12      	ldr	r2, [pc, #72]	; (8004820 <TIM_OC4_SetConfig+0xac>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d109      	bne.n	80047f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	019b      	lsls	r3, r3, #6
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	feff8fff 	.word	0xfeff8fff
 800481c:	40010000 	.word	0x40010000
 8004820:	40010400 	.word	0x40010400

08004824 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <TIM_OC5_SetConfig+0x98>)
 8004850:	4013      	ands	r3, r2
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004864:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <TIM_OC5_SetConfig+0x9c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_OC5_SetConfig+0x5e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <TIM_OC5_SetConfig+0xa0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d109      	bne.n	8004896 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004888:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	fffeff8f 	.word	0xfffeff8f
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400

080048c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <TIM_OC6_SetConfig+0x9c>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800490a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	051b      	lsls	r3, r3, #20
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a13      	ldr	r2, [pc, #76]	; (8004968 <TIM_OC6_SetConfig+0xa0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <TIM_OC6_SetConfig+0x60>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a12      	ldr	r2, [pc, #72]	; (800496c <TIM_OC6_SetConfig+0xa4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d109      	bne.n	800493c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	029b      	lsls	r3, r3, #10
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	feff8fff 	.word	0xfeff8fff
 8004968:	40010000 	.word	0x40010000
 800496c:	40010400 	.word	0x40010400

08004970 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004988:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4b39      	ldr	r3, [pc, #228]	; (8004a7c <TIM_SlaveTimer_SetConfig+0x10c>)
 8004998:	4013      	ands	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b30      	cmp	r3, #48	; 0x30
 80049b4:	d05c      	beq.n	8004a70 <TIM_SlaveTimer_SetConfig+0x100>
 80049b6:	2b30      	cmp	r3, #48	; 0x30
 80049b8:	d806      	bhi.n	80049c8 <TIM_SlaveTimer_SetConfig+0x58>
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d058      	beq.n	8004a70 <TIM_SlaveTimer_SetConfig+0x100>
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d056      	beq.n	8004a70 <TIM_SlaveTimer_SetConfig+0x100>
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d054      	beq.n	8004a70 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80049c6:	e054      	b.n	8004a72 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80049c8:	2b50      	cmp	r3, #80	; 0x50
 80049ca:	d03d      	beq.n	8004a48 <TIM_SlaveTimer_SetConfig+0xd8>
 80049cc:	2b50      	cmp	r3, #80	; 0x50
 80049ce:	d802      	bhi.n	80049d6 <TIM_SlaveTimer_SetConfig+0x66>
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d010      	beq.n	80049f6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80049d4:	e04d      	b.n	8004a72 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80049d6:	2b60      	cmp	r3, #96	; 0x60
 80049d8:	d040      	beq.n	8004a5c <TIM_SlaveTimer_SetConfig+0xec>
 80049da:	2b70      	cmp	r3, #112	; 0x70
 80049dc:	d000      	beq.n	80049e0 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80049de:	e048      	b.n	8004a72 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68d9      	ldr	r1, [r3, #12]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f000 f9ea 	bl	8004dc8 <TIM_ETR_SetConfig>
      break;
 80049f4:	e03d      	b.n	8004a72 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d101      	bne.n	8004a02 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e038      	b.n	8004a74 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a1a      	ldr	r2, [r3, #32]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a28:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	621a      	str	r2, [r3, #32]
      break;
 8004a46:	e014      	b.n	8004a72 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f000 f887 	bl	8004b68 <TIM_TI1_ConfigInputStage>
      break;
 8004a5a:	e00a      	b.n	8004a72 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	6899      	ldr	r1, [r3, #8]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f000 f8e9 	bl	8004c40 <TIM_TI2_ConfigInputStage>
      break;
 8004a6e:	e000      	b.n	8004a72 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8004a70:	bf00      	nop
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	fffefff8 	.word	0xfffefff8

08004a80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a28      	ldr	r2, [pc, #160]	; (8004b4c <TIM_TI1_SetConfig+0xcc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01b      	beq.n	8004ae6 <TIM_TI1_SetConfig+0x66>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab4:	d017      	beq.n	8004ae6 <TIM_TI1_SetConfig+0x66>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <TIM_TI1_SetConfig+0xd0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <TIM_TI1_SetConfig+0x66>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a24      	ldr	r2, [pc, #144]	; (8004b54 <TIM_TI1_SetConfig+0xd4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00f      	beq.n	8004ae6 <TIM_TI1_SetConfig+0x66>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <TIM_TI1_SetConfig+0xd8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <TIM_TI1_SetConfig+0x66>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <TIM_TI1_SetConfig+0xdc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <TIM_TI1_SetConfig+0x66>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <TIM_TI1_SetConfig+0xe0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_TI1_SetConfig+0x66>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <TIM_TI1_SetConfig+0xe4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d101      	bne.n	8004aea <TIM_TI1_SetConfig+0x6a>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e000      	b.n	8004aec <TIM_TI1_SetConfig+0x6c>
 8004aea:	2300      	movs	r3, #0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d008      	beq.n	8004b02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e003      	b.n	8004b0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	f023 030a 	bic.w	r3, r3, #10
 8004b24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f003 030a 	and.w	r3, r3, #10
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	621a      	str	r2, [r3, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800
 8004b58:	40000c00 	.word	0x40000c00
 8004b5c:	40010400 	.word	0x40010400
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40001800 	.word	0x40001800

08004b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f023 030a 	bic.w	r3, r3, #10
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b087      	sub	sp, #28
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 0210 	bic.w	r2, r3, #16
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	031b      	lsls	r3, r3, #12
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	621a      	str	r2, [r3, #32]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f023 0210 	bic.w	r2, r3, #16
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	031b      	lsls	r3, r3, #12
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 0303 	bic.w	r3, r3, #3
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004cf0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	021b      	lsls	r3, r3, #8
 8004cf6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	621a      	str	r2, [r3, #32]
}
 8004d0c:	bf00      	nop
 8004d0e:	371c      	adds	r7, #28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	031b      	lsls	r3, r3, #12
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	031b      	lsls	r3, r3, #12
 8004d70:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b085      	sub	sp, #20
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f043 0307 	orr.w	r3, r3, #7
 8004db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	021a      	lsls	r2, r3, #8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e06d      	b.n	8004efc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d108      	bne.n	8004e66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d022      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e92:	d01d      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d018      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a16      	ldr	r2, [pc, #88]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d10c      	bne.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40001800 	.word	0x40001800

08004f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e065      	b.n	800500c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a16      	ldr	r2, [pc, #88]	; (8005018 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d115      	bne.n	8004ffa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	051b      	lsls	r3, r3, #20
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	40010000 	.word	0x40010000
 800501c:	40010400 	.word	0x40010400

08005020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e040      	b.n	80050b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc fbee 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2224      	movs	r2, #36	; 0x24
 800504c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8be 	bl	80051e0 <UART_SetConfig>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e022      	b.n	80050b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fb5c 	bl	8005734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800508a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800509a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fbe3 	bl	8005878 <UART_CheckIdleState>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d17f      	bne.n	80051d4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_UART_Transmit+0x24>
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e078      	b.n	80051d6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Transmit+0x36>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e071      	b.n	80051d6 <HAL_UART_Transmit+0x11a>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2221      	movs	r2, #33	; 0x21
 8005104:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005106:	f7fc fd83 	bl	8001c10 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	88fa      	ldrh	r2, [r7, #6]
 8005110:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	d108      	bne.n	8005138 <HAL_UART_Transmit+0x7c>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d104      	bne.n	8005138 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e003      	b.n	8005140 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005148:	e02c      	b.n	80051a4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2180      	movs	r1, #128	; 0x80
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fbd4 	bl	8005902 <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e038      	b.n	80051d6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10b      	bne.n	8005182 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	3302      	adds	r3, #2
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e007      	b.n	8005192 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	781a      	ldrb	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	3301      	adds	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1cc      	bne.n	800514a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2200      	movs	r2, #0
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fba1 	bl	8005902 <UART_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e005      	b.n	80051d6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4bb1      	ldr	r3, [pc, #708]	; (80054d4 <UART_SetConfig+0x2f4>)
 8005210:	4013      	ands	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	6939      	ldr	r1, [r7, #16]
 8005218:	430b      	orrs	r3, r1
 800521a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	430a      	orrs	r2, r1
 8005254:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a9f      	ldr	r2, [pc, #636]	; (80054d8 <UART_SetConfig+0x2f8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d121      	bne.n	80052a4 <UART_SetConfig+0xc4>
 8005260:	4b9e      	ldr	r3, [pc, #632]	; (80054dc <UART_SetConfig+0x2fc>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b03      	cmp	r3, #3
 800526c:	d816      	bhi.n	800529c <UART_SetConfig+0xbc>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x94>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005285 	.word	0x08005285
 8005278:	08005291 	.word	0x08005291
 800527c:	0800528b 	.word	0x0800528b
 8005280:	08005297 	.word	0x08005297
 8005284:	2301      	movs	r3, #1
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e151      	b.n	800552e <UART_SetConfig+0x34e>
 800528a:	2302      	movs	r3, #2
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e14e      	b.n	800552e <UART_SetConfig+0x34e>
 8005290:	2304      	movs	r3, #4
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e14b      	b.n	800552e <UART_SetConfig+0x34e>
 8005296:	2308      	movs	r3, #8
 8005298:	77fb      	strb	r3, [r7, #31]
 800529a:	e148      	b.n	800552e <UART_SetConfig+0x34e>
 800529c:	2310      	movs	r3, #16
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	bf00      	nop
 80052a2:	e144      	b.n	800552e <UART_SetConfig+0x34e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a8d      	ldr	r2, [pc, #564]	; (80054e0 <UART_SetConfig+0x300>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d134      	bne.n	8005318 <UART_SetConfig+0x138>
 80052ae:	4b8b      	ldr	r3, [pc, #556]	; (80054dc <UART_SetConfig+0x2fc>)
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	f003 030c 	and.w	r3, r3, #12
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d829      	bhi.n	8005310 <UART_SetConfig+0x130>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0xe4>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	08005311 	.word	0x08005311
 80052cc:	08005311 	.word	0x08005311
 80052d0:	08005311 	.word	0x08005311
 80052d4:	08005305 	.word	0x08005305
 80052d8:	08005311 	.word	0x08005311
 80052dc:	08005311 	.word	0x08005311
 80052e0:	08005311 	.word	0x08005311
 80052e4:	080052ff 	.word	0x080052ff
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005311 	.word	0x08005311
 80052f4:	0800530b 	.word	0x0800530b
 80052f8:	2300      	movs	r3, #0
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e117      	b.n	800552e <UART_SetConfig+0x34e>
 80052fe:	2302      	movs	r3, #2
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e114      	b.n	800552e <UART_SetConfig+0x34e>
 8005304:	2304      	movs	r3, #4
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e111      	b.n	800552e <UART_SetConfig+0x34e>
 800530a:	2308      	movs	r3, #8
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e10e      	b.n	800552e <UART_SetConfig+0x34e>
 8005310:	2310      	movs	r3, #16
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	bf00      	nop
 8005316:	e10a      	b.n	800552e <UART_SetConfig+0x34e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a71      	ldr	r2, [pc, #452]	; (80054e4 <UART_SetConfig+0x304>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d120      	bne.n	8005364 <UART_SetConfig+0x184>
 8005322:	4b6e      	ldr	r3, [pc, #440]	; (80054dc <UART_SetConfig+0x2fc>)
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800532c:	2b10      	cmp	r3, #16
 800532e:	d00f      	beq.n	8005350 <UART_SetConfig+0x170>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d802      	bhi.n	800533a <UART_SetConfig+0x15a>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <UART_SetConfig+0x164>
 8005338:	e010      	b.n	800535c <UART_SetConfig+0x17c>
 800533a:	2b20      	cmp	r3, #32
 800533c:	d005      	beq.n	800534a <UART_SetConfig+0x16a>
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d009      	beq.n	8005356 <UART_SetConfig+0x176>
 8005342:	e00b      	b.n	800535c <UART_SetConfig+0x17c>
 8005344:	2300      	movs	r3, #0
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e0f1      	b.n	800552e <UART_SetConfig+0x34e>
 800534a:	2302      	movs	r3, #2
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e0ee      	b.n	800552e <UART_SetConfig+0x34e>
 8005350:	2304      	movs	r3, #4
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e0eb      	b.n	800552e <UART_SetConfig+0x34e>
 8005356:	2308      	movs	r3, #8
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e0e8      	b.n	800552e <UART_SetConfig+0x34e>
 800535c:	2310      	movs	r3, #16
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	bf00      	nop
 8005362:	e0e4      	b.n	800552e <UART_SetConfig+0x34e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a5f      	ldr	r2, [pc, #380]	; (80054e8 <UART_SetConfig+0x308>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d120      	bne.n	80053b0 <UART_SetConfig+0x1d0>
 800536e:	4b5b      	ldr	r3, [pc, #364]	; (80054dc <UART_SetConfig+0x2fc>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005378:	2b40      	cmp	r3, #64	; 0x40
 800537a:	d00f      	beq.n	800539c <UART_SetConfig+0x1bc>
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d802      	bhi.n	8005386 <UART_SetConfig+0x1a6>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <UART_SetConfig+0x1b0>
 8005384:	e010      	b.n	80053a8 <UART_SetConfig+0x1c8>
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d005      	beq.n	8005396 <UART_SetConfig+0x1b6>
 800538a:	2bc0      	cmp	r3, #192	; 0xc0
 800538c:	d009      	beq.n	80053a2 <UART_SetConfig+0x1c2>
 800538e:	e00b      	b.n	80053a8 <UART_SetConfig+0x1c8>
 8005390:	2300      	movs	r3, #0
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e0cb      	b.n	800552e <UART_SetConfig+0x34e>
 8005396:	2302      	movs	r3, #2
 8005398:	77fb      	strb	r3, [r7, #31]
 800539a:	e0c8      	b.n	800552e <UART_SetConfig+0x34e>
 800539c:	2304      	movs	r3, #4
 800539e:	77fb      	strb	r3, [r7, #31]
 80053a0:	e0c5      	b.n	800552e <UART_SetConfig+0x34e>
 80053a2:	2308      	movs	r3, #8
 80053a4:	77fb      	strb	r3, [r7, #31]
 80053a6:	e0c2      	b.n	800552e <UART_SetConfig+0x34e>
 80053a8:	2310      	movs	r3, #16
 80053aa:	77fb      	strb	r3, [r7, #31]
 80053ac:	bf00      	nop
 80053ae:	e0be      	b.n	800552e <UART_SetConfig+0x34e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4d      	ldr	r2, [pc, #308]	; (80054ec <UART_SetConfig+0x30c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d124      	bne.n	8005404 <UART_SetConfig+0x224>
 80053ba:	4b48      	ldr	r3, [pc, #288]	; (80054dc <UART_SetConfig+0x2fc>)
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c8:	d012      	beq.n	80053f0 <UART_SetConfig+0x210>
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ce:	d802      	bhi.n	80053d6 <UART_SetConfig+0x1f6>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <UART_SetConfig+0x204>
 80053d4:	e012      	b.n	80053fc <UART_SetConfig+0x21c>
 80053d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053da:	d006      	beq.n	80053ea <UART_SetConfig+0x20a>
 80053dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e0:	d009      	beq.n	80053f6 <UART_SetConfig+0x216>
 80053e2:	e00b      	b.n	80053fc <UART_SetConfig+0x21c>
 80053e4:	2300      	movs	r3, #0
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e0a1      	b.n	800552e <UART_SetConfig+0x34e>
 80053ea:	2302      	movs	r3, #2
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e09e      	b.n	800552e <UART_SetConfig+0x34e>
 80053f0:	2304      	movs	r3, #4
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e09b      	b.n	800552e <UART_SetConfig+0x34e>
 80053f6:	2308      	movs	r3, #8
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e098      	b.n	800552e <UART_SetConfig+0x34e>
 80053fc:	2310      	movs	r3, #16
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	bf00      	nop
 8005402:	e094      	b.n	800552e <UART_SetConfig+0x34e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a39      	ldr	r2, [pc, #228]	; (80054f0 <UART_SetConfig+0x310>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d124      	bne.n	8005458 <UART_SetConfig+0x278>
 800540e:	4b33      	ldr	r3, [pc, #204]	; (80054dc <UART_SetConfig+0x2fc>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d012      	beq.n	8005444 <UART_SetConfig+0x264>
 800541e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005422:	d802      	bhi.n	800542a <UART_SetConfig+0x24a>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <UART_SetConfig+0x258>
 8005428:	e012      	b.n	8005450 <UART_SetConfig+0x270>
 800542a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542e:	d006      	beq.n	800543e <UART_SetConfig+0x25e>
 8005430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005434:	d009      	beq.n	800544a <UART_SetConfig+0x26a>
 8005436:	e00b      	b.n	8005450 <UART_SetConfig+0x270>
 8005438:	2301      	movs	r3, #1
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e077      	b.n	800552e <UART_SetConfig+0x34e>
 800543e:	2302      	movs	r3, #2
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e074      	b.n	800552e <UART_SetConfig+0x34e>
 8005444:	2304      	movs	r3, #4
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e071      	b.n	800552e <UART_SetConfig+0x34e>
 800544a:	2308      	movs	r3, #8
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e06e      	b.n	800552e <UART_SetConfig+0x34e>
 8005450:	2310      	movs	r3, #16
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	bf00      	nop
 8005456:	e06a      	b.n	800552e <UART_SetConfig+0x34e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <UART_SetConfig+0x314>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d124      	bne.n	80054ac <UART_SetConfig+0x2cc>
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <UART_SetConfig+0x2fc>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005470:	d012      	beq.n	8005498 <UART_SetConfig+0x2b8>
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005476:	d802      	bhi.n	800547e <UART_SetConfig+0x29e>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <UART_SetConfig+0x2ac>
 800547c:	e012      	b.n	80054a4 <UART_SetConfig+0x2c4>
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005482:	d006      	beq.n	8005492 <UART_SetConfig+0x2b2>
 8005484:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005488:	d009      	beq.n	800549e <UART_SetConfig+0x2be>
 800548a:	e00b      	b.n	80054a4 <UART_SetConfig+0x2c4>
 800548c:	2300      	movs	r3, #0
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e04d      	b.n	800552e <UART_SetConfig+0x34e>
 8005492:	2302      	movs	r3, #2
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e04a      	b.n	800552e <UART_SetConfig+0x34e>
 8005498:	2304      	movs	r3, #4
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e047      	b.n	800552e <UART_SetConfig+0x34e>
 800549e:	2308      	movs	r3, #8
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e044      	b.n	800552e <UART_SetConfig+0x34e>
 80054a4:	2310      	movs	r3, #16
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	bf00      	nop
 80054aa:	e040      	b.n	800552e <UART_SetConfig+0x34e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a11      	ldr	r2, [pc, #68]	; (80054f8 <UART_SetConfig+0x318>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d139      	bne.n	800552a <UART_SetConfig+0x34a>
 80054b6:	4b09      	ldr	r3, [pc, #36]	; (80054dc <UART_SetConfig+0x2fc>)
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c4:	d027      	beq.n	8005516 <UART_SetConfig+0x336>
 80054c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ca:	d817      	bhi.n	80054fc <UART_SetConfig+0x31c>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01c      	beq.n	800550a <UART_SetConfig+0x32a>
 80054d0:	e027      	b.n	8005522 <UART_SetConfig+0x342>
 80054d2:	bf00      	nop
 80054d4:	efff69f3 	.word	0xefff69f3
 80054d8:	40011000 	.word	0x40011000
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40004400 	.word	0x40004400
 80054e4:	40004800 	.word	0x40004800
 80054e8:	40004c00 	.word	0x40004c00
 80054ec:	40005000 	.word	0x40005000
 80054f0:	40011400 	.word	0x40011400
 80054f4:	40007800 	.word	0x40007800
 80054f8:	40007c00 	.word	0x40007c00
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005500:	d006      	beq.n	8005510 <UART_SetConfig+0x330>
 8005502:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005506:	d009      	beq.n	800551c <UART_SetConfig+0x33c>
 8005508:	e00b      	b.n	8005522 <UART_SetConfig+0x342>
 800550a:	2300      	movs	r3, #0
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e00e      	b.n	800552e <UART_SetConfig+0x34e>
 8005510:	2302      	movs	r3, #2
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e00b      	b.n	800552e <UART_SetConfig+0x34e>
 8005516:	2304      	movs	r3, #4
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e008      	b.n	800552e <UART_SetConfig+0x34e>
 800551c:	2308      	movs	r3, #8
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e005      	b.n	800552e <UART_SetConfig+0x34e>
 8005522:	2310      	movs	r3, #16
 8005524:	77fb      	strb	r3, [r7, #31]
 8005526:	bf00      	nop
 8005528:	e001      	b.n	800552e <UART_SetConfig+0x34e>
 800552a:	2310      	movs	r3, #16
 800552c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005536:	d17f      	bne.n	8005638 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005538:	7ffb      	ldrb	r3, [r7, #31]
 800553a:	2b08      	cmp	r3, #8
 800553c:	d85c      	bhi.n	80055f8 <UART_SetConfig+0x418>
 800553e:	a201      	add	r2, pc, #4	; (adr r2, 8005544 <UART_SetConfig+0x364>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	08005569 	.word	0x08005569
 8005548:	08005589 	.word	0x08005589
 800554c:	080055a9 	.word	0x080055a9
 8005550:	080055f9 	.word	0x080055f9
 8005554:	080055c1 	.word	0x080055c1
 8005558:	080055f9 	.word	0x080055f9
 800555c:	080055f9 	.word	0x080055f9
 8005560:	080055f9 	.word	0x080055f9
 8005564:	080055e1 	.word	0x080055e1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005568:	f7fd feac 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 800556c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	005a      	lsls	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	441a      	add	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005582:	b29b      	uxth	r3, r3
 8005584:	61bb      	str	r3, [r7, #24]
        break;
 8005586:	e03a      	b.n	80055fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fd feb0 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 800558c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	005a      	lsls	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	61bb      	str	r3, [r7, #24]
        break;
 80055a6:	e02a      	b.n	80055fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	085a      	lsrs	r2, r3, #1
 80055ae:	4b5f      	ldr	r3, [pc, #380]	; (800572c <UART_SetConfig+0x54c>)
 80055b0:	4413      	add	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6852      	ldr	r2, [r2, #4]
 80055b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	61bb      	str	r3, [r7, #24]
        break;
 80055be:	e01e      	b.n	80055fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055c0:	f7fd fdc2 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80055c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	005a      	lsls	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	085b      	lsrs	r3, r3, #1
 80055d0:	441a      	add	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	b29b      	uxth	r3, r3
 80055dc:	61bb      	str	r3, [r7, #24]
        break;
 80055de:	e00e      	b.n	80055fe <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	61bb      	str	r3, [r7, #24]
        break;
 80055f6:	e002      	b.n	80055fe <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
        break;
 80055fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b0f      	cmp	r3, #15
 8005602:	d916      	bls.n	8005632 <UART_SetConfig+0x452>
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560a:	d212      	bcs.n	8005632 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f023 030f 	bic.w	r3, r3, #15
 8005614:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	b29b      	uxth	r3, r3
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	b29a      	uxth	r2, r3
 8005622:	897b      	ldrh	r3, [r7, #10]
 8005624:	4313      	orrs	r3, r2
 8005626:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	897a      	ldrh	r2, [r7, #10]
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	e070      	b.n	8005714 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	75fb      	strb	r3, [r7, #23]
 8005636:	e06d      	b.n	8005714 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005638:	7ffb      	ldrb	r3, [r7, #31]
 800563a:	2b08      	cmp	r3, #8
 800563c:	d859      	bhi.n	80056f2 <UART_SetConfig+0x512>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0x464>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005669 	.word	0x08005669
 8005648:	08005687 	.word	0x08005687
 800564c:	080056a5 	.word	0x080056a5
 8005650:	080056f3 	.word	0x080056f3
 8005654:	080056bd 	.word	0x080056bd
 8005658:	080056f3 	.word	0x080056f3
 800565c:	080056f3 	.word	0x080056f3
 8005660:	080056f3 	.word	0x080056f3
 8005664:	080056db 	.word	0x080056db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005668:	f7fd fe2c 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 800566c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	085a      	lsrs	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	441a      	add	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005680:	b29b      	uxth	r3, r3
 8005682:	61bb      	str	r3, [r7, #24]
        break;
 8005684:	e038      	b.n	80056f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005686:	f7fd fe31 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 800568a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	085a      	lsrs	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	441a      	add	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	b29b      	uxth	r3, r3
 80056a0:	61bb      	str	r3, [r7, #24]
        break;
 80056a2:	e029      	b.n	80056f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	085a      	lsrs	r2, r3, #1
 80056aa:	4b21      	ldr	r3, [pc, #132]	; (8005730 <UART_SetConfig+0x550>)
 80056ac:	4413      	add	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6852      	ldr	r2, [r2, #4]
 80056b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	61bb      	str	r3, [r7, #24]
        break;
 80056ba:	e01d      	b.n	80056f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056bc:	f7fd fd44 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 80056c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	085a      	lsrs	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	441a      	add	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	61bb      	str	r3, [r7, #24]
        break;
 80056d8:	e00e      	b.n	80056f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	61bb      	str	r3, [r7, #24]
        break;
 80056f0:	e002      	b.n	80056f8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
        break;
 80056f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d908      	bls.n	8005710 <UART_SetConfig+0x530>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	d204      	bcs.n	8005710 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	e001      	b.n	8005714 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005720:	7dfb      	ldrb	r3, [r7, #23]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	01e84800 	.word	0x01e84800
 8005730:	00f42400 	.word	0x00f42400

08005734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01a      	beq.n	800584a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005832:	d10a      	bne.n	800584a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005886:	f7fc f9c3 	bl	8001c10 <HAL_GetTick>
 800588a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	d10e      	bne.n	80058b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f82a 	bl	8005902 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e020      	b.n	80058fa <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d10e      	bne.n	80058e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f814 	bl	8005902 <UART_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e00a      	b.n	80058fa <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005912:	e05d      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d059      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591c:	f7fc f978 	bl	8001c10 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <UART_WaitOnFlagUntilTimeout+0x30>
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d11b      	bne.n	800596a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005940:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0201 	bic.w	r2, r2, #1
 8005950:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e042      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02b      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005986:	d123      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005990:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059a0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e00f      	b.n	80059f0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	4013      	ands	r3, r2
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	79fb      	ldrb	r3, [r7, #7]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d092      	beq.n	8005914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <__errno>:
 80059f8:	4b01      	ldr	r3, [pc, #4]	; (8005a00 <__errno+0x8>)
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <__libc_init_array>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4e0d      	ldr	r6, [pc, #52]	; (8005a3c <__libc_init_array+0x38>)
 8005a08:	4c0d      	ldr	r4, [pc, #52]	; (8005a40 <__libc_init_array+0x3c>)
 8005a0a:	1ba4      	subs	r4, r4, r6
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	2500      	movs	r5, #0
 8005a10:	42a5      	cmp	r5, r4
 8005a12:	d109      	bne.n	8005a28 <__libc_init_array+0x24>
 8005a14:	4e0b      	ldr	r6, [pc, #44]	; (8005a44 <__libc_init_array+0x40>)
 8005a16:	4c0c      	ldr	r4, [pc, #48]	; (8005a48 <__libc_init_array+0x44>)
 8005a18:	f000 fc26 	bl	8006268 <_init>
 8005a1c:	1ba4      	subs	r4, r4, r6
 8005a1e:	10a4      	asrs	r4, r4, #2
 8005a20:	2500      	movs	r5, #0
 8005a22:	42a5      	cmp	r5, r4
 8005a24:	d105      	bne.n	8005a32 <__libc_init_array+0x2e>
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a2c:	4798      	blx	r3
 8005a2e:	3501      	adds	r5, #1
 8005a30:	e7ee      	b.n	8005a10 <__libc_init_array+0xc>
 8005a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a36:	4798      	blx	r3
 8005a38:	3501      	adds	r5, #1
 8005a3a:	e7f2      	b.n	8005a22 <__libc_init_array+0x1e>
 8005a3c:	080062e0 	.word	0x080062e0
 8005a40:	080062e0 	.word	0x080062e0
 8005a44:	080062e0 	.word	0x080062e0
 8005a48:	080062e4 	.word	0x080062e4

08005a4c <memset>:
 8005a4c:	4402      	add	r2, r0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d100      	bne.n	8005a56 <memset+0xa>
 8005a54:	4770      	bx	lr
 8005a56:	f803 1b01 	strb.w	r1, [r3], #1
 8005a5a:	e7f9      	b.n	8005a50 <memset+0x4>

08005a5c <siprintf>:
 8005a5c:	b40e      	push	{r1, r2, r3}
 8005a5e:	b500      	push	{lr}
 8005a60:	b09c      	sub	sp, #112	; 0x70
 8005a62:	ab1d      	add	r3, sp, #116	; 0x74
 8005a64:	9002      	str	r0, [sp, #8]
 8005a66:	9006      	str	r0, [sp, #24]
 8005a68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a6c:	4809      	ldr	r0, [pc, #36]	; (8005a94 <siprintf+0x38>)
 8005a6e:	9107      	str	r1, [sp, #28]
 8005a70:	9104      	str	r1, [sp, #16]
 8005a72:	4909      	ldr	r1, [pc, #36]	; (8005a98 <siprintf+0x3c>)
 8005a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a78:	9105      	str	r1, [sp, #20]
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	a902      	add	r1, sp, #8
 8005a80:	f000 f866 	bl	8005b50 <_svfiprintf_r>
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	b01c      	add	sp, #112	; 0x70
 8005a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a90:	b003      	add	sp, #12
 8005a92:	4770      	bx	lr
 8005a94:	2000000c 	.word	0x2000000c
 8005a98:	ffff0208 	.word	0xffff0208

08005a9c <__ssputs_r>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	688e      	ldr	r6, [r1, #8]
 8005aa2:	429e      	cmp	r6, r3
 8005aa4:	4682      	mov	sl, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	4690      	mov	r8, r2
 8005aaa:	4699      	mov	r9, r3
 8005aac:	d837      	bhi.n	8005b1e <__ssputs_r+0x82>
 8005aae:	898a      	ldrh	r2, [r1, #12]
 8005ab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ab4:	d031      	beq.n	8005b1a <__ssputs_r+0x7e>
 8005ab6:	6825      	ldr	r5, [r4, #0]
 8005ab8:	6909      	ldr	r1, [r1, #16]
 8005aba:	1a6f      	subs	r7, r5, r1
 8005abc:	6965      	ldr	r5, [r4, #20]
 8005abe:	2302      	movs	r3, #2
 8005ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ac4:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ac8:	f109 0301 	add.w	r3, r9, #1
 8005acc:	443b      	add	r3, r7
 8005ace:	429d      	cmp	r5, r3
 8005ad0:	bf38      	it	cc
 8005ad2:	461d      	movcc	r5, r3
 8005ad4:	0553      	lsls	r3, r2, #21
 8005ad6:	d530      	bpl.n	8005b3a <__ssputs_r+0x9e>
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f000 fb2b 	bl	8006134 <_malloc_r>
 8005ade:	4606      	mov	r6, r0
 8005ae0:	b950      	cbnz	r0, 8005af8 <__ssputs_r+0x5c>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	f8ca 3000 	str.w	r3, [sl]
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aee:	81a3      	strh	r3, [r4, #12]
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af8:	463a      	mov	r2, r7
 8005afa:	6921      	ldr	r1, [r4, #16]
 8005afc:	f000 faa8 	bl	8006050 <memcpy>
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0a:	81a3      	strh	r3, [r4, #12]
 8005b0c:	6126      	str	r6, [r4, #16]
 8005b0e:	6165      	str	r5, [r4, #20]
 8005b10:	443e      	add	r6, r7
 8005b12:	1bed      	subs	r5, r5, r7
 8005b14:	6026      	str	r6, [r4, #0]
 8005b16:	60a5      	str	r5, [r4, #8]
 8005b18:	464e      	mov	r6, r9
 8005b1a:	454e      	cmp	r6, r9
 8005b1c:	d900      	bls.n	8005b20 <__ssputs_r+0x84>
 8005b1e:	464e      	mov	r6, r9
 8005b20:	4632      	mov	r2, r6
 8005b22:	4641      	mov	r1, r8
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	f000 fa9e 	bl	8006066 <memmove>
 8005b2a:	68a3      	ldr	r3, [r4, #8]
 8005b2c:	1b9b      	subs	r3, r3, r6
 8005b2e:	60a3      	str	r3, [r4, #8]
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	441e      	add	r6, r3
 8005b34:	6026      	str	r6, [r4, #0]
 8005b36:	2000      	movs	r0, #0
 8005b38:	e7dc      	b.n	8005af4 <__ssputs_r+0x58>
 8005b3a:	462a      	mov	r2, r5
 8005b3c:	f000 fb54 	bl	80061e8 <_realloc_r>
 8005b40:	4606      	mov	r6, r0
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d1e2      	bne.n	8005b0c <__ssputs_r+0x70>
 8005b46:	6921      	ldr	r1, [r4, #16]
 8005b48:	4650      	mov	r0, sl
 8005b4a:	f000 faa5 	bl	8006098 <_free_r>
 8005b4e:	e7c8      	b.n	8005ae2 <__ssputs_r+0x46>

08005b50 <_svfiprintf_r>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	461d      	mov	r5, r3
 8005b56:	898b      	ldrh	r3, [r1, #12]
 8005b58:	061f      	lsls	r7, r3, #24
 8005b5a:	b09d      	sub	sp, #116	; 0x74
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	4616      	mov	r6, r2
 8005b62:	d50f      	bpl.n	8005b84 <_svfiprintf_r+0x34>
 8005b64:	690b      	ldr	r3, [r1, #16]
 8005b66:	b96b      	cbnz	r3, 8005b84 <_svfiprintf_r+0x34>
 8005b68:	2140      	movs	r1, #64	; 0x40
 8005b6a:	f000 fae3 	bl	8006134 <_malloc_r>
 8005b6e:	6020      	str	r0, [r4, #0]
 8005b70:	6120      	str	r0, [r4, #16]
 8005b72:	b928      	cbnz	r0, 8005b80 <_svfiprintf_r+0x30>
 8005b74:	230c      	movs	r3, #12
 8005b76:	f8c8 3000 	str.w	r3, [r8]
 8005b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7e:	e0c8      	b.n	8005d12 <_svfiprintf_r+0x1c2>
 8005b80:	2340      	movs	r3, #64	; 0x40
 8005b82:	6163      	str	r3, [r4, #20]
 8005b84:	2300      	movs	r3, #0
 8005b86:	9309      	str	r3, [sp, #36]	; 0x24
 8005b88:	2320      	movs	r3, #32
 8005b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b8e:	2330      	movs	r3, #48	; 0x30
 8005b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b94:	9503      	str	r5, [sp, #12]
 8005b96:	f04f 0b01 	mov.w	fp, #1
 8005b9a:	4637      	mov	r7, r6
 8005b9c:	463d      	mov	r5, r7
 8005b9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ba2:	b10b      	cbz	r3, 8005ba8 <_svfiprintf_r+0x58>
 8005ba4:	2b25      	cmp	r3, #37	; 0x25
 8005ba6:	d13e      	bne.n	8005c26 <_svfiprintf_r+0xd6>
 8005ba8:	ebb7 0a06 	subs.w	sl, r7, r6
 8005bac:	d00b      	beq.n	8005bc6 <_svfiprintf_r+0x76>
 8005bae:	4653      	mov	r3, sl
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	f7ff ff71 	bl	8005a9c <__ssputs_r>
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f000 80a4 	beq.w	8005d08 <_svfiprintf_r+0x1b8>
 8005bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc2:	4453      	add	r3, sl
 8005bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc6:	783b      	ldrb	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 809d 	beq.w	8005d08 <_svfiprintf_r+0x1b8>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	9307      	str	r3, [sp, #28]
 8005bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005be0:	931a      	str	r3, [sp, #104]	; 0x68
 8005be2:	462f      	mov	r7, r5
 8005be4:	2205      	movs	r2, #5
 8005be6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005bea:	4850      	ldr	r0, [pc, #320]	; (8005d2c <_svfiprintf_r+0x1dc>)
 8005bec:	f7fa fb30 	bl	8000250 <memchr>
 8005bf0:	9b04      	ldr	r3, [sp, #16]
 8005bf2:	b9d0      	cbnz	r0, 8005c2a <_svfiprintf_r+0xda>
 8005bf4:	06d9      	lsls	r1, r3, #27
 8005bf6:	bf44      	itt	mi
 8005bf8:	2220      	movmi	r2, #32
 8005bfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bfe:	071a      	lsls	r2, r3, #28
 8005c00:	bf44      	itt	mi
 8005c02:	222b      	movmi	r2, #43	; 0x2b
 8005c04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c08:	782a      	ldrb	r2, [r5, #0]
 8005c0a:	2a2a      	cmp	r2, #42	; 0x2a
 8005c0c:	d015      	beq.n	8005c3a <_svfiprintf_r+0xea>
 8005c0e:	9a07      	ldr	r2, [sp, #28]
 8005c10:	462f      	mov	r7, r5
 8005c12:	2000      	movs	r0, #0
 8005c14:	250a      	movs	r5, #10
 8005c16:	4639      	mov	r1, r7
 8005c18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c1c:	3b30      	subs	r3, #48	; 0x30
 8005c1e:	2b09      	cmp	r3, #9
 8005c20:	d94d      	bls.n	8005cbe <_svfiprintf_r+0x16e>
 8005c22:	b1b8      	cbz	r0, 8005c54 <_svfiprintf_r+0x104>
 8005c24:	e00f      	b.n	8005c46 <_svfiprintf_r+0xf6>
 8005c26:	462f      	mov	r7, r5
 8005c28:	e7b8      	b.n	8005b9c <_svfiprintf_r+0x4c>
 8005c2a:	4a40      	ldr	r2, [pc, #256]	; (8005d2c <_svfiprintf_r+0x1dc>)
 8005c2c:	1a80      	subs	r0, r0, r2
 8005c2e:	fa0b f000 	lsl.w	r0, fp, r0
 8005c32:	4318      	orrs	r0, r3
 8005c34:	9004      	str	r0, [sp, #16]
 8005c36:	463d      	mov	r5, r7
 8005c38:	e7d3      	b.n	8005be2 <_svfiprintf_r+0x92>
 8005c3a:	9a03      	ldr	r2, [sp, #12]
 8005c3c:	1d11      	adds	r1, r2, #4
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	9103      	str	r1, [sp, #12]
 8005c42:	2a00      	cmp	r2, #0
 8005c44:	db01      	blt.n	8005c4a <_svfiprintf_r+0xfa>
 8005c46:	9207      	str	r2, [sp, #28]
 8005c48:	e004      	b.n	8005c54 <_svfiprintf_r+0x104>
 8005c4a:	4252      	negs	r2, r2
 8005c4c:	f043 0302 	orr.w	r3, r3, #2
 8005c50:	9207      	str	r2, [sp, #28]
 8005c52:	9304      	str	r3, [sp, #16]
 8005c54:	783b      	ldrb	r3, [r7, #0]
 8005c56:	2b2e      	cmp	r3, #46	; 0x2e
 8005c58:	d10c      	bne.n	8005c74 <_svfiprintf_r+0x124>
 8005c5a:	787b      	ldrb	r3, [r7, #1]
 8005c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c5e:	d133      	bne.n	8005cc8 <_svfiprintf_r+0x178>
 8005c60:	9b03      	ldr	r3, [sp, #12]
 8005c62:	1d1a      	adds	r2, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	9203      	str	r2, [sp, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bfb8      	it	lt
 8005c6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c70:	3702      	adds	r7, #2
 8005c72:	9305      	str	r3, [sp, #20]
 8005c74:	4d2e      	ldr	r5, [pc, #184]	; (8005d30 <_svfiprintf_r+0x1e0>)
 8005c76:	7839      	ldrb	r1, [r7, #0]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f7fa fae8 	bl	8000250 <memchr>
 8005c80:	b138      	cbz	r0, 8005c92 <_svfiprintf_r+0x142>
 8005c82:	2340      	movs	r3, #64	; 0x40
 8005c84:	1b40      	subs	r0, r0, r5
 8005c86:	fa03 f000 	lsl.w	r0, r3, r0
 8005c8a:	9b04      	ldr	r3, [sp, #16]
 8005c8c:	4303      	orrs	r3, r0
 8005c8e:	3701      	adds	r7, #1
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	7839      	ldrb	r1, [r7, #0]
 8005c94:	4827      	ldr	r0, [pc, #156]	; (8005d34 <_svfiprintf_r+0x1e4>)
 8005c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c9a:	2206      	movs	r2, #6
 8005c9c:	1c7e      	adds	r6, r7, #1
 8005c9e:	f7fa fad7 	bl	8000250 <memchr>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d038      	beq.n	8005d18 <_svfiprintf_r+0x1c8>
 8005ca6:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <_svfiprintf_r+0x1e8>)
 8005ca8:	bb13      	cbnz	r3, 8005cf0 <_svfiprintf_r+0x1a0>
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	3307      	adds	r3, #7
 8005cae:	f023 0307 	bic.w	r3, r3, #7
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	9303      	str	r3, [sp, #12]
 8005cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb8:	444b      	add	r3, r9
 8005cba:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbc:	e76d      	b.n	8005b9a <_svfiprintf_r+0x4a>
 8005cbe:	fb05 3202 	mla	r2, r5, r2, r3
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	460f      	mov	r7, r1
 8005cc6:	e7a6      	b.n	8005c16 <_svfiprintf_r+0xc6>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	3701      	adds	r7, #1
 8005ccc:	9305      	str	r3, [sp, #20]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	250a      	movs	r5, #10
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cd8:	3a30      	subs	r2, #48	; 0x30
 8005cda:	2a09      	cmp	r2, #9
 8005cdc:	d903      	bls.n	8005ce6 <_svfiprintf_r+0x196>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0c8      	beq.n	8005c74 <_svfiprintf_r+0x124>
 8005ce2:	9105      	str	r1, [sp, #20]
 8005ce4:	e7c6      	b.n	8005c74 <_svfiprintf_r+0x124>
 8005ce6:	fb05 2101 	mla	r1, r5, r1, r2
 8005cea:	2301      	movs	r3, #1
 8005cec:	4607      	mov	r7, r0
 8005cee:	e7f0      	b.n	8005cd2 <_svfiprintf_r+0x182>
 8005cf0:	ab03      	add	r3, sp, #12
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <_svfiprintf_r+0x1ec>)
 8005cf8:	a904      	add	r1, sp, #16
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	f3af 8000 	nop.w
 8005d00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d04:	4681      	mov	r9, r0
 8005d06:	d1d6      	bne.n	8005cb6 <_svfiprintf_r+0x166>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	065b      	lsls	r3, r3, #25
 8005d0c:	f53f af35 	bmi.w	8005b7a <_svfiprintf_r+0x2a>
 8005d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d12:	b01d      	add	sp, #116	; 0x74
 8005d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d18:	ab03      	add	r3, sp, #12
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <_svfiprintf_r+0x1ec>)
 8005d20:	a904      	add	r1, sp, #16
 8005d22:	4640      	mov	r0, r8
 8005d24:	f000 f882 	bl	8005e2c <_printf_i>
 8005d28:	e7ea      	b.n	8005d00 <_svfiprintf_r+0x1b0>
 8005d2a:	bf00      	nop
 8005d2c:	080062a4 	.word	0x080062a4
 8005d30:	080062aa 	.word	0x080062aa
 8005d34:	080062ae 	.word	0x080062ae
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	08005a9d 	.word	0x08005a9d

08005d40 <_printf_common>:
 8005d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d44:	4691      	mov	r9, r2
 8005d46:	461f      	mov	r7, r3
 8005d48:	688a      	ldr	r2, [r1, #8]
 8005d4a:	690b      	ldr	r3, [r1, #16]
 8005d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d50:	4293      	cmp	r3, r2
 8005d52:	bfb8      	it	lt
 8005d54:	4613      	movlt	r3, r2
 8005d56:	f8c9 3000 	str.w	r3, [r9]
 8005d5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d5e:	4606      	mov	r6, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	b112      	cbz	r2, 8005d6a <_printf_common+0x2a>
 8005d64:	3301      	adds	r3, #1
 8005d66:	f8c9 3000 	str.w	r3, [r9]
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	0699      	lsls	r1, r3, #26
 8005d6e:	bf42      	ittt	mi
 8005d70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d74:	3302      	addmi	r3, #2
 8005d76:	f8c9 3000 	strmi.w	r3, [r9]
 8005d7a:	6825      	ldr	r5, [r4, #0]
 8005d7c:	f015 0506 	ands.w	r5, r5, #6
 8005d80:	d107      	bne.n	8005d92 <_printf_common+0x52>
 8005d82:	f104 0a19 	add.w	sl, r4, #25
 8005d86:	68e3      	ldr	r3, [r4, #12]
 8005d88:	f8d9 2000 	ldr.w	r2, [r9]
 8005d8c:	1a9b      	subs	r3, r3, r2
 8005d8e:	42ab      	cmp	r3, r5
 8005d90:	dc28      	bgt.n	8005de4 <_printf_common+0xa4>
 8005d92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	3300      	adds	r3, #0
 8005d9a:	bf18      	it	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	0692      	lsls	r2, r2, #26
 8005da0:	d42d      	bmi.n	8005dfe <_printf_common+0xbe>
 8005da2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005da6:	4639      	mov	r1, r7
 8005da8:	4630      	mov	r0, r6
 8005daa:	47c0      	blx	r8
 8005dac:	3001      	adds	r0, #1
 8005dae:	d020      	beq.n	8005df2 <_printf_common+0xb2>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	68e5      	ldr	r5, [r4, #12]
 8005db4:	f8d9 2000 	ldr.w	r2, [r9]
 8005db8:	f003 0306 	and.w	r3, r3, #6
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	bf08      	it	eq
 8005dc0:	1aad      	subeq	r5, r5, r2
 8005dc2:	68a3      	ldr	r3, [r4, #8]
 8005dc4:	6922      	ldr	r2, [r4, #16]
 8005dc6:	bf0c      	ite	eq
 8005dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dcc:	2500      	movne	r5, #0
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	bfc4      	itt	gt
 8005dd2:	1a9b      	subgt	r3, r3, r2
 8005dd4:	18ed      	addgt	r5, r5, r3
 8005dd6:	f04f 0900 	mov.w	r9, #0
 8005dda:	341a      	adds	r4, #26
 8005ddc:	454d      	cmp	r5, r9
 8005dde:	d11a      	bne.n	8005e16 <_printf_common+0xd6>
 8005de0:	2000      	movs	r0, #0
 8005de2:	e008      	b.n	8005df6 <_printf_common+0xb6>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4652      	mov	r2, sl
 8005de8:	4639      	mov	r1, r7
 8005dea:	4630      	mov	r0, r6
 8005dec:	47c0      	blx	r8
 8005dee:	3001      	adds	r0, #1
 8005df0:	d103      	bne.n	8005dfa <_printf_common+0xba>
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295
 8005df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfa:	3501      	adds	r5, #1
 8005dfc:	e7c3      	b.n	8005d86 <_printf_common+0x46>
 8005dfe:	18e1      	adds	r1, r4, r3
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	2030      	movs	r0, #48	; 0x30
 8005e04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e08:	4422      	add	r2, r4
 8005e0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e12:	3302      	adds	r3, #2
 8005e14:	e7c5      	b.n	8005da2 <_printf_common+0x62>
 8005e16:	2301      	movs	r3, #1
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	47c0      	blx	r8
 8005e20:	3001      	adds	r0, #1
 8005e22:	d0e6      	beq.n	8005df2 <_printf_common+0xb2>
 8005e24:	f109 0901 	add.w	r9, r9, #1
 8005e28:	e7d8      	b.n	8005ddc <_printf_common+0x9c>
	...

08005e2c <_printf_i>:
 8005e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e34:	460c      	mov	r4, r1
 8005e36:	7e09      	ldrb	r1, [r1, #24]
 8005e38:	b085      	sub	sp, #20
 8005e3a:	296e      	cmp	r1, #110	; 0x6e
 8005e3c:	4617      	mov	r7, r2
 8005e3e:	4606      	mov	r6, r0
 8005e40:	4698      	mov	r8, r3
 8005e42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e44:	f000 80b3 	beq.w	8005fae <_printf_i+0x182>
 8005e48:	d822      	bhi.n	8005e90 <_printf_i+0x64>
 8005e4a:	2963      	cmp	r1, #99	; 0x63
 8005e4c:	d036      	beq.n	8005ebc <_printf_i+0x90>
 8005e4e:	d80a      	bhi.n	8005e66 <_printf_i+0x3a>
 8005e50:	2900      	cmp	r1, #0
 8005e52:	f000 80b9 	beq.w	8005fc8 <_printf_i+0x19c>
 8005e56:	2958      	cmp	r1, #88	; 0x58
 8005e58:	f000 8083 	beq.w	8005f62 <_printf_i+0x136>
 8005e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e64:	e032      	b.n	8005ecc <_printf_i+0xa0>
 8005e66:	2964      	cmp	r1, #100	; 0x64
 8005e68:	d001      	beq.n	8005e6e <_printf_i+0x42>
 8005e6a:	2969      	cmp	r1, #105	; 0x69
 8005e6c:	d1f6      	bne.n	8005e5c <_printf_i+0x30>
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	6813      	ldr	r3, [r2, #0]
 8005e72:	0605      	lsls	r5, r0, #24
 8005e74:	f103 0104 	add.w	r1, r3, #4
 8005e78:	d52a      	bpl.n	8005ed0 <_printf_i+0xa4>
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6011      	str	r1, [r2, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da03      	bge.n	8005e8a <_printf_i+0x5e>
 8005e82:	222d      	movs	r2, #45	; 0x2d
 8005e84:	425b      	negs	r3, r3
 8005e86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e8a:	486f      	ldr	r0, [pc, #444]	; (8006048 <_printf_i+0x21c>)
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	e039      	b.n	8005f04 <_printf_i+0xd8>
 8005e90:	2973      	cmp	r1, #115	; 0x73
 8005e92:	f000 809d 	beq.w	8005fd0 <_printf_i+0x1a4>
 8005e96:	d808      	bhi.n	8005eaa <_printf_i+0x7e>
 8005e98:	296f      	cmp	r1, #111	; 0x6f
 8005e9a:	d020      	beq.n	8005ede <_printf_i+0xb2>
 8005e9c:	2970      	cmp	r1, #112	; 0x70
 8005e9e:	d1dd      	bne.n	8005e5c <_printf_i+0x30>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	f043 0320 	orr.w	r3, r3, #32
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	e003      	b.n	8005eb2 <_printf_i+0x86>
 8005eaa:	2975      	cmp	r1, #117	; 0x75
 8005eac:	d017      	beq.n	8005ede <_printf_i+0xb2>
 8005eae:	2978      	cmp	r1, #120	; 0x78
 8005eb0:	d1d4      	bne.n	8005e5c <_printf_i+0x30>
 8005eb2:	2378      	movs	r3, #120	; 0x78
 8005eb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eb8:	4864      	ldr	r0, [pc, #400]	; (800604c <_printf_i+0x220>)
 8005eba:	e055      	b.n	8005f68 <_printf_i+0x13c>
 8005ebc:	6813      	ldr	r3, [r2, #0]
 8005ebe:	1d19      	adds	r1, r3, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6011      	str	r1, [r2, #0]
 8005ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e08c      	b.n	8005fea <_printf_i+0x1be>
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6011      	str	r1, [r2, #0]
 8005ed4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ed8:	bf18      	it	ne
 8005eda:	b21b      	sxthne	r3, r3
 8005edc:	e7cf      	b.n	8005e7e <_printf_i+0x52>
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	1d18      	adds	r0, r3, #4
 8005ee4:	6010      	str	r0, [r2, #0]
 8005ee6:	0628      	lsls	r0, r5, #24
 8005ee8:	d501      	bpl.n	8005eee <_printf_i+0xc2>
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	e002      	b.n	8005ef4 <_printf_i+0xc8>
 8005eee:	0668      	lsls	r0, r5, #25
 8005ef0:	d5fb      	bpl.n	8005eea <_printf_i+0xbe>
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	4854      	ldr	r0, [pc, #336]	; (8006048 <_printf_i+0x21c>)
 8005ef6:	296f      	cmp	r1, #111	; 0x6f
 8005ef8:	bf14      	ite	ne
 8005efa:	220a      	movne	r2, #10
 8005efc:	2208      	moveq	r2, #8
 8005efe:	2100      	movs	r1, #0
 8005f00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f04:	6865      	ldr	r5, [r4, #4]
 8005f06:	60a5      	str	r5, [r4, #8]
 8005f08:	2d00      	cmp	r5, #0
 8005f0a:	f2c0 8095 	blt.w	8006038 <_printf_i+0x20c>
 8005f0e:	6821      	ldr	r1, [r4, #0]
 8005f10:	f021 0104 	bic.w	r1, r1, #4
 8005f14:	6021      	str	r1, [r4, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d13d      	bne.n	8005f96 <_printf_i+0x16a>
 8005f1a:	2d00      	cmp	r5, #0
 8005f1c:	f040 808e 	bne.w	800603c <_printf_i+0x210>
 8005f20:	4665      	mov	r5, ip
 8005f22:	2a08      	cmp	r2, #8
 8005f24:	d10b      	bne.n	8005f3e <_printf_i+0x112>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	07db      	lsls	r3, r3, #31
 8005f2a:	d508      	bpl.n	8005f3e <_printf_i+0x112>
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	6862      	ldr	r2, [r4, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	bfde      	ittt	le
 8005f34:	2330      	movle	r3, #48	; 0x30
 8005f36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f3e:	ebac 0305 	sub.w	r3, ip, r5
 8005f42:	6123      	str	r3, [r4, #16]
 8005f44:	f8cd 8000 	str.w	r8, [sp]
 8005f48:	463b      	mov	r3, r7
 8005f4a:	aa03      	add	r2, sp, #12
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f7ff fef6 	bl	8005d40 <_printf_common>
 8005f54:	3001      	adds	r0, #1
 8005f56:	d14d      	bne.n	8005ff4 <_printf_i+0x1c8>
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	b005      	add	sp, #20
 8005f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f62:	4839      	ldr	r0, [pc, #228]	; (8006048 <_printf_i+0x21c>)
 8005f64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f68:	6813      	ldr	r3, [r2, #0]
 8005f6a:	6821      	ldr	r1, [r4, #0]
 8005f6c:	1d1d      	adds	r5, r3, #4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6015      	str	r5, [r2, #0]
 8005f72:	060a      	lsls	r2, r1, #24
 8005f74:	d50b      	bpl.n	8005f8e <_printf_i+0x162>
 8005f76:	07ca      	lsls	r2, r1, #31
 8005f78:	bf44      	itt	mi
 8005f7a:	f041 0120 	orrmi.w	r1, r1, #32
 8005f7e:	6021      	strmi	r1, [r4, #0]
 8005f80:	b91b      	cbnz	r3, 8005f8a <_printf_i+0x15e>
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	f022 0220 	bic.w	r2, r2, #32
 8005f88:	6022      	str	r2, [r4, #0]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	e7b7      	b.n	8005efe <_printf_i+0xd2>
 8005f8e:	064d      	lsls	r5, r1, #25
 8005f90:	bf48      	it	mi
 8005f92:	b29b      	uxthmi	r3, r3
 8005f94:	e7ef      	b.n	8005f76 <_printf_i+0x14a>
 8005f96:	4665      	mov	r5, ip
 8005f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f9c:	fb02 3311 	mls	r3, r2, r1, r3
 8005fa0:	5cc3      	ldrb	r3, [r0, r3]
 8005fa2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	d1f5      	bne.n	8005f98 <_printf_i+0x16c>
 8005fac:	e7b9      	b.n	8005f22 <_printf_i+0xf6>
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	6825      	ldr	r5, [r4, #0]
 8005fb2:	6961      	ldr	r1, [r4, #20]
 8005fb4:	1d18      	adds	r0, r3, #4
 8005fb6:	6010      	str	r0, [r2, #0]
 8005fb8:	0628      	lsls	r0, r5, #24
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	d501      	bpl.n	8005fc2 <_printf_i+0x196>
 8005fbe:	6019      	str	r1, [r3, #0]
 8005fc0:	e002      	b.n	8005fc8 <_printf_i+0x19c>
 8005fc2:	066a      	lsls	r2, r5, #25
 8005fc4:	d5fb      	bpl.n	8005fbe <_printf_i+0x192>
 8005fc6:	8019      	strh	r1, [r3, #0]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	4665      	mov	r5, ip
 8005fce:	e7b9      	b.n	8005f44 <_printf_i+0x118>
 8005fd0:	6813      	ldr	r3, [r2, #0]
 8005fd2:	1d19      	adds	r1, r3, #4
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	681d      	ldr	r5, [r3, #0]
 8005fd8:	6862      	ldr	r2, [r4, #4]
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f7fa f937 	bl	8000250 <memchr>
 8005fe2:	b108      	cbz	r0, 8005fe8 <_printf_i+0x1bc>
 8005fe4:	1b40      	subs	r0, r0, r5
 8005fe6:	6060      	str	r0, [r4, #4]
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	6123      	str	r3, [r4, #16]
 8005fec:	2300      	movs	r3, #0
 8005fee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff2:	e7a7      	b.n	8005f44 <_printf_i+0x118>
 8005ff4:	6923      	ldr	r3, [r4, #16]
 8005ff6:	462a      	mov	r2, r5
 8005ff8:	4639      	mov	r1, r7
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	47c0      	blx	r8
 8005ffe:	3001      	adds	r0, #1
 8006000:	d0aa      	beq.n	8005f58 <_printf_i+0x12c>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	079b      	lsls	r3, r3, #30
 8006006:	d413      	bmi.n	8006030 <_printf_i+0x204>
 8006008:	68e0      	ldr	r0, [r4, #12]
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	4298      	cmp	r0, r3
 800600e:	bfb8      	it	lt
 8006010:	4618      	movlt	r0, r3
 8006012:	e7a3      	b.n	8005f5c <_printf_i+0x130>
 8006014:	2301      	movs	r3, #1
 8006016:	464a      	mov	r2, r9
 8006018:	4639      	mov	r1, r7
 800601a:	4630      	mov	r0, r6
 800601c:	47c0      	blx	r8
 800601e:	3001      	adds	r0, #1
 8006020:	d09a      	beq.n	8005f58 <_printf_i+0x12c>
 8006022:	3501      	adds	r5, #1
 8006024:	68e3      	ldr	r3, [r4, #12]
 8006026:	9a03      	ldr	r2, [sp, #12]
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	42ab      	cmp	r3, r5
 800602c:	dcf2      	bgt.n	8006014 <_printf_i+0x1e8>
 800602e:	e7eb      	b.n	8006008 <_printf_i+0x1dc>
 8006030:	2500      	movs	r5, #0
 8006032:	f104 0919 	add.w	r9, r4, #25
 8006036:	e7f5      	b.n	8006024 <_printf_i+0x1f8>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1ac      	bne.n	8005f96 <_printf_i+0x16a>
 800603c:	7803      	ldrb	r3, [r0, #0]
 800603e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006042:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006046:	e76c      	b.n	8005f22 <_printf_i+0xf6>
 8006048:	080062b5 	.word	0x080062b5
 800604c:	080062c6 	.word	0x080062c6

08006050 <memcpy>:
 8006050:	b510      	push	{r4, lr}
 8006052:	1e43      	subs	r3, r0, #1
 8006054:	440a      	add	r2, r1
 8006056:	4291      	cmp	r1, r2
 8006058:	d100      	bne.n	800605c <memcpy+0xc>
 800605a:	bd10      	pop	{r4, pc}
 800605c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006064:	e7f7      	b.n	8006056 <memcpy+0x6>

08006066 <memmove>:
 8006066:	4288      	cmp	r0, r1
 8006068:	b510      	push	{r4, lr}
 800606a:	eb01 0302 	add.w	r3, r1, r2
 800606e:	d807      	bhi.n	8006080 <memmove+0x1a>
 8006070:	1e42      	subs	r2, r0, #1
 8006072:	4299      	cmp	r1, r3
 8006074:	d00a      	beq.n	800608c <memmove+0x26>
 8006076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800607a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800607e:	e7f8      	b.n	8006072 <memmove+0xc>
 8006080:	4283      	cmp	r3, r0
 8006082:	d9f5      	bls.n	8006070 <memmove+0xa>
 8006084:	1881      	adds	r1, r0, r2
 8006086:	1ad2      	subs	r2, r2, r3
 8006088:	42d3      	cmn	r3, r2
 800608a:	d100      	bne.n	800608e <memmove+0x28>
 800608c:	bd10      	pop	{r4, pc}
 800608e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006092:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006096:	e7f7      	b.n	8006088 <memmove+0x22>

08006098 <_free_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4605      	mov	r5, r0
 800609c:	2900      	cmp	r1, #0
 800609e:	d045      	beq.n	800612c <_free_r+0x94>
 80060a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a4:	1f0c      	subs	r4, r1, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	bfb8      	it	lt
 80060aa:	18e4      	addlt	r4, r4, r3
 80060ac:	f000 f8d2 	bl	8006254 <__malloc_lock>
 80060b0:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <_free_r+0x98>)
 80060b2:	6813      	ldr	r3, [r2, #0]
 80060b4:	4610      	mov	r0, r2
 80060b6:	b933      	cbnz	r3, 80060c6 <_free_r+0x2e>
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	6014      	str	r4, [r2, #0]
 80060bc:	4628      	mov	r0, r5
 80060be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060c2:	f000 b8c8 	b.w	8006256 <__malloc_unlock>
 80060c6:	42a3      	cmp	r3, r4
 80060c8:	d90c      	bls.n	80060e4 <_free_r+0x4c>
 80060ca:	6821      	ldr	r1, [r4, #0]
 80060cc:	1862      	adds	r2, r4, r1
 80060ce:	4293      	cmp	r3, r2
 80060d0:	bf04      	itt	eq
 80060d2:	681a      	ldreq	r2, [r3, #0]
 80060d4:	685b      	ldreq	r3, [r3, #4]
 80060d6:	6063      	str	r3, [r4, #4]
 80060d8:	bf04      	itt	eq
 80060da:	1852      	addeq	r2, r2, r1
 80060dc:	6022      	streq	r2, [r4, #0]
 80060de:	6004      	str	r4, [r0, #0]
 80060e0:	e7ec      	b.n	80060bc <_free_r+0x24>
 80060e2:	4613      	mov	r3, r2
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	b10a      	cbz	r2, 80060ec <_free_r+0x54>
 80060e8:	42a2      	cmp	r2, r4
 80060ea:	d9fa      	bls.n	80060e2 <_free_r+0x4a>
 80060ec:	6819      	ldr	r1, [r3, #0]
 80060ee:	1858      	adds	r0, r3, r1
 80060f0:	42a0      	cmp	r0, r4
 80060f2:	d10b      	bne.n	800610c <_free_r+0x74>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	4401      	add	r1, r0
 80060f8:	1858      	adds	r0, r3, r1
 80060fa:	4282      	cmp	r2, r0
 80060fc:	6019      	str	r1, [r3, #0]
 80060fe:	d1dd      	bne.n	80060bc <_free_r+0x24>
 8006100:	6810      	ldr	r0, [r2, #0]
 8006102:	6852      	ldr	r2, [r2, #4]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	4401      	add	r1, r0
 8006108:	6019      	str	r1, [r3, #0]
 800610a:	e7d7      	b.n	80060bc <_free_r+0x24>
 800610c:	d902      	bls.n	8006114 <_free_r+0x7c>
 800610e:	230c      	movs	r3, #12
 8006110:	602b      	str	r3, [r5, #0]
 8006112:	e7d3      	b.n	80060bc <_free_r+0x24>
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	1821      	adds	r1, r4, r0
 8006118:	428a      	cmp	r2, r1
 800611a:	bf04      	itt	eq
 800611c:	6811      	ldreq	r1, [r2, #0]
 800611e:	6852      	ldreq	r2, [r2, #4]
 8006120:	6062      	str	r2, [r4, #4]
 8006122:	bf04      	itt	eq
 8006124:	1809      	addeq	r1, r1, r0
 8006126:	6021      	streq	r1, [r4, #0]
 8006128:	605c      	str	r4, [r3, #4]
 800612a:	e7c7      	b.n	80060bc <_free_r+0x24>
 800612c:	bd38      	pop	{r3, r4, r5, pc}
 800612e:	bf00      	nop
 8006130:	20000090 	.word	0x20000090

08006134 <_malloc_r>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	1ccd      	adds	r5, r1, #3
 8006138:	f025 0503 	bic.w	r5, r5, #3
 800613c:	3508      	adds	r5, #8
 800613e:	2d0c      	cmp	r5, #12
 8006140:	bf38      	it	cc
 8006142:	250c      	movcc	r5, #12
 8006144:	2d00      	cmp	r5, #0
 8006146:	4606      	mov	r6, r0
 8006148:	db01      	blt.n	800614e <_malloc_r+0x1a>
 800614a:	42a9      	cmp	r1, r5
 800614c:	d903      	bls.n	8006156 <_malloc_r+0x22>
 800614e:	230c      	movs	r3, #12
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	2000      	movs	r0, #0
 8006154:	bd70      	pop	{r4, r5, r6, pc}
 8006156:	f000 f87d 	bl	8006254 <__malloc_lock>
 800615a:	4a21      	ldr	r2, [pc, #132]	; (80061e0 <_malloc_r+0xac>)
 800615c:	6814      	ldr	r4, [r2, #0]
 800615e:	4621      	mov	r1, r4
 8006160:	b991      	cbnz	r1, 8006188 <_malloc_r+0x54>
 8006162:	4c20      	ldr	r4, [pc, #128]	; (80061e4 <_malloc_r+0xb0>)
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	b91b      	cbnz	r3, 8006170 <_malloc_r+0x3c>
 8006168:	4630      	mov	r0, r6
 800616a:	f000 f863 	bl	8006234 <_sbrk_r>
 800616e:	6020      	str	r0, [r4, #0]
 8006170:	4629      	mov	r1, r5
 8006172:	4630      	mov	r0, r6
 8006174:	f000 f85e 	bl	8006234 <_sbrk_r>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d124      	bne.n	80061c6 <_malloc_r+0x92>
 800617c:	230c      	movs	r3, #12
 800617e:	6033      	str	r3, [r6, #0]
 8006180:	4630      	mov	r0, r6
 8006182:	f000 f868 	bl	8006256 <__malloc_unlock>
 8006186:	e7e4      	b.n	8006152 <_malloc_r+0x1e>
 8006188:	680b      	ldr	r3, [r1, #0]
 800618a:	1b5b      	subs	r3, r3, r5
 800618c:	d418      	bmi.n	80061c0 <_malloc_r+0x8c>
 800618e:	2b0b      	cmp	r3, #11
 8006190:	d90f      	bls.n	80061b2 <_malloc_r+0x7e>
 8006192:	600b      	str	r3, [r1, #0]
 8006194:	50cd      	str	r5, [r1, r3]
 8006196:	18cc      	adds	r4, r1, r3
 8006198:	4630      	mov	r0, r6
 800619a:	f000 f85c 	bl	8006256 <__malloc_unlock>
 800619e:	f104 000b 	add.w	r0, r4, #11
 80061a2:	1d23      	adds	r3, r4, #4
 80061a4:	f020 0007 	bic.w	r0, r0, #7
 80061a8:	1ac3      	subs	r3, r0, r3
 80061aa:	d0d3      	beq.n	8006154 <_malloc_r+0x20>
 80061ac:	425a      	negs	r2, r3
 80061ae:	50e2      	str	r2, [r4, r3]
 80061b0:	e7d0      	b.n	8006154 <_malloc_r+0x20>
 80061b2:	428c      	cmp	r4, r1
 80061b4:	684b      	ldr	r3, [r1, #4]
 80061b6:	bf16      	itet	ne
 80061b8:	6063      	strne	r3, [r4, #4]
 80061ba:	6013      	streq	r3, [r2, #0]
 80061bc:	460c      	movne	r4, r1
 80061be:	e7eb      	b.n	8006198 <_malloc_r+0x64>
 80061c0:	460c      	mov	r4, r1
 80061c2:	6849      	ldr	r1, [r1, #4]
 80061c4:	e7cc      	b.n	8006160 <_malloc_r+0x2c>
 80061c6:	1cc4      	adds	r4, r0, #3
 80061c8:	f024 0403 	bic.w	r4, r4, #3
 80061cc:	42a0      	cmp	r0, r4
 80061ce:	d005      	beq.n	80061dc <_malloc_r+0xa8>
 80061d0:	1a21      	subs	r1, r4, r0
 80061d2:	4630      	mov	r0, r6
 80061d4:	f000 f82e 	bl	8006234 <_sbrk_r>
 80061d8:	3001      	adds	r0, #1
 80061da:	d0cf      	beq.n	800617c <_malloc_r+0x48>
 80061dc:	6025      	str	r5, [r4, #0]
 80061de:	e7db      	b.n	8006198 <_malloc_r+0x64>
 80061e0:	20000090 	.word	0x20000090
 80061e4:	20000094 	.word	0x20000094

080061e8 <_realloc_r>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	4607      	mov	r7, r0
 80061ec:	4614      	mov	r4, r2
 80061ee:	460e      	mov	r6, r1
 80061f0:	b921      	cbnz	r1, 80061fc <_realloc_r+0x14>
 80061f2:	4611      	mov	r1, r2
 80061f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061f8:	f7ff bf9c 	b.w	8006134 <_malloc_r>
 80061fc:	b922      	cbnz	r2, 8006208 <_realloc_r+0x20>
 80061fe:	f7ff ff4b 	bl	8006098 <_free_r>
 8006202:	4625      	mov	r5, r4
 8006204:	4628      	mov	r0, r5
 8006206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006208:	f000 f826 	bl	8006258 <_malloc_usable_size_r>
 800620c:	42a0      	cmp	r0, r4
 800620e:	d20f      	bcs.n	8006230 <_realloc_r+0x48>
 8006210:	4621      	mov	r1, r4
 8006212:	4638      	mov	r0, r7
 8006214:	f7ff ff8e 	bl	8006134 <_malloc_r>
 8006218:	4605      	mov	r5, r0
 800621a:	2800      	cmp	r0, #0
 800621c:	d0f2      	beq.n	8006204 <_realloc_r+0x1c>
 800621e:	4631      	mov	r1, r6
 8006220:	4622      	mov	r2, r4
 8006222:	f7ff ff15 	bl	8006050 <memcpy>
 8006226:	4631      	mov	r1, r6
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff ff35 	bl	8006098 <_free_r>
 800622e:	e7e9      	b.n	8006204 <_realloc_r+0x1c>
 8006230:	4635      	mov	r5, r6
 8006232:	e7e7      	b.n	8006204 <_realloc_r+0x1c>

08006234 <_sbrk_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4c06      	ldr	r4, [pc, #24]	; (8006250 <_sbrk_r+0x1c>)
 8006238:	2300      	movs	r3, #0
 800623a:	4605      	mov	r5, r0
 800623c:	4608      	mov	r0, r1
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	f7fb fc2a 	bl	8001a98 <_sbrk>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d102      	bne.n	800624e <_sbrk_r+0x1a>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	b103      	cbz	r3, 800624e <_sbrk_r+0x1a>
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	20000604 	.word	0x20000604

08006254 <__malloc_lock>:
 8006254:	4770      	bx	lr

08006256 <__malloc_unlock>:
 8006256:	4770      	bx	lr

08006258 <_malloc_usable_size_r>:
 8006258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625c:	1f18      	subs	r0, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	bfbc      	itt	lt
 8006262:	580b      	ldrlt	r3, [r1, r0]
 8006264:	18c0      	addlt	r0, r0, r3
 8006266:	4770      	bx	lr

08006268 <_init>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	bf00      	nop
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr

08006274 <_fini>:
 8006274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006276:	bf00      	nop
 8006278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627a:	bc08      	pop	{r3}
 800627c:	469e      	mov	lr, r3
 800627e:	4770      	bx	lr
