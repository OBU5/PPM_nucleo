
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e08  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800a008  0800a008  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2c0  0800a2c0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2c0  0800a2c0  0001a2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2c8  0800a2c8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2c8  0800a2c8  0001a2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2cc  0800a2cc  0001a2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a2d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005a868  200001e4  0800a4b4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005aa4c  0800a4b4  0002aa4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a4f  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028b8  00000000  00000000  00035c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001548  00000000  00000000  00038520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  00039a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029847  00000000  00000000  0003ae98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa28  00000000  00000000  000646df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001039be  00000000  00000000  00074107  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177ac5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fdc  00000000  00000000  00177b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009ff0 	.word	0x08009ff0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08009ff0 	.word	0x08009ff0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f002 fdb6 	bl	8003186 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f861 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 feab 	bl	8001378 <MX_GPIO_Init>
  MX_DMA_Init();
 8000622:	f000 fe6f 	bl	8001304 <MX_DMA_Init>
  MX_ADC1_Init();
 8000626:	f000 f8fd 	bl	8000824 <MX_ADC1_Init>
  MX_SPI1_Init();
 800062a:	f000 f9cd 	bl	80009c8 <MX_SPI1_Init>
  MX_TIM1_Init();
 800062e:	f000 fa43 	bl	8000ab8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000632:	f000 fb01 	bl	8000c38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000636:	f000 fb53 	bl	8000ce0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800063a:	f000 fbc9 	bl	8000dd0 <MX_TIM4_Init>
  MX_TIM8_Init();
 800063e:	f000 fca5 	bl	8000f8c <MX_TIM8_Init>
  MX_UART5_Init();
 8000642:	f000 fd6f 	bl	8001124 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000646:	f000 fdcd 	bl	80011e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800064a:	f000 fdfb 	bl	8001244 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800064e:	f000 fe29 	bl	80012a4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000652:	f000 f939 	bl	80008c8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000656:	f000 f977 	bl	8000948 <MX_I2C3_Init>
  MX_SPI4_Init();
 800065a:	f000 f9ef 	bl	8000a3c <MX_SPI4_Init>
  MX_TIM5_Init();
 800065e:	f000 fc11 	bl	8000e84 <MX_TIM5_Init>
  MX_UART7_Init();
 8000662:	f000 fd8f 	bl	8001184 <MX_UART7_Init>
  MX_TIM6_Init();
 8000666:	f000 fc5b 	bl	8000f20 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	4919      	ldr	r1, [pc, #100]	; (80006d4 <main+0xc4>)
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <main+0xc8>)
 8000670:	f007 ffdc 	bl	800862c <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000674:	4819      	ldr	r0, [pc, #100]	; (80006dc <main+0xcc>)
 8000676:	f006 f877 	bl	8006768 <HAL_TIM_Base_Start_IT>
	char msg_buffers[25];
	uint16_t index = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	83fb      	strh	r3, [r7, #30]
	switchingCircuitIdle();
 800067e:	f001 f87d 	bl	800177c <switchingCircuitIdle>
	// visualise
	set_LED1(0, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f001 f81e 	bl	80016c8 <set_LED1>
	HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f002 fdd6 	bl	8003240 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//parse text every time before polarization
		parseText();
 8000694:	f001 fb18 	bl	8001cc8 <parseText>

		// if new measurement technique was updated - change state regarding to the update
		if (stateCanBeUpdated()) {
 8000698:	f001 ff22 	bl	80024e0 <stateCanBeUpdated>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <main+0x96>
			updateState();
 80006a2:	f001 fefd 	bl	80024a0 <updateState>
		}
		//
		if (measurementCanRun()) {
 80006a6:	f001 ff43 	bl	8002530 <measurementCanRun>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <main+0xa6>
			runMeasurementMethod();
 80006b0:	f000 fef4 	bl	800149c <runMeasurementMethod>
 80006b4:	e7ee      	b.n	8000694 <main+0x84>
		}
		// idle state - if no method is active and there are no data to be sent
		else if (stateIsIdle()) {
 80006b6:	f001 ff63 	bl	8002580 <stateIsIdle>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <main+0xbc>
			set_LED1(0, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 ffff 	bl	80016c8 <set_LED1>
 80006ca:	e7e3      	b.n	8000694 <main+0x84>
		} else {
			sendMeasuredData();
 80006cc:	f001 fd72 	bl	80021b4 <sendMeasuredData>
	while (1) {
 80006d0:	e7e0      	b.n	8000694 <main+0x84>
 80006d2:	bf00      	nop
 80006d4:	20004310 	.word	0x20004310
 80006d8:	20004244 	.word	0x20004244
 80006dc:	2002f424 	.word	0x2002f424

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0b8      	sub	sp, #224	; 0xe0
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ea:	2234      	movs	r2, #52	; 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f008 ff48 	bl	8009584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2290      	movs	r2, #144	; 0x90
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f008 ff39 	bl	8009584 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000712:	f004 f959 	bl	80049c8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b40      	ldr	r3, [pc, #256]	; (8000818 <SystemClock_Config+0x138>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a3f      	ldr	r2, [pc, #252]	; (8000818 <SystemClock_Config+0x138>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <SystemClock_Config+0x138>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	4b3b      	ldr	r3, [pc, #236]	; (800081c <SystemClock_Config+0x13c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a3a      	ldr	r2, [pc, #232]	; (800081c <SystemClock_Config+0x13c>)
 8000734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	4b38      	ldr	r3, [pc, #224]	; (800081c <SystemClock_Config+0x13c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000746:	2301      	movs	r3, #1
 8000748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000762:	2305      	movs	r3, #5
 8000764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000768:	23d8      	movs	r3, #216	; 0xd8
 800076a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800077e:	4618      	mov	r0, r3
 8000780:	f004 f982 	bl	8004a88 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800078a:	f001 ff1d 	bl	80025c8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800078e:	f004 f92b 	bl	80049e8 <HAL_PWREx_EnableOverDrive>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000798:	f001 ff16 	bl	80025c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007c2:	2107      	movs	r1, #7
 80007c4:	4618      	mov	r0, r3
 80007c6:	f004 fc0d 	bl	8004fe4 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007d0:	f001 fefa 	bl	80025c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART1
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <SystemClock_Config+0x140>)
 80007d6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007d8:	2300      	movs	r3, #0
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007dc:	2300      	movs	r3, #0
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80007f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007f8:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fdc2 	bl	8005388 <HAL_RCCEx_PeriphCLKConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800080a:	f001 fedd 	bl	80025c8 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	37e0      	adds	r7, #224	; 0xe0
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000
 8000820:	000155d0 	.word	0x000155d0

08000824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000838:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <MX_ADC1_Init+0xa0>)
 800083a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800083e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000842:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000868:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000876:	2201      	movs	r2, #1
 8000878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800088a:	f002 fcfb 	bl	8003284 <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000894:	f001 fe98 	bl	80025c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089c:	2301      	movs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008a0:	2301      	movs	r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_ADC1_Init+0x9c>)
 80008aa:	f002 fe31 	bl	8003510 <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008b4:	f001 fe88 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2002f53c 	.word	0x2002f53c
 80008c4:	40012000 	.word	0x40012000

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_I2C1_Init+0x74>)
 8000904:	f003 ff38 	bl	8004778 <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090e:	f001 fe5b 	bl	80025c8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_I2C1_Init+0x74>)
 8000916:	f003 ffbf 	bl	8004898 <HAL_I2CEx_ConfigAnalogFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000920:	f001 fe52 	bl	80025c8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_I2C1_Init+0x74>)
 8000928:	f004 f801 	bl	800492e <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f001 fe49 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200042c4 	.word	0x200042c4
 8000940:	40005400 	.word	0x40005400
 8000944:	20404768 	.word	0x20404768

08000948 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_I2C3_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <MX_I2C3_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_I2C3_Init+0x74>)
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <MX_I2C3_Init+0x7c>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_I2C3_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_I2C3_Init+0x74>)
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_I2C3_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_I2C3_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2C3_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_I2C3_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_I2C3_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000982:	480e      	ldr	r0, [pc, #56]	; (80009bc <MX_I2C3_Init+0x74>)
 8000984:	f003 fef8 	bl	8004778 <HAL_I2C_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800098e:	f001 fe1b 	bl	80025c8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <MX_I2C3_Init+0x74>)
 8000996:	f003 ff7f 	bl	8004898 <HAL_I2CEx_ConfigAnalogFilter>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009a0:	f001 fe12 	bl	80025c8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_I2C3_Init+0x74>)
 80009a8:	f003 ffc1 	bl	800492e <HAL_I2CEx_ConfigDigitalFilter>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f001 fe09 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20004098 	.word	0x20004098
 80009c0:	40005c00 	.word	0x40005c00
 80009c4:	20404768 	.word	0x20404768

080009c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009ce:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <MX_SPI1_Init+0x70>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009e2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80009e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a0e:	2207      	movs	r2, #7
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a20:	f005 f8d8 	bl	8005bd4 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000a2a:	f001 fdcd 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2002f7b0 	.word	0x2002f7b0
 8000a38:	40013000 	.word	0x40013000

08000a3c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_SPI4_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a5a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a6a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a6e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a9c:	f005 f89a 	bl	8005bd4 <HAL_SPI_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000aa6:	f001 fd8f 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2002f604 	.word	0x2002f604
 8000ab4:	40013400 	.word	0x40013400

08000ab8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09a      	sub	sp, #104	; 0x68
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	615a      	str	r2, [r3, #20]
 8000aea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	222c      	movs	r2, #44	; 0x2c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fd46 	bl	8009584 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af8:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000afa:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <MX_TIM1_Init+0x17c>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000afe:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 8000b0a:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b0c:	f241 3221 	movw	r2, #4897	; 0x1321
 8000b10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b18:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b24:	4842      	ldr	r0, [pc, #264]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b26:	f005 fdf4 	bl	8006712 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f001 fd4a 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b3e:	4619      	mov	r1, r3
 8000b40:	483b      	ldr	r0, [pc, #236]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b42:	f006 fc7f 	bl	8007444 <HAL_TIM_ConfigClockSource>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b4c:	f001 fd3c 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b50:	4837      	ldr	r0, [pc, #220]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b52:	f005 fe5e 	bl	8006812 <HAL_TIM_PWM_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b5c:	f001 fd34 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b60:	2320      	movs	r3, #32
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b70:	4619      	mov	r1, r3
 8000b72:	482f      	ldr	r0, [pc, #188]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b74:	f007 fb86 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b7e:	f001 fd23 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b82:	2370      	movs	r3, #112	; 0x70
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 8000b86:	f240 336a 	movw	r3, #874	; 0x36a
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4821      	ldr	r0, [pc, #132]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000bac:	f006 fb32 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000bb6:	f001 fd07 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bba:	2360      	movs	r3, #96	; 0x60
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000bbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc8:	2204      	movs	r2, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000bce:	f006 fb21 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000bd8:	f001 fcf6 	bl	80025c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000c12:	f007 fbc5 	bl	80083a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000c1c:	f001 fcd4 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000c22:	f001 ffe9 	bl	8002bf8 <HAL_TIM_MspPostInit>

}
 8000c26:	bf00      	nop
 8000c28:	3768      	adds	r7, #104	; 0x68
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2002f770 	.word	0x2002f770
 8000c34:	40010000 	.word	0x40010000

08000c38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c7e:	4817      	ldr	r0, [pc, #92]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c80:	f005 ff16 	bl	8006ab0 <HAL_TIM_IC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c8a:	f001 fc9d 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c9e:	f007 faf1 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ca8:	f001 fc8e 	bl	80025c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000cc4:	f006 fa09 	bl	80070da <HAL_TIM_IC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f001 fc7b 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2002f814 	.word	0x2002f814

08000ce0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b090      	sub	sp, #64	; 0x40
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <MX_TIM3_Init+0xec>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d38:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d3a:	f005 fcea 	bl	8006712 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d44:	f001 fc40 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d48:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d4a:	f005 fd62 	bl	8006812 <HAL_TIM_PWM_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d54:	f001 fc38 	bl	80025c8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d68:	f006 fc26 	bl	80075b8 <HAL_TIM_SlaveConfigSynchro>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d72:	f001 fc29 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d86:	f007 fa7d 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d90:	f001 fc1a 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d94:	2360      	movs	r3, #96	; 0x60
 8000d96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000dac:	f006 fa32 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000db6:	f001 fc07 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000dbc:	f001 ff1c 	bl	8002bf8 <HAL_TIM_MspPostInit>

}
 8000dc0:	bf00      	nop
 8000dc2:	3740      	adds	r7, #64	; 0x40
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2002f464 	.word	0x2002f464
 8000dcc:	40000400 	.word	0x40000400

08000dd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000df6:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <MX_TIM4_Init+0xb0>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e18:	4818      	ldr	r0, [pc, #96]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e1a:	f005 fcfa 	bl	8006812 <HAL_TIM_PWM_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000e24:	f001 fbd0 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e28:	2320      	movs	r3, #32
 8000e2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e38:	f007 fa24 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000e42:	f001 fbc1 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e46:	2360      	movs	r3, #96	; 0x60
 8000e48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e5e:	f006 f9d9 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000e68:	f001 fbae 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e6e:	f001 fec3 	bl	8002bf8 <HAL_TIM_MspPostInit>

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20004204 	.word	0x20004204
 8000e80:	40000800 	.word	0x40000800

08000e84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <MX_TIM5_Init+0x98>)
 8000ea6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2160-1;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eb6:	f640 026f 	movw	r2, #2159	; 0x86f
 8000eba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eca:	f005 fc22 	bl	8006712 <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ed4:	f001 fb78 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ee6:	f006 faad 	bl	8007444 <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f001 fb6a 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000f02:	f007 f9bf 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f001 fb5c 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2002f424 	.word	0x2002f424
 8000f1c:	40000c00 	.word	0x40000c00

08000f20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <MX_TIM6_Init+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4898-1;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f44:	f241 3221 	movw	r2, #4897	; 0x1321
 8000f48:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f52:	f005 fbde 	bl	8006712 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f5c:	f001 fb34 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f60:	2320      	movs	r3, #32
 8000f62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f6e:	f007 f989 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f78:	f001 fb26 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2002f72c 	.word	0x2002f72c
 8000f88:	40001000 	.word	0x40001000

08000f8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09e      	sub	sp, #120	; 0x78
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	222c      	movs	r2, #44	; 0x2c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 fad4 	bl	8009584 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fdc:	4b4f      	ldr	r3, [pc, #316]	; (800111c <MX_TIM8_Init+0x190>)
 8000fde:	4a50      	ldr	r2, [pc, #320]	; (8001120 <MX_TIM8_Init+0x194>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fe2:	4b4e      	ldr	r3, [pc, #312]	; (800111c <MX_TIM8_Init+0x190>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b4c      	ldr	r3, [pc, #304]	; (800111c <MX_TIM8_Init+0x190>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000fee:	4b4b      	ldr	r3, [pc, #300]	; (800111c <MX_TIM8_Init+0x190>)
 8000ff0:	226b      	movs	r2, #107	; 0x6b
 8000ff2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b49      	ldr	r3, [pc, #292]	; (800111c <MX_TIM8_Init+0x190>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8000ffa:	4b48      	ldr	r3, [pc, #288]	; (800111c <MX_TIM8_Init+0x190>)
 8000ffc:	2218      	movs	r2, #24
 8000ffe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <MX_TIM8_Init+0x190>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001006:	4845      	ldr	r0, [pc, #276]	; (800111c <MX_TIM8_Init+0x190>)
 8001008:	f005 fb83 	bl	8006712 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001012:	f001 fad9 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800101c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001020:	4619      	mov	r1, r3
 8001022:	483e      	ldr	r0, [pc, #248]	; (800111c <MX_TIM8_Init+0x190>)
 8001024:	f006 fa0e 	bl	8007444 <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800102e:	f001 facb 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001032:	483a      	ldr	r0, [pc, #232]	; (800111c <MX_TIM8_Init+0x190>)
 8001034:	f005 fbed 	bl	8006812 <HAL_TIM_PWM_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 800103e:	f001 fac3 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8001042:	2108      	movs	r1, #8
 8001044:	4835      	ldr	r0, [pc, #212]	; (800111c <MX_TIM8_Init+0x190>)
 8001046:	f005 fee3 	bl	8006e10 <HAL_TIM_OnePulse_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001050:	f001 faba 	bl	80025c8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001054:	2306      	movs	r3, #6
 8001056:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001058:	2300      	movs	r3, #0
 800105a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800105c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001060:	4619      	mov	r1, r3
 8001062:	482e      	ldr	r0, [pc, #184]	; (800111c <MX_TIM8_Init+0x190>)
 8001064:	f006 faa8 	bl	80075b8 <HAL_TIM_SlaveConfigSynchro>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 800106e:	f001 faab 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800107e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001082:	4619      	mov	r1, r3
 8001084:	4825      	ldr	r0, [pc, #148]	; (800111c <MX_TIM8_Init+0x190>)
 8001086:	f007 f8fd 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001090:	f001 fa9a 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001094:	2370      	movs	r3, #112	; 0x70
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 8001098:	2336      	movs	r3, #54	; 0x36
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <MX_TIM8_Init+0x190>)
 80010ba:	f006 f8ab 	bl	8007214 <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 80010c4:	f001 fa80 	bl	80025c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM8_Init+0x190>)
 80010fe:	f007 f94f 	bl	80083a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8001108:	f001 fa5e 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM8_Init+0x190>)
 800110e:	f001 fd73 	bl	8002bf8 <HAL_TIM_MspPostInit>

}
 8001112:	bf00      	nop
 8001114:	3778      	adds	r7, #120	; 0x78
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200041c4 	.word	0x200041c4
 8001120:	40010400 	.word	0x40010400

08001124 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_UART5_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <MX_UART5_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_UART5_Init+0x58>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_UART5_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_UART5_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_UART5_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_UART5_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_UART5_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_UART5_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_UART5_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_UART5_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_UART5_Init+0x58>)
 8001168:	f007 f9b6 	bl	80084d8 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001172:	f001 fa29 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2002f4bc 	.word	0x2002f4bc
 8001180:	40005000 	.word	0x40005000

08001184 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_UART7_Init+0x58>)
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <MX_UART7_Init+0x5c>)
 800118c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_UART7_Init+0x58>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_UART7_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_UART7_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_UART7_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_UART7_Init+0x58>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_UART7_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_UART7_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_UART7_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_UART7_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_UART7_Init+0x58>)
 80011c8:	f007 f986 	bl	80084d8 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80011d2:	f001 f9f9 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20004144 	.word	0x20004144
 80011e0:	40007800 	.word	0x40007800

080011e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART1_UART_Init+0x58>)
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <MX_USART1_UART_Init+0x5c>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART1_UART_Init+0x58>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART1_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_USART1_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART1_UART_Init+0x58>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001228:	f007 f956 	bl	80084d8 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001232:	f001 f9c9 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2002f584 	.word	0x2002f584
 8001240:	40011000 	.word	0x40011000

08001244 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART2_UART_Init+0x58>)
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MX_USART2_UART_Init+0x5c>)
 800124c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USART2_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART2_UART_Init+0x58>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART2_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001288:	f007 f926 	bl	80084d8 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001292:	f001 f999 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2002f854 	.word	0x2002f854
 80012a0:	40004400 	.word	0x40004400

080012a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_USART3_UART_Init+0x5c>)
 80012b2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012c8:	220c      	movs	r2, #12
 80012ca:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012e6:	f007 f8f7 	bl	80084d8 <HAL_UART_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 80012f0:	f001 f96a 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20004244 	.word	0x20004244
 80012fc:	40004800 	.word	0x40004800
 8001300:	001e8480 	.word	0x001e8480

08001304 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_DMA_Init+0x70>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <MX_DMA_Init+0x70>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_DMA_Init+0x70>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_DMA_Init+0x70>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <MX_DMA_Init+0x70>)
 8001328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_DMA_Init+0x70>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2010      	movs	r0, #16
 8001340:	f002 fc87 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001344:	2010      	movs	r0, #16
 8001346:	f002 fca0 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2038      	movs	r0, #56	; 0x38
 8001350:	f002 fc7f 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001354:	2038      	movs	r0, #56	; 0x38
 8001356:	f002 fc98 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	203c      	movs	r0, #60	; 0x3c
 8001360:	f002 fc77 	bl	8003c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001364:	203c      	movs	r0, #60	; 0x3c
 8001366:	f002 fc90 	bl	8003c8a <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	4b40      	ldr	r3, [pc, #256]	; (8001490 <MX_GPIO_Init+0x118>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a3f      	ldr	r2, [pc, #252]	; (8001490 <MX_GPIO_Init+0x118>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <MX_GPIO_Init+0x118>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <MX_GPIO_Init+0x118>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a39      	ldr	r2, [pc, #228]	; (8001490 <MX_GPIO_Init+0x118>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <MX_GPIO_Init+0x118>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	4b34      	ldr	r3, [pc, #208]	; (8001490 <MX_GPIO_Init+0x118>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a33      	ldr	r2, [pc, #204]	; (8001490 <MX_GPIO_Init+0x118>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <MX_GPIO_Init+0x118>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <MX_GPIO_Init+0x118>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <MX_GPIO_Init+0x118>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <MX_GPIO_Init+0x118>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <MX_GPIO_Init+0x118>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <MX_GPIO_Init+0x118>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <MX_GPIO_Init+0x118>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <MX_GPIO_Init+0x118>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <MX_GPIO_Init+0x118>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_GPIO_Init+0x118>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2108      	movs	r1, #8
 8001422:	481c      	ldr	r0, [pc, #112]	; (8001494 <MX_GPIO_Init+0x11c>)
 8001424:	f003 f98e 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 8001428:	2200      	movs	r2, #0
 800142a:	f64e 717f 	movw	r1, #61311	; 0xef7f
 800142e:	481a      	ldr	r0, [pc, #104]	; (8001498 <MX_GPIO_Init+0x120>)
 8001430:	f003 f988 	bl	8004744 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SN6505_EN_Pin */
  GPIO_InitStruct.Pin = SN6505_EN_Pin;
 8001434:	2308      	movs	r3, #8
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <MX_GPIO_Init+0x11c>)
 800144c:	f002 ffd0 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin 
                           LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin 
                           S1_Pin S2_Pin S3_Pin S4_Pin 
                           S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 8001450:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001454:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <MX_GPIO_Init+0x120>)
 800146a:	f002 ffc1 	bl	80043f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800146e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0x11c>)
 8001484:	f002 ffb4 	bl	80043f0 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00

0800149c <runMeasurementMethod>:

/* USER CODE BEGIN 4 */

void runMeasurementMethod() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

	//if measurement method is set, run the polarization sequence
	if ((state.remainingMeasurements > 0) || (state.remainingMeasurements == -1) && ((state.extAdcActiveState == 1) || (state.intAdcActiveState == 1) || (state.compActiveState == 1))) {
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <runMeasurementMethod+0x70>)
 80014a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dc11      	bgt.n	80014ce <runMeasurementMethod+0x32>
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <runMeasurementMethod+0x70>)
 80014ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d128      	bne.n	8001508 <runMeasurementMethod+0x6c>
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <runMeasurementMethod+0x70>)
 80014b8:	78db      	ldrb	r3, [r3, #3]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d007      	beq.n	80014ce <runMeasurementMethod+0x32>
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <runMeasurementMethod+0x70>)
 80014c0:	791b      	ldrb	r3, [r3, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d003      	beq.n	80014ce <runMeasurementMethod+0x32>
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <runMeasurementMethod+0x70>)
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d11c      	bne.n	8001508 <runMeasurementMethod+0x6c>
		runPolarizationSequence();
 80014ce:	f000 f81f 	bl	8001510 <runPolarizationSequence>
		// check, if there isn't new user update before starting measurement
		parseText();
 80014d2:	f000 fbf9 	bl	8001cc8 <parseText>
		if (stateCanBeUpdated()) {
 80014d6:	f001 f803 	bl	80024e0 <stateCanBeUpdated>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <runMeasurementMethod+0x48>
			updateState();
 80014e0:	f000 ffde 	bl	80024a0 <updateState>
		}
		if (state.intAdcActiveState == 1) {
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <runMeasurementMethod+0x70>)
 80014e6:	791b      	ldrb	r3, [r3, #4]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <runMeasurementMethod+0x54>
			measureWithIntADC();
 80014ec:	f000 f9e8 	bl	80018c0 <measureWithIntADC>
		}
		if (state.extAdcActiveState == 1) {
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <runMeasurementMethod+0x70>)
 80014f2:	78db      	ldrb	r3, [r3, #3]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d101      	bne.n	80014fc <runMeasurementMethod+0x60>
			measureWithExtADC();
 80014f8:	f000 f9b2 	bl	8001860 <measureWithExtADC>
		}
		if (state.compActiveState == 1) {
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <runMeasurementMethod+0x70>)
 80014fe:	795b      	ldrb	r3, [r3, #5]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <runMeasurementMethod+0x6c>
			measureWithComp();
 8001504:	f000 fa00 	bl	8001908 <measureWithComp>
		}
	}
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2002f4a4 	.word	0x2002f4a4

08001510 <runPolarizationSequence>:

void runPolarizationSequence() {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 8001514:	4b69      	ldr	r3, [pc, #420]	; (80016bc <runPolarizationSequence+0x1ac>)
 8001516:	2200      	movs	r2, #0
 8001518:	745a      	strb	r2, [r3, #17]
	state.index++;
 800151a:	4b68      	ldr	r3, [pc, #416]	; (80016bc <runPolarizationSequence+0x1ac>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	4a66      	ldr	r2, [pc, #408]	; (80016bc <runPolarizationSequence+0x1ac>)
 8001522:	6153      	str	r3, [r2, #20]
	// visualise
	set_LED1(1, 1, 1);
 8001524:	2201      	movs	r2, #1
 8001526:	2101      	movs	r1, #1
 8001528:	2001      	movs	r0, #1
 800152a:	f000 f8cd 	bl	80016c8 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 800152e:	2201      	movs	r2, #1
 8001530:	2102      	movs	r1, #2
 8001532:	4863      	ldr	r0, [pc, #396]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001534:	f003 f906 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	4860      	ldr	r0, [pc, #384]	; (80016c0 <runPolarizationSequence+0x1b0>)
 800153e:	f003 f901 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	2108      	movs	r1, #8
 8001546:	485e      	ldr	r0, [pc, #376]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001548:	f003 f8fc 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2110      	movs	r1, #16
 8001550:	485b      	ldr	r0, [pc, #364]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001552:	f003 f8f7 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2120      	movs	r1, #32
 800155a:	4859      	ldr	r0, [pc, #356]	; (80016c0 <runPolarizationSequence+0x1b0>)
 800155c:	f003 f8f2 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	2140      	movs	r1, #64	; 0x40
 8001564:	4856      	ldr	r0, [pc, #344]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001566:	f003 f8ed 	bl	8004744 <HAL_GPIO_WritePin>
	delay_ms(5);
 800156a:	2005      	movs	r0, #5
 800156c:	f000 f960 	bl	8001830 <delay_ms>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001570:	2201      	movs	r2, #1
 8001572:	2102      	movs	r1, #2
 8001574:	4852      	ldr	r0, [pc, #328]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001576:	f003 f8e5 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2104      	movs	r1, #4
 800157e:	4850      	ldr	r0, [pc, #320]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001580:	f003 f8e0 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	2108      	movs	r1, #8
 8001588:	484d      	ldr	r0, [pc, #308]	; (80016c0 <runPolarizationSequence+0x1b0>)
 800158a:	f003 f8db 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 800158e:	2201      	movs	r2, #1
 8001590:	2110      	movs	r1, #16
 8001592:	484b      	ldr	r0, [pc, #300]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001594:	f003 f8d6 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2120      	movs	r1, #32
 800159c:	4848      	ldr	r0, [pc, #288]	; (80016c0 <runPolarizationSequence+0x1b0>)
 800159e:	f003 f8d1 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	4846      	ldr	r0, [pc, #280]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80015a8:	f003 f8cc 	bl	8004744 <HAL_GPIO_WritePin>
	delay_ms(polarizationTime);
 80015ac:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <runPolarizationSequence+0x1b4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f93d 	bl	8001830 <delay_ms>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	4841      	ldr	r0, [pc, #260]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80015bc:	f003 f8c2 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2104      	movs	r1, #4
 80015c4:	483e      	ldr	r0, [pc, #248]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80015c6:	f003 f8bd 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2108      	movs	r1, #8
 80015ce:	483c      	ldr	r0, [pc, #240]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80015d0:	f003 f8b8 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2110      	movs	r1, #16
 80015d8:	4839      	ldr	r0, [pc, #228]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80015da:	f003 f8b3 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2120      	movs	r1, #32
 80015e2:	4837      	ldr	r0, [pc, #220]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80015e4:	f003 f8ae 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	; 0x40
 80015ec:	4834      	ldr	r0, [pc, #208]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80015ee:	f003 f8a9 	bl	8004744 <HAL_GPIO_WritePin>
	delay_us(200);
 80015f2:	20c8      	movs	r0, #200	; 0xc8
 80015f4:	f000 f908 	bl	8001808 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	4830      	ldr	r0, [pc, #192]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80015fe:	f003 f8a1 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2104      	movs	r1, #4
 8001606:	482e      	ldr	r0, [pc, #184]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001608:	f003 f89c 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	2108      	movs	r1, #8
 8001610:	482b      	ldr	r0, [pc, #172]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001612:	f003 f897 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2110      	movs	r1, #16
 800161a:	4829      	ldr	r0, [pc, #164]	; (80016c0 <runPolarizationSequence+0x1b0>)
 800161c:	f003 f892 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001620:	2201      	movs	r2, #1
 8001622:	2120      	movs	r1, #32
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001626:	f003 f88d 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800162a:	2201      	movs	r2, #1
 800162c:	2140      	movs	r1, #64	; 0x40
 800162e:	4824      	ldr	r0, [pc, #144]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001630:	f003 f888 	bl	8004744 <HAL_GPIO_WritePin>
	delay_ms(10);
 8001634:	200a      	movs	r0, #10
 8001636:	f000 f8fb 	bl	8001830 <delay_ms>

	//run sequnece T6 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2102      	movs	r1, #2
 800163e:	4820      	ldr	r0, [pc, #128]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001640:	f003 f880 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2104      	movs	r1, #4
 8001648:	481d      	ldr	r0, [pc, #116]	; (80016c0 <runPolarizationSequence+0x1b0>)
 800164a:	f003 f87b 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	2108      	movs	r1, #8
 8001652:	481b      	ldr	r0, [pc, #108]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001654:	f003 f876 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2110      	movs	r1, #16
 800165c:	4818      	ldr	r0, [pc, #96]	; (80016c0 <runPolarizationSequence+0x1b0>)
 800165e:	f003 f871 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	2120      	movs	r1, #32
 8001666:	4816      	ldr	r0, [pc, #88]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001668:	f003 f86c 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001672:	f003 f867 	bl	8004744 <HAL_GPIO_WritePin>
	delay_ms(5);
 8001676:	2005      	movs	r0, #5
 8001678:	f000 f8da 	bl	8001830 <delay_ms>
	//run sequnece T7 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2102      	movs	r1, #2
 8001680:	480f      	ldr	r0, [pc, #60]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001682:	f003 f85f 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8001686:	2201      	movs	r2, #1
 8001688:	2104      	movs	r1, #4
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <runPolarizationSequence+0x1b0>)
 800168c:	f003 f85a 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2108      	movs	r1, #8
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <runPolarizationSequence+0x1b0>)
 8001696:	f003 f855 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2110      	movs	r1, #16
 800169e:	4808      	ldr	r0, [pc, #32]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80016a0:	f003 f850 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2120      	movs	r1, #32
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80016aa:	f003 f84b 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <runPolarizationSequence+0x1b0>)
 80016b4:	f003 f846 	bl	8004744 <HAL_GPIO_WritePin>

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2002f4a4 	.word	0x2002f4a4
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	20000004 	.word	0x20000004

080016c8 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	460b      	mov	r3, r1
 80016d4:	71bb      	strb	r3, [r7, #6]
 80016d6:	4613      	mov	r3, r2
 80016d8:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, G);
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	461a      	mov	r2, r3
 80016de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e2:	480a      	ldr	r0, [pc, #40]	; (800170c <set_LED1+0x44>)
 80016e4:	f003 f82e 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, B);
 80016e8:	797b      	ldrb	r3, [r7, #5]
 80016ea:	461a      	mov	r2, r3
 80016ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f0:	4806      	ldr	r0, [pc, #24]	; (800170c <set_LED1+0x44>)
 80016f2:	f003 f827 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, R);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	461a      	mov	r2, r3
 80016fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <set_LED1+0x44>)
 8001700:	f003 f820 	bl	8004744 <HAL_GPIO_WritePin>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40020c00 	.word	0x40020c00

08001710 <set_LED2>:
void set_LED2(uint8_t val) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	461a      	mov	r2, r3
 800171e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <set_LED2+0x20>)
 8001724:	f003 f80e 	bl	8004744 <HAL_GPIO_WritePin>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40020c00 	.word	0x40020c00

08001734 <set_LED3>:

void set_LED3(uint8_t val) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, val);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	461a      	mov	r2, r3
 8001742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001746:	4803      	ldr	r0, [pc, #12]	; (8001754 <set_LED3+0x20>)
 8001748:	f002 fffc 	bl	8004744 <HAL_GPIO_WritePin>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020c00 	.word	0x40020c00

08001758 <set_LED4>:

void set_LED4(uint8_t val) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, val);
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	461a      	mov	r2, r3
 8001766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <set_LED4+0x20>)
 800176c:	f002 ffea 	bl	8004744 <HAL_GPIO_WritePin>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40020c00 	.word	0x40020c00

0800177c <switchingCircuitIdle>:

void switchingCircuitIdle() {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 8001780:	2200      	movs	r2, #0
 8001782:	2101      	movs	r1, #1
 8001784:	4811      	ldr	r0, [pc, #68]	; (80017cc <switchingCircuitIdle+0x50>)
 8001786:	f002 ffdd 	bl	8004744 <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2102      	movs	r1, #2
 800178e:	480f      	ldr	r0, [pc, #60]	; (80017cc <switchingCircuitIdle+0x50>)
 8001790:	f002 ffd8 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2104      	movs	r1, #4
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <switchingCircuitIdle+0x50>)
 800179a:	f002 ffd3 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	2108      	movs	r1, #8
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <switchingCircuitIdle+0x50>)
 80017a4:	f002 ffce 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2110      	movs	r1, #16
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <switchingCircuitIdle+0x50>)
 80017ae:	f002 ffc9 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <switchingCircuitIdle+0x50>)
 80017b8:	f002 ffc4 	bl	8004744 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2140      	movs	r1, #64	; 0x40
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <switchingCircuitIdle+0x50>)
 80017c2:	f002 ffbf 	bl	8004744 <HAL_GPIO_WritePin>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40020c00 	.word	0x40020c00

080017d0 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d108      	bne.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x24>
		if (timeIndex > 0) {
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 10;
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3b0a      	subs	r3, #10
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017f2:	6013      	str	r3, [r2, #0]
		}
	}
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40000c00 	.word	0x40000c00
 8001804:	20000204 	.word	0x20000204

08001808 <delay_us>:

void delay_us(uint32_t delay_us) {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <delay_us+0x24>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 8001816:	bf00      	nop
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <delay_us+0x24>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1fb      	bne.n	8001818 <delay_us+0x10>
		;
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000204 	.word	0x20000204

08001830 <delay_ms>:

void delay_ms(uint32_t delay_us) {
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us * 1000;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <delay_ms+0x2c>)
 8001844:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 8001846:	bf00      	nop
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <delay_ms+0x2c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1fb      	bne.n	8001848 <delay_ms+0x18>
		;
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	20000204 	.word	0x20000204

08001860 <measureWithExtADC>:

void measureWithExtADC() {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff ff2d 	bl	80016c8 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <measureWithExtADC+0x48>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	490d      	ldr	r1, [pc, #52]	; (80018ac <measureWithExtADC+0x4c>)
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <measureWithExtADC+0x50>)
 800187a:	f004 fa3d 	bl	8005cf8 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 800187e:	2100      	movs	r1, #0
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <measureWithExtADC+0x54>)
 8001882:	f004 fff1 	bl	8006868 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 8001886:	2104      	movs	r1, #4
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <measureWithExtADC+0x54>)
 800188a:	f004 ffed 	bl	8006868 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 800188e:	2100      	movs	r1, #0
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <measureWithExtADC+0x58>)
 8001892:	f004 ffe9 	bl	8006868 <HAL_TIM_PWM_Start_IT>
	set_LED2(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff ff3a 	bl	8001710 <set_LED2>
	state.extAdcMeasuring = 1;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <measureWithExtADC+0x5c>)
 800189e:	2201      	movs	r2, #1
 80018a0:	719a      	strb	r2, [r3, #6]
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000000 	.word	0x20000000
 80018ac:	200451bc 	.word	0x200451bc
 80018b0:	2002f7b0 	.word	0x2002f7b0
 80018b4:	2002f770 	.word	0x2002f770
 80018b8:	200041c4 	.word	0x200041c4
 80018bc:	2002f4a4 	.word	0x2002f4a4

080018c0 <measureWithIntADC>:

void measureWithIntADC() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fefd 	bl	80016c8 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <measureWithIntADC+0x34>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4908      	ldr	r1, [pc, #32]	; (80018f8 <measureWithIntADC+0x38>)
 80018d6:	4809      	ldr	r0, [pc, #36]	; (80018fc <measureWithIntADC+0x3c>)
 80018d8:	f001 fd18 	bl	800330c <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80018dc:	4808      	ldr	r0, [pc, #32]	; (8001900 <measureWithIntADC+0x40>)
 80018de:	f004 ff43 	bl	8006768 <HAL_TIM_Base_Start_IT>
	set_LED3(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f7ff ff26 	bl	8001734 <set_LED3>
	state.intAdcMeasuring = 1;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <measureWithIntADC+0x44>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	71da      	strb	r2, [r3, #7]
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000000 	.word	0x20000000
 80018f8:	2002f8d4 	.word	0x2002f8d4
 80018fc:	2002f53c 	.word	0x2002f53c
 8001900:	2002f72c 	.word	0x2002f72c
 8001904:	2002f4a4 	.word	0x2002f4a4

08001908 <measureWithComp>:

void measureWithComp() {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fed9 	bl	80016c8 <set_LED1>
	// run the timer 4001 - 2 seconds for 2 kHz
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 4001);
 8001916:	f640 73a1 	movw	r3, #4001	; 0xfa1
 800191a:	4a06      	ldr	r2, [pc, #24]	; (8001934 <measureWithComp+0x2c>)
 800191c:	2100      	movs	r1, #0
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <measureWithComp+0x30>)
 8001920:	f005 f8f2 	bl	8006b08 <HAL_TIM_IC_Start_DMA>
	set_LED4(1);
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ff17 	bl	8001758 <set_LED4>
	state.compMeasuring = 1;
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <measureWithComp+0x34>)
 800192c:	2201      	movs	r2, #1
 800192e:	721a      	strb	r2, [r3, #8]
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000214 	.word	0x20000214
 8001938:	2002f814 	.word	0x2002f814
 800193c:	2002f4a4 	.word	0x2002f4a4

08001940 <measurementWithExtAdcDone>:

void measurementWithExtAdcDone() {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0

	//stop DMA
	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <measurementWithExtAdcDone+0xac>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <measurementWithExtAdcDone+0xac>)
 800194a:	f023 0301 	bic.w	r3, r3, #1
 800194e:	6053      	str	r3, [r2, #4]

	filledBuffersExtADC++;
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <measurementWithExtAdcDone+0xb0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <measurementWithExtAdcDone+0xb0>)
 800195a:	701a      	strb	r2, [r3, #0]
	// turn off timers
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800195c:	2100      	movs	r1, #0
 800195e:	4825      	ldr	r0, [pc, #148]	; (80019f4 <measurementWithExtAdcDone+0xb4>)
 8001960:	f005 f80c 	bl	800697c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001964:	2104      	movs	r1, #4
 8001966:	4823      	ldr	r0, [pc, #140]	; (80019f4 <measurementWithExtAdcDone+0xb4>)
 8001968:	f005 f808 	bl	800697c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 800196c:	2100      	movs	r1, #0
 800196e:	4822      	ldr	r0, [pc, #136]	; (80019f8 <measurementWithExtAdcDone+0xb8>)
 8001970:	f005 f804 	bl	800697c <HAL_TIM_PWM_Stop_IT>


	//first buffer is filled
	if (filledBuffersExtADC == 1) {
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <measurementWithExtAdcDone+0xb0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d114      	bne.n	80019a6 <measurementWithExtAdcDone+0x66>
		//start DMA again with second buffer
		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <measurementWithExtAdcDone+0xbc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	491e      	ldr	r1, [pc, #120]	; (8001a00 <measurementWithExtAdcDone+0xc0>)
 8001986:	481f      	ldr	r0, [pc, #124]	; (8001a04 <measurementWithExtAdcDone+0xc4>)
 8001988:	f004 f9b6 	bl	8005cf8 <HAL_SPI_Receive_DMA>
		// turn on timers
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800198c:	2100      	movs	r1, #0
 800198e:	4819      	ldr	r0, [pc, #100]	; (80019f4 <measurementWithExtAdcDone+0xb4>)
 8001990:	f004 ff6a 	bl	8006868 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8001994:	2104      	movs	r1, #4
 8001996:	4817      	ldr	r0, [pc, #92]	; (80019f4 <measurementWithExtAdcDone+0xb4>)
 8001998:	f004 ff66 	bl	8006868 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 800199c:	2100      	movs	r1, #0
 800199e:	4816      	ldr	r0, [pc, #88]	; (80019f8 <measurementWithExtAdcDone+0xb8>)
 80019a0:	f004 ff62 	bl	8006868 <HAL_TIM_PWM_Start_IT>
			state.extAdcSetState = 0;
		} else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 80019a4:	e01f      	b.n	80019e6 <measurementWithExtAdcDone+0xa6>
	else if (filledBuffersExtADC == 2) {
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <measurementWithExtAdcDone+0xb0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d11b      	bne.n	80019e6 <measurementWithExtAdcDone+0xa6>
		set_LED2(0);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff feae 	bl	8001710 <set_LED2>
		state.extAdcReadyToSend = 1;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <measurementWithExtAdcDone+0xc8>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
		state.extAdcMeasuring = 0;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <measurementWithExtAdcDone+0xc8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	719a      	strb	r2, [r3, #6]
		filledBuffersExtADC = 0;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <measurementWithExtAdcDone+0xb0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
		goToIdleAfterMeasurement();
 80019c6:	f000 f899 	bl	8001afc <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <measurementWithExtAdcDone+0xc8>)
 80019cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d106      	bne.n	80019e2 <measurementWithExtAdcDone+0xa2>
			state.extAdcActiveState = 0;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <measurementWithExtAdcDone+0xc8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	70da      	strb	r2, [r3, #3]
			state.extAdcSetState = 0;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <measurementWithExtAdcDone+0xc8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	725a      	strb	r2, [r3, #9]
}
 80019e0:	e001      	b.n	80019e6 <measurementWithExtAdcDone+0xa6>
			prepareForPolarizationPhaseIfPossible();
 80019e2:	f000 f8af 	bl	8001b44 <prepareForPolarizationPhaseIfPossible>
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40013000 	.word	0x40013000
 80019f0:	20000200 	.word	0x20000200
 80019f4:	2002f770 	.word	0x2002f770
 80019f8:	200041c4 	.word	0x200041c4
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20019b9c 	.word	0x20019b9c
 8001a04:	2002f7b0 	.word	0x2002f7b0
 8001a08:	2002f4a4 	.word	0x2002f4a4

08001a0c <measurementWithIntAdcDone>:

void measurementWithIntAdcDone() {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	//stop the ADC when in interrupt
	//if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.
	ADC1->CR2 &= ~ADC_CR2_DMA;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <measurementWithIntAdcDone+0x80>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <measurementWithIntAdcDone+0x80>)
 8001a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a1a:	6093      	str	r3, [r2, #8]

	filledBuffersIntADC++;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <measurementWithIntAdcDone+0x84>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <measurementWithIntAdcDone+0x84>)
 8001a26:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffersIntADC == 1) {
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <measurementWithIntAdcDone+0x84>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d107      	bne.n	8001a40 <measurementWithIntAdcDone+0x34>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <measurementWithIntAdcDone+0x88>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4918      	ldr	r1, [pc, #96]	; (8001a98 <measurementWithIntAdcDone+0x8c>)
 8001a38:	4818      	ldr	r0, [pc, #96]	; (8001a9c <measurementWithIntAdcDone+0x90>)
 8001a3a:	f001 fc67 	bl	800330c <HAL_ADC_Start_DMA>
		// if there are remaning
		else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8001a3e:	e022      	b.n	8001a86 <measurementWithIntAdcDone+0x7a>
	else if (filledBuffersIntADC == 2) {
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <measurementWithIntAdcDone+0x84>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d11e      	bne.n	8001a86 <measurementWithIntAdcDone+0x7a>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001a48:	4815      	ldr	r0, [pc, #84]	; (8001aa0 <measurementWithIntAdcDone+0x94>)
 8001a4a:	f004 feb7 	bl	80067bc <HAL_TIM_Base_Stop_IT>
		set_LED3(0);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fe70 	bl	8001734 <set_LED3>
		filledBuffersIntADC = 0;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <measurementWithIntAdcDone+0x84>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
		state.intAdcReadyToSend = 1;
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <measurementWithIntAdcDone+0x98>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	705a      	strb	r2, [r3, #1]
		state.intAdcMeasuring = 0;
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <measurementWithIntAdcDone+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	71da      	strb	r2, [r3, #7]
		goToIdleAfterMeasurement();
 8001a66:	f000 f849 	bl	8001afc <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <measurementWithIntAdcDone+0x98>)
 8001a6c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d106      	bne.n	8001a82 <measurementWithIntAdcDone+0x76>
			state.intAdcActiveState = 0;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <measurementWithIntAdcDone+0x98>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	711a      	strb	r2, [r3, #4]
			state.intAdcSetState = 0;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <measurementWithIntAdcDone+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	729a      	strb	r2, [r3, #10]
}
 8001a80:	e001      	b.n	8001a86 <measurementWithIntAdcDone+0x7a>
			prepareForPolarizationPhaseIfPossible();
 8001a82:	f000 f85f 	bl	8001b44 <prepareForPolarizationPhaseIfPossible>
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40012000 	.word	0x40012000
 8001a90:	20000201 	.word	0x20000201
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20004314 	.word	0x20004314
 8001a9c:	2002f53c 	.word	0x2002f53c
 8001aa0:	2002f72c 	.word	0x2002f72c
 8001aa4:	2002f4a4 	.word	0x2002f4a4

08001aa8 <measurementWithCompDone>:

void measurementWithCompDone(TIM_HandleTypeDef *htim) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4810      	ldr	r0, [pc, #64]	; (8001af4 <measurementWithCompDone+0x4c>)
 8001ab4:	f005 f924 	bl	8006d00 <HAL_TIM_IC_Stop_DMA>
	set_LED4(0);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fe4d 	bl	8001758 <set_LED4>
	state.compReadyToSend = 1;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <measurementWithCompDone+0x50>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	709a      	strb	r2, [r3, #2]
	state.compMeasuring = 0;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <measurementWithCompDone+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	721a      	strb	r2, [r3, #8]

	goToIdleAfterMeasurement();
 8001aca:	f000 f817 	bl	8001afc <goToIdleAfterMeasurement>

	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <measurementWithCompDone+0x50>)
 8001ad0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <measurementWithCompDone+0x3e>
		state.compActiveState = 0;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <measurementWithCompDone+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	715a      	strb	r2, [r3, #5]
		state.compSetState = 0;
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <measurementWithCompDone+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	72da      	strb	r2, [r3, #11]
	} else {
		prepareForPolarizationPhaseIfPossible();
	}
}
 8001ae4:	e001      	b.n	8001aea <measurementWithCompDone+0x42>
		prepareForPolarizationPhaseIfPossible();
 8001ae6:	f000 f82d 	bl	8001b44 <prepareForPolarizationPhaseIfPossible>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2002f814 	.word	0x2002f814
 8001af8:	2002f4a4 	.word	0x2002f4a4

08001afc <goToIdleAfterMeasurement>:

void goToIdleAfterMeasurement() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	//only if all measurements were done
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <goToIdleAfterMeasurement+0x44>)
 8001b02:	799b      	ldrb	r3, [r3, #6]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d118      	bne.n	8001b3a <goToIdleAfterMeasurement+0x3e>
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <goToIdleAfterMeasurement+0x44>)
 8001b0a:	79db      	ldrb	r3, [r3, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d114      	bne.n	8001b3a <goToIdleAfterMeasurement+0x3e>
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <goToIdleAfterMeasurement+0x44>)
 8001b12:	7a1b      	ldrb	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d110      	bne.n	8001b3a <goToIdleAfterMeasurement+0x3e>
		switchingCircuitIdle();
 8001b18:	f7ff fe30 	bl	800177c <switchingCircuitIdle>
		// -1 indicates infinity measurements
		if (state.remainingMeasurements != -1) {
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <goToIdleAfterMeasurement+0x44>)
 8001b1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b26:	d008      	beq.n	8001b3a <goToIdleAfterMeasurement+0x3e>
			state.remainingMeasurements--;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <goToIdleAfterMeasurement+0x44>)
 8001b2a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <goToIdleAfterMeasurement+0x44>)
 8001b38:	819a      	strh	r2, [r3, #12]
		}
	}
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2002f4a4 	.word	0x2002f4a4

08001b44 <prepareForPolarizationPhaseIfPossible>:

void prepareForPolarizationPhaseIfPossible() {
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <prepareForPolarizationPhaseIfPossible+0x22>
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001b52:	79db      	ldrb	r3, [r3, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d106      	bne.n	8001b66 <prepareForPolarizationPhaseIfPossible+0x22>
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001b5a:	7a1b      	ldrb	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <prepareForPolarizationPhaseIfPossible+0x22>
		state.preparedToRunPolarizationPhase = 1;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	745a      	strb	r2, [r3, #17]
	}
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	2002f4a4 	.word	0x2002f4a4

08001b74 <initState>:

void initState() {
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <initState+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
	state.intAdcReadyToSend = 0;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <initState+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	705a      	strb	r2, [r3, #1]
	state.compReadyToSend = 0;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <initState+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	709a      	strb	r2, [r3, #2]

	state.extAdcActiveState = 0;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <initState+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	70da      	strb	r2, [r3, #3]
	state.extAdcSetState = 0;
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <initState+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	725a      	strb	r2, [r3, #9]
	state.intAdcActiveState = 0;
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <initState+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	711a      	strb	r2, [r3, #4]

	state.extAdcMeasuring = 0;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <initState+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	719a      	strb	r2, [r3, #6]
	state.intAdcMeasuring = 0;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <initState+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	71da      	strb	r2, [r3, #7]
	state.compMeasuring = 0;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <initState+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	721a      	strb	r2, [r3, #8]

	state.intAdcSetState = 0;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <initState+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	729a      	strb	r2, [r3, #10]
	state.compActiveState = 0;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <initState+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	715a      	strb	r2, [r3, #5]
	state.compSetState = 0;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <initState+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	72da      	strb	r2, [r3, #11]

	state.setMeasurements = 0;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <initState+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	81da      	strh	r2, [r3, #14]
	state.remainingMeasurements = 0;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <initState+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	819a      	strh	r2, [r3, #12]
	state.preparedToRunPolarizationPhase = 0;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <initState+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	745a      	strb	r2, [r3, #17]
	state.measureTechniqueUpdated = 0;
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <initState+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	741a      	strb	r2, [r3, #16]

	state.index = 0;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <initState+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	2002f4a4 	.word	0x2002f4a4

08001bec <HAL_TIM_IC_CaptureCallback>:

//comparator finished measuring
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d102      	bne.n	8001c04 <HAL_TIM_IC_CaptureCallback+0x18>
		measurementWithCompDone(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff52 	bl	8001aa8 <measurementWithCompDone>
	}
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_ADC_ConvCpltCallback>:

//intADC - buffer filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_ADC_ConvCpltCallback+0x20>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConvCpltCallback+0x16>
		measurementWithIntAdcDone();
 8001c1e:	f7ff fef5 	bl	8001a0c <measurementWithIntAdcDone>
	}
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40012000 	.word	0x40012000

08001c30 <HAL_UART_RxCpltCallback>:

//char received with via USB
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_UART_RxCpltCallback+0x20>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_RxCpltCallback+0x16>
		characterReceived();
 8001c42:	f000 f807 	bl	8001c54 <characterReceived>
	}
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40004800 	.word	0x40004800

08001c54 <characterReceived>:

void characterReceived() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	490d      	ldr	r1, [pc, #52]	; (8001c90 <characterReceived+0x3c>)
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <characterReceived+0x40>)
 8001c5e:	f006 fce5 	bl	800862c <HAL_UART_Receive_IT>
	//receivedCharIndex shouldn't exceed 100
	receivedChars[(receivedCharIndex++) % 100] = buffer_uart_rx[0];
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <characterReceived+0x44>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	b2d1      	uxtb	r1, r2
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <characterReceived+0x44>)
 8001c6c:	7011      	strb	r1, [r2, #0]
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <characterReceived+0x48>)
 8001c70:	fba2 1203 	umull	r1, r2, r2, r3
 8001c74:	0952      	lsrs	r2, r2, #5
 8001c76:	2164      	movs	r1, #100	; 0x64
 8001c78:	fb01 f202 	mul.w	r2, r1, r2
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <characterReceived+0x3c>)
 8001c84:	7819      	ldrb	r1, [r3, #0]
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <characterReceived+0x4c>)
 8001c88:	5499      	strb	r1, [r3, r2]

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20004310 	.word	0x20004310
 8001c94:	20004244 	.word	0x20004244
 8001c98:	2002f76c 	.word	0x2002f76c
 8001c9c:	51eb851f 	.word	0x51eb851f
 8001ca0:	2002f6c8 	.word	0x2002f6c8

08001ca4 <HAL_SPI_RxCpltCallback>:

//extADC - buffer filled
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_SPI_RxCpltCallback+0x20>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_SPI_RxCpltCallback+0x16>
		measurementWithExtAdcDone();
 8001cb6:	f7ff fe43 	bl	8001940 <measurementWithExtAdcDone>
	}
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40013000 	.word	0x40013000

08001cc8 <parseText>:

int parseText() {
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b0a6      	sub	sp, #152	; 0x98
 8001ccc:	af00      	add	r7, sp, #0
	//-------------------------------------------------------------------------------------
	//check if there is two times character * indicating complete command
	//-------------------------------------------------------------------------------------
	uint8_t i, indexOfHead, indexOfTail, tailCount = 0, headCount = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	char msg_buffers[80];
	char receivedCommand[50];

	for (i = 0; i < strlen(receivedCommand); i++) {
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001ce0:	e00c      	b.n	8001cfc <parseText+0x34>
		receivedCommand[i] = '\0';
 8001ce2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ce6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001cea:	4413      	add	r3, r2
 8001cec:	2200      	movs	r2, #0
 8001cee:	f803 2c98 	strb.w	r2, [r3, #-152]
	for (i = 0; i < strlen(receivedCommand); i++) {
 8001cf2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001cfc:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001d00:	463b      	mov	r3, r7
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe faa6 	bl	8000254 <strlen>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	429c      	cmp	r4, r3
 8001d0c:	d3e9      	bcc.n	8001ce2 <parseText+0x1a>
	}
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d14:	e00c      	b.n	8001d30 <parseText+0x68>
		msg_buffers[i] = '\0';
 8001d16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d1a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001d1e:	4413      	add	r3, r2
 8001d20:	2200      	movs	r2, #0
 8001d22:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001d26:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d30:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001d34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fa8b 	bl	8000254 <strlen>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	429c      	cmp	r4, r3
 8001d42:	d3e8      	bcc.n	8001d16 <parseText+0x4e>
	}
	for (i = 0; i < strlen(receivedChars); i++) {
 8001d44:	2300      	movs	r3, #0
 8001d46:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d4a:	e023      	b.n	8001d94 <parseText+0xcc>
		//head of the message
		if (receivedChars[i] == '<') {
 8001d4c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d50:	4abb      	ldr	r2, [pc, #748]	; (8002040 <parseText+0x378>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	2b3c      	cmp	r3, #60	; 0x3c
 8001d56:	d109      	bne.n	8001d6c <parseText+0xa4>
			indexOfHead = i;
 8001d58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d5c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			headCount++;
 8001d60:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001d64:	3301      	adds	r3, #1
 8001d66:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8001d6a:	e00e      	b.n	8001d8a <parseText+0xc2>
		}
		//tail of the message
		else if (receivedChars[i] == '>') {
 8001d6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d70:	4ab3      	ldr	r2, [pc, #716]	; (8002040 <parseText+0x378>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	2b3e      	cmp	r3, #62	; 0x3e
 8001d76:	d108      	bne.n	8001d8a <parseText+0xc2>
			indexOfTail = i;
 8001d78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d7c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			tailCount++;
 8001d80:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001d84:	3301      	adds	r3, #1
 8001d86:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	for (i = 0; i < strlen(receivedChars); i++) {
 8001d8a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d94:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001d98:	48a9      	ldr	r0, [pc, #676]	; (8002040 <parseText+0x378>)
 8001d9a:	f7fe fa5b 	bl	8000254 <strlen>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	429c      	cmp	r4, r3
 8001da2:	d3d3      	bcc.n	8001d4c <parseText+0x84>
		}
	}
	//received message is not complete
	if (headCount > tailCount) {
 8001da4:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001da8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d901      	bls.n	8001db4 <parseText+0xec>
		return 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e1c4      	b.n	800213e <parseText+0x476>
	}
	// received message is complete ->
	else if (headCount == tailCount && headCount > 0 && tailCount > 0) {
 8001db4:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001db8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d157      	bne.n	8001e70 <parseText+0x1a8>
 8001dc0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d053      	beq.n	8001e70 <parseText+0x1a8>
 8001dc8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d04f      	beq.n	8001e70 <parseText+0x1a8>
		sprintf(msg_buffers, "<INFO:Message accepted>\n");
 8001dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dd4:	4a9b      	ldr	r2, [pc, #620]	; (8002044 <parseText+0x37c>)
 8001dd6:	461c      	mov	r4, r3
 8001dd8:	4615      	mov	r5, r2
 8001dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001de2:	c403      	stmia	r4!, {r0, r1}
 8001de4:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 8001de6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fa32 	bl	8000254 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4893      	ldr	r0, [pc, #588]	; (8002048 <parseText+0x380>)
 8001dfc:	f006 fbba 	bl	8008574 <HAL_UART_Transmit_IT>
	}

	//-------------------------------------------------------------------------------------
	// get string between special chars (Only if specialCharCount == 2)
	//-------------------------------------------------------------------------------------
	strncpy(receivedCommand, receivedChars + indexOfHead + 1, indexOfTail - indexOfHead - 1);
 8001e00:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a8e      	ldr	r2, [pc, #568]	; (8002040 <parseText+0x378>)
 8001e08:	1899      	adds	r1, r3, r2
 8001e0a:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001e0e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	461a      	mov	r2, r3
 8001e18:	463b      	mov	r3, r7
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f007 fbda 	bl	80095d4 <strncpy>
	receivedCommand[indexOfTail - indexOfHead - 1] = '\0';
 8001e20:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001e24:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001e30:	4413      	add	r3, r2
 8001e32:	2200      	movs	r2, #0
 8001e34:	f803 2c98 	strb.w	r2, [r3, #-152]

	char *command = strtok(receivedCommand, ":");
 8001e38:	463b      	mov	r3, r7
 8001e3a:	4984      	ldr	r1, [pc, #528]	; (800204c <parseText+0x384>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 fbdf 	bl	8009600 <strtok>
 8001e42:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	char *method = strtok(NULL, ":");
 8001e46:	4981      	ldr	r1, [pc, #516]	; (800204c <parseText+0x384>)
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f007 fbd9 	bl	8009600 <strtok>
 8001e4e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	char *count = strtok(NULL, ":");
 8001e52:	497e      	ldr	r1, [pc, #504]	; (800204c <parseText+0x384>)
 8001e54:	2000      	movs	r0, #0
 8001e56:	f007 fbd3 	bl	8009600 <strtok>
 8001e5a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	//-------------------------------------------------------------------------------------
	// Perform action based on received message
	//-------------------------------------------------------------------------------------

	//<IDN> - identification
	if (strcmp(command, "IDN") == 0) {
 8001e5e:	497c      	ldr	r1, [pc, #496]	; (8002050 <parseText+0x388>)
 8001e60:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001e64:	f7fe f9ec 	bl	8000240 <strcmp>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <parseText+0x1c0>
 8001e6e:	e02a      	b.n	8001ec6 <parseText+0x1fe>
	else if ((headCount < tailCount)) {
 8001e70:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001e74:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d203      	bcs.n	8001e84 <parseText+0x1bc>
		clearReceivedCharsBuffer(); // receivedChars needs to be cleared
 8001e7c:	f000 f970 	bl	8002160 <clearReceivedCharsBuffer>
		return 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e15c      	b.n	800213e <parseText+0x476>
		return 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e15a      	b.n	800213e <parseText+0x476>
		sprintf(msg_buffers, "<INFO:This is proton precession magnetometer - version 1>\n");
 8001e88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e8c:	4a71      	ldr	r2, [pc, #452]	; (8002054 <parseText+0x38c>)
 8001e8e:	461c      	mov	r4, r3
 8001e90:	4615      	mov	r5, r2
 8001e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ea2:	c403      	stmia	r4!, {r0, r1}
 8001ea4:	8022      	strh	r2, [r4, #0]
 8001ea6:	3402      	adds	r4, #2
 8001ea8:	0c13      	lsrs	r3, r2, #16
 8001eaa:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 8001eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe f9cf 	bl	8000254 <strlen>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4861      	ldr	r0, [pc, #388]	; (8002048 <parseText+0x380>)
 8001ec2:	f006 fb57 	bl	8008574 <HAL_UART_Transmit_IT>
	}

	//<INIT> - initialization state
	if (strcmp(command, "INIT") == 0) {
 8001ec6:	4964      	ldr	r1, [pc, #400]	; (8002058 <parseText+0x390>)
 8001ec8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001ecc:	f7fe f9b8 	bl	8000240 <strcmp>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <parseText+0x212>
		initState();
 8001ed6:	f7ff fe4d 	bl	8001b74 <initState>
	}
	//<SET:parameter:value>
	if (strcmp(command, "SET") == 0) {
 8001eda:	4960      	ldr	r1, [pc, #384]	; (800205c <parseText+0x394>)
 8001edc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001ee0:	f7fe f9ae 	bl	8000240 <strcmp>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d127      	bne.n	8001f3a <parseText+0x272>
		//polarization time
		if (strcmp(method, "polT") == 0) {
 8001eea:	495d      	ldr	r1, [pc, #372]	; (8002060 <parseText+0x398>)
 8001eec:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ef0:	f7fe f9a6 	bl	8000240 <strcmp>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 811f 	bne.w	800213a <parseText+0x472>
			//convert received string to integer
			polarizationTime = atoi(count);
 8001efc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001f00:	f007 fb12 	bl	8009528 <atoi>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b56      	ldr	r3, [pc, #344]	; (8002064 <parseText+0x39c>)
 8001f0a:	601a      	str	r2, [r3, #0]

			//min = 5 seconds
			if (polarizationTime < 5000) {
 8001f0c:	4b55      	ldr	r3, [pc, #340]	; (8002064 <parseText+0x39c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d804      	bhi.n	8001f22 <parseText+0x25a>
				polarizationTime = 5000;
 8001f18:	4b52      	ldr	r3, [pc, #328]	; (8002064 <parseText+0x39c>)
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e10b      	b.n	800213a <parseText+0x472>
			}
			//max = 60 seconds
			else if (polarizationTime > 60000) {
 8001f22:	4b50      	ldr	r3, [pc, #320]	; (8002064 <parseText+0x39c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	f240 8105 	bls.w	800213a <parseText+0x472>
				polarizationTime = 60000;
 8001f30:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <parseText+0x39c>)
 8001f32:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e0ff      	b.n	800213a <parseText+0x472>
			}
		}
	}
	//<MEAS:method:count>
	else if (strcmp(command, "MEAS") == 0) {
 8001f3a:	494b      	ldr	r1, [pc, #300]	; (8002068 <parseText+0x3a0>)
 8001f3c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f40:	f7fe f97e 	bl	8000240 <strcmp>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 80f7 	bne.w	800213a <parseText+0x472>
		//external ADC only
		if (strcmp(method, "extADC") == 0) {
 8001f4c:	4947      	ldr	r1, [pc, #284]	; (800206c <parseText+0x3a4>)
 8001f4e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001f52:	f7fe f975 	bl	8000240 <strcmp>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10c      	bne.n	8001f76 <parseText+0x2ae>
			state.extAdcSetState = 1;
 8001f5c:	4b44      	ldr	r3, [pc, #272]	; (8002070 <parseText+0x3a8>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <parseText+0x3a8>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <parseText+0x3a8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001f6e:	4b40      	ldr	r3, [pc, #256]	; (8002070 <parseText+0x3a8>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	741a      	strb	r2, [r3, #16]
 8001f74:	e0c3      	b.n	80020fe <parseText+0x436>
		}
		//internal ADC only
		else if (strcmp(method, "intADC") == 0) {
 8001f76:	493f      	ldr	r1, [pc, #252]	; (8002074 <parseText+0x3ac>)
 8001f78:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001f7c:	f7fe f960 	bl	8000240 <strcmp>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <parseText+0x2d8>
			state.extAdcSetState = 0;
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <parseText+0x3a8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <parseText+0x3a8>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <parseText+0x3a8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <parseText+0x3a8>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	741a      	strb	r2, [r3, #16]
 8001f9e:	e0ae      	b.n	80020fe <parseText+0x436>
		}
		//comparator only
		else if (strcmp(method, "comp") == 0) {
 8001fa0:	4935      	ldr	r1, [pc, #212]	; (8002078 <parseText+0x3b0>)
 8001fa2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fa6:	f7fe f94b 	bl	8000240 <strcmp>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10c      	bne.n	8001fca <parseText+0x302>
			state.extAdcSetState = 0;
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <parseText+0x3a8>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <parseText+0x3a8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 8001fbc:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <parseText+0x3a8>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <parseText+0x3a8>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	741a      	strb	r2, [r3, #16]
 8001fc8:	e099      	b.n	80020fe <parseText+0x436>
		}
		//external ADC + internal ADC
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 8001fca:	492c      	ldr	r1, [pc, #176]	; (800207c <parseText+0x3b4>)
 8001fcc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fd0:	f7fe f936 	bl	8000240 <strcmp>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <parseText+0x322>
 8001fda:	4929      	ldr	r1, [pc, #164]	; (8002080 <parseText+0x3b8>)
 8001fdc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001fe0:	f7fe f92e 	bl	8000240 <strcmp>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <parseText+0x33c>
			state.extAdcSetState = 1;
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <parseText+0x3a8>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <parseText+0x3a8>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <parseText+0x3a8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <parseText+0x3a8>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	741a      	strb	r2, [r3, #16]
 8002002:	e07c      	b.n	80020fe <parseText+0x436>
		}
		//external ADC + comparator
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 8002004:	491f      	ldr	r1, [pc, #124]	; (8002084 <parseText+0x3bc>)
 8002006:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800200a:	f7fe f919 	bl	8000240 <strcmp>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <parseText+0x35c>
 8002014:	491c      	ldr	r1, [pc, #112]	; (8002088 <parseText+0x3c0>)
 8002016:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800201a:	f7fe f911 	bl	8000240 <strcmp>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d133      	bne.n	800208c <parseText+0x3c4>
			state.extAdcSetState = 1;
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <parseText+0x3a8>)
 8002026:	2201      	movs	r2, #1
 8002028:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <parseText+0x3a8>)
 800202c:	2200      	movs	r2, #0
 800202e:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <parseText+0x3a8>)
 8002032:	2201      	movs	r2, #1
 8002034:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <parseText+0x3a8>)
 8002038:	2201      	movs	r2, #1
 800203a:	741a      	strb	r2, [r3, #16]
 800203c:	e05f      	b.n	80020fe <parseText+0x436>
 800203e:	bf00      	nop
 8002040:	2002f6c8 	.word	0x2002f6c8
 8002044:	0800a008 	.word	0x0800a008
 8002048:	20004244 	.word	0x20004244
 800204c:	0800a024 	.word	0x0800a024
 8002050:	0800a028 	.word	0x0800a028
 8002054:	0800a02c 	.word	0x0800a02c
 8002058:	0800a068 	.word	0x0800a068
 800205c:	0800a070 	.word	0x0800a070
 8002060:	0800a074 	.word	0x0800a074
 8002064:	20000004 	.word	0x20000004
 8002068:	0800a07c 	.word	0x0800a07c
 800206c:	0800a084 	.word	0x0800a084
 8002070:	2002f4a4 	.word	0x2002f4a4
 8002074:	0800a08c 	.word	0x0800a08c
 8002078:	0800a094 	.word	0x0800a094
 800207c:	0800a09c 	.word	0x0800a09c
 8002080:	0800a0ac 	.word	0x0800a0ac
 8002084:	0800a0bc 	.word	0x0800a0bc
 8002088:	0800a0c8 	.word	0x0800a0c8
		}
		//internal ADC + comparator
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 800208c:	492e      	ldr	r1, [pc, #184]	; (8002148 <parseText+0x480>)
 800208e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002092:	f7fe f8d5 	bl	8000240 <strcmp>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <parseText+0x3e4>
 800209c:	492b      	ldr	r1, [pc, #172]	; (800214c <parseText+0x484>)
 800209e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80020a2:	f7fe f8cd 	bl	8000240 <strcmp>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10c      	bne.n	80020c6 <parseText+0x3fe>
			state.extAdcSetState = 0;
 80020ac:	4b28      	ldr	r3, [pc, #160]	; (8002150 <parseText+0x488>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 80020b2:	4b27      	ldr	r3, [pc, #156]	; (8002150 <parseText+0x488>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <parseText+0x488>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <parseText+0x488>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	741a      	strb	r2, [r3, #16]
 80020c4:	e01b      	b.n	80020fe <parseText+0x436>
		}
		//external ADC + internal ADC + comparator
		else if ((strcmp(method, "extADC+intADC+comp") == 0) || (strcmp(method, "intADC+extADC+comp") == 0)) {
 80020c6:	4923      	ldr	r1, [pc, #140]	; (8002154 <parseText+0x48c>)
 80020c8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80020cc:	f7fe f8b8 	bl	8000240 <strcmp>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <parseText+0x41e>
 80020d6:	4920      	ldr	r1, [pc, #128]	; (8002158 <parseText+0x490>)
 80020d8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80020dc:	f7fe f8b0 	bl	8000240 <strcmp>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10b      	bne.n	80020fe <parseText+0x436>
			state.compSetState = 1;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <parseText+0x488>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	72da      	strb	r2, [r3, #11]
			state.extAdcSetState = 1;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <parseText+0x488>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <parseText+0x488>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	729a      	strb	r2, [r3, #10]
			state.measureTechniqueUpdated = 1;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <parseText+0x488>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	741a      	strb	r2, [r3, #16]
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 80020fe:	4917      	ldr	r1, [pc, #92]	; (800215c <parseText+0x494>)
 8002100:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002104:	f7fe f89c 	bl	8000240 <strcmp>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <parseText+0x450>
			state.setMeasurements = -1;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <parseText+0x488>)
 8002110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002114:	81da      	strh	r2, [r3, #14]
 8002116:	e010      	b.n	800213a <parseText+0x472>
		} else if (strcmp(count, "") == 0) {
 8002118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <parseText+0x462>
			state.setMeasurements = 1;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <parseText+0x488>)
 8002124:	2201      	movs	r2, #1
 8002126:	81da      	strh	r2, [r3, #14]
 8002128:	e007      	b.n	800213a <parseText+0x472>
		} else {
			state.setMeasurements = atoi(count);
 800212a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800212e:	f007 f9fb 	bl	8009528 <atoi>
 8002132:	4603      	mov	r3, r0
 8002134:	b21a      	sxth	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <parseText+0x488>)
 8002138:	81da      	strh	r2, [r3, #14]
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	clearReceivedCharsBuffer();
 800213a:	f000 f811 	bl	8002160 <clearReceivedCharsBuffer>
}
 800213e:	4618      	mov	r0, r3
 8002140:	3798      	adds	r7, #152	; 0x98
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}
 8002146:	bf00      	nop
 8002148:	0800a0d4 	.word	0x0800a0d4
 800214c:	0800a0e0 	.word	0x0800a0e0
 8002150:	2002f4a4 	.word	0x2002f4a4
 8002154:	0800a0ec 	.word	0x0800a0ec
 8002158:	0800a100 	.word	0x0800a100
 800215c:	0800a114 	.word	0x0800a114

08002160 <clearReceivedCharsBuffer>:

void clearReceivedCharsBuffer() {
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
	int i = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
	//keep everything in range
	if (receivedCharIndex > 50) {
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <clearReceivedCharsBuffer+0x4c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b32      	cmp	r3, #50	; 0x32
 8002170:	d902      	bls.n	8002178 <clearReceivedCharsBuffer+0x18>
		receivedCharIndex = 50;
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <clearReceivedCharsBuffer+0x4c>)
 8002174:	2232      	movs	r2, #50	; 0x32
 8002176:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < receivedCharIndex; i++) {
 8002178:	2300      	movs	r3, #0
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	e007      	b.n	800218e <clearReceivedCharsBuffer+0x2e>
		receivedChars[i] = '\0';
 800217e:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <clearReceivedCharsBuffer+0x50>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < receivedCharIndex; i++) {
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <clearReceivedCharsBuffer+0x4c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4293      	cmp	r3, r2
 8002198:	dbf1      	blt.n	800217e <clearReceivedCharsBuffer+0x1e>
	}
	receivedCharIndex = 0;
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <clearReceivedCharsBuffer+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	2002f76c 	.word	0x2002f76c
 80021b0:	2002f6c8 	.word	0x2002f6c8

080021b4 <sendMeasuredData>:

void sendMeasuredData() {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b094      	sub	sp, #80	; 0x50
 80021b8:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[50];
	uint16_t adc = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int i = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if ((state.extAdcReadyToSend == 1)) {
 80021c4:	4ba8      	ldr	r3, [pc, #672]	; (8002468 <sendMeasuredData+0x2b4>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d172      	bne.n	80022b2 <sendMeasuredData+0xfe>
		set_LED1(0, 0, 1);
 80021cc:	2201      	movs	r2, #1
 80021ce:	2100      	movs	r1, #0
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff fa79 	bl	80016c8 <set_LED1>
		sprintf(msg_buffers, "<MEAS:%u:extADC:\n", state.index);
 80021d6:	4ba4      	ldr	r3, [pc, #656]	; (8002468 <sendMeasuredData+0x2b4>)
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	463b      	mov	r3, r7
 80021dc:	49a3      	ldr	r1, [pc, #652]	; (800246c <sendMeasuredData+0x2b8>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f007 f9d8 	bl	8009594 <siprintf>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 80021e4:	463b      	mov	r3, r7
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f834 	bl	8000254 <strlen>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	463b      	mov	r3, r7
 80021f2:	4619      	mov	r1, r3
 80021f4:	489e      	ldr	r0, [pc, #632]	; (8002470 <sendMeasuredData+0x2bc>)
 80021f6:	f006 f9bd 	bl	8008574 <HAL_UART_Transmit_IT>

		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80021fa:	2300      	movs	r3, #0
 80021fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021fe:	e01a      	b.n	8002236 <sendMeasuredData+0x82>
			adc = (buffer_extAdc_1.uint16[i]);
 8002200:	4a9c      	ldr	r2, [pc, #624]	; (8002474 <sendMeasuredData+0x2c0>)
 8002202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002208:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 800220c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002210:	463b      	mov	r3, r7
 8002212:	4999      	ldr	r1, [pc, #612]	; (8002478 <sendMeasuredData+0x2c4>)
 8002214:	4618      	mov	r0, r3
 8002216:	f007 f9bd 	bl	8009594 <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 800221a:	463b      	mov	r3, r7
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f819 	bl	8000254 <strlen>
 8002222:	4603      	mov	r3, r0
 8002224:	b29a      	uxth	r2, r3
 8002226:	463b      	mov	r3, r7
 8002228:	4619      	mov	r1, r3
 800222a:	4891      	ldr	r0, [pc, #580]	; (8002470 <sendMeasuredData+0x2bc>)
 800222c:	f006 f9a2 	bl	8008574 <HAL_UART_Transmit_IT>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002232:	3301      	adds	r3, #1
 8002234:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002238:	4b90      	ldr	r3, [pc, #576]	; (800247c <sendMeasuredData+0x2c8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d3df      	bcc.n	8002200 <sendMeasuredData+0x4c>
			 adc = (buffer_extAdc_1.uint8[i]);
			 sprintf(msg_buffers, "%c\n", adc);
			 HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);*/
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8002240:	2300      	movs	r3, #0
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002244:	e01a      	b.n	800227c <sendMeasuredData+0xc8>
			adc = (buffer_extAdc_2.uint16[i]);
 8002246:	4a8e      	ldr	r2, [pc, #568]	; (8002480 <sendMeasuredData+0x2cc>)
 8002248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800224a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800224e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8002252:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002256:	463b      	mov	r3, r7
 8002258:	4987      	ldr	r1, [pc, #540]	; (8002478 <sendMeasuredData+0x2c4>)
 800225a:	4618      	mov	r0, r3
 800225c:	f007 f99a 	bl	8009594 <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 8002260:	463b      	mov	r3, r7
 8002262:	4618      	mov	r0, r3
 8002264:	f7fd fff6 	bl	8000254 <strlen>
 8002268:	4603      	mov	r3, r0
 800226a:	b29a      	uxth	r2, r3
 800226c:	463b      	mov	r3, r7
 800226e:	4619      	mov	r1, r3
 8002270:	487f      	ldr	r0, [pc, #508]	; (8002470 <sendMeasuredData+0x2bc>)
 8002272:	f006 f97f 	bl	8008574 <HAL_UART_Transmit_IT>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002278:	3301      	adds	r3, #1
 800227a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800227c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800227e:	4b7f      	ldr	r3, [pc, #508]	; (800247c <sendMeasuredData+0x2c8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d3df      	bcc.n	8002246 <sendMeasuredData+0x92>
		}
		sprintf(msg_buffers, ">\n");
 8002286:	463b      	mov	r3, r7
 8002288:	4a7e      	ldr	r2, [pc, #504]	; (8002484 <sendMeasuredData+0x2d0>)
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	4611      	mov	r1, r2
 800228e:	8019      	strh	r1, [r3, #0]
 8002290:	3302      	adds	r3, #2
 8002292:	0c12      	lsrs	r2, r2, #16
 8002294:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 8002296:	463b      	mov	r3, r7
 8002298:	4618      	mov	r0, r3
 800229a:	f7fd ffdb 	bl	8000254 <strlen>
 800229e:	4603      	mov	r3, r0
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	463b      	mov	r3, r7
 80022a4:	4619      	mov	r1, r3
 80022a6:	4872      	ldr	r0, [pc, #456]	; (8002470 <sendMeasuredData+0x2bc>)
 80022a8:	f006 f964 	bl	8008574 <HAL_UART_Transmit_IT>
		state.extAdcReadyToSend = 0;
 80022ac:	4b6e      	ldr	r3, [pc, #440]	; (8002468 <sendMeasuredData+0x2b4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
	}

	if ((state.intAdcReadyToSend == 1)) {
 80022b2:	4b6d      	ldr	r3, [pc, #436]	; (8002468 <sendMeasuredData+0x2b4>)
 80022b4:	785b      	ldrb	r3, [r3, #1]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d172      	bne.n	80023a0 <sendMeasuredData+0x1ec>
		set_LED1(0, 0, 1);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2100      	movs	r1, #0
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff fa02 	bl	80016c8 <set_LED1>
		sprintf(msg_buffers, "<MEAS:%u:intADC:\n", state.index);
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <sendMeasuredData+0x2b4>)
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	463b      	mov	r3, r7
 80022ca:	496f      	ldr	r1, [pc, #444]	; (8002488 <sendMeasuredData+0x2d4>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f007 f961 	bl	8009594 <siprintf>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 80022d2:	463b      	mov	r3, r7
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fd ffbd 	bl	8000254 <strlen>
 80022da:	4603      	mov	r3, r0
 80022dc:	b29a      	uxth	r2, r3
 80022de:	463b      	mov	r3, r7
 80022e0:	4619      	mov	r1, r3
 80022e2:	4863      	ldr	r0, [pc, #396]	; (8002470 <sendMeasuredData+0x2bc>)
 80022e4:	f006 f946 	bl	8008574 <HAL_UART_Transmit_IT>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022ec:	e01a      	b.n	8002324 <sendMeasuredData+0x170>
			adc = (buffer_intAdc_1.uint16[i]);
 80022ee:	4a67      	ldr	r2, [pc, #412]	; (800248c <sendMeasuredData+0x2d8>)
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80022fa:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80022fe:	463b      	mov	r3, r7
 8002300:	495d      	ldr	r1, [pc, #372]	; (8002478 <sendMeasuredData+0x2c4>)
 8002302:	4618      	mov	r0, r3
 8002304:	f007 f946 	bl	8009594 <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 8002308:	463b      	mov	r3, r7
 800230a:	4618      	mov	r0, r3
 800230c:	f7fd ffa2 	bl	8000254 <strlen>
 8002310:	4603      	mov	r3, r0
 8002312:	b29a      	uxth	r2, r3
 8002314:	463b      	mov	r3, r7
 8002316:	4619      	mov	r1, r3
 8002318:	4855      	ldr	r0, [pc, #340]	; (8002470 <sendMeasuredData+0x2bc>)
 800231a:	f006 f92b 	bl	8008574 <HAL_UART_Transmit_IT>
		for (i = 0; i < samplesPerPeriod; i++) {
 800231e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002320:	3301      	adds	r3, #1
 8002322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002326:	4b55      	ldr	r3, [pc, #340]	; (800247c <sendMeasuredData+0x2c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d3df      	bcc.n	80022ee <sendMeasuredData+0x13a>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 800232e:	2300      	movs	r3, #0
 8002330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002332:	e01a      	b.n	800236a <sendMeasuredData+0x1b6>
			adc = (buffer_intAdc_2.uint16[i]);
 8002334:	4a56      	ldr	r2, [pc, #344]	; (8002490 <sendMeasuredData+0x2dc>)
 8002336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800233c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8002340:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002344:	463b      	mov	r3, r7
 8002346:	494c      	ldr	r1, [pc, #304]	; (8002478 <sendMeasuredData+0x2c4>)
 8002348:	4618      	mov	r0, r3
 800234a:	f007 f923 	bl	8009594 <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 800234e:	463b      	mov	r3, r7
 8002350:	4618      	mov	r0, r3
 8002352:	f7fd ff7f 	bl	8000254 <strlen>
 8002356:	4603      	mov	r3, r0
 8002358:	b29a      	uxth	r2, r3
 800235a:	463b      	mov	r3, r7
 800235c:	4619      	mov	r1, r3
 800235e:	4844      	ldr	r0, [pc, #272]	; (8002470 <sendMeasuredData+0x2bc>)
 8002360:	f006 f908 	bl	8008574 <HAL_UART_Transmit_IT>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002366:	3301      	adds	r3, #1
 8002368:	64fb      	str	r3, [r7, #76]	; 0x4c
 800236a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800236c:	4b43      	ldr	r3, [pc, #268]	; (800247c <sendMeasuredData+0x2c8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d3df      	bcc.n	8002334 <sendMeasuredData+0x180>
		}
		sprintf(msg_buffers, ">\n");
 8002374:	463b      	mov	r3, r7
 8002376:	4a43      	ldr	r2, [pc, #268]	; (8002484 <sendMeasuredData+0x2d0>)
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	4611      	mov	r1, r2
 800237c:	8019      	strh	r1, [r3, #0]
 800237e:	3302      	adds	r3, #2
 8002380:	0c12      	lsrs	r2, r2, #16
 8002382:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 8002384:	463b      	mov	r3, r7
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ff64 	bl	8000254 <strlen>
 800238c:	4603      	mov	r3, r0
 800238e:	b29a      	uxth	r2, r3
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	4836      	ldr	r0, [pc, #216]	; (8002470 <sendMeasuredData+0x2bc>)
 8002396:	f006 f8ed 	bl	8008574 <HAL_UART_Transmit_IT>
		state.intAdcReadyToSend = 0;
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <sendMeasuredData+0x2b4>)
 800239c:	2200      	movs	r2, #0
 800239e:	705a      	strb	r2, [r3, #1]
	}

	if ((state.compReadyToSend == 1)) {
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <sendMeasuredData+0x2b4>)
 80023a2:	789b      	ldrb	r3, [r3, #2]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d15a      	bne.n	800245e <sendMeasuredData+0x2aa>
		set_LED1(0, 0, 1);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2100      	movs	r1, #0
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff f98b 	bl	80016c8 <set_LED1>
		//send frequency
		sprintf(msg_buffers, "<MEAS:%u:comp:\n", state.index);
 80023b2:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <sendMeasuredData+0x2b4>)
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	463b      	mov	r3, r7
 80023b8:	4936      	ldr	r1, [pc, #216]	; (8002494 <sendMeasuredData+0x2e0>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f007 f8ea 	bl	8009594 <siprintf>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 80023c0:	463b      	mov	r3, r7
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fd ff46 	bl	8000254 <strlen>
 80023c8:	4603      	mov	r3, r0
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	463b      	mov	r3, r7
 80023ce:	4619      	mov	r1, r3
 80023d0:	4827      	ldr	r0, [pc, #156]	; (8002470 <sendMeasuredData+0x2bc>)
 80023d2:	f006 f8cf 	bl	8008574 <HAL_UART_Transmit_IT>
		for (i = 0; i < 4000; i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023da:	e021      	b.n	8002420 <sendMeasuredData+0x26c>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 80023dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023de:	3301      	adds	r3, #1
 80023e0:	4a2d      	ldr	r2, [pc, #180]	; (8002498 <sendMeasuredData+0x2e4>)
 80023e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023e6:	492c      	ldr	r1, [pc, #176]	; (8002498 <sendMeasuredData+0x2e4>)
 80023e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
			sprintf(msg_freq, "%d\n", freq);
 80023f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023f8:	4928      	ldr	r1, [pc, #160]	; (800249c <sendMeasuredData+0x2e8>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f007 f8ca 	bl	8009594 <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_freq, strlen(msg_freq));
 8002400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002404:	4618      	mov	r0, r3
 8002406:	f7fd ff25 	bl	8000254 <strlen>
 800240a:	4603      	mov	r3, r0
 800240c:	b29a      	uxth	r2, r3
 800240e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002412:	4619      	mov	r1, r3
 8002414:	4816      	ldr	r0, [pc, #88]	; (8002470 <sendMeasuredData+0x2bc>)
 8002416:	f006 f8ad 	bl	8008574 <HAL_UART_Transmit_IT>
		for (i = 0; i < 4000; i++) {
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	3301      	adds	r3, #1
 800241e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002422:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002426:	dbd9      	blt.n	80023dc <sendMeasuredData+0x228>
		}
		sprintf(msg_buffers, ">\n");
 8002428:	463b      	mov	r3, r7
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <sendMeasuredData+0x2d0>)
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	4611      	mov	r1, r2
 8002430:	8019      	strh	r1, [r3, #0]
 8002432:	3302      	adds	r3, #2
 8002434:	0c12      	lsrs	r2, r2, #16
 8002436:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers));
 8002438:	463b      	mov	r3, r7
 800243a:	4618      	mov	r0, r3
 800243c:	f7fd ff0a 	bl	8000254 <strlen>
 8002440:	4603      	mov	r3, r0
 8002442:	b29a      	uxth	r2, r3
 8002444:	463b      	mov	r3, r7
 8002446:	4619      	mov	r1, r3
 8002448:	4809      	ldr	r0, [pc, #36]	; (8002470 <sendMeasuredData+0x2bc>)
 800244a:	f006 f893 	bl	8008574 <HAL_UART_Transmit_IT>
		set_LED1(0, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff f938 	bl	80016c8 <set_LED1>
		state.compReadyToSend = 0;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <sendMeasuredData+0x2b4>)
 800245a:	2200      	movs	r2, #0
 800245c:	709a      	strb	r2, [r3, #2]
	}
}
 800245e:	bf00      	nop
 8002460:	3750      	adds	r7, #80	; 0x50
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2002f4a4 	.word	0x2002f4a4
 800246c:	0800a118 	.word	0x0800a118
 8002470:	20004244 	.word	0x20004244
 8002474:	200451bc 	.word	0x200451bc
 8002478:	0800a12c 	.word	0x0800a12c
 800247c:	20000000 	.word	0x20000000
 8002480:	20019b9c 	.word	0x20019b9c
 8002484:	0800a134 	.word	0x0800a134
 8002488:	0800a138 	.word	0x0800a138
 800248c:	2002f8d4 	.word	0x2002f8d4
 8002490:	20004314 	.word	0x20004314
 8002494:	0800a14c 	.word	0x0800a14c
 8002498:	20000214 	.word	0x20000214
 800249c:	0800a15c 	.word	0x0800a15c

080024a0 <updateState>:

void updateState() {
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
	state.remainingMeasurements = state.setMeasurements;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <updateState+0x3c>)
 80024a6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <updateState+0x3c>)
 80024ac:	819a      	strh	r2, [r3, #12]
	state.extAdcActiveState = state.extAdcSetState;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <updateState+0x3c>)
 80024b0:	7a5a      	ldrb	r2, [r3, #9]
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <updateState+0x3c>)
 80024b4:	70da      	strb	r2, [r3, #3]
	state.intAdcActiveState = state.intAdcSetState;
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <updateState+0x3c>)
 80024b8:	7a9a      	ldrb	r2, [r3, #10]
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <updateState+0x3c>)
 80024bc:	711a      	strb	r2, [r3, #4]
	state.compActiveState = state.compSetState;
 80024be:	4b07      	ldr	r3, [pc, #28]	; (80024dc <updateState+0x3c>)
 80024c0:	7ada      	ldrb	r2, [r3, #11]
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <updateState+0x3c>)
 80024c4:	715a      	strb	r2, [r3, #5]
	state.preparedToRunPolarizationPhase = 1;
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <updateState+0x3c>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	745a      	strb	r2, [r3, #17]
	state.measureTechniqueUpdated = 0;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <updateState+0x3c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	741a      	strb	r2, [r3, #16]
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	2002f4a4 	.word	0x2002f4a4

080024e0 <stateCanBeUpdated>:

int stateCanBeUpdated() {
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	return (state.measureTechniqueUpdated && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <stateCanBeUpdated+0x4c>)
 80024e6:	7c1b      	ldrb	r3, [r3, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d019      	beq.n	8002520 <stateCanBeUpdated+0x40>
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <stateCanBeUpdated+0x4c>)
 80024ee:	799b      	ldrb	r3, [r3, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d115      	bne.n	8002520 <stateCanBeUpdated+0x40>
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <stateCanBeUpdated+0x4c>)
 80024f6:	79db      	ldrb	r3, [r3, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d111      	bne.n	8002520 <stateCanBeUpdated+0x40>
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <stateCanBeUpdated+0x4c>)
 80024fe:	7a1b      	ldrb	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <stateCanBeUpdated+0x40>
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <stateCanBeUpdated+0x4c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <stateCanBeUpdated+0x40>
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <stateCanBeUpdated+0x4c>)
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <stateCanBeUpdated+0x40>
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <stateCanBeUpdated+0x4c>)
 8002516:	789b      	ldrb	r3, [r3, #2]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <stateCanBeUpdated+0x40>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <stateCanBeUpdated+0x42>
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	2002f4a4 	.word	0x2002f4a4

08002530 <measurementCanRun>:

int measurementCanRun() {
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	return (state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <measurementCanRun+0x4c>)
 8002536:	7c5b      	ldrb	r3, [r3, #17]
			&& !state.compReadyToSend);
 8002538:	2b00      	cmp	r3, #0
 800253a:	d019      	beq.n	8002570 <measurementCanRun+0x40>
	return (state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <measurementCanRun+0x4c>)
 800253e:	799b      	ldrb	r3, [r3, #6]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d115      	bne.n	8002570 <measurementCanRun+0x40>
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <measurementCanRun+0x4c>)
 8002546:	79db      	ldrb	r3, [r3, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d111      	bne.n	8002570 <measurementCanRun+0x40>
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <measurementCanRun+0x4c>)
 800254e:	7a1b      	ldrb	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <measurementCanRun+0x40>
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <measurementCanRun+0x4c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <measurementCanRun+0x40>
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <measurementCanRun+0x4c>)
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <measurementCanRun+0x40>
			&& !state.compReadyToSend);
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <measurementCanRun+0x4c>)
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <measurementCanRun+0x40>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <measurementCanRun+0x42>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	2002f4a4 	.word	0x2002f4a4

08002580 <stateIsIdle>:

int stateIsIdle() {
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
	return (!state.extAdcActiveState && !state.intAdcActiveState && !state.compActiveState && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <stateIsIdle+0x44>)
 8002586:	78db      	ldrb	r3, [r3, #3]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d115      	bne.n	80025b8 <stateIsIdle+0x38>
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <stateIsIdle+0x44>)
 800258e:	791b      	ldrb	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d111      	bne.n	80025b8 <stateIsIdle+0x38>
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <stateIsIdle+0x44>)
 8002596:	795b      	ldrb	r3, [r3, #5]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10d      	bne.n	80025b8 <stateIsIdle+0x38>
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <stateIsIdle+0x44>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <stateIsIdle+0x38>
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <stateIsIdle+0x44>)
 80025a6:	785b      	ldrb	r3, [r3, #1]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <stateIsIdle+0x38>
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <stateIsIdle+0x44>)
 80025ae:	789b      	ldrb	r3, [r3, #2]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <stateIsIdle+0x38>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <stateIsIdle+0x3a>
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	2002f4a4 	.word	0x2002f4a4

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_MspInit+0x44>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <HAL_MspInit+0x44>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_MspInit+0x44>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_MspInit+0x44>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_MspInit+0x44>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_MspInit+0x44>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <HAL_ADC_MspInit+0xd0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d152      	bne.n	80026e8 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <HAL_ADC_MspInit+0xd4>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <HAL_ADC_MspInit+0xd4>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_ADC_MspInit+0xd4>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_ADC_MspInit+0xd4>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <HAL_ADC_MspInit+0xd4>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	; 0x30
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_ADC_MspInit+0xd4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8002672:	2301      	movs	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002676:	2303      	movs	r3, #3
 8002678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	481c      	ldr	r0, [pc, #112]	; (80026f8 <HAL_ADC_MspInit+0xd8>)
 8002686:	f001 feb3 	bl	80043f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <HAL_ADC_MspInit+0xe0>)
 800268e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 8002692:	2200      	movs	r2, #0
 8002694:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026bc:	2200      	movs	r2, #0
 80026be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026c0:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026cc:	480b      	ldr	r0, [pc, #44]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026ce:	f001 faf7 	bl	8003cc0 <HAL_DMA_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80026d8:	f7ff ff76 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38
 80026e2:	4a06      	ldr	r2, [pc, #24]	; (80026fc <HAL_ADC_MspInit+0xdc>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40012000 	.word	0x40012000
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	2002f668 	.word	0x2002f668
 8002700:	40026470 	.word	0x40026470

08002704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08c      	sub	sp, #48	; 0x30
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3d      	ldr	r2, [pc, #244]	; (8002818 <HAL_I2C_MspInit+0x114>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d128      	bne.n	8002778 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <HAL_I2C_MspInit+0x118>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a3c      	ldr	r2, [pc, #240]	; (800281c <HAL_I2C_MspInit+0x118>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_I2C_MspInit+0x118>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800273e:	23c0      	movs	r3, #192	; 0xc0
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002742:	2312      	movs	r3, #18
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002746:	2301      	movs	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800274e:	2304      	movs	r3, #4
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	4619      	mov	r1, r3
 8002758:	4831      	ldr	r0, [pc, #196]	; (8002820 <HAL_I2C_MspInit+0x11c>)
 800275a:	f001 fe49 	bl	80043f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800275e:	4b2f      	ldr	r3, [pc, #188]	; (800281c <HAL_I2C_MspInit+0x118>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a2e      	ldr	r2, [pc, #184]	; (800281c <HAL_I2C_MspInit+0x118>)
 8002764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <HAL_I2C_MspInit+0x118>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002776:	e04a      	b.n	800280e <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a29      	ldr	r2, [pc, #164]	; (8002824 <HAL_I2C_MspInit+0x120>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d145      	bne.n	800280e <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_I2C_MspInit+0x118>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a25      	ldr	r2, [pc, #148]	; (800281c <HAL_I2C_MspInit+0x118>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_I2C_MspInit+0x118>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_I2C_MspInit+0x118>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a1f      	ldr	r2, [pc, #124]	; (800281c <HAL_I2C_MspInit+0x118>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_I2C_MspInit+0x118>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b8:	2312      	movs	r3, #18
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027bc:	2301      	movs	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027c4:	2304      	movs	r3, #4
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	4619      	mov	r1, r3
 80027ce:	4816      	ldr	r0, [pc, #88]	; (8002828 <HAL_I2C_MspInit+0x124>)
 80027d0:	f001 fe0e 	bl	80043f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027da:	2312      	movs	r3, #18
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027de:	2301      	movs	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027e6:	2304      	movs	r3, #4
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	480e      	ldr	r0, [pc, #56]	; (800282c <HAL_I2C_MspInit+0x128>)
 80027f2:	f001 fdfd 	bl	80043f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_I2C_MspInit+0x118>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_I2C_MspInit+0x118>)
 80027fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_I2C_MspInit+0x118>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
}
 800280e:	bf00      	nop
 8002810:	3730      	adds	r7, #48	; 0x30
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40005400 	.word	0x40005400
 800281c:	40023800 	.word	0x40023800
 8002820:	40020400 	.word	0x40020400
 8002824:	40005c00 	.word	0x40005c00
 8002828:	40020800 	.word	0x40020800
 800282c:	40020000 	.word	0x40020000

08002830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	; 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a46      	ldr	r2, [pc, #280]	; (8002968 <HAL_SPI_MspInit+0x138>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d158      	bne.n	8002904 <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002852:	4b46      	ldr	r3, [pc, #280]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a45      	ldr	r2, [pc, #276]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	4b40      	ldr	r3, [pc, #256]	; (800296c <HAL_SPI_MspInit+0x13c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a3f      	ldr	r2, [pc, #252]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b3d      	ldr	r3, [pc, #244]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8002882:	23b0      	movs	r3, #176	; 0xb0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002892:	2305      	movs	r3, #5
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4834      	ldr	r0, [pc, #208]	; (8002970 <HAL_SPI_MspInit+0x140>)
 800289e:	f001 fda7 	bl	80043f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80028a2:	4b34      	ldr	r3, [pc, #208]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028a4:	4a34      	ldr	r2, [pc, #208]	; (8002978 <HAL_SPI_MspInit+0x148>)
 80028a6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028aa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80028ae:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b0:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b6:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80028e6:	4823      	ldr	r0, [pc, #140]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028e8:	f001 f9ea 	bl	8003cc0 <HAL_DMA_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80028f2:	f7ff fe69 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58
 80028fc:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <HAL_SPI_MspInit+0x144>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002902:	e02c      	b.n	800295e <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1c      	ldr	r2, [pc, #112]	; (800297c <HAL_SPI_MspInit+0x14c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d127      	bne.n	800295e <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a16      	ldr	r2, [pc, #88]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002914:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <HAL_SPI_MspInit+0x13c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a10      	ldr	r2, [pc, #64]	; (800296c <HAL_SPI_MspInit+0x13c>)
 800292c:	f043 0310 	orr.w	r3, r3, #16
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_SPI_MspInit+0x13c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800293e:	2374      	movs	r3, #116	; 0x74
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800294e:	2305      	movs	r3, #5
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	4809      	ldr	r0, [pc, #36]	; (8002980 <HAL_SPI_MspInit+0x150>)
 800295a:	f001 fd49 	bl	80043f0 <HAL_GPIO_Init>
}
 800295e:	bf00      	nop
 8002960:	3730      	adds	r7, #48	; 0x30
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40013000 	.word	0x40013000
 800296c:	40023800 	.word	0x40023800
 8002970:	40020000 	.word	0x40020000
 8002974:	2004515c 	.word	0x2004515c
 8002978:	40026410 	.word	0x40026410
 800297c:	40013400 	.word	0x40013400
 8002980:	40021000 	.word	0x40021000

08002984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_TIM_Base_MspInit+0x114>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d114      	bne.n	80029c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002996:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a40      	ldr	r2, [pc, #256]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2019      	movs	r0, #25
 80029b4:	f001 f94d 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029b8:	2019      	movs	r0, #25
 80029ba:	f001 f966 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029be:	e066      	b.n	8002a8e <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a36      	ldr	r2, [pc, #216]	; (8002aa0 <HAL_TIM_Base_MspInit+0x11c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d114      	bne.n	80029f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a33      	ldr	r2, [pc, #204]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2101      	movs	r1, #1
 80029e6:	201d      	movs	r0, #29
 80029e8:	f001 f933 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029ec:	201d      	movs	r0, #29
 80029ee:	f001 f94c 	bl	8003c8a <HAL_NVIC_EnableIRQ>
}
 80029f2:	e04c      	b.n	8002a8e <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM5)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <HAL_TIM_Base_MspInit+0x120>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d114      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029fe:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a04:	f043 0308 	orr.w	r3, r3, #8
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2101      	movs	r1, #1
 8002a1a:	2032      	movs	r0, #50	; 0x32
 8002a1c:	f001 f919 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002a20:	2032      	movs	r0, #50	; 0x32
 8002a22:	f001 f932 	bl	8003c8a <HAL_NVIC_EnableIRQ>
}
 8002a26:	e032      	b.n	8002a8e <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <HAL_TIM_Base_MspInit+0x124>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d114      	bne.n	8002a5c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a38:	f043 0310 	orr.w	r3, r3, #16
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	2036      	movs	r0, #54	; 0x36
 8002a50:	f001 f8ff 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a54:	2036      	movs	r0, #54	; 0x36
 8002a56:	f001 f918 	bl	8003c8a <HAL_NVIC_EnableIRQ>
}
 8002a5a:	e018      	b.n	8002a8e <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM8)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a12      	ldr	r2, [pc, #72]	; (8002aac <HAL_TIM_Base_MspInit+0x128>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_TIM_Base_MspInit+0x118>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2101      	movs	r1, #1
 8002a82:	202e      	movs	r0, #46	; 0x2e
 8002a84:	f001 f8e5 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002a88:	202e      	movs	r0, #46	; 0x2e
 8002a8a:	f001 f8fe 	bl	8003c8a <HAL_NVIC_EnableIRQ>
}
 8002a8e:	bf00      	nop
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40010000 	.word	0x40010000
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000c00 	.word	0x40000c00
 8002aa8:	40001000 	.word	0x40001000
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d160      	bne.n	8002b94 <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ad2:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_TIM_IC_MspInit+0xec>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <HAL_TIM_IC_MspInit+0xec>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_TIM_IC_MspInit+0xec>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_TIM_IC_MspInit+0xec>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a2b      	ldr	r2, [pc, #172]	; (8002b9c <HAL_TIM_IC_MspInit+0xec>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_TIM_IC_MspInit+0xec>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8002b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4820      	ldr	r0, [pc, #128]	; (8002ba0 <HAL_TIM_IC_MspInit+0xf0>)
 8002b20:	f001 fc66 	bl	80043f0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b26:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <HAL_TIM_IC_MspInit+0xf8>)
 8002b28:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b2c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b30:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b44:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b4c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b54:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002b56:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002b68:	480e      	ldr	r0, [pc, #56]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b6a:	f001 f8a9 	bl	8003cc0 <HAL_DMA_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8002b74:	f7ff fd28 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_TIM_IC_MspInit+0xf4>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2101      	movs	r1, #1
 8002b88:	201c      	movs	r0, #28
 8002b8a:	f001 f862 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b8e:	201c      	movs	r0, #28
 8002b90:	f001 f87b 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b94:	bf00      	nop
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	200040e4 	.word	0x200040e4
 8002ba8:	40026088 	.word	0x40026088

08002bac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x44>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_TIM_PWM_MspInit+0x48>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <HAL_TIM_PWM_MspInit+0x48>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_TIM_PWM_MspInit+0x48>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2101      	movs	r1, #1
 8002bda:	201e      	movs	r0, #30
 8002bdc:	f001 f839 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002be0:	201e      	movs	r0, #30
 8002be2:	f001 f852 	bl	8003c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a45      	ldr	r2, [pc, #276]	; (8002d2c <HAL_TIM_MspPostInit+0x134>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d11d      	bne.n	8002c56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c1a:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a44      	ldr	r2, [pc, #272]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8002c32:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4839      	ldr	r0, [pc, #228]	; (8002d34 <HAL_TIM_MspPostInit+0x13c>)
 8002c50:	f001 fbce 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002c54:	e065      	b.n	8002d22 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a37      	ldr	r2, [pc, #220]	; (8002d38 <HAL_TIM_MspPostInit+0x140>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d11c      	bne.n	8002c9a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6c:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8002c78:	2340      	movs	r3, #64	; 0x40
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	f107 031c 	add.w	r3, r7, #28
 8002c90:	4619      	mov	r1, r3
 8002c92:	482a      	ldr	r0, [pc, #168]	; (8002d3c <HAL_TIM_MspPostInit+0x144>)
 8002c94:	f001 fbac 	bl	80043f0 <HAL_GPIO_Init>
}
 8002c98:	e043      	b.n	8002d22 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_TIM_MspPostInit+0x148>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d11d      	bne.n	8002ce0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002caa:	f043 0308 	orr.w	r3, r3, #8
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 8002cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	481a      	ldr	r0, [pc, #104]	; (8002d44 <HAL_TIM_MspPostInit+0x14c>)
 8002cda:	f001 fb89 	bl	80043f0 <HAL_GPIO_Init>
}
 8002cde:	e020      	b.n	8002d22 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_MspPostInit+0x150>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d11b      	bne.n	8002d22 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_TIM_MspPostInit+0x138>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8002d02:	2340      	movs	r3, #64	; 0x40
 8002d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d12:	2303      	movs	r3, #3
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	480b      	ldr	r0, [pc, #44]	; (8002d4c <HAL_TIM_MspPostInit+0x154>)
 8002d1e:	f001 fb67 	bl	80043f0 <HAL_GPIO_Init>
}
 8002d22:	bf00      	nop
 8002d24:	3730      	adds	r7, #48	; 0x30
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40010400 	.word	0x40010400
 8002d4c:	40020800 	.word	0x40020800

08002d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b092      	sub	sp, #72	; 0x48
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a79      	ldr	r2, [pc, #484]	; (8002f54 <HAL_UART_MspInit+0x204>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d129      	bne.n	8002dc6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d72:	4b79      	ldr	r3, [pc, #484]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a78      	ldr	r2, [pc, #480]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8a:	4b73      	ldr	r3, [pc, #460]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a72      	ldr	r2, [pc, #456]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b70      	ldr	r3, [pc, #448]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 8002da2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db0:	2303      	movs	r3, #3
 8002db2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002db4:	2308      	movs	r3, #8
 8002db6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4867      	ldr	r0, [pc, #412]	; (8002f5c <HAL_UART_MspInit+0x20c>)
 8002dc0:	f001 fb16 	bl	80043f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dc4:	e0c1      	b.n	8002f4a <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <HAL_UART_MspInit+0x210>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d129      	bne.n	8002e24 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002dd0:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	4a60      	ldr	r2, [pc, #384]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002dd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dda:	6413      	str	r3, [r2, #64]	; 0x40
 8002ddc:	4b5e      	ldr	r3, [pc, #376]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002de8:	4b5b      	ldr	r3, [pc, #364]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a5a      	ldr	r2, [pc, #360]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002dee:	f043 0310 	orr.w	r3, r3, #16
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b58      	ldr	r3, [pc, #352]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002e00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002e12:	2308      	movs	r3, #8
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4851      	ldr	r0, [pc, #324]	; (8002f64 <HAL_UART_MspInit+0x214>)
 8002e1e:	f001 fae7 	bl	80043f0 <HAL_GPIO_Init>
}
 8002e22:	e092      	b.n	8002f4a <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4f      	ldr	r2, [pc, #316]	; (8002f68 <HAL_UART_MspInit+0x218>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d129      	bne.n	8002e82 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a49      	ldr	r2, [pc, #292]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e34:	f043 0310 	orr.w	r3, r3, #16
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e46:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8002e5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e64:	2302      	movs	r3, #2
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002e70:	2304      	movs	r3, #4
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4838      	ldr	r0, [pc, #224]	; (8002f5c <HAL_UART_MspInit+0x20c>)
 8002e7c:	f001 fab8 	bl	80043f0 <HAL_GPIO_Init>
}
 8002e80:	e063      	b.n	8002f4a <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a39      	ldr	r2, [pc, #228]	; (8002f6c <HAL_UART_MspInit+0x21c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d128      	bne.n	8002ede <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	4a31      	ldr	r2, [pc, #196]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e96:	6413      	str	r3, [r2, #64]	; 0x40
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ecc:	2307      	movs	r3, #7
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4826      	ldr	r0, [pc, #152]	; (8002f70 <HAL_UART_MspInit+0x220>)
 8002ed8:	f001 fa8a 	bl	80043f0 <HAL_GPIO_Init>
}
 8002edc:	e035      	b.n	8002f4a <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <HAL_UART_MspInit+0x224>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d130      	bne.n	8002f4a <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_UART_MspInit+0x208>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8002f18:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f26:	2303      	movs	r3, #3
 8002f28:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f32:	4619      	mov	r1, r3
 8002f34:	4809      	ldr	r0, [pc, #36]	; (8002f5c <HAL_UART_MspInit+0x20c>)
 8002f36:	f001 fa5b 	bl	80043f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	2027      	movs	r0, #39	; 0x27
 8002f40:	f000 fe87 	bl	8003c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f44:	2027      	movs	r0, #39	; 0x27
 8002f46:	f000 fea0 	bl	8003c8a <HAL_NVIC_EnableIRQ>
}
 8002f4a:	bf00      	nop
 8002f4c:	3748      	adds	r7, #72	; 0x48
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40005000 	.word	0x40005000
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40007800 	.word	0x40007800
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40011000 	.word	0x40011000
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40004800 	.word	0x40004800

08002f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f8a:	e7fe      	b.n	8002f8a <HardFault_Handler+0x4>

08002f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <MemManage_Handler+0x4>

08002f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f96:	e7fe      	b.n	8002f96 <BusFault_Handler+0x4>

08002f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <UsageFault_Handler+0x4>

08002f9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fcc:	f000 f918 	bl	8003200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <DMA1_Stream5_IRQHandler+0x10>)
 8002fda:	f000 ffa1 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200040e4 	.word	0x200040e4

08002fe8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fee:	f003 ff55 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2002f770 	.word	0x2002f770

08002ffc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <TIM2_IRQHandler+0x10>)
 8003002:	f003 ff4b 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2002f814 	.word	0x2002f814

08003010 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <TIM3_IRQHandler+0x10>)
 8003016:	f003 ff41 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	2002f464 	.word	0x2002f464

08003024 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <TIM4_IRQHandler+0x10>)
 800302a:	f003 ff37 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20004204 	.word	0x20004204

08003038 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <USART3_IRQHandler+0x10>)
 800303e:	f005 fb97 	bl	8008770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20004244 	.word	0x20004244

0800304c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <TIM8_CC_IRQHandler+0x10>)
 8003052:	f003 ff23 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200041c4 	.word	0x200041c4

08003060 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <TIM5_IRQHandler+0x10>)
 8003066:	f003 ff19 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2002f424 	.word	0x2002f424

08003074 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <TIM6_DAC_IRQHandler+0x10>)
 800307a:	f003 ff0f 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	2002f72c 	.word	0x2002f72c

08003088 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <DMA2_Stream0_IRQHandler+0x10>)
 800308e:	f000 ff47 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2004515c 	.word	0x2004515c

0800309c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <DMA2_Stream4_IRQHandler+0x10>)
 80030a2:	f000 ff3d 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2002f668 	.word	0x2002f668

080030b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <_sbrk+0x50>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <_sbrk+0x16>
		heap_end = &end;
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <_sbrk+0x50>)
 80030c2:	4a10      	ldr	r2, [pc, #64]	; (8003104 <_sbrk+0x54>)
 80030c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <_sbrk+0x50>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <_sbrk+0x50>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	466a      	mov	r2, sp
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d907      	bls.n	80030ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030da:	f006 fa29 	bl	8009530 <__errno>
 80030de:	4602      	mov	r2, r0
 80030e0:	230c      	movs	r3, #12
 80030e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
 80030e8:	e006      	b.n	80030f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <_sbrk+0x50>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	4a03      	ldr	r2, [pc, #12]	; (8003100 <_sbrk+0x50>)
 80030f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000208 	.word	0x20000208
 8003104:	2005aa50 	.word	0x2005aa50

08003108 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <SystemInit+0x28>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	4a07      	ldr	r2, [pc, #28]	; (8003130 <SystemInit+0x28>)
 8003114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <SystemInit+0x28>)
 800311e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003122:	609a      	str	r2, [r3, #8]
#endif
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800316c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003138:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800313a:	e003      	b.n	8003144 <LoopCopyDataInit>

0800313c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800313e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003140:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003142:	3104      	adds	r1, #4

08003144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003144:	480b      	ldr	r0, [pc, #44]	; (8003174 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003148:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800314a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800314c:	d3f6      	bcc.n	800313c <CopyDataInit>
  ldr  r2, =_sbss
 800314e:	4a0b      	ldr	r2, [pc, #44]	; (800317c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003150:	e002      	b.n	8003158 <LoopFillZerobss>

08003152 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003152:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003154:	f842 3b04 	str.w	r3, [r2], #4

08003158 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800315a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800315c:	d3f9      	bcc.n	8003152 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800315e:	f7ff ffd3 	bl	8003108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003162:	f006 f9eb 	bl	800953c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003166:	f7fd fa53 	bl	8000610 <main>
  bx  lr    
 800316a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800316c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003170:	0800a2d0 	.word	0x0800a2d0
  ldr  r0, =_sdata
 8003174:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003178:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800317c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8003180:	2005aa4c 	.word	0x2005aa4c

08003184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003184:	e7fe      	b.n	8003184 <ADC_IRQHandler>

08003186 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800318a:	2003      	movs	r0, #3
 800318c:	f000 fd56 	bl	8003c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003190:	2000      	movs	r0, #0
 8003192:	f000 f805 	bl	80031a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003196:	f7ff fa1f 	bl	80025d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_InitTick+0x54>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <HAL_InitTick+0x58>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4619      	mov	r1, r3
 80031b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fd71 	bl	8003ca6 <HAL_SYSTICK_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00e      	b.n	80031ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b0f      	cmp	r3, #15
 80031d2:	d80a      	bhi.n	80031ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d4:	2200      	movs	r2, #0
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	f000 fd39 	bl	8003c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e0:	4a06      	ldr	r2, [pc, #24]	; (80031fc <HAL_InitTick+0x5c>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000008 	.word	0x20000008
 80031f8:	20000010 	.word	0x20000010
 80031fc:	2000000c 	.word	0x2000000c

08003200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x20>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_IncTick+0x24>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4413      	add	r3, r2
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_IncTick+0x24>)
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000010 	.word	0x20000010
 8003224:	2005aa44 	.word	0x2005aa44

08003228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return uwTick;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_GetTick+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	2005aa44 	.word	0x2005aa44

08003240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003248:	f7ff ffee 	bl	8003228 <HAL_GetTick>
 800324c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d005      	beq.n	8003266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_Delay+0x40>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003266:	bf00      	nop
 8003268:	f7ff ffde 	bl	8003228 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	429a      	cmp	r2, r3
 8003276:	d8f7      	bhi.n	8003268 <HAL_Delay+0x28>
  {
  }
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000010 	.word	0x20000010

08003284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e031      	b.n	80032fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff f9bc 	bl	8002620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_ADC_Init+0x84>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa66 	bl	80037a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
 80032ee:	e001      	b.n	80032f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	ffffeefd 	.word	0xffffeefd

0800330c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_ADC_Start_DMA+0x1e>
 8003326:	2302      	movs	r3, #2
 8003328:	e0c7      	b.n	80034ba <HAL_ADC_Start_DMA+0x1ae>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d018      	beq.n	8003372 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003350:	4b5c      	ldr	r3, [pc, #368]	; (80034c4 <HAL_ADC_Start_DMA+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a5c      	ldr	r2, [pc, #368]	; (80034c8 <HAL_ADC_Start_DMA+0x1bc>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0c9a      	lsrs	r2, r3, #18
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003364:	e002      	b.n	800336c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3b01      	subs	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 809b 	bne.w	80034b8 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003386:	4b51      	ldr	r3, [pc, #324]	; (80034cc <HAL_ADC_Start_DMA+0x1c0>)
 8003388:	4013      	ands	r3, r2
 800338a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d106      	bne.n	80033cc <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f023 0206 	bic.w	r2, r3, #6
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
 80033ca:	e002      	b.n	80033d2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	4a3c      	ldr	r2, [pc, #240]	; (80034d0 <HAL_ADC_Start_DMA+0x1c4>)
 80033e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	4a3b      	ldr	r2, [pc, #236]	; (80034d4 <HAL_ADC_Start_DMA+0x1c8>)
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	4a3a      	ldr	r2, [pc, #232]	; (80034d8 <HAL_ADC_Start_DMA+0x1cc>)
 80033f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800340a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	334c      	adds	r3, #76	; 0x4c
 8003426:	4619      	mov	r1, r3
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f000 fcf6 	bl	8003e1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_ADC_Start_DMA+0x1d0>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d136      	bne.n	80034b8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	e02d      	b.n	80034b8 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_ADC_Start_DMA+0x1d4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10e      	bne.n	8003484 <HAL_ADC_Start_DMA+0x178>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003482:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <HAL_ADC_Start_DMA+0x1d0>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d113      	bne.n	80034b8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_ADC_Start_DMA+0x1d8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10e      	bne.n	80034b8 <HAL_ADC_Start_DMA+0x1ac>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034b6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000008 	.word	0x20000008
 80034c8:	431bde83 	.word	0x431bde83
 80034cc:	fffff8fe 	.word	0xfffff8fe
 80034d0:	08003999 	.word	0x08003999
 80034d4:	08003a53 	.word	0x08003a53
 80034d8:	08003a6f 	.word	0x08003a6f
 80034dc:	40012300 	.word	0x40012300
 80034e0:	40012000 	.word	0x40012000
 80034e4:	40012200 	.word	0x40012200

080034e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_ADC_ConfigChannel+0x1c>
 8003528:	2302      	movs	r3, #2
 800352a:	e12a      	b.n	8003782 <HAL_ADC_ConfigChannel+0x272>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b09      	cmp	r3, #9
 800353a:	d93a      	bls.n	80035b2 <HAL_ADC_ConfigChannel+0xa2>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003544:	d035      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68d9      	ldr	r1, [r3, #12]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	3b1e      	subs	r3, #30
 800355c:	2207      	movs	r2, #7
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	400a      	ands	r2, r1
 800356a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a87      	ldr	r2, [pc, #540]	; (8003790 <HAL_ADC_ConfigChannel+0x280>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10a      	bne.n	800358c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68d9      	ldr	r1, [r3, #12]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	061a      	lsls	r2, r3, #24
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800358a:	e035      	b.n	80035f8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68d9      	ldr	r1, [r3, #12]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4403      	add	r3, r0
 80035a4:	3b1e      	subs	r3, #30
 80035a6:	409a      	lsls	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035b0:	e022      	b.n	80035f8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6919      	ldr	r1, [r3, #16]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	2207      	movs	r2, #7
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43da      	mvns	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	400a      	ands	r2, r1
 80035d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6919      	ldr	r1, [r3, #16]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	4618      	mov	r0, r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4403      	add	r3, r0
 80035ee:	409a      	lsls	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	d824      	bhi.n	800364a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	3b05      	subs	r3, #5
 8003612:	221f      	movs	r2, #31
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43da      	mvns	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	400a      	ands	r2, r1
 8003620:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	4618      	mov	r0, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	3b05      	subs	r3, #5
 800363c:	fa00 f203 	lsl.w	r2, r0, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	635a      	str	r2, [r3, #52]	; 0x34
 8003648:	e04c      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d824      	bhi.n	800369c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	3b23      	subs	r3, #35	; 0x23
 8003664:	221f      	movs	r2, #31
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43da      	mvns	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	400a      	ands	r2, r1
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	4618      	mov	r0, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3b23      	subs	r3, #35	; 0x23
 800368e:	fa00 f203 	lsl.w	r2, r0, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
 800369a:	e023      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	3b41      	subs	r3, #65	; 0x41
 80036ae:	221f      	movs	r2, #31
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43da      	mvns	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	400a      	ands	r2, r1
 80036bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	4618      	mov	r0, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	3b41      	subs	r3, #65	; 0x41
 80036d8:	fa00 f203 	lsl.w	r2, r0, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2a      	ldr	r2, [pc, #168]	; (8003794 <HAL_ADC_ConfigChannel+0x284>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10a      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1f4>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036f6:	d105      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_ADC_ConfigChannel+0x288>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_ADC_ConfigChannel+0x288>)
 80036fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003702:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a22      	ldr	r2, [pc, #136]	; (8003794 <HAL_ADC_ConfigChannel+0x284>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d109      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x212>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b12      	cmp	r3, #18
 8003714:	d105      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_ADC_ConfigChannel+0x288>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_ADC_ConfigChannel+0x288>)
 800371c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003720:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_ADC_ConfigChannel+0x284>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d125      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x268>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a17      	ldr	r2, [pc, #92]	; (8003790 <HAL_ADC_ConfigChannel+0x280>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <HAL_ADC_ConfigChannel+0x22e>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b11      	cmp	r3, #17
 800373c:	d11c      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_ADC_ConfigChannel+0x288>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_ADC_ConfigChannel+0x288>)
 8003744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003748:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a10      	ldr	r2, [pc, #64]	; (8003790 <HAL_ADC_ConfigChannel+0x280>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_ADC_ConfigChannel+0x28c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a11      	ldr	r2, [pc, #68]	; (80037a0 <HAL_ADC_ConfigChannel+0x290>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0c9a      	lsrs	r2, r3, #18
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800376a:	e002      	b.n	8003772 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3b01      	subs	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f9      	bne.n	800376c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	10000012 	.word	0x10000012
 8003794:	40012000 	.word	0x40012000
 8003798:	40012300 	.word	0x40012300
 800379c:	20000008 	.word	0x20000008
 80037a0:	431bde83 	.word	0x431bde83

080037a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80037ac:	4b78      	ldr	r3, [pc, #480]	; (8003990 <ADC_Init+0x1ec>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a77      	ldr	r2, [pc, #476]	; (8003990 <ADC_Init+0x1ec>)
 80037b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80037b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80037b8:	4b75      	ldr	r3, [pc, #468]	; (8003990 <ADC_Init+0x1ec>)
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4973      	ldr	r1, [pc, #460]	; (8003990 <ADC_Init+0x1ec>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	021a      	lsls	r2, r3, #8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800381a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6899      	ldr	r1, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	4a58      	ldr	r2, [pc, #352]	; (8003994 <ADC_Init+0x1f0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003846:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	e00f      	b.n	800389e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800388c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800389c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0202 	bic.w	r2, r2, #2
 80038ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6899      	ldr	r1, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	005a      	lsls	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	3b01      	subs	r3, #1
 80038f8:	035a      	lsls	r2, r3, #13
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	e007      	b.n	8003914 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003912:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	3b01      	subs	r3, #1
 8003930:	051a      	lsls	r2, r3, #20
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6899      	ldr	r1, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003956:	025a      	lsls	r2, r3, #9
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	029a      	lsls	r2, r3, #10
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40012300 	.word	0x40012300
 8003994:	0f000001 	.word	0x0f000001

08003998 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d13c      	bne.n	8003a2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d12b      	bne.n	8003a24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d127      	bne.n	8003a24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d119      	bne.n	8003a24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0220 	bic.w	r2, r2, #32
 80039fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f043 0201 	orr.w	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7fe f8f1 	bl	8001c0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a2a:	e00e      	b.n	8003a4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff fd5f 	bl	80034fc <HAL_ADC_ErrorCallback>
}
 8003a3e:	e004      	b.n	8003a4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff fd41 	bl	80034e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2240      	movs	r2, #64	; 0x40
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f043 0204 	orr.w	r2, r3, #4
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff fd34 	bl	80034fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <__NVIC_SetPriorityGrouping+0x40>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aca:	4a04      	ldr	r2, [pc, #16]	; (8003adc <__NVIC_SetPriorityGrouping+0x40>)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60d3      	str	r3, [r2, #12]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00
 8003ae0:	05fa0000 	.word	0x05fa0000

08003ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <__NVIC_GetPriorityGrouping+0x18>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	f003 0307 	and.w	r3, r3, #7
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	db0b      	blt.n	8003b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	4907      	ldr	r1, [pc, #28]	; (8003b38 <__NVIC_EnableIRQ+0x38>)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2001      	movs	r0, #1
 8003b22:	fa00 f202 	lsl.w	r2, r0, r2
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100

08003b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	db0a      	blt.n	8003b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	490c      	ldr	r1, [pc, #48]	; (8003b88 <__NVIC_SetPriority+0x4c>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	0112      	lsls	r2, r2, #4
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b64:	e00a      	b.n	8003b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4908      	ldr	r1, [pc, #32]	; (8003b8c <__NVIC_SetPriority+0x50>)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	3b04      	subs	r3, #4
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	440b      	add	r3, r1
 8003b7a:	761a      	strb	r2, [r3, #24]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000e100 	.word	0xe000e100
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f1c3 0307 	rsb	r3, r3, #7
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	bf28      	it	cs
 8003bae:	2304      	movcs	r3, #4
 8003bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d902      	bls.n	8003bc0 <NVIC_EncodePriority+0x30>
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3b03      	subs	r3, #3
 8003bbe:	e000      	b.n	8003bc2 <NVIC_EncodePriority+0x32>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	43d9      	mvns	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	4313      	orrs	r3, r2
         );
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3724      	adds	r7, #36	; 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c08:	d301      	bcc.n	8003c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00f      	b.n	8003c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <SysTick_Config+0x40>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c16:	210f      	movs	r1, #15
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	f7ff ff8e 	bl	8003b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <SysTick_Config+0x40>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <SysTick_Config+0x40>)
 8003c28:	2207      	movs	r2, #7
 8003c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	e000e010 	.word	0xe000e010

08003c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff29 	bl	8003a9c <__NVIC_SetPriorityGrouping>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c64:	f7ff ff3e 	bl	8003ae4 <__NVIC_GetPriorityGrouping>
 8003c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f7ff ff8e 	bl	8003b90 <NVIC_EncodePriority>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff5d 	bl	8003b3c <__NVIC_SetPriority>
}
 8003c82:	bf00      	nop
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff31 	bl	8003b00 <__NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ffa2 	bl	8003bf8 <SysTick_Config>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7ff faac 	bl	8003228 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e099      	b.n	8003e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0201 	bic.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfc:	e00f      	b.n	8003d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cfe:	f7ff fa93 	bl	8003228 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b05      	cmp	r3, #5
 8003d0a:	d908      	bls.n	8003d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e078      	b.n	8003e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e8      	bne.n	8003cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_DMA_Init+0x158>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d107      	bne.n	8003d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	4313      	orrs	r3, r2
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0307 	bic.w	r3, r3, #7
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d117      	bne.n	8003de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fa99 	bl	80042fc <DMA_CheckFifoParam>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dde:	2301      	movs	r3, #1
 8003de0:	e016      	b.n	8003e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa50 	bl	8004290 <DMA_CalcBaseAndBitshift>
 8003df0:	4603      	mov	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	223f      	movs	r2, #63	; 0x3f
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	e010803f 	.word	0xe010803f

08003e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_DMA_Start_IT+0x26>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e048      	b.n	8003ed4 <HAL_DMA_Start_IT+0xb8>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d137      	bne.n	8003ec6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f9e2 	bl	8004234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	223f      	movs	r2, #63	; 0x3f
 8003e76:	409a      	lsls	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0216 	orr.w	r2, r2, #22
 8003e8a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e9a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0208 	orr.w	r2, r2, #8
 8003eb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e005      	b.n	8003ed2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d004      	beq.n	8003efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2280      	movs	r2, #128	; 0x80
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00c      	b.n	8003f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2205      	movs	r2, #5
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003f2c:	4b92      	ldr	r3, [pc, #584]	; (8004178 <HAL_DMA_IRQHandler+0x258>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a92      	ldr	r2, [pc, #584]	; (800417c <HAL_DMA_IRQHandler+0x25c>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0a9b      	lsrs	r3, r3, #10
 8003f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01a      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	2208      	movs	r2, #8
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d012      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fae:	2201      	movs	r2, #1
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d012      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00b      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	409a      	lsls	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d043      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d03c      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	2210      	movs	r2, #16
 800401c:	409a      	lsls	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d108      	bne.n	8004050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d024      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
 800404e:	e01f      	b.n	8004090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01b      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
 8004060:	e016      	b.n	8004090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0208 	bic.w	r2, r2, #8
 800407e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	2220      	movs	r2, #32
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 808e 	beq.w	80041be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8086 	beq.w	80041be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	2220      	movs	r2, #32
 80040b8:	409a      	lsls	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d136      	bne.n	8004138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0216 	bic.w	r2, r2, #22
 80040d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_DMA_IRQHandler+0x1da>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	223f      	movs	r2, #63	; 0x3f
 8004110:	409a      	lsls	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412a:	2b00      	cmp	r3, #0
 800412c:	d07d      	beq.n	800422a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
        }
        return;
 8004136:	e078      	b.n	800422a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01c      	beq.n	8004180 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d108      	bne.n	8004166 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	2b00      	cmp	r3, #0
 800415a:	d030      	beq.n	80041be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
 8004164:	e02b      	b.n	80041be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d027      	beq.n	80041be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
 8004176:	e022      	b.n	80041be <HAL_DMA_IRQHandler+0x29e>
 8004178:	20000008 	.word	0x20000008
 800417c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10f      	bne.n	80041ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0210 	bic.w	r2, r2, #16
 800419c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d032      	beq.n	800422c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d022      	beq.n	8004218 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2205      	movs	r2, #5
 80041d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d307      	bcc.n	8004206 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f2      	bne.n	80041ea <HAL_DMA_IRQHandler+0x2ca>
 8004204:	e000      	b.n	8004208 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004206:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
 8004228:	e000      	b.n	800422c <HAL_DMA_IRQHandler+0x30c>
        return;
 800422a:	bf00      	nop
    }
  }
}
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop

08004234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d108      	bne.n	8004274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004272:	e007      	b.n	8004284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	60da      	str	r2, [r3, #12]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	3b10      	subs	r3, #16
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <DMA_CalcBaseAndBitshift+0x60>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042aa:	4a12      	ldr	r2, [pc, #72]	; (80042f4 <DMA_CalcBaseAndBitshift+0x64>)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d908      	bls.n	80042d0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <DMA_CalcBaseAndBitshift+0x68>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	1d1a      	adds	r2, r3, #4
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	659a      	str	r2, [r3, #88]	; 0x58
 80042ce:	e006      	b.n	80042de <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <DMA_CalcBaseAndBitshift+0x68>)
 80042d8:	4013      	ands	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	aaaaaaab 	.word	0xaaaaaaab
 80042f4:	0800a178 	.word	0x0800a178
 80042f8:	fffffc00 	.word	0xfffffc00

080042fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d11f      	bne.n	8004356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d855      	bhi.n	80043c8 <DMA_CheckFifoParam+0xcc>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <DMA_CheckFifoParam+0x28>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004335 	.word	0x08004335
 8004328:	08004347 	.word	0x08004347
 800432c:	08004335 	.word	0x08004335
 8004330:	080043c9 	.word	0x080043c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d045      	beq.n	80043cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004344:	e042      	b.n	80043cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800434e:	d13f      	bne.n	80043d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004354:	e03c      	b.n	80043d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435e:	d121      	bne.n	80043a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b03      	cmp	r3, #3
 8004364:	d836      	bhi.n	80043d4 <DMA_CheckFifoParam+0xd8>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <DMA_CheckFifoParam+0x70>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	0800437d 	.word	0x0800437d
 8004370:	08004383 	.word	0x08004383
 8004374:	0800437d 	.word	0x0800437d
 8004378:	08004395 	.word	0x08004395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      break;
 8004380:	e02f      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d024      	beq.n	80043d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004392:	e021      	b.n	80043d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800439c:	d11e      	bne.n	80043dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043a2:	e01b      	b.n	80043dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d902      	bls.n	80043b0 <DMA_CheckFifoParam+0xb4>
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d003      	beq.n	80043b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043ae:	e018      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e015      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00e      	beq.n	80043e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      break;
 80043c6:	e00b      	b.n	80043e0 <DMA_CheckFifoParam+0xe4>
      break;
 80043c8:	bf00      	nop
 80043ca:	e00a      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      break;
 80043cc:	bf00      	nop
 80043ce:	e008      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      break;
 80043d0:	bf00      	nop
 80043d2:	e006      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      break;
 80043d4:	bf00      	nop
 80043d6:	e004      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      break;
 80043d8:	bf00      	nop
 80043da:	e002      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80043dc:	bf00      	nop
 80043de:	e000      	b.n	80043e2 <DMA_CheckFifoParam+0xe6>
      break;
 80043e0:	bf00      	nop
    }
  } 
  
  return status; 
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e175      	b.n	80046fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004410:	2201      	movs	r2, #1
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	f040 8164 	bne.w	80046f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d00b      	beq.n	800444e <HAL_GPIO_Init+0x5e>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d007      	beq.n	800444e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004442:	2b11      	cmp	r3, #17
 8004444:	d003      	beq.n	800444e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b12      	cmp	r3, #18
 800444c:	d130      	bne.n	80044b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	2203      	movs	r2, #3
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004484:	2201      	movs	r2, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 0201 	and.w	r2, r3, #1
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x100>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b12      	cmp	r3, #18
 80044ee:	d123      	bne.n	8004538 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3208      	adds	r2, #8
 80044f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	220f      	movs	r2, #15
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	08da      	lsrs	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3208      	adds	r2, #8
 8004532:	69b9      	ldr	r1, [r7, #24]
 8004534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	2203      	movs	r2, #3
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0203 	and.w	r2, r3, #3
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80be 	beq.w	80046f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_GPIO_Init+0x320>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	4a64      	ldr	r2, [pc, #400]	; (8004710 <HAL_GPIO_Init+0x320>)
 8004580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004584:	6453      	str	r3, [r2, #68]	; 0x44
 8004586:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_GPIO_Init+0x320>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004592:	4a60      	ldr	r2, [pc, #384]	; (8004714 <HAL_GPIO_Init+0x324>)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	3302      	adds	r3, #2
 800459a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	220f      	movs	r2, #15
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a57      	ldr	r2, [pc, #348]	; (8004718 <HAL_GPIO_Init+0x328>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d037      	beq.n	800462e <HAL_GPIO_Init+0x23e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a56      	ldr	r2, [pc, #344]	; (800471c <HAL_GPIO_Init+0x32c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d031      	beq.n	800462a <HAL_GPIO_Init+0x23a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a55      	ldr	r2, [pc, #340]	; (8004720 <HAL_GPIO_Init+0x330>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02b      	beq.n	8004626 <HAL_GPIO_Init+0x236>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a54      	ldr	r2, [pc, #336]	; (8004724 <HAL_GPIO_Init+0x334>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d025      	beq.n	8004622 <HAL_GPIO_Init+0x232>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a53      	ldr	r2, [pc, #332]	; (8004728 <HAL_GPIO_Init+0x338>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01f      	beq.n	800461e <HAL_GPIO_Init+0x22e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_GPIO_Init+0x33c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d019      	beq.n	800461a <HAL_GPIO_Init+0x22a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a51      	ldr	r2, [pc, #324]	; (8004730 <HAL_GPIO_Init+0x340>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_GPIO_Init+0x226>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a50      	ldr	r2, [pc, #320]	; (8004734 <HAL_GPIO_Init+0x344>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00d      	beq.n	8004612 <HAL_GPIO_Init+0x222>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a4f      	ldr	r2, [pc, #316]	; (8004738 <HAL_GPIO_Init+0x348>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <HAL_GPIO_Init+0x21e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a4e      	ldr	r2, [pc, #312]	; (800473c <HAL_GPIO_Init+0x34c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_GPIO_Init+0x21a>
 8004606:	2309      	movs	r3, #9
 8004608:	e012      	b.n	8004630 <HAL_GPIO_Init+0x240>
 800460a:	230a      	movs	r3, #10
 800460c:	e010      	b.n	8004630 <HAL_GPIO_Init+0x240>
 800460e:	2308      	movs	r3, #8
 8004610:	e00e      	b.n	8004630 <HAL_GPIO_Init+0x240>
 8004612:	2307      	movs	r3, #7
 8004614:	e00c      	b.n	8004630 <HAL_GPIO_Init+0x240>
 8004616:	2306      	movs	r3, #6
 8004618:	e00a      	b.n	8004630 <HAL_GPIO_Init+0x240>
 800461a:	2305      	movs	r3, #5
 800461c:	e008      	b.n	8004630 <HAL_GPIO_Init+0x240>
 800461e:	2304      	movs	r3, #4
 8004620:	e006      	b.n	8004630 <HAL_GPIO_Init+0x240>
 8004622:	2303      	movs	r3, #3
 8004624:	e004      	b.n	8004630 <HAL_GPIO_Init+0x240>
 8004626:	2302      	movs	r3, #2
 8004628:	e002      	b.n	8004630 <HAL_GPIO_Init+0x240>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_GPIO_Init+0x240>
 800462e:	2300      	movs	r3, #0
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	f002 0203 	and.w	r2, r2, #3
 8004636:	0092      	lsls	r2, r2, #2
 8004638:	4093      	lsls	r3, r2
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004640:	4934      	ldr	r1, [pc, #208]	; (8004714 <HAL_GPIO_Init+0x324>)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	3302      	adds	r3, #2
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800464e:	4b3c      	ldr	r3, [pc, #240]	; (8004740 <HAL_GPIO_Init+0x350>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004672:	4a33      	ldr	r2, [pc, #204]	; (8004740 <HAL_GPIO_Init+0x350>)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004678:	4b31      	ldr	r3, [pc, #196]	; (8004740 <HAL_GPIO_Init+0x350>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800469c:	4a28      	ldr	r2, [pc, #160]	; (8004740 <HAL_GPIO_Init+0x350>)
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046a2:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046c6:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046cc:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <HAL_GPIO_Init+0x350>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	3301      	adds	r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	2b0f      	cmp	r3, #15
 8004700:	f67f ae86 	bls.w	8004410 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004704:	bf00      	nop
 8004706:	3724      	adds	r7, #36	; 0x24
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40023800 	.word	0x40023800
 8004714:	40013800 	.word	0x40013800
 8004718:	40020000 	.word	0x40020000
 800471c:	40020400 	.word	0x40020400
 8004720:	40020800 	.word	0x40020800
 8004724:	40020c00 	.word	0x40020c00
 8004728:	40021000 	.word	0x40021000
 800472c:	40021400 	.word	0x40021400
 8004730:	40021800 	.word	0x40021800
 8004734:	40021c00 	.word	0x40021c00
 8004738:	40022000 	.word	0x40022000
 800473c:	40022400 	.word	0x40022400
 8004740:	40013c00 	.word	0x40013c00

08004744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004754:	787b      	ldrb	r3, [r7, #1]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004760:	e003      	b.n	800476a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004762:	887b      	ldrh	r3, [r7, #2]
 8004764:	041a      	lsls	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	619a      	str	r2, [r3, #24]
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07f      	b.n	800488a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fd ffb0 	bl	8002704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2224      	movs	r2, #36	; 0x24
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	e006      	b.n	8004800 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d104      	bne.n	8004812 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004810:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6859      	ldr	r1, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <HAL_I2C_Init+0x11c>)
 800481e:	430b      	orrs	r3, r1
 8004820:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004830:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	ea42 0103 	orr.w	r1, r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	021a      	lsls	r2, r3, #8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69d9      	ldr	r1, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	02008000 	.word	0x02008000

08004898 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d138      	bne.n	8004920 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e032      	b.n	8004922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b20      	cmp	r3, #32
 8004942:	d139      	bne.n	80049b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800494e:	2302      	movs	r3, #2
 8004950:	e033      	b.n	80049ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2224      	movs	r2, #36	; 0x24
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0201 	bic.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004980:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d6:	6013      	str	r3, [r2, #0]
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40007000 	.word	0x40007000

080049e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a16:	f7fe fc07 	bl	8003228 <HAL_GetTick>
 8004a1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a1c:	e009      	b.n	8004a32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a1e:	f7fe fc03 	bl	8003228 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a2c:	d901      	bls.n	8004a32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e022      	b.n	8004a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3e:	d1ee      	bne.n	8004a1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a40:	4b10      	ldr	r3, [pc, #64]	; (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0f      	ldr	r2, [pc, #60]	; (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a4c:	f7fe fbec 	bl	8003228 <HAL_GetTick>
 8004a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a52:	e009      	b.n	8004a68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a54:	f7fe fbe8 	bl	8003228 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a62:	d901      	bls.n	8004a68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e007      	b.n	8004a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a74:	d1ee      	bne.n	8004a54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000

08004a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e29b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8087 	beq.w	8004bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aac:	4b96      	ldr	r3, [pc, #600]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d00c      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab8:	4b93      	ldr	r3, [pc, #588]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d112      	bne.n	8004aea <HAL_RCC_OscConfig+0x62>
 8004ac4:	4b90      	ldr	r3, [pc, #576]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ad0:	d10b      	bne.n	8004aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad2:	4b8d      	ldr	r3, [pc, #564]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d06c      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x130>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d168      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e275      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d106      	bne.n	8004b02 <HAL_RCC_OscConfig+0x7a>
 8004af4:	4b84      	ldr	r3, [pc, #528]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a83      	ldr	r2, [pc, #524]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e02e      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x9c>
 8004b0a:	4b7f      	ldr	r3, [pc, #508]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a7e      	ldr	r2, [pc, #504]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b7c      	ldr	r3, [pc, #496]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7b      	ldr	r2, [pc, #492]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e01d      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	4b76      	ldr	r3, [pc, #472]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a75      	ldr	r2, [pc, #468]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b73      	ldr	r3, [pc, #460]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a72      	ldr	r2, [pc, #456]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b48:	4b6f      	ldr	r3, [pc, #444]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6e      	ldr	r2, [pc, #440]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b6c      	ldr	r3, [pc, #432]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6b      	ldr	r2, [pc, #428]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fe fb5e 	bl	8003228 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fe fb5a 	bl	8003228 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e229      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	4b61      	ldr	r3, [pc, #388]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0xe8>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fe fb4a 	bl	8003228 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b98:	f7fe fb46 	bl	8003228 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	; 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e215      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	4b57      	ldr	r3, [pc, #348]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x110>
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d069      	beq.n	8004c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc6:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b4d      	ldr	r3, [pc, #308]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d11c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x190>
 8004bde:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_RCC_OscConfig+0x17a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1e9      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	493d      	ldr	r1, [pc, #244]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	e040      	b.n	8004c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c20:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a38      	ldr	r2, [pc, #224]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fe fafc 	bl	8003228 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fe faf8 	bl	8003228 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e1c7      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4929      	ldr	r1, [pc, #164]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
 8004c66:	e018      	b.n	8004c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fe fad8 	bl	8003228 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fe fad4 	bl	8003228 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1a3      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d038      	beq.n	8004d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d019      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb2:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fe fab5 	bl	8003228 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc2:	f7fe fab1 	bl	8003228 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e180      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x23a>
 8004ce0:	e01a      	b.n	8004d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce6:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cee:	f7fe fa9b 	bl	8003228 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7fe fa97 	bl	8003228 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d903      	bls.n	8004d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e166      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
 8004d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	4b92      	ldr	r3, [pc, #584]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ee      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80a4 	beq.w	8004e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b8c      	ldr	r3, [pc, #560]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4b89      	ldr	r3, [pc, #548]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4a88      	ldr	r2, [pc, #544]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3e:	4b86      	ldr	r3, [pc, #536]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4e:	4b83      	ldr	r3, [pc, #524]	; (8004f5c <HAL_RCC_OscConfig+0x4d4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d118      	bne.n	8004d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d5a:	4b80      	ldr	r3, [pc, #512]	; (8004f5c <HAL_RCC_OscConfig+0x4d4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a7f      	ldr	r2, [pc, #508]	; (8004f5c <HAL_RCC_OscConfig+0x4d4>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d66:	f7fe fa5f 	bl	8003228 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6e:	f7fe fa5b 	bl	8003228 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b64      	cmp	r3, #100	; 0x64
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e12a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d80:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <HAL_RCC_OscConfig+0x4d4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x31a>
 8004d94:	4b70      	ldr	r3, [pc, #448]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	4a6f      	ldr	r2, [pc, #444]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004da0:	e02d      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x33c>
 8004daa:	4b6b      	ldr	r3, [pc, #428]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a6a      	ldr	r2, [pc, #424]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
 8004db6:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a67      	ldr	r2, [pc, #412]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc2:	e01c      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x35e>
 8004dcc:	4b62      	ldr	r3, [pc, #392]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	4a61      	ldr	r2, [pc, #388]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dd2:	f043 0304 	orr.w	r3, r3, #4
 8004dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd8:	4b5f      	ldr	r3, [pc, #380]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	4a5e      	ldr	r2, [pc, #376]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	; 0x70
 8004de4:	e00b      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004de6:	4b5c      	ldr	r3, [pc, #368]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a5b      	ldr	r2, [pc, #364]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	4a58      	ldr	r2, [pc, #352]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d015      	beq.n	8004e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e06:	f7fe fa0f 	bl	8003228 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fe fa0b 	bl	8003228 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0d8      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	4b4c      	ldr	r3, [pc, #304]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_RCC_OscConfig+0x386>
 8004e30:	e014      	b.n	8004e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e32:	f7fe f9f9 	bl	8003228 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fe f9f5 	bl	8003228 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0c2      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	4b41      	ldr	r3, [pc, #260]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ee      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e62:	4b3d      	ldr	r3, [pc, #244]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a3c      	ldr	r2, [pc, #240]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80ae 	beq.w	8004fd4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e78:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d06d      	beq.n	8004f60 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d14b      	bne.n	8004f24 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8c:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a31      	ldr	r2, [pc, #196]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fe f9c6 	bl	8003228 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fe f9c2 	bl	8003228 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e091      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	071b      	lsls	r3, r3, #28
 8004eea:	491b      	ldr	r1, [pc, #108]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a18      	ldr	r2, [pc, #96]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fe f994 	bl	8003228 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fe f990 	bl	8003228 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e05f      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x47c>
 8004f22:	e057      	b.n	8004fd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a0b      	ldr	r2, [pc, #44]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fe f97a 	bl	8003228 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fe f976 	bl	8003228 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e045      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x4b0>
 8004f56:	e03d      	b.n	8004fd4 <HAL_RCC_OscConfig+0x54c>
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f60:	4b1f      	ldr	r3, [pc, #124]	; (8004fe0 <HAL_RCC_OscConfig+0x558>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d030      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d129      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d122      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f96:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d119      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d10f      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d107      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d001      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0d0      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ffc:	4b6a      	ldr	r3, [pc, #424]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d910      	bls.n	800502c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500a:	4b67      	ldr	r3, [pc, #412]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f023 020f 	bic.w	r2, r3, #15
 8005012:	4965      	ldr	r1, [pc, #404]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	4313      	orrs	r3, r2
 8005018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501a:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d001      	beq.n	800502c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0b8      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005044:	4b59      	ldr	r3, [pc, #356]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a58      	ldr	r2, [pc, #352]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 800504a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800504e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800505c:	4b53      	ldr	r3, [pc, #332]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a52      	ldr	r2, [pc, #328]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005068:	4b50      	ldr	r3, [pc, #320]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	494d      	ldr	r1, [pc, #308]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d040      	beq.n	8005108 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b47      	ldr	r3, [pc, #284]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e07f      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a6:	4b41      	ldr	r3, [pc, #260]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e073      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b6:	4b3d      	ldr	r3, [pc, #244]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e06b      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050c6:	4b39      	ldr	r3, [pc, #228]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 0203 	bic.w	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4936      	ldr	r1, [pc, #216]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d8:	f7fe f8a6 	bl	8003228 <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e0:	f7fe f8a2 	bl	8003228 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e053      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	4b2d      	ldr	r3, [pc, #180]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 020c 	and.w	r2, r3, #12
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	429a      	cmp	r2, r3
 8005106:	d1eb      	bne.n	80050e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d210      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 020f 	bic.w	r2, r3, #15
 800511e:	4922      	ldr	r1, [pc, #136]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005126:	4b20      	ldr	r3, [pc, #128]	; (80051a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e032      	b.n	800519e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4916      	ldr	r1, [pc, #88]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	490e      	ldr	r1, [pc, #56]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005176:	f000 f821 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 800517a:	4601      	mov	r1, r0
 800517c:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <HAL_RCC_ClockConfig+0x1c8>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x1cc>)
 8005188:	5cd3      	ldrb	r3, [r2, r3]
 800518a:	fa21 f303 	lsr.w	r3, r1, r3
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <HAL_RCC_ClockConfig+0x1d0>)
 8005190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005192:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1d4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe f802 	bl	80031a0 <HAL_InitTick>

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40023c00 	.word	0x40023c00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	0800a160 	.word	0x0800a160
 80051b4:	20000008 	.word	0x20000008
 80051b8:	2000000c 	.word	0x2000000c

080051bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	2300      	movs	r3, #0
 80051cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d2:	4b50      	ldr	r3, [pc, #320]	; (8005314 <HAL_RCC_GetSysClockFreq+0x158>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d007      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0x32>
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d008      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x38>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 808d 	bne.w	8005302 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051e8:	4b4b      	ldr	r3, [pc, #300]	; (8005318 <HAL_RCC_GetSysClockFreq+0x15c>)
 80051ea:	60bb      	str	r3, [r7, #8]
      break;
 80051ec:	e08c      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ee:	4b4b      	ldr	r3, [pc, #300]	; (800531c <HAL_RCC_GetSysClockFreq+0x160>)
 80051f0:	60bb      	str	r3, [r7, #8]
      break;
 80051f2:	e089      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051f4:	4b47      	ldr	r3, [pc, #284]	; (8005314 <HAL_RCC_GetSysClockFreq+0x158>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051fe:	4b45      	ldr	r3, [pc, #276]	; (8005314 <HAL_RCC_GetSysClockFreq+0x158>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d023      	beq.n	8005252 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b42      	ldr	r3, [pc, #264]	; (8005314 <HAL_RCC_GetSysClockFreq+0x158>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	ea03 0501 	and.w	r5, r3, r1
 8005220:	ea04 0602 	and.w	r6, r4, r2
 8005224:	4a3d      	ldr	r2, [pc, #244]	; (800531c <HAL_RCC_GetSysClockFreq+0x160>)
 8005226:	fb02 f106 	mul.w	r1, r2, r6
 800522a:	2200      	movs	r2, #0
 800522c:	fb02 f205 	mul.w	r2, r2, r5
 8005230:	440a      	add	r2, r1
 8005232:	493a      	ldr	r1, [pc, #232]	; (800531c <HAL_RCC_GetSysClockFreq+0x160>)
 8005234:	fba5 0101 	umull	r0, r1, r5, r1
 8005238:	1853      	adds	r3, r2, r1
 800523a:	4619      	mov	r1, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f04f 0400 	mov.w	r4, #0
 8005242:	461a      	mov	r2, r3
 8005244:	4623      	mov	r3, r4
 8005246:	f7fb f863 	bl	8000310 <__aeabi_uldivmod>
 800524a:	4603      	mov	r3, r0
 800524c:	460c      	mov	r4, r1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e049      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005252:	4b30      	ldr	r3, [pc, #192]	; (8005314 <HAL_RCC_GetSysClockFreq+0x158>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	ea03 0501 	and.w	r5, r3, r1
 8005268:	ea04 0602 	and.w	r6, r4, r2
 800526c:	4629      	mov	r1, r5
 800526e:	4632      	mov	r2, r6
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	f04f 0400 	mov.w	r4, #0
 8005278:	0154      	lsls	r4, r2, #5
 800527a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800527e:	014b      	lsls	r3, r1, #5
 8005280:	4619      	mov	r1, r3
 8005282:	4622      	mov	r2, r4
 8005284:	1b49      	subs	r1, r1, r5
 8005286:	eb62 0206 	sbc.w	r2, r2, r6
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	0194      	lsls	r4, r2, #6
 8005294:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005298:	018b      	lsls	r3, r1, #6
 800529a:	1a5b      	subs	r3, r3, r1
 800529c:	eb64 0402 	sbc.w	r4, r4, r2
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	00e2      	lsls	r2, r4, #3
 80052aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052ae:	00d9      	lsls	r1, r3, #3
 80052b0:	460b      	mov	r3, r1
 80052b2:	4614      	mov	r4, r2
 80052b4:	195b      	adds	r3, r3, r5
 80052b6:	eb44 0406 	adc.w	r4, r4, r6
 80052ba:	f04f 0100 	mov.w	r1, #0
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	02a2      	lsls	r2, r4, #10
 80052c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052c8:	0299      	lsls	r1, r3, #10
 80052ca:	460b      	mov	r3, r1
 80052cc:	4614      	mov	r4, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	4621      	mov	r1, r4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f04f 0400 	mov.w	r4, #0
 80052d8:	461a      	mov	r2, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	f7fb f818 	bl	8000310 <__aeabi_uldivmod>
 80052e0:	4603      	mov	r3, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80052e6:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCC_GetSysClockFreq+0x158>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	3301      	adds	r3, #1
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fe:	60bb      	str	r3, [r7, #8]
      break;
 8005300:	e002      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005304:	60bb      	str	r3, [r7, #8]
      break;
 8005306:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005308:	68bb      	ldr	r3, [r7, #8]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005312:	bf00      	nop
 8005314:	40023800 	.word	0x40023800
 8005318:	00f42400 	.word	0x00f42400
 800531c:	00989680 	.word	0x00989680

08005320 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <HAL_RCC_GetHCLKFreq+0x14>)
 8005326:	681b      	ldr	r3, [r3, #0]
}
 8005328:	4618      	mov	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000008 	.word	0x20000008

08005338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800533c:	f7ff fff0 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8005340:	4601      	mov	r1, r0
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	0a9b      	lsrs	r3, r3, #10
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	4a03      	ldr	r2, [pc, #12]	; (800535c <HAL_RCC_GetPCLK1Freq+0x24>)
 800534e:	5cd3      	ldrb	r3, [r2, r3]
 8005350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40023800 	.word	0x40023800
 800535c:	0800a170 	.word	0x0800a170

08005360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005364:	f7ff ffdc 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8005368:	4601      	mov	r1, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0b5b      	lsrs	r3, r3, #13
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4a03      	ldr	r2, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005376:	5cd3      	ldrb	r3, [r2, r3]
 8005378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	0800a170 	.word	0x0800a170

08005388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d012      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053b0:	4b69      	ldr	r3, [pc, #420]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a68      	ldr	r2, [pc, #416]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053ba:	6093      	str	r3, [r2, #8]
 80053bc:	4b66      	ldr	r3, [pc, #408]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c4:	4964      	ldr	r1, [pc, #400]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053d2:	2301      	movs	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d017      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053e2:	4b5d      	ldr	r3, [pc, #372]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	4959      	ldr	r1, [pc, #356]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005400:	d101      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005402:	2301      	movs	r3, #1
 8005404:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800540e:	2301      	movs	r3, #1
 8005410:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d017      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800541e:	4b4e      	ldr	r3, [pc, #312]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005424:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	494a      	ldr	r1, [pc, #296]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800543c:	d101      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800543e:	2301      	movs	r3, #1
 8005440:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800544a:	2301      	movs	r3, #1
 800544c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800545a:	2301      	movs	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 808b 	beq.w	8005582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800546c:	4b3a      	ldr	r3, [pc, #232]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	4a39      	ldr	r2, [pc, #228]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005476:	6413      	str	r3, [r2, #64]	; 0x40
 8005478:	4b37      	ldr	r3, [pc, #220]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005484:	4b35      	ldr	r3, [pc, #212]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a34      	ldr	r2, [pc, #208]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800548a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005490:	f7fd feca 	bl	8003228 <HAL_GetTick>
 8005494:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005498:	f7fd fec6 	bl	8003228 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b64      	cmp	r3, #100	; 0x64
 80054a4:	d901      	bls.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e38d      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054aa:	4b2c      	ldr	r3, [pc, #176]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054b6:	4b28      	ldr	r3, [pc, #160]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d035      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d02e      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054d4:	4b20      	ldr	r3, [pc, #128]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054de:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d114      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fd fe8e 	bl	8003228 <HAL_GetTick>
 800550c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550e:	e00a      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005510:	f7fd fe8a 	bl	8003228 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e34f      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ee      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553e:	d111      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800554c:	4b04      	ldr	r3, [pc, #16]	; (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800554e:	400b      	ands	r3, r1
 8005550:	4901      	ldr	r1, [pc, #4]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005552:	4313      	orrs	r3, r2
 8005554:	608b      	str	r3, [r1, #8]
 8005556:	e00b      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005558:	40023800 	.word	0x40023800
 800555c:	40007000 	.word	0x40007000
 8005560:	0ffffcff 	.word	0x0ffffcff
 8005564:	4bb3      	ldr	r3, [pc, #716]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	4ab2      	ldr	r2, [pc, #712]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800556a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800556e:	6093      	str	r3, [r2, #8]
 8005570:	4bb0      	ldr	r3, [pc, #704]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005572:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557c:	49ad      	ldr	r1, [pc, #692]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800557e:	4313      	orrs	r3, r2
 8005580:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	d010      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800558e:	4ba9      	ldr	r3, [pc, #676]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005594:	4aa7      	ldr	r2, [pc, #668]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800559a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800559e:	4ba5      	ldr	r3, [pc, #660]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	49a2      	ldr	r1, [pc, #648]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055bc:	4b9d      	ldr	r3, [pc, #628]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ca:	499a      	ldr	r1, [pc, #616]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055de:	4b95      	ldr	r3, [pc, #596]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ec:	4991      	ldr	r1, [pc, #580]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005600:	4b8c      	ldr	r3, [pc, #560]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560e:	4989      	ldr	r1, [pc, #548]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005622:	4b84      	ldr	r3, [pc, #528]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4980      	ldr	r1, [pc, #512]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005644:	4b7b      	ldr	r3, [pc, #492]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	4978      	ldr	r1, [pc, #480]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005666:	4b73      	ldr	r3, [pc, #460]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566c:	f023 020c 	bic.w	r2, r3, #12
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005674:	496f      	ldr	r1, [pc, #444]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005688:	4b6a      	ldr	r3, [pc, #424]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005696:	4967      	ldr	r1, [pc, #412]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056aa:	4b62      	ldr	r3, [pc, #392]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b8:	495e      	ldr	r1, [pc, #376]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056cc:	4b59      	ldr	r3, [pc, #356]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	4956      	ldr	r1, [pc, #344]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80056ee:	4b51      	ldr	r3, [pc, #324]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fc:	494d      	ldr	r1, [pc, #308]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005710:	4b48      	ldr	r3, [pc, #288]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	4945      	ldr	r1, [pc, #276]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005732:	4b40      	ldr	r3, [pc, #256]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005738:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005740:	493c      	ldr	r1, [pc, #240]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005754:	4b37      	ldr	r3, [pc, #220]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005762:	4934      	ldr	r1, [pc, #208]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d011      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005776:	4b2f      	ldr	r3, [pc, #188]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005784:	492b      	ldr	r1, [pc, #172]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005794:	d101      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057b6:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c4:	491b      	ldr	r1, [pc, #108]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00b      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057d8:	4b16      	ldr	r3, [pc, #88]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e8:	4912      	ldr	r1, [pc, #72]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580c:	4909      	ldr	r1, [pc, #36]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00f      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005826:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005830:	e002      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005832:	bf00      	nop
 8005834:	40023800 	.word	0x40023800
 8005838:	4985      	ldr	r1, [pc, #532]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800584c:	4b80      	ldr	r3, [pc, #512]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800584e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005852:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585c:	497c      	ldr	r1, [pc, #496]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d005      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005872:	f040 80d6 	bne.w	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005876:	4b76      	ldr	r3, [pc, #472]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a75      	ldr	r2, [pc, #468]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800587c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005882:	f7fd fcd1 	bl	8003228 <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005888:	e008      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800588a:	f7fd fccd 	bl	8003228 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b64      	cmp	r3, #100	; 0x64
 8005896:	d901      	bls.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e194      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800589c:	4b6c      	ldr	r3, [pc, #432]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d021      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11d      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058bc:	4b64      	ldr	r3, [pc, #400]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058ca:	4b61      	ldr	r3, [pc, #388]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d0:	0e1b      	lsrs	r3, r3, #24
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	019a      	lsls	r2, r3, #6
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	431a      	orrs	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	431a      	orrs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	071b      	lsls	r3, r3, #28
 80058f0:	4957      	ldr	r1, [pc, #348]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005916:	2b00      	cmp	r3, #0
 8005918:	d02e      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005922:	d129      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005924:	4b4a      	ldr	r3, [pc, #296]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005932:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005938:	0f1b      	lsrs	r3, r3, #28
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	019a      	lsls	r2, r3, #6
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	041b      	lsls	r3, r3, #16
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	061b      	lsls	r3, r3, #24
 8005952:	431a      	orrs	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	071b      	lsls	r3, r3, #28
 8005958:	493d      	ldr	r1, [pc, #244]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005960:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005966:	f023 021f 	bic.w	r2, r3, #31
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	3b01      	subs	r3, #1
 8005970:	4937      	ldr	r1, [pc, #220]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01d      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005984:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598a:	0e1b      	lsrs	r3, r3, #24
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005992:	4b2f      	ldr	r3, [pc, #188]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005998:	0f1b      	lsrs	r3, r3, #28
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	019a      	lsls	r2, r3, #6
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	041b      	lsls	r3, r3, #16
 80059ac:	431a      	orrs	r2, r3
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	061b      	lsls	r3, r3, #24
 80059b2:	431a      	orrs	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	071b      	lsls	r3, r3, #28
 80059b8:	4925      	ldr	r1, [pc, #148]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d011      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	019a      	lsls	r2, r3, #6
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	071b      	lsls	r3, r3, #28
 80059e8:	4919      	ldr	r1, [pc, #100]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059fc:	f7fd fc14 	bl	8003228 <HAL_GetTick>
 8005a00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a04:	f7fd fc10 	bl	8003228 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	; 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e0d7      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a16:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	f040 80cd 	bne.w	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a2a:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a08      	ldr	r2, [pc, #32]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a36:	f7fd fbf7 	bl	8003228 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a3e:	f7fd fbf3 	bl	8003228 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b64      	cmp	r3, #100	; 0x64
 8005a4a:	d903      	bls.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0ba      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005a50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a54:	4b5e      	ldr	r3, [pc, #376]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a60:	d0ed      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d02e      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d12a      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a8a:	4b51      	ldr	r3, [pc, #324]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	0c1b      	lsrs	r3, r3, #16
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a98:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	0f1b      	lsrs	r3, r3, #28
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	019a      	lsls	r2, r3, #6
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	061b      	lsls	r3, r3, #24
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	4944      	ldr	r1, [pc, #272]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ac6:	4b42      	ldr	r3, [pc, #264]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005acc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	493d      	ldr	r1, [pc, #244]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d022      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af4:	d11d      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005af6:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afc:	0e1b      	lsrs	r3, r3, #24
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b04:	4b32      	ldr	r3, [pc, #200]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	0f1b      	lsrs	r3, r3, #28
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	019a      	lsls	r2, r3, #6
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	061b      	lsls	r3, r3, #24
 8005b24:	431a      	orrs	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	071b      	lsls	r3, r3, #28
 8005b2a:	4929      	ldr	r1, [pc, #164]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d028      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b3e:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b44:	0e1b      	lsrs	r3, r3, #24
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b4c:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b52:	0c1b      	lsrs	r3, r3, #16
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	019a      	lsls	r2, r3, #6
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	041b      	lsls	r3, r3, #16
 8005b64:	431a      	orrs	r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	061b      	lsls	r3, r3, #24
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	071b      	lsls	r3, r3, #28
 8005b72:	4917      	ldr	r1, [pc, #92]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	4911      	ldr	r1, [pc, #68]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b90:	4b0f      	ldr	r3, [pc, #60]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9c:	f7fd fb44 	bl	8003228 <HAL_GetTick>
 8005ba0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ba4:	f7fd fb40 	bl	8003228 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	; 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e007      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bb6:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc2:	d1ef      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40023800 	.word	0x40023800

08005bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e084      	b.n	8005cf0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7fc fe15 	bl	8002830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c26:	d902      	bls.n	8005c2e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e002      	b.n	8005c34 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c3c:	d007      	beq.n	8005c4e <HAL_SPI_Init+0x7a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c46:	d002      	beq.n	8005c4e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c5e:	d903      	bls.n	8005c68 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
 8005c66:	e002      	b.n	8005c6e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	ea42 0103 	orr.w	r1, r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	f003 0204 	and.w	r2, r3, #4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	ea42 0103 	orr.w	r1, r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69da      	ldr	r2, [r3, #28]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d110      	bne.n	8005d34 <HAL_SPI_Receive_DMA+0x3c>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1a:	d10b      	bne.n	8005d34 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f900 	bl	8005f30 <HAL_SPI_TransmitReceive_DMA>
 8005d30:	4603      	mov	r3, r0
 8005d32:	e0f3      	b.n	8005f1c <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_SPI_Receive_DMA+0x4a>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e0ec      	b.n	8005f1c <HAL_SPI_Receive_DMA+0x224>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d002      	beq.n	8005d5c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
 8005d58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d5a:	e0da      	b.n	8005f12 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_SPI_Receive_DMA+0x70>
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d6c:	e0d1      	b.n	8005f12 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2204      	movs	r2, #4
 8005d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	88fa      	ldrh	r2, [r7, #6]
 8005d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	88fa      	ldrh	r2, [r7, #6]
 8005d8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db2:	d107      	bne.n	8005dc4 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ddc:	d908      	bls.n	8005df0 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	e042      	b.n	8005e76 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dfe:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0a:	d134      	bne.n	8005e76 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e1a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d111      	bne.n	8005e50 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e3a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e4e:	e012      	b.n	8005e76 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e5e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	085b      	lsrs	r3, r3, #1
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7a:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <HAL_SPI_Receive_DMA+0x22c>)
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <HAL_SPI_Receive_DMA+0x230>)
 8005e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8a:	4a28      	ldr	r2, [pc, #160]	; (8005f2c <HAL_SPI_Receive_DMA+0x234>)
 8005e8c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	2200      	movs	r2, #0
 8005e94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f7fd ffb4 	bl	8003e1c <HAL_DMA_Start_IT>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebe:	f043 0210 	orr.w	r2, r3, #16
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005ed2:	e01e      	b.n	8005f12 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d007      	beq.n	8005ef2 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0220 	orr.w	r2, r2, #32
 8005f00:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	080063b1 	.word	0x080063b1
 8005f28:	08006299 	.word	0x08006299
 8005f2c:	080063e9 	.word	0x080063e9

08005f30 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e16c      	b.n	800622a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f5e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005f66:	7dbb      	ldrb	r3, [r7, #22]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d00d      	beq.n	8005f88 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f72:	d106      	bne.n	8005f82 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d102      	bne.n	8005f82 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005f7c:	7dbb      	ldrb	r3, [r7, #22]
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d002      	beq.n	8005f88 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
 8005f84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f86:	e14b      	b.n	8006220 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005f94:	887b      	ldrh	r3, [r7, #2]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f9e:	e13f      	b.n	8006220 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d003      	beq.n	8005fb4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2205      	movs	r2, #5
 8005fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	887a      	ldrh	r2, [r7, #2]
 8005fc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	887a      	ldrh	r2, [r7, #2]
 8005fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	887a      	ldrh	r2, [r7, #2]
 8005fde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005ffc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006006:	d908      	bls.n	800601a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006016:	605a      	str	r2, [r3, #4]
 8006018:	e06f      	b.n	80060fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006028:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006034:	d126      	bne.n	8006084 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006050:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006056:	b29b      	uxth	r3, r3
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006060:	e010      	b.n	8006084 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006070:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	b29b      	uxth	r3, r3
 800607c:	3301      	adds	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608e:	d134      	bne.n	80060fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800609e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d111      	bne.n	80060d4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060be:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060d2:	e012      	b.n	80060fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3301      	adds	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b04      	cmp	r3, #4
 8006104:	d108      	bne.n	8006118 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	4a4a      	ldr	r2, [pc, #296]	; (8006234 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006112:	4a49      	ldr	r2, [pc, #292]	; (8006238 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006114:	63da      	str	r2, [r3, #60]	; 0x3c
 8006116:	e007      	b.n	8006128 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611c:	4a47      	ldr	r2, [pc, #284]	; (800623c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800611e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006124:	4a46      	ldr	r2, [pc, #280]	; (8006240 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8006126:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	4a45      	ldr	r2, [pc, #276]	; (8006244 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800612e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006134:	2200      	movs	r2, #0
 8006136:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	4619      	mov	r1, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	461a      	mov	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006150:	b29b      	uxth	r3, r3
 8006152:	f7fd fe63 	bl	8003e1c <HAL_DMA_Start_IT>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00c      	beq.n	8006176 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006160:	f043 0210 	orr.w	r2, r3, #16
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006174:	e054      	b.n	8006220 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0201 	orr.w	r2, r2, #1
 8006184:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	2200      	movs	r2, #0
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	2200      	movs	r2, #0
 8006194:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	2200      	movs	r2, #0
 800619c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a2:	2200      	movs	r2, #0
 80061a4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	4619      	mov	r1, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	461a      	mov	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f7fd fe2d 	bl	8003e1c <HAL_DMA_Start_IT>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00c      	beq.n	80061e2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061cc:	f043 0210 	orr.w	r2, r3, #16
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80061e0:	e01e      	b.n	8006220 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d007      	beq.n	8006200 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061fe:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0220 	orr.w	r2, r2, #32
 800620e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0202 	orr.w	r2, r2, #2
 800621e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	080063b1 	.word	0x080063b1
 8006238:	08006299 	.word	0x08006299
 800623c:	080063cd 	.word	0x080063cd
 8006240:	0800631f 	.word	0x0800631f
 8006244:	080063e9 	.word	0x080063e9

08006248 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062a6:	f7fc ffbf 	bl	8003228 <HAL_GetTick>
 80062aa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ba:	d02a      	beq.n	8006312 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0220 	bic.w	r2, r2, #32
 80062ca:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0203 	bic.w	r2, r2, #3
 80062da:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	2164      	movs	r1, #100	; 0x64
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f978 	bl	80065d6 <SPI_EndRxTransaction>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff ffba 	bl	8006284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006310:	e002      	b.n	8006318 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7fb fcc6 	bl	8001ca4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800632c:	f7fc ff7c 	bl	8003228 <HAL_GetTick>
 8006330:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006340:	d030      	beq.n	80063a4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0220 	bic.w	r2, r2, #32
 8006350:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	2164      	movs	r1, #100	; 0x64
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f995 	bl	8006686 <SPI_EndRxTxTransaction>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006366:	f043 0220 	orr.w	r2, r3, #32
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0203 	bic.w	r2, r2, #3
 800637c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff ff71 	bl	8006284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80063a2:	e002      	b.n	80063aa <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff ff4f 	bl	8006248 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff ff4c 	bl	800625c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063c4:	bf00      	nop
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff ff48 	bl	8006270 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0203 	bic.w	r2, r2, #3
 8006404:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640a:	f043 0210 	orr.w	r2, r3, #16
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff ff32 	bl	8006284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006438:	e04c      	b.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d048      	beq.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006442:	f7fc fef1 	bl	8003228 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d902      	bls.n	8006458 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d13d      	bne.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006466:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006470:	d111      	bne.n	8006496 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647a:	d004      	beq.n	8006486 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006484:	d107      	bne.n	8006496 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006494:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649e:	d10f      	bne.n	80064c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e00f      	b.n	80064f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4013      	ands	r3, r2
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d1a3      	bne.n	800643a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800650a:	e057      	b.n	80065bc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006512:	d106      	bne.n	8006522 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d103      	bne.n	8006522 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d048      	beq.n	80065bc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800652a:	f7fc fe7d 	bl	8003228 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d902      	bls.n	8006540 <SPI_WaitFifoStateUntilTimeout+0x44>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d13d      	bne.n	80065bc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800654e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006558:	d111      	bne.n	800657e <SPI_WaitFifoStateUntilTimeout+0x82>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006562:	d004      	beq.n	800656e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800656c:	d107      	bne.n	800657e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800657c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006586:	d10f      	bne.n	80065a8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e008      	b.n	80065ce <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	4013      	ands	r3, r2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d19f      	bne.n	800650c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b086      	sub	sp, #24
 80065da:	af02      	add	r7, sp, #8
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ea:	d111      	bne.n	8006610 <SPI_EndRxTransaction+0x3a>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f4:	d004      	beq.n	8006600 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fe:	d107      	bne.n	8006610 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2200      	movs	r2, #0
 8006618:	2180      	movs	r1, #128	; 0x80
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7ff ff04 	bl	8006428 <SPI_WaitFlagStateUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	f043 0220 	orr.w	r2, r3, #32
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e023      	b.n	800667e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663e:	d11d      	bne.n	800667c <SPI_EndRxTransaction+0xa6>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006648:	d004      	beq.n	8006654 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d113      	bne.n	800667c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff ff4b 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	f043 0220 	orr.w	r2, r3, #32
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e000      	b.n	800667e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b086      	sub	sp, #24
 800668a:	af02      	add	r7, sp, #8
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2200      	movs	r2, #0
 800669a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff ff2c 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e027      	b.n	800670a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2180      	movs	r1, #128	; 0x80
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff feaf 	bl	8006428 <SPI_WaitFlagStateUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d007      	beq.n	80066e0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d4:	f043 0220 	orr.w	r2, r3, #32
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e014      	b.n	800670a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff ff05 	bl	80064fc <SPI_WaitFifoStateUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fc:	f043 0220 	orr.w	r2, r3, #32
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e000      	b.n	800670a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e01d      	b.n	8006760 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d106      	bne.n	800673e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7fc f923 	bl	8002984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3304      	adds	r3, #4
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f001 f827 	bl	80077a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <HAL_TIM_Base_Start_IT+0x50>)
 8006788:	4013      	ands	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b06      	cmp	r3, #6
 8006790:	d00b      	beq.n	80067aa <HAL_TIM_Base_Start_IT+0x42>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006798:	d007      	beq.n	80067aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	00010007 	.word	0x00010007

080067bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f241 1311 	movw	r3, #4369	; 0x1111
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10f      	bne.n	8006804 <HAL_TIM_Base_Stop_IT+0x48>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	f240 4344 	movw	r3, #1092	; 0x444
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d107      	bne.n	8006804 <HAL_TIM_Base_Stop_IT+0x48>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e01d      	b.n	8006860 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fc f9b7 	bl	8002bac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3304      	adds	r3, #4
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f000 ffa7 	bl	80077a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b0c      	cmp	r3, #12
 8006876:	d841      	bhi.n	80068fc <HAL_TIM_PWM_Start_IT+0x94>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <HAL_TIM_PWM_Start_IT+0x18>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068fd 	.word	0x080068fd
 8006888:	080068fd 	.word	0x080068fd
 800688c:	080068fd 	.word	0x080068fd
 8006890:	080068c7 	.word	0x080068c7
 8006894:	080068fd 	.word	0x080068fd
 8006898:	080068fd 	.word	0x080068fd
 800689c:	080068fd 	.word	0x080068fd
 80068a0:	080068d9 	.word	0x080068d9
 80068a4:	080068fd 	.word	0x080068fd
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	080068fd 	.word	0x080068fd
 80068b0:	080068eb 	.word	0x080068eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0202 	orr.w	r2, r2, #2
 80068c2:	60da      	str	r2, [r3, #12]
      break;
 80068c4:	e01b      	b.n	80068fe <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 0204 	orr.w	r2, r2, #4
 80068d4:	60da      	str	r2, [r3, #12]
      break;
 80068d6:	e012      	b.n	80068fe <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0208 	orr.w	r2, r2, #8
 80068e6:	60da      	str	r2, [r3, #12]
      break;
 80068e8:	e009      	b.n	80068fe <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f042 0210 	orr.w	r2, r2, #16
 80068f8:	60da      	str	r2, [r3, #12]
      break;
 80068fa:	e000      	b.n	80068fe <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80068fc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2201      	movs	r2, #1
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f001 fc96 	bl	8008238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a17      	ldr	r2, [pc, #92]	; (8006970 <HAL_TIM_PWM_Start_IT+0x108>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_TIM_PWM_Start_IT+0xb8>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a16      	ldr	r2, [pc, #88]	; (8006974 <HAL_TIM_PWM_Start_IT+0x10c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d101      	bne.n	8006924 <HAL_TIM_PWM_Start_IT+0xbc>
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_TIM_PWM_Start_IT+0xbe>
 8006924:	2300      	movs	r3, #0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006938:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <HAL_TIM_PWM_Start_IT+0x110>)
 8006942:	4013      	ands	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b06      	cmp	r3, #6
 800694a:	d00b      	beq.n	8006964 <HAL_TIM_PWM_Start_IT+0xfc>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006952:	d007      	beq.n	8006964 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	40010000 	.word	0x40010000
 8006974:	40010400 	.word	0x40010400
 8006978:	00010007 	.word	0x00010007

0800697c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b0c      	cmp	r3, #12
 800698a:	d841      	bhi.n	8006a10 <HAL_TIM_PWM_Stop_IT+0x94>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <HAL_TIM_PWM_Stop_IT+0x18>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069c9 	.word	0x080069c9
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a11 	.word	0x08006a11
 80069a4:	080069db 	.word	0x080069db
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006a11 	.word	0x08006a11
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	080069ed 	.word	0x080069ed
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	08006a11 	.word	0x08006a11
 80069c4:	080069ff 	.word	0x080069ff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0202 	bic.w	r2, r2, #2
 80069d6:	60da      	str	r2, [r3, #12]
      break;
 80069d8:	e01b      	b.n	8006a12 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0204 	bic.w	r2, r2, #4
 80069e8:	60da      	str	r2, [r3, #12]
      break;
 80069ea:	e012      	b.n	8006a12 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0208 	bic.w	r2, r2, #8
 80069fa:	60da      	str	r2, [r3, #12]
      break;
 80069fc:	e009      	b.n	8006a12 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0210 	bic.w	r2, r2, #16
 8006a0c:	60da      	str	r2, [r3, #12]
      break;
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8006a10:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2200      	movs	r2, #0
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 fc0c 	bl	8008238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a20      	ldr	r2, [pc, #128]	; (8006aa8 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d004      	beq.n	8006a34 <HAL_TIM_PWM_Stop_IT+0xb8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1f      	ldr	r2, [pc, #124]	; (8006aac <HAL_TIM_PWM_Stop_IT+0x130>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d101      	bne.n	8006a38 <HAL_TIM_PWM_Stop_IT+0xbc>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <HAL_TIM_PWM_Stop_IT+0xbe>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d017      	beq.n	8006a6e <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a1a      	ldr	r2, [r3, #32]
 8006a44:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10f      	bne.n	8006a6e <HAL_TIM_PWM_Stop_IT+0xf2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	f240 4344 	movw	r3, #1092	; 0x444
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <HAL_TIM_PWM_Stop_IT+0xf2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10f      	bne.n	8006a9e <HAL_TIM_PWM_Stop_IT+0x122>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	f240 4344 	movw	r3, #1092	; 0x444
 8006a88:	4013      	ands	r3, r2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <HAL_TIM_PWM_Stop_IT+0x122>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0201 	bic.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400

08006ab0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e01d      	b.n	8006afe <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fb ffea 	bl	8002ab0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f000 fe58 	bl	80077a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d101      	bne.n	8006b26 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8006b22:	2302      	movs	r3, #2
 8006b24:	e0e0      	b.n	8006ce8 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d10b      	bne.n	8006b4a <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <HAL_TIM_IC_Start_DMA+0x3a>
 8006b38:	887b      	ldrh	r3, [r7, #2]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e0d2      	b.n	8006ce8 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2202      	movs	r2, #2
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	f200 80ad 	bhi.w	8006cac <HAL_TIM_IC_Start_DMA+0x1a4>
 8006b52:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <HAL_TIM_IC_Start_DMA+0x50>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006b8d 	.word	0x08006b8d
 8006b5c:	08006cad 	.word	0x08006cad
 8006b60:	08006cad 	.word	0x08006cad
 8006b64:	08006cad 	.word	0x08006cad
 8006b68:	08006bd5 	.word	0x08006bd5
 8006b6c:	08006cad 	.word	0x08006cad
 8006b70:	08006cad 	.word	0x08006cad
 8006b74:	08006cad 	.word	0x08006cad
 8006b78:	08006c1d 	.word	0x08006c1d
 8006b7c:	08006cad 	.word	0x08006cad
 8006b80:	08006cad 	.word	0x08006cad
 8006b84:	08006cad 	.word	0x08006cad
 8006b88:	08006c65 	.word	0x08006c65
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	4a57      	ldr	r2, [pc, #348]	; (8006cf0 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006b92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	4a56      	ldr	r2, [pc, #344]	; (8006cf4 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	4a55      	ldr	r2, [pc, #340]	; (8006cf8 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006ba2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3334      	adds	r3, #52	; 0x34
 8006bae:	4619      	mov	r1, r3
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	887b      	ldrh	r3, [r7, #2]
 8006bb4:	f7fd f932 	bl	8003e1c <HAL_DMA_Start_IT>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e092      	b.n	8006ce8 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd0:	60da      	str	r2, [r3, #12]
      break;
 8006bd2:	e06c      	b.n	8006cae <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	4a45      	ldr	r2, [pc, #276]	; (8006cf0 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	4a44      	ldr	r2, [pc, #272]	; (8006cf4 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	4a43      	ldr	r2, [pc, #268]	; (8006cf8 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006bea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3338      	adds	r3, #56	; 0x38
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	887b      	ldrh	r3, [r7, #2]
 8006bfc:	f7fd f90e 	bl	8003e1c <HAL_DMA_Start_IT>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e06e      	b.n	8006ce8 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c18:	60da      	str	r2, [r3, #12]
      break;
 8006c1a:	e048      	b.n	8006cae <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	4a33      	ldr	r2, [pc, #204]	; (8006cf0 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006c22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	4a32      	ldr	r2, [pc, #200]	; (8006cf4 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	4a31      	ldr	r2, [pc, #196]	; (8006cf8 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006c32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	333c      	adds	r3, #60	; 0x3c
 8006c3e:	4619      	mov	r1, r3
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	f7fd f8ea 	bl	8003e1c <HAL_DMA_Start_IT>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e04a      	b.n	8006ce8 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c60:	60da      	str	r2, [r3, #12]
      break;
 8006c62:	e024      	b.n	8006cae <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	4a21      	ldr	r2, [pc, #132]	; (8006cf0 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006c6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	4a20      	ldr	r2, [pc, #128]	; (8006cf4 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006c72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	4a1f      	ldr	r2, [pc, #124]	; (8006cf8 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006c7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3340      	adds	r3, #64	; 0x40
 8006c86:	4619      	mov	r1, r3
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	887b      	ldrh	r3, [r7, #2]
 8006c8c:	f7fd f8c6 	bl	8003e1c <HAL_DMA_Start_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e026      	b.n	8006ce8 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ca8:	60da      	str	r2, [r3, #12]
      break;
 8006caa:	e000      	b.n	8006cae <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8006cac:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fabe 	bl	8008238 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	4b0e      	ldr	r3, [pc, #56]	; (8006cfc <HAL_TIM_IC_Start_DMA+0x1f4>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b06      	cmp	r3, #6
 8006ccc:	d00b      	beq.n	8006ce6 <HAL_TIM_IC_Start_DMA+0x1de>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd4:	d007      	beq.n	8006ce6 <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0201 	orr.w	r2, r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	080076c5 	.word	0x080076c5
 8006cf4:	08007735 	.word	0x08007735
 8006cf8:	080076a1 	.word	0x080076a1
 8006cfc:	00010007 	.word	0x00010007

08006d00 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b0c      	cmp	r3, #12
 8006d0e:	d855      	bhi.n	8006dbc <HAL_TIM_IC_Stop_DMA+0xbc>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <HAL_TIM_IC_Stop_DMA+0x18>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006dbd 	.word	0x08006dbd
 8006d20:	08006dbd 	.word	0x08006dbd
 8006d24:	08006dbd 	.word	0x08006dbd
 8006d28:	08006d69 	.word	0x08006d69
 8006d2c:	08006dbd 	.word	0x08006dbd
 8006d30:	08006dbd 	.word	0x08006dbd
 8006d34:	08006dbd 	.word	0x08006dbd
 8006d38:	08006d85 	.word	0x08006d85
 8006d3c:	08006dbd 	.word	0x08006dbd
 8006d40:	08006dbd 	.word	0x08006dbd
 8006d44:	08006dbd 	.word	0x08006dbd
 8006d48:	08006da1 	.word	0x08006da1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fd f8bb 	bl	8003edc <HAL_DMA_Abort_IT>
      break;
 8006d66:	e02a      	b.n	8006dbe <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fd f8ad 	bl	8003edc <HAL_DMA_Abort_IT>
      break;
 8006d82:	e01c      	b.n	8006dbe <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fd f89f 	bl	8003edc <HAL_DMA_Abort_IT>
      break;
 8006d9e:	e00e      	b.n	8006dbe <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fd f891 	bl	8003edc <HAL_DMA_Abort_IT>
      break;
 8006dba:	e000      	b.n	8006dbe <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8006dbc:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 fa36 	bl	8008238 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a1a      	ldr	r2, [r3, #32]
 8006dd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10f      	bne.n	8006dfc <HAL_TIM_IC_Stop_DMA+0xfc>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6a1a      	ldr	r2, [r3, #32]
 8006de2:	f240 4344 	movw	r3, #1092	; 0x444
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d107      	bne.n	8006dfc <HAL_TIM_IC_Stop_DMA+0xfc>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop

08006e10 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e02d      	b.n	8006e80 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f825 	bl	8006e88 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4610      	mov	r0, r2
 8006e52:	f000 fca7 	bl	80077a4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0208 	bic.w	r2, r2, #8
 8006e64:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6819      	ldr	r1, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d122      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0202 	mvn.w	r2, #2
 8006ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fa fe84 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8006ee4:	e005      	b.n	8006ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fba8 	bl	800763c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fbb9 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d122      	bne.n	8006f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d11b      	bne.n	8006f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0204 	mvn.w	r2, #4
 8006f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fa fe5a 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8006f38:	e005      	b.n	8006f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb7e 	bl	800763c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fb8f 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d122      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0308 	and.w	r3, r3, #8
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d11b      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0208 	mvn.w	r2, #8
 8006f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2204      	movs	r2, #4
 8006f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fa fe30 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8006f8c:	e005      	b.n	8006f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fb54 	bl	800763c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb65 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d122      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d11b      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0210 	mvn.w	r2, #16
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa fe06 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fb2a 	bl	800763c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fb3b 	bl	8007664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d10e      	bne.n	8007020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b01      	cmp	r3, #1
 800700e:	d107      	bne.n	8007020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0201 	mvn.w	r2, #1
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fa fbd8 	bl	80017d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702a:	2b80      	cmp	r3, #128	; 0x80
 800702c:	d10e      	bne.n	800704c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007038:	2b80      	cmp	r3, #128	; 0x80
 800703a:	d107      	bne.n	800704c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 fa32 	bl	80084b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800705a:	d10e      	bne.n	800707a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d107      	bne.n	800707a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 fa25 	bl	80084c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b40      	cmp	r3, #64	; 0x40
 8007086:	d10e      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	d107      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800709e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fae9 	bl	8007678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d10e      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d107      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f06f 0220 	mvn.w	r2, #32
 80070ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f9e5 	bl	800849c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e08a      	b.n	800720a <HAL_TIM_IC_ConfigChannel+0x130>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2202      	movs	r2, #2
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d11b      	bne.n	8007142 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f000 fec9 	bl	8007eb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 020c 	bic.w	r2, r2, #12
 800712c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6999      	ldr	r1, [r3, #24]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	619a      	str	r2, [r3, #24]
 8007140:	e05a      	b.n	80071f8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b04      	cmp	r3, #4
 8007146:	d11c      	bne.n	8007182 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	6819      	ldr	r1, [r3, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f000 ff4d 	bl	8007ff6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800716a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6999      	ldr	r1, [r3, #24]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	021a      	lsls	r2, r3, #8
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	619a      	str	r2, [r3, #24]
 8007180:	e03a      	b.n	80071f8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b08      	cmp	r3, #8
 8007186:	d11b      	bne.n	80071c0 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f000 ff9a 	bl	80080d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69da      	ldr	r2, [r3, #28]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 020c 	bic.w	r2, r2, #12
 80071aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69d9      	ldr	r1, [r3, #28]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	61da      	str	r2, [r3, #28]
 80071be:	e01b      	b.n	80071f8 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6819      	ldr	r1, [r3, #0]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f000 ffba 	bl	8008148 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69da      	ldr	r2, [r3, #28]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80071e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69d9      	ldr	r1, [r3, #28]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	021a      	lsls	r2, r3, #8
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800722a:	2302      	movs	r3, #2
 800722c:	e105      	b.n	800743a <HAL_TIM_PWM_ConfigChannel+0x226>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2202      	movs	r2, #2
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b14      	cmp	r3, #20
 8007242:	f200 80f0 	bhi.w	8007426 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	080072a1 	.word	0x080072a1
 8007250:	08007427 	.word	0x08007427
 8007254:	08007427 	.word	0x08007427
 8007258:	08007427 	.word	0x08007427
 800725c:	080072e1 	.word	0x080072e1
 8007260:	08007427 	.word	0x08007427
 8007264:	08007427 	.word	0x08007427
 8007268:	08007427 	.word	0x08007427
 800726c:	08007323 	.word	0x08007323
 8007270:	08007427 	.word	0x08007427
 8007274:	08007427 	.word	0x08007427
 8007278:	08007427 	.word	0x08007427
 800727c:	08007363 	.word	0x08007363
 8007280:	08007427 	.word	0x08007427
 8007284:	08007427 	.word	0x08007427
 8007288:	08007427 	.word	0x08007427
 800728c:	080073a5 	.word	0x080073a5
 8007290:	08007427 	.word	0x08007427
 8007294:	08007427 	.word	0x08007427
 8007298:	08007427 	.word	0x08007427
 800729c:	080073e5 	.word	0x080073e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fb1c 	bl	80078e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0208 	orr.w	r2, r2, #8
 80072ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0204 	bic.w	r2, r2, #4
 80072ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6999      	ldr	r1, [r3, #24]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	619a      	str	r2, [r3, #24]
      break;
 80072de:	e0a3      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fb6e 	bl	80079c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6999      	ldr	r1, [r3, #24]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	021a      	lsls	r2, r3, #8
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	619a      	str	r2, [r3, #24]
      break;
 8007320:	e082      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 fbc5 	bl	8007ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0208 	orr.w	r2, r2, #8
 800733c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0204 	bic.w	r2, r2, #4
 800734c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69d9      	ldr	r1, [r3, #28]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	61da      	str	r2, [r3, #28]
      break;
 8007360:	e062      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fc1b 	bl	8007ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69da      	ldr	r2, [r3, #28]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800737c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800738c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69d9      	ldr	r1, [r3, #28]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	021a      	lsls	r2, r3, #8
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	61da      	str	r2, [r3, #28]
      break;
 80073a2:	e041      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fc52 	bl	8007c54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0208 	orr.w	r2, r2, #8
 80073be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0204 	bic.w	r2, r2, #4
 80073ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	691a      	ldr	r2, [r3, #16]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073e2:	e021      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fc84 	bl	8007cf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	021a      	lsls	r2, r3, #8
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007424:	e000      	b.n	8007428 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007426:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop

08007444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_TIM_ConfigClockSource+0x18>
 8007458:	2302      	movs	r3, #2
 800745a:	e0a6      	b.n	80075aa <HAL_TIM_ConfigClockSource+0x166>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4b4f      	ldr	r3, [pc, #316]	; (80075b4 <HAL_TIM_ConfigClockSource+0x170>)
 8007478:	4013      	ands	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007482:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d067      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0x120>
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	d80b      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x6c>
 8007498:	2b10      	cmp	r3, #16
 800749a:	d073      	beq.n	8007584 <HAL_TIM_ConfigClockSource+0x140>
 800749c:	2b10      	cmp	r3, #16
 800749e:	d802      	bhi.n	80074a6 <HAL_TIM_ConfigClockSource+0x62>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d06f      	beq.n	8007584 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80074a4:	e078      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d06c      	beq.n	8007584 <HAL_TIM_ConfigClockSource+0x140>
 80074aa:	2b30      	cmp	r3, #48	; 0x30
 80074ac:	d06a      	beq.n	8007584 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80074ae:	e073      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80074b0:	2b70      	cmp	r3, #112	; 0x70
 80074b2:	d00d      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x8c>
 80074b4:	2b70      	cmp	r3, #112	; 0x70
 80074b6:	d804      	bhi.n	80074c2 <HAL_TIM_ConfigClockSource+0x7e>
 80074b8:	2b50      	cmp	r3, #80	; 0x50
 80074ba:	d033      	beq.n	8007524 <HAL_TIM_ConfigClockSource+0xe0>
 80074bc:	2b60      	cmp	r3, #96	; 0x60
 80074be:	d041      	beq.n	8007544 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80074c0:	e06a      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80074c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074c6:	d066      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x152>
 80074c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074cc:	d017      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80074ce:	e063      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	6899      	ldr	r1, [r3, #8]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f000 fe8a 	bl	80081f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	609a      	str	r2, [r3, #8]
      break;
 80074fc:	e04c      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	6899      	ldr	r1, [r3, #8]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f000 fe73 	bl	80081f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007520:	609a      	str	r2, [r3, #8]
      break;
 8007522:	e039      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	6859      	ldr	r1, [r3, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	461a      	mov	r2, r3
 8007532:	f000 fd31 	bl	8007f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2150      	movs	r1, #80	; 0x50
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fe40 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007542:	e029      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	461a      	mov	r2, r3
 8007552:	f000 fd8d 	bl	8008070 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2160      	movs	r1, #96	; 0x60
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fe30 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007562:	e019      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	6859      	ldr	r1, [r3, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	461a      	mov	r2, r3
 8007572:	f000 fd11 	bl	8007f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2140      	movs	r1, #64	; 0x40
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fe20 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007582:	e009      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f000 fe17 	bl	80081c2 <TIM_ITRx_SetConfig>
      break;
 8007594:	e000      	b.n	8007598 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	fffeff88 	.word	0xfffeff88

080075b8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e031      	b.n	8007634 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fbdc 	bl	8007da0 <TIM_SlaveTimer_SetConfig>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e018      	b.n	8007634 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007610:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007620:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff ffe8 	bl	800768c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d103      	bne.n	80076ec <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	771a      	strb	r2, [r3, #28]
 80076ea:	e019      	b.n	8007720 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d103      	bne.n	80076fe <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2202      	movs	r2, #2
 80076fa:	771a      	strb	r2, [r3, #28]
 80076fc:	e010      	b.n	8007720 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	d103      	bne.n	8007710 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2204      	movs	r2, #4
 800770c:	771a      	strb	r2, [r3, #28]
 800770e:	e007      	b.n	8007720 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	429a      	cmp	r2, r3
 8007718:	d102      	bne.n	8007720 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2208      	movs	r2, #8
 800771e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7fa fa63 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	771a      	strb	r2, [r3, #28]
}
 800772c:	bf00      	nop
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d103      	bne.n	800775c <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	771a      	strb	r2, [r3, #28]
 800775a:	e019      	b.n	8007790 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	429a      	cmp	r2, r3
 8007764:	d103      	bne.n	800776e <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2202      	movs	r2, #2
 800776a:	771a      	strb	r2, [r3, #28]
 800776c:	e010      	b.n	8007790 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	429a      	cmp	r2, r3
 8007776:	d103      	bne.n	8007780 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2204      	movs	r2, #4
 800777c:	771a      	strb	r2, [r3, #28]
 800777e:	e007      	b.n	8007790 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	429a      	cmp	r2, r3
 8007788:	d102      	bne.n	8007790 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2208      	movs	r2, #8
 800778e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff ff5d 	bl	8007650 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	771a      	strb	r2, [r3, #28]
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a40      	ldr	r2, [pc, #256]	; (80078b8 <TIM_Base_SetConfig+0x114>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d013      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d00f      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a3d      	ldr	r2, [pc, #244]	; (80078bc <TIM_Base_SetConfig+0x118>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a3c      	ldr	r2, [pc, #240]	; (80078c0 <TIM_Base_SetConfig+0x11c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d007      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a3b      	ldr	r2, [pc, #236]	; (80078c4 <TIM_Base_SetConfig+0x120>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_Base_SetConfig+0x40>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a3a      	ldr	r2, [pc, #232]	; (80078c8 <TIM_Base_SetConfig+0x124>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d108      	bne.n	80077f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a2f      	ldr	r2, [pc, #188]	; (80078b8 <TIM_Base_SetConfig+0x114>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d02b      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007804:	d027      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <TIM_Base_SetConfig+0x118>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d023      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a2b      	ldr	r2, [pc, #172]	; (80078c0 <TIM_Base_SetConfig+0x11c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d01f      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <TIM_Base_SetConfig+0x120>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d01b      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a29      	ldr	r2, [pc, #164]	; (80078c8 <TIM_Base_SetConfig+0x124>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d017      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a28      	ldr	r2, [pc, #160]	; (80078cc <TIM_Base_SetConfig+0x128>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d013      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <TIM_Base_SetConfig+0x12c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00f      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a26      	ldr	r2, [pc, #152]	; (80078d4 <TIM_Base_SetConfig+0x130>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00b      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a25      	ldr	r2, [pc, #148]	; (80078d8 <TIM_Base_SetConfig+0x134>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d007      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a24      	ldr	r2, [pc, #144]	; (80078dc <TIM_Base_SetConfig+0x138>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d003      	beq.n	8007856 <TIM_Base_SetConfig+0xb2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <TIM_Base_SetConfig+0x13c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d108      	bne.n	8007868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a0a      	ldr	r2, [pc, #40]	; (80078b8 <TIM_Base_SetConfig+0x114>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_Base_SetConfig+0xf8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a0c      	ldr	r2, [pc, #48]	; (80078c8 <TIM_Base_SetConfig+0x124>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d103      	bne.n	80078a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	615a      	str	r2, [r3, #20]
}
 80078aa:	bf00      	nop
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	40010000 	.word	0x40010000
 80078bc:	40000400 	.word	0x40000400
 80078c0:	40000800 	.word	0x40000800
 80078c4:	40000c00 	.word	0x40000c00
 80078c8:	40010400 	.word	0x40010400
 80078cc:	40014000 	.word	0x40014000
 80078d0:	40014400 	.word	0x40014400
 80078d4:	40014800 	.word	0x40014800
 80078d8:	40001800 	.word	0x40001800
 80078dc:	40001c00 	.word	0x40001c00
 80078e0:	40002000 	.word	0x40002000

080078e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f023 0201 	bic.w	r2, r3, #1
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <TIM_OC1_SetConfig+0xd8>)
 8007910:	4013      	ands	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0303 	bic.w	r3, r3, #3
 800791a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f023 0302 	bic.w	r3, r3, #2
 800792c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a21      	ldr	r2, [pc, #132]	; (80079c0 <TIM_OC1_SetConfig+0xdc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d003      	beq.n	8007948 <TIM_OC1_SetConfig+0x64>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a20      	ldr	r2, [pc, #128]	; (80079c4 <TIM_OC1_SetConfig+0xe0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d10c      	bne.n	8007962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0308 	bic.w	r3, r3, #8
 800794e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f023 0304 	bic.w	r3, r3, #4
 8007960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a16      	ldr	r2, [pc, #88]	; (80079c0 <TIM_OC1_SetConfig+0xdc>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <TIM_OC1_SetConfig+0x8e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <TIM_OC1_SetConfig+0xe0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d111      	bne.n	8007996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	4313      	orrs	r3, r2
 800798a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	621a      	str	r2, [r3, #32]
}
 80079b0:	bf00      	nop
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	fffeff8f 	.word	0xfffeff8f
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40010400 	.word	0x40010400

080079c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0210 	bic.w	r2, r3, #16
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4b2e      	ldr	r3, [pc, #184]	; (8007aac <TIM_OC2_SetConfig+0xe4>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f023 0320 	bic.w	r3, r3, #32
 8007a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a23      	ldr	r2, [pc, #140]	; (8007ab0 <TIM_OC2_SetConfig+0xe8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC2_SetConfig+0x68>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a22      	ldr	r2, [pc, #136]	; (8007ab4 <TIM_OC2_SetConfig+0xec>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10d      	bne.n	8007a4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	011b      	lsls	r3, r3, #4
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	; (8007ab0 <TIM_OC2_SetConfig+0xe8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d003      	beq.n	8007a5c <TIM_OC2_SetConfig+0x94>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a17      	ldr	r2, [pc, #92]	; (8007ab4 <TIM_OC2_SetConfig+0xec>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d113      	bne.n	8007a84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	feff8fff 	.word	0xfeff8fff
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b2d      	ldr	r3, [pc, #180]	; (8007b98 <TIM_OC3_SetConfig+0xe0>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a22      	ldr	r2, [pc, #136]	; (8007b9c <TIM_OC3_SetConfig+0xe4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_OC3_SetConfig+0x66>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a21      	ldr	r2, [pc, #132]	; (8007ba0 <TIM_OC3_SetConfig+0xe8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d10d      	bne.n	8007b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a17      	ldr	r2, [pc, #92]	; (8007b9c <TIM_OC3_SetConfig+0xe4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_OC3_SetConfig+0x92>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a16      	ldr	r2, [pc, #88]	; (8007ba0 <TIM_OC3_SetConfig+0xe8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d113      	bne.n	8007b72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	621a      	str	r2, [r3, #32]
}
 8007b8c:	bf00      	nop
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	fffeff8f 	.word	0xfffeff8f
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40010400 	.word	0x40010400

08007ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <TIM_OC4_SetConfig+0xa4>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	031b      	lsls	r3, r3, #12
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a13      	ldr	r2, [pc, #76]	; (8007c4c <TIM_OC4_SetConfig+0xa8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d003      	beq.n	8007c0c <TIM_OC4_SetConfig+0x68>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a12      	ldr	r2, [pc, #72]	; (8007c50 <TIM_OC4_SetConfig+0xac>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d109      	bne.n	8007c20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	019b      	lsls	r3, r3, #6
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	621a      	str	r2, [r3, #32]
}
 8007c3a:	bf00      	nop
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	feff8fff 	.word	0xfeff8fff
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40010400 	.word	0x40010400

08007c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <TIM_OC5_SetConfig+0x98>)
 8007c80:	4013      	ands	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	041b      	lsls	r3, r3, #16
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a12      	ldr	r2, [pc, #72]	; (8007cf0 <TIM_OC5_SetConfig+0x9c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d003      	beq.n	8007cb2 <TIM_OC5_SetConfig+0x5e>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a11      	ldr	r2, [pc, #68]	; (8007cf4 <TIM_OC5_SetConfig+0xa0>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d109      	bne.n	8007cc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	621a      	str	r2, [r3, #32]
}
 8007ce0:	bf00      	nop
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	fffeff8f 	.word	0xfffeff8f
 8007cf0:	40010000 	.word	0x40010000
 8007cf4:	40010400 	.word	0x40010400

08007cf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4b1c      	ldr	r3, [pc, #112]	; (8007d94 <TIM_OC6_SetConfig+0x9c>)
 8007d24:	4013      	ands	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	051b      	lsls	r3, r3, #20
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a13      	ldr	r2, [pc, #76]	; (8007d98 <TIM_OC6_SetConfig+0xa0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC6_SetConfig+0x60>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a12      	ldr	r2, [pc, #72]	; (8007d9c <TIM_OC6_SetConfig+0xa4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d109      	bne.n	8007d6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	029b      	lsls	r3, r3, #10
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	feff8fff 	.word	0xfeff8fff
 8007d98:	40010000 	.word	0x40010000
 8007d9c:	40010400 	.word	0x40010400

08007da0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4b39      	ldr	r3, [pc, #228]	; (8007eac <TIM_SlaveTimer_SetConfig+0x10c>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b30      	cmp	r3, #48	; 0x30
 8007de4:	d05c      	beq.n	8007ea0 <TIM_SlaveTimer_SetConfig+0x100>
 8007de6:	2b30      	cmp	r3, #48	; 0x30
 8007de8:	d806      	bhi.n	8007df8 <TIM_SlaveTimer_SetConfig+0x58>
 8007dea:	2b10      	cmp	r3, #16
 8007dec:	d058      	beq.n	8007ea0 <TIM_SlaveTimer_SetConfig+0x100>
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d056      	beq.n	8007ea0 <TIM_SlaveTimer_SetConfig+0x100>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d054      	beq.n	8007ea0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007df6:	e054      	b.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007df8:	2b50      	cmp	r3, #80	; 0x50
 8007dfa:	d03d      	beq.n	8007e78 <TIM_SlaveTimer_SetConfig+0xd8>
 8007dfc:	2b50      	cmp	r3, #80	; 0x50
 8007dfe:	d802      	bhi.n	8007e06 <TIM_SlaveTimer_SetConfig+0x66>
 8007e00:	2b40      	cmp	r3, #64	; 0x40
 8007e02:	d010      	beq.n	8007e26 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007e04:	e04d      	b.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007e06:	2b60      	cmp	r3, #96	; 0x60
 8007e08:	d040      	beq.n	8007e8c <TIM_SlaveTimer_SetConfig+0xec>
 8007e0a:	2b70      	cmp	r3, #112	; 0x70
 8007e0c:	d000      	beq.n	8007e10 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8007e0e:	e048      	b.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	68d9      	ldr	r1, [r3, #12]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	689a      	ldr	r2, [r3, #8]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	f000 f9ea 	bl	80081f8 <TIM_ETR_SetConfig>
      break;
 8007e24:	e03d      	b.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	d101      	bne.n	8007e32 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e038      	b.n	8007ea4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0201 	bic.w	r2, r2, #1
 8007e48:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e58:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	621a      	str	r2, [r3, #32]
      break;
 8007e76:	e014      	b.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	6899      	ldr	r1, [r3, #8]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	461a      	mov	r2, r3
 8007e86:	f000 f887 	bl	8007f98 <TIM_TI1_ConfigInputStage>
      break;
 8007e8a:	e00a      	b.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6818      	ldr	r0, [r3, #0]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	6899      	ldr	r1, [r3, #8]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f000 f8e9 	bl	8008070 <TIM_TI2_ConfigInputStage>
      break;
 8007e9e:	e000      	b.n	8007ea2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007ea0:	bf00      	nop
  }
  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	fffefff8 	.word	0xfffefff8

08007eb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0201 	bic.w	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a28      	ldr	r2, [pc, #160]	; (8007f7c <TIM_TI1_SetConfig+0xcc>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d01b      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee4:	d017      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a25      	ldr	r2, [pc, #148]	; (8007f80 <TIM_TI1_SetConfig+0xd0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a24      	ldr	r2, [pc, #144]	; (8007f84 <TIM_TI1_SetConfig+0xd4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4a23      	ldr	r2, [pc, #140]	; (8007f88 <TIM_TI1_SetConfig+0xd8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a22      	ldr	r2, [pc, #136]	; (8007f8c <TIM_TI1_SetConfig+0xdc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d007      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4a21      	ldr	r2, [pc, #132]	; (8007f90 <TIM_TI1_SetConfig+0xe0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_TI1_SetConfig+0x66>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4a20      	ldr	r2, [pc, #128]	; (8007f94 <TIM_TI1_SetConfig+0xe4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d101      	bne.n	8007f1a <TIM_TI1_SetConfig+0x6a>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <TIM_TI1_SetConfig+0x6c>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d008      	beq.n	8007f32 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f023 0303 	bic.w	r3, r3, #3
 8007f26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	e003      	b.n	8007f3a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f023 030a 	bic.w	r3, r3, #10
 8007f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f003 030a 	and.w	r3, r3, #10
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40000c00 	.word	0x40000c00
 8007f8c:	40010400 	.word	0x40010400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40001800 	.word	0x40001800

08007f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	f023 0201 	bic.w	r2, r3, #1
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f023 030a 	bic.w	r3, r3, #10
 8007fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	621a      	str	r2, [r3, #32]
}
 8007fea:	bf00      	nop
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b087      	sub	sp, #28
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	f023 0210 	bic.w	r2, r3, #16
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008022:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	031b      	lsls	r3, r3, #12
 800803a:	b29b      	uxth	r3, r3
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008048:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	621a      	str	r2, [r3, #32]
}
 8008064:	bf00      	nop
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	f023 0210 	bic.w	r2, r3, #16
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800809a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	031b      	lsls	r3, r3, #12
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	621a      	str	r2, [r3, #32]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f023 0303 	bic.w	r3, r3, #3
 80080fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800810c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	b2db      	uxtb	r3, r3
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008120:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008174:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008186:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	031b      	lsls	r3, r3, #12
 800818c:	b29b      	uxth	r3, r3
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800819a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	031b      	lsls	r3, r3, #12
 80081a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	621a      	str	r2, [r3, #32]
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	f043 0307 	orr.w	r3, r3, #7
 80081e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	609a      	str	r2, [r3, #8]
}
 80081ec:	bf00      	nop
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	021a      	lsls	r2, r3, #8
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	431a      	orrs	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	4313      	orrs	r3, r2
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	609a      	str	r2, [r3, #8]
}
 800822c:	bf00      	nop
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	2201      	movs	r2, #1
 800824c:	fa02 f303 	lsl.w	r3, r2, r3
 8008250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a1a      	ldr	r2, [r3, #32]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	43db      	mvns	r3, r3
 800825a:	401a      	ands	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a1a      	ldr	r2, [r3, #32]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f003 031f 	and.w	r3, r3, #31
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	fa01 f303 	lsl.w	r3, r1, r3
 8008270:	431a      	orrs	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
	...

08008284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008298:	2302      	movs	r3, #2
 800829a:	e06d      	b.n	8008378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a30      	ldr	r2, [pc, #192]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d004      	beq.n	80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a2f      	ldr	r2, [pc, #188]	; (8008388 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d108      	bne.n	80082e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a20      	ldr	r2, [pc, #128]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d022      	beq.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800830e:	d01d      	beq.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1d      	ldr	r2, [pc, #116]	; (800838c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d018      	beq.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d013      	beq.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a1a      	ldr	r2, [pc, #104]	; (8008394 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d00e      	beq.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a15      	ldr	r2, [pc, #84]	; (8008388 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d009      	beq.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a16      	ldr	r2, [pc, #88]	; (8008398 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d004      	beq.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a15      	ldr	r2, [pc, #84]	; (800839c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d10c      	bne.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008352:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	4313      	orrs	r3, r2
 800835c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	40010000 	.word	0x40010000
 8008388:	40010400 	.word	0x40010400
 800838c:	40000400 	.word	0x40000400
 8008390:	40000800 	.word	0x40000800
 8008394:	40000c00 	.word	0x40000c00
 8008398:	40014000 	.word	0x40014000
 800839c:	40001800 	.word	0x40001800

080083a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e065      	b.n	8008488 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	4313      	orrs	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	041b      	lsls	r3, r3, #16
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a16      	ldr	r2, [pc, #88]	; (8008494 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d004      	beq.n	800844a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a14      	ldr	r2, [pc, #80]	; (8008498 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d115      	bne.n	8008476 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	051b      	lsls	r3, r3, #20
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	40010000 	.word	0x40010000
 8008498:	40010400 	.word	0x40010400

0800849c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e040      	b.n	800856c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fa fc28 	bl	8002d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2224      	movs	r2, #36	; 0x24
 8008504:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0201 	bic.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa8e 	bl	8008a38 <UART_SetConfig>
 800851c:	4603      	mov	r3, r0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e022      	b.n	800856c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fd2c 	bl	8008f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fdb3 	bl	80090d0 <UART_CheckIdleState>
 800856a:	4603      	mov	r3, r0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008586:	2b20      	cmp	r3, #32
 8008588:	d144      	bne.n	8008614 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <HAL_UART_Transmit_IT+0x22>
 8008590:	88fb      	ldrh	r3, [r7, #6]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e03d      	b.n	8008616 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d101      	bne.n	80085a8 <HAL_UART_Transmit_IT+0x34>
 80085a4:	2302      	movs	r3, #2
 80085a6:	e036      	b.n	8008616 <HAL_UART_Transmit_IT+0xa2>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	88fa      	ldrh	r2, [r7, #6]
 80085ba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2221      	movs	r2, #33	; 0x21
 80085d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e0:	d107      	bne.n	80085f2 <HAL_UART_Transmit_IT+0x7e>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4a0d      	ldr	r2, [pc, #52]	; (8008624 <HAL_UART_Transmit_IT+0xb0>)
 80085ee:	665a      	str	r2, [r3, #100]	; 0x64
 80085f0:	e002      	b.n	80085f8 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <HAL_UART_Transmit_IT+0xb4>)
 80085f6:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800860e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	e000      	b.n	8008616 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8008614:	2302      	movs	r3, #2
  }
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	0800932f 	.word	0x0800932f
 8008628:	080092bd 	.word	0x080092bd

0800862c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800863e:	2b20      	cmp	r3, #32
 8008640:	f040 808a 	bne.w	8008758 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <HAL_UART_Receive_IT+0x24>
 800864a:	88fb      	ldrh	r3, [r7, #6]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e082      	b.n	800875a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800865a:	2b01      	cmp	r3, #1
 800865c:	d101      	bne.n	8008662 <HAL_UART_Receive_IT+0x36>
 800865e:	2302      	movs	r3, #2
 8008660:	e07b      	b.n	800875a <HAL_UART_Receive_IT+0x12e>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	88fa      	ldrh	r2, [r7, #6]
 8008674:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	88fa      	ldrh	r2, [r7, #6]
 800867c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800868e:	d10e      	bne.n	80086ae <HAL_UART_Receive_IT+0x82>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <HAL_UART_Receive_IT+0x78>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800869e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086a2:	e02d      	b.n	8008700 <HAL_UART_Receive_IT+0xd4>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	22ff      	movs	r2, #255	; 0xff
 80086a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086ac:	e028      	b.n	8008700 <HAL_UART_Receive_IT+0xd4>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10d      	bne.n	80086d2 <HAL_UART_Receive_IT+0xa6>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d104      	bne.n	80086c8 <HAL_UART_Receive_IT+0x9c>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086c6:	e01b      	b.n	8008700 <HAL_UART_Receive_IT+0xd4>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	227f      	movs	r2, #127	; 0x7f
 80086cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086d0:	e016      	b.n	8008700 <HAL_UART_Receive_IT+0xd4>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086da:	d10d      	bne.n	80086f8 <HAL_UART_Receive_IT+0xcc>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <HAL_UART_Receive_IT+0xc2>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	227f      	movs	r2, #127	; 0x7f
 80086e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086ec:	e008      	b.n	8008700 <HAL_UART_Receive_IT+0xd4>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	223f      	movs	r2, #63	; 0x3f
 80086f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086f6:	e003      	b.n	8008700 <HAL_UART_Receive_IT+0xd4>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2222      	movs	r2, #34	; 0x22
 800870a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689a      	ldr	r2, [r3, #8]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f042 0201 	orr.w	r2, r2, #1
 800871a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008724:	d107      	bne.n	8008736 <HAL_UART_Receive_IT+0x10a>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d103      	bne.n	8008736 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4a0d      	ldr	r2, [pc, #52]	; (8008768 <HAL_UART_Receive_IT+0x13c>)
 8008732:	661a      	str	r2, [r3, #96]	; 0x60
 8008734:	e002      	b.n	800873c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4a0c      	ldr	r2, [pc, #48]	; (800876c <HAL_UART_Receive_IT+0x140>)
 800873a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008752:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	e000      	b.n	800875a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008758:	2302      	movs	r3, #2
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	08009483 	.word	0x08009483
 800876c:	080093dd 	.word	0x080093dd

08008770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	f640 030f 	movw	r3, #2063	; 0x80f
 8008796:	4013      	ands	r3, r2
 8008798:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d113      	bne.n	80087c8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00e      	beq.n	80087c8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8114 	beq.w	80089e6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
      }
      return;
 80087c6:	e10e      	b.n	80089e6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80d6 	beq.w	800897c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80cb 	beq.w	800897c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00e      	beq.n	800880e <HAL_UART_IRQHandler+0x9e>
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d009      	beq.n	800880e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2201      	movs	r2, #1
 8008800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008806:	f043 0201 	orr.w	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00e      	beq.n	8008836 <HAL_UART_IRQHandler+0xc6>
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d009      	beq.n	8008836 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2202      	movs	r2, #2
 8008828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882e:	f043 0204 	orr.w	r2, r3, #4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	f003 0304 	and.w	r3, r3, #4
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00e      	beq.n	800885e <HAL_UART_IRQHandler+0xee>
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2204      	movs	r2, #4
 8008850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008856:	f043 0202 	orr.w	r2, r3, #2
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b00      	cmp	r3, #0
 8008866:	d013      	beq.n	8008890 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f003 0320 	and.w	r3, r3, #32
 800886e:	2b00      	cmp	r3, #0
 8008870:	d104      	bne.n	800887c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008878:	2b00      	cmp	r3, #0
 800887a:	d009      	beq.n	8008890 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2208      	movs	r2, #8
 8008882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008888:	f043 0208 	orr.w	r2, r3, #8
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00f      	beq.n	80088ba <HAL_UART_IRQHandler+0x14a>
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00a      	beq.n	80088ba <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088b2:	f043 0220 	orr.w	r2, r3, #32
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 8093 	beq.w	80089ea <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	f003 0320 	and.w	r3, r3, #32
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f8:	2b40      	cmp	r3, #64	; 0x40
 80088fa:	d004      	beq.n	8008906 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008902:	2b00      	cmp	r3, #0
 8008904:	d031      	beq.n	800896a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fca2 	bl	8009250 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b40      	cmp	r3, #64	; 0x40
 8008918:	d123      	bne.n	8008962 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689a      	ldr	r2, [r3, #8]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008928:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800892e:	2b00      	cmp	r3, #0
 8008930:	d013      	beq.n	800895a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008936:	4a30      	ldr	r2, [pc, #192]	; (80089f8 <HAL_UART_IRQHandler+0x288>)
 8008938:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893e:	4618      	mov	r0, r3
 8008940:	f7fb facc 	bl	8003edc <HAL_DMA_Abort_IT>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d016      	beq.n	8008978 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800894e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008958:	e00e      	b.n	8008978 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f858 	bl	8008a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008960:	e00a      	b.n	8008978 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f854 	bl	8008a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008968:	e006      	b.n	8008978 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f850 	bl	8008a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008976:	e038      	b.n	80089ea <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008978:	bf00      	nop
    return;
 800897a:	e036      	b.n	80089ea <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00d      	beq.n	80089a2 <HAL_UART_IRQHandler+0x232>
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d008      	beq.n	80089a2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f842 	bl	8008a24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089a0:	e026      	b.n	80089f0 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00d      	beq.n	80089c8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d008      	beq.n	80089c8 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d017      	beq.n	80089ee <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
    }
    return;
 80089c6:	e012      	b.n	80089ee <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00e      	beq.n	80089f0 <HAL_UART_IRQHandler+0x280>
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fce4 	bl	80093aa <UART_EndTransmit_IT>
    return;
 80089e2:	bf00      	nop
 80089e4:	e004      	b.n	80089f0 <HAL_UART_IRQHandler+0x280>
      return;
 80089e6:	bf00      	nop
 80089e8:	e002      	b.n	80089f0 <HAL_UART_IRQHandler+0x280>
    return;
 80089ea:	bf00      	nop
 80089ec:	e000      	b.n	80089f0 <HAL_UART_IRQHandler+0x280>
    return;
 80089ee:	bf00      	nop
  }

}
 80089f0:	3720      	adds	r7, #32
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	08009291 	.word	0x08009291

080089fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	431a      	orrs	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4bb1      	ldr	r3, [pc, #708]	; (8008d2c <UART_SetConfig+0x2f4>)
 8008a68:	4013      	ands	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6812      	ldr	r2, [r2, #0]
 8008a6e:	6939      	ldr	r1, [r7, #16]
 8008a70:	430b      	orrs	r3, r1
 8008a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68da      	ldr	r2, [r3, #12]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a9f      	ldr	r2, [pc, #636]	; (8008d30 <UART_SetConfig+0x2f8>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d121      	bne.n	8008afc <UART_SetConfig+0xc4>
 8008ab8:	4b9e      	ldr	r3, [pc, #632]	; (8008d34 <UART_SetConfig+0x2fc>)
 8008aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d816      	bhi.n	8008af4 <UART_SetConfig+0xbc>
 8008ac6:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <UART_SetConfig+0x94>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008add 	.word	0x08008add
 8008ad0:	08008ae9 	.word	0x08008ae9
 8008ad4:	08008ae3 	.word	0x08008ae3
 8008ad8:	08008aef 	.word	0x08008aef
 8008adc:	2301      	movs	r3, #1
 8008ade:	77fb      	strb	r3, [r7, #31]
 8008ae0:	e151      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	77fb      	strb	r3, [r7, #31]
 8008ae6:	e14e      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008ae8:	2304      	movs	r3, #4
 8008aea:	77fb      	strb	r3, [r7, #31]
 8008aec:	e14b      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008aee:	2308      	movs	r3, #8
 8008af0:	77fb      	strb	r3, [r7, #31]
 8008af2:	e148      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008af4:	2310      	movs	r3, #16
 8008af6:	77fb      	strb	r3, [r7, #31]
 8008af8:	bf00      	nop
 8008afa:	e144      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a8d      	ldr	r2, [pc, #564]	; (8008d38 <UART_SetConfig+0x300>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d134      	bne.n	8008b70 <UART_SetConfig+0x138>
 8008b06:	4b8b      	ldr	r3, [pc, #556]	; (8008d34 <UART_SetConfig+0x2fc>)
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b0c:	f003 030c 	and.w	r3, r3, #12
 8008b10:	2b0c      	cmp	r3, #12
 8008b12:	d829      	bhi.n	8008b68 <UART_SetConfig+0x130>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <UART_SetConfig+0xe4>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b51 	.word	0x08008b51
 8008b20:	08008b69 	.word	0x08008b69
 8008b24:	08008b69 	.word	0x08008b69
 8008b28:	08008b69 	.word	0x08008b69
 8008b2c:	08008b5d 	.word	0x08008b5d
 8008b30:	08008b69 	.word	0x08008b69
 8008b34:	08008b69 	.word	0x08008b69
 8008b38:	08008b69 	.word	0x08008b69
 8008b3c:	08008b57 	.word	0x08008b57
 8008b40:	08008b69 	.word	0x08008b69
 8008b44:	08008b69 	.word	0x08008b69
 8008b48:	08008b69 	.word	0x08008b69
 8008b4c:	08008b63 	.word	0x08008b63
 8008b50:	2300      	movs	r3, #0
 8008b52:	77fb      	strb	r3, [r7, #31]
 8008b54:	e117      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008b56:	2302      	movs	r3, #2
 8008b58:	77fb      	strb	r3, [r7, #31]
 8008b5a:	e114      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	77fb      	strb	r3, [r7, #31]
 8008b60:	e111      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008b62:	2308      	movs	r3, #8
 8008b64:	77fb      	strb	r3, [r7, #31]
 8008b66:	e10e      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008b68:	2310      	movs	r3, #16
 8008b6a:	77fb      	strb	r3, [r7, #31]
 8008b6c:	bf00      	nop
 8008b6e:	e10a      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a71      	ldr	r2, [pc, #452]	; (8008d3c <UART_SetConfig+0x304>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d120      	bne.n	8008bbc <UART_SetConfig+0x184>
 8008b7a:	4b6e      	ldr	r3, [pc, #440]	; (8008d34 <UART_SetConfig+0x2fc>)
 8008b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d00f      	beq.n	8008ba8 <UART_SetConfig+0x170>
 8008b88:	2b10      	cmp	r3, #16
 8008b8a:	d802      	bhi.n	8008b92 <UART_SetConfig+0x15a>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d005      	beq.n	8008b9c <UART_SetConfig+0x164>
 8008b90:	e010      	b.n	8008bb4 <UART_SetConfig+0x17c>
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d005      	beq.n	8008ba2 <UART_SetConfig+0x16a>
 8008b96:	2b30      	cmp	r3, #48	; 0x30
 8008b98:	d009      	beq.n	8008bae <UART_SetConfig+0x176>
 8008b9a:	e00b      	b.n	8008bb4 <UART_SetConfig+0x17c>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	77fb      	strb	r3, [r7, #31]
 8008ba0:	e0f1      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	77fb      	strb	r3, [r7, #31]
 8008ba6:	e0ee      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008ba8:	2304      	movs	r3, #4
 8008baa:	77fb      	strb	r3, [r7, #31]
 8008bac:	e0eb      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008bae:	2308      	movs	r3, #8
 8008bb0:	77fb      	strb	r3, [r7, #31]
 8008bb2:	e0e8      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008bb4:	2310      	movs	r3, #16
 8008bb6:	77fb      	strb	r3, [r7, #31]
 8008bb8:	bf00      	nop
 8008bba:	e0e4      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a5f      	ldr	r2, [pc, #380]	; (8008d40 <UART_SetConfig+0x308>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d120      	bne.n	8008c08 <UART_SetConfig+0x1d0>
 8008bc6:	4b5b      	ldr	r3, [pc, #364]	; (8008d34 <UART_SetConfig+0x2fc>)
 8008bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008bd0:	2b40      	cmp	r3, #64	; 0x40
 8008bd2:	d00f      	beq.n	8008bf4 <UART_SetConfig+0x1bc>
 8008bd4:	2b40      	cmp	r3, #64	; 0x40
 8008bd6:	d802      	bhi.n	8008bde <UART_SetConfig+0x1a6>
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d005      	beq.n	8008be8 <UART_SetConfig+0x1b0>
 8008bdc:	e010      	b.n	8008c00 <UART_SetConfig+0x1c8>
 8008bde:	2b80      	cmp	r3, #128	; 0x80
 8008be0:	d005      	beq.n	8008bee <UART_SetConfig+0x1b6>
 8008be2:	2bc0      	cmp	r3, #192	; 0xc0
 8008be4:	d009      	beq.n	8008bfa <UART_SetConfig+0x1c2>
 8008be6:	e00b      	b.n	8008c00 <UART_SetConfig+0x1c8>
 8008be8:	2300      	movs	r3, #0
 8008bea:	77fb      	strb	r3, [r7, #31]
 8008bec:	e0cb      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	77fb      	strb	r3, [r7, #31]
 8008bf2:	e0c8      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	77fb      	strb	r3, [r7, #31]
 8008bf8:	e0c5      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	77fb      	strb	r3, [r7, #31]
 8008bfe:	e0c2      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c00:	2310      	movs	r3, #16
 8008c02:	77fb      	strb	r3, [r7, #31]
 8008c04:	bf00      	nop
 8008c06:	e0be      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a4d      	ldr	r2, [pc, #308]	; (8008d44 <UART_SetConfig+0x30c>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d124      	bne.n	8008c5c <UART_SetConfig+0x224>
 8008c12:	4b48      	ldr	r3, [pc, #288]	; (8008d34 <UART_SetConfig+0x2fc>)
 8008c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c20:	d012      	beq.n	8008c48 <UART_SetConfig+0x210>
 8008c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c26:	d802      	bhi.n	8008c2e <UART_SetConfig+0x1f6>
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d007      	beq.n	8008c3c <UART_SetConfig+0x204>
 8008c2c:	e012      	b.n	8008c54 <UART_SetConfig+0x21c>
 8008c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c32:	d006      	beq.n	8008c42 <UART_SetConfig+0x20a>
 8008c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c38:	d009      	beq.n	8008c4e <UART_SetConfig+0x216>
 8008c3a:	e00b      	b.n	8008c54 <UART_SetConfig+0x21c>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	77fb      	strb	r3, [r7, #31]
 8008c40:	e0a1      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c42:	2302      	movs	r3, #2
 8008c44:	77fb      	strb	r3, [r7, #31]
 8008c46:	e09e      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c48:	2304      	movs	r3, #4
 8008c4a:	77fb      	strb	r3, [r7, #31]
 8008c4c:	e09b      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c4e:	2308      	movs	r3, #8
 8008c50:	77fb      	strb	r3, [r7, #31]
 8008c52:	e098      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c54:	2310      	movs	r3, #16
 8008c56:	77fb      	strb	r3, [r7, #31]
 8008c58:	bf00      	nop
 8008c5a:	e094      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a39      	ldr	r2, [pc, #228]	; (8008d48 <UART_SetConfig+0x310>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d124      	bne.n	8008cb0 <UART_SetConfig+0x278>
 8008c66:	4b33      	ldr	r3, [pc, #204]	; (8008d34 <UART_SetConfig+0x2fc>)
 8008c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c74:	d012      	beq.n	8008c9c <UART_SetConfig+0x264>
 8008c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c7a:	d802      	bhi.n	8008c82 <UART_SetConfig+0x24a>
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d007      	beq.n	8008c90 <UART_SetConfig+0x258>
 8008c80:	e012      	b.n	8008ca8 <UART_SetConfig+0x270>
 8008c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c86:	d006      	beq.n	8008c96 <UART_SetConfig+0x25e>
 8008c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c8c:	d009      	beq.n	8008ca2 <UART_SetConfig+0x26a>
 8008c8e:	e00b      	b.n	8008ca8 <UART_SetConfig+0x270>
 8008c90:	2301      	movs	r3, #1
 8008c92:	77fb      	strb	r3, [r7, #31]
 8008c94:	e077      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c96:	2302      	movs	r3, #2
 8008c98:	77fb      	strb	r3, [r7, #31]
 8008c9a:	e074      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008c9c:	2304      	movs	r3, #4
 8008c9e:	77fb      	strb	r3, [r7, #31]
 8008ca0:	e071      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008ca2:	2308      	movs	r3, #8
 8008ca4:	77fb      	strb	r3, [r7, #31]
 8008ca6:	e06e      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008ca8:	2310      	movs	r3, #16
 8008caa:	77fb      	strb	r3, [r7, #31]
 8008cac:	bf00      	nop
 8008cae:	e06a      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a25      	ldr	r2, [pc, #148]	; (8008d4c <UART_SetConfig+0x314>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d124      	bne.n	8008d04 <UART_SetConfig+0x2cc>
 8008cba:	4b1e      	ldr	r3, [pc, #120]	; (8008d34 <UART_SetConfig+0x2fc>)
 8008cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc8:	d012      	beq.n	8008cf0 <UART_SetConfig+0x2b8>
 8008cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cce:	d802      	bhi.n	8008cd6 <UART_SetConfig+0x29e>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d007      	beq.n	8008ce4 <UART_SetConfig+0x2ac>
 8008cd4:	e012      	b.n	8008cfc <UART_SetConfig+0x2c4>
 8008cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cda:	d006      	beq.n	8008cea <UART_SetConfig+0x2b2>
 8008cdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ce0:	d009      	beq.n	8008cf6 <UART_SetConfig+0x2be>
 8008ce2:	e00b      	b.n	8008cfc <UART_SetConfig+0x2c4>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	77fb      	strb	r3, [r7, #31]
 8008ce8:	e04d      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008cea:	2302      	movs	r3, #2
 8008cec:	77fb      	strb	r3, [r7, #31]
 8008cee:	e04a      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	77fb      	strb	r3, [r7, #31]
 8008cf4:	e047      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008cf6:	2308      	movs	r3, #8
 8008cf8:	77fb      	strb	r3, [r7, #31]
 8008cfa:	e044      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	77fb      	strb	r3, [r7, #31]
 8008d00:	bf00      	nop
 8008d02:	e040      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a11      	ldr	r2, [pc, #68]	; (8008d50 <UART_SetConfig+0x318>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d139      	bne.n	8008d82 <UART_SetConfig+0x34a>
 8008d0e:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <UART_SetConfig+0x2fc>)
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d1c:	d027      	beq.n	8008d6e <UART_SetConfig+0x336>
 8008d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d22:	d817      	bhi.n	8008d54 <UART_SetConfig+0x31c>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01c      	beq.n	8008d62 <UART_SetConfig+0x32a>
 8008d28:	e027      	b.n	8008d7a <UART_SetConfig+0x342>
 8008d2a:	bf00      	nop
 8008d2c:	efff69f3 	.word	0xefff69f3
 8008d30:	40011000 	.word	0x40011000
 8008d34:	40023800 	.word	0x40023800
 8008d38:	40004400 	.word	0x40004400
 8008d3c:	40004800 	.word	0x40004800
 8008d40:	40004c00 	.word	0x40004c00
 8008d44:	40005000 	.word	0x40005000
 8008d48:	40011400 	.word	0x40011400
 8008d4c:	40007800 	.word	0x40007800
 8008d50:	40007c00 	.word	0x40007c00
 8008d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d58:	d006      	beq.n	8008d68 <UART_SetConfig+0x330>
 8008d5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d5e:	d009      	beq.n	8008d74 <UART_SetConfig+0x33c>
 8008d60:	e00b      	b.n	8008d7a <UART_SetConfig+0x342>
 8008d62:	2300      	movs	r3, #0
 8008d64:	77fb      	strb	r3, [r7, #31]
 8008d66:	e00e      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	77fb      	strb	r3, [r7, #31]
 8008d6c:	e00b      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008d6e:	2304      	movs	r3, #4
 8008d70:	77fb      	strb	r3, [r7, #31]
 8008d72:	e008      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008d74:	2308      	movs	r3, #8
 8008d76:	77fb      	strb	r3, [r7, #31]
 8008d78:	e005      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008d7a:	2310      	movs	r3, #16
 8008d7c:	77fb      	strb	r3, [r7, #31]
 8008d7e:	bf00      	nop
 8008d80:	e001      	b.n	8008d86 <UART_SetConfig+0x34e>
 8008d82:	2310      	movs	r3, #16
 8008d84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d8e:	d17f      	bne.n	8008e90 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008d90:	7ffb      	ldrb	r3, [r7, #31]
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	d85c      	bhi.n	8008e50 <UART_SetConfig+0x418>
 8008d96:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <UART_SetConfig+0x364>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008de1 	.word	0x08008de1
 8008da4:	08008e01 	.word	0x08008e01
 8008da8:	08008e51 	.word	0x08008e51
 8008dac:	08008e19 	.word	0x08008e19
 8008db0:	08008e51 	.word	0x08008e51
 8008db4:	08008e51 	.word	0x08008e51
 8008db8:	08008e51 	.word	0x08008e51
 8008dbc:	08008e39 	.word	0x08008e39
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f7fc faba 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 8008dc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	005a      	lsls	r2, r3, #1
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	441a      	add	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	61bb      	str	r3, [r7, #24]
        break;
 8008dde:	e03a      	b.n	8008e56 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008de0:	f7fc fabe 	bl	8005360 <HAL_RCC_GetPCLK2Freq>
 8008de4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	005a      	lsls	r2, r3, #1
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	441a      	add	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	61bb      	str	r3, [r7, #24]
        break;
 8008dfe:	e02a      	b.n	8008e56 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	085a      	lsrs	r2, r3, #1
 8008e06:	4b5f      	ldr	r3, [pc, #380]	; (8008f84 <UART_SetConfig+0x54c>)
 8008e08:	4413      	add	r3, r2
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6852      	ldr	r2, [r2, #4]
 8008e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	61bb      	str	r3, [r7, #24]
        break;
 8008e16:	e01e      	b.n	8008e56 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e18:	f7fc f9d0 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 8008e1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	005a      	lsls	r2, r3, #1
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	085b      	lsrs	r3, r3, #1
 8008e28:	441a      	add	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	61bb      	str	r3, [r7, #24]
        break;
 8008e36:	e00e      	b.n	8008e56 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	61bb      	str	r3, [r7, #24]
        break;
 8008e4e:	e002      	b.n	8008e56 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	75fb      	strb	r3, [r7, #23]
        break;
 8008e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2b0f      	cmp	r3, #15
 8008e5a:	d916      	bls.n	8008e8a <UART_SetConfig+0x452>
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e62:	d212      	bcs.n	8008e8a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f023 030f 	bic.w	r3, r3, #15
 8008e6c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	085b      	lsrs	r3, r3, #1
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	897b      	ldrh	r3, [r7, #10]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	897a      	ldrh	r2, [r7, #10]
 8008e86:	60da      	str	r2, [r3, #12]
 8008e88:	e070      	b.n	8008f6c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	75fb      	strb	r3, [r7, #23]
 8008e8e:	e06d      	b.n	8008f6c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008e90:	7ffb      	ldrb	r3, [r7, #31]
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d859      	bhi.n	8008f4a <UART_SetConfig+0x512>
 8008e96:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <UART_SetConfig+0x464>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008edf 	.word	0x08008edf
 8008ea4:	08008efd 	.word	0x08008efd
 8008ea8:	08008f4b 	.word	0x08008f4b
 8008eac:	08008f15 	.word	0x08008f15
 8008eb0:	08008f4b 	.word	0x08008f4b
 8008eb4:	08008f4b 	.word	0x08008f4b
 8008eb8:	08008f4b 	.word	0x08008f4b
 8008ebc:	08008f33 	.word	0x08008f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ec0:	f7fc fa3a 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 8008ec4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	085a      	lsrs	r2, r3, #1
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	441a      	add	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	61bb      	str	r3, [r7, #24]
        break;
 8008edc:	e038      	b.n	8008f50 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ede:	f7fc fa3f 	bl	8005360 <HAL_RCC_GetPCLK2Freq>
 8008ee2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	085a      	lsrs	r2, r3, #1
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	441a      	add	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	61bb      	str	r3, [r7, #24]
        break;
 8008efa:	e029      	b.n	8008f50 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	085a      	lsrs	r2, r3, #1
 8008f02:	4b21      	ldr	r3, [pc, #132]	; (8008f88 <UART_SetConfig+0x550>)
 8008f04:	4413      	add	r3, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6852      	ldr	r2, [r2, #4]
 8008f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	61bb      	str	r3, [r7, #24]
        break;
 8008f12:	e01d      	b.n	8008f50 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f14:	f7fc f952 	bl	80051bc <HAL_RCC_GetSysClockFreq>
 8008f18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	085a      	lsrs	r2, r3, #1
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	441a      	add	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	61bb      	str	r3, [r7, #24]
        break;
 8008f30:	e00e      	b.n	8008f50 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	085b      	lsrs	r3, r3, #1
 8008f38:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	61bb      	str	r3, [r7, #24]
        break;
 8008f48:	e002      	b.n	8008f50 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	75fb      	strb	r3, [r7, #23]
        break;
 8008f4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b0f      	cmp	r3, #15
 8008f54:	d908      	bls.n	8008f68 <UART_SetConfig+0x530>
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f5c:	d204      	bcs.n	8008f68 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	60da      	str	r2, [r3, #12]
 8008f66:	e001      	b.n	8008f6c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3720      	adds	r7, #32
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	01e84800 	.word	0x01e84800
 8008f88:	00f42400 	.word	0x00f42400

08008f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01a      	beq.n	80090a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800908a:	d10a      	bne.n	80090a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00a      	beq.n	80090c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	605a      	str	r2, [r3, #4]
  }
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80090de:	f7fa f8a3 	bl	8003228 <HAL_GetTick>
 80090e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0308 	and.w	r3, r3, #8
 80090ee:	2b08      	cmp	r3, #8
 80090f0:	d10e      	bne.n	8009110 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f82a 	bl	800915a <UART_WaitOnFlagUntilTimeout>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e020      	b.n	8009152 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	2b04      	cmp	r3, #4
 800911c:	d10e      	bne.n	800913c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800911e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f814 	bl	800915a <UART_WaitOnFlagUntilTimeout>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e00a      	b.n	8009152 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2220      	movs	r2, #32
 8009146:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	60b9      	str	r1, [r7, #8]
 8009164:	603b      	str	r3, [r7, #0]
 8009166:	4613      	mov	r3, r2
 8009168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800916a:	e05d      	b.n	8009228 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009172:	d059      	beq.n	8009228 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009174:	f7fa f858 	bl	8003228 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	429a      	cmp	r2, r3
 8009182:	d302      	bcc.n	800918a <UART_WaitOnFlagUntilTimeout+0x30>
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d11b      	bne.n	80091c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009198:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0201 	bic.w	r2, r2, #1
 80091a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2220      	movs	r2, #32
 80091ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2220      	movs	r2, #32
 80091b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e042      	b.n	8009248 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d02b      	beq.n	8009228 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091de:	d123      	bne.n	8009228 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0201 	bic.w	r2, r2, #1
 8009208:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2220      	movs	r2, #32
 800920e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2220      	movs	r2, #32
 8009214:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2220      	movs	r2, #32
 800921a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e00f      	b.n	8009248 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	69da      	ldr	r2, [r3, #28]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	4013      	ands	r3, r2
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	429a      	cmp	r2, r3
 8009236:	bf0c      	ite	eq
 8009238:	2301      	moveq	r3, #1
 800923a:	2300      	movne	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	461a      	mov	r2, r3
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	429a      	cmp	r2, r3
 8009244:	d092      	beq.n	800916c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009266:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689a      	ldr	r2, [r3, #8]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 0201 	bic.w	r2, r2, #1
 8009276:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2220      	movs	r2, #32
 800927c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7ff fbae 	bl	8008a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092c8:	2b21      	cmp	r3, #33	; 0x21
 80092ca:	d12a      	bne.n	8009322 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d110      	bne.n	80092fa <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092e6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092f6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80092f8:	e013      	b.n	8009322 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009316:	b29b      	uxth	r3, r3
 8009318:	3b01      	subs	r3, #1
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800933a:	2b21      	cmp	r3, #33	; 0x21
 800933c:	d12f      	bne.n	800939e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009344:	b29b      	uxth	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d110      	bne.n	800936c <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009358:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009368:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800936a:	e018      	b.n	800939e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009370:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009380:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009386:	1c9a      	adds	r2, r3, #2
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009392:	b29b      	uxth	r3, r3
 8009394:	3b01      	subs	r3, #1
 8009396:	b29a      	uxth	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800939e:	bf00      	nop
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2220      	movs	r2, #32
 80093c6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff fb14 	bl	80089fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093ea:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093f0:	2b22      	cmp	r3, #34	; 0x22
 80093f2:	d13a      	bne.n	800946a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80093fc:	89bb      	ldrh	r3, [r7, #12]
 80093fe:	b2d9      	uxtb	r1, r3
 8009400:	89fb      	ldrh	r3, [r7, #14]
 8009402:	b2da      	uxtb	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009408:	400a      	ands	r2, r1
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800941e:	b29b      	uxth	r3, r3
 8009420:	3b01      	subs	r3, #1
 8009422:	b29a      	uxth	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d121      	bne.n	800947a <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009444:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0201 	bic.w	r2, r2, #1
 8009454:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7f8 fbe4 	bl	8001c30 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009468:	e007      	b.n	800947a <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0208 	orr.w	r2, r2, #8
 8009478:	619a      	str	r2, [r3, #24]
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009490:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009496:	2b22      	cmp	r3, #34	; 0x22
 8009498:	d13a      	bne.n	8009510 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80094a8:	89ba      	ldrh	r2, [r7, #12]
 80094aa:	89fb      	ldrh	r3, [r7, #14]
 80094ac:	4013      	ands	r3, r2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b8:	1c9a      	adds	r2, r3, #2
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d121      	bne.n	8009520 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689a      	ldr	r2, [r3, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 0201 	bic.w	r2, r2, #1
 80094fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7f8 fb91 	bl	8001c30 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800950e:	e007      	b.n	8009520 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f042 0208 	orr.w	r2, r2, #8
 800951e:	619a      	str	r2, [r3, #24]
}
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <atoi>:
 8009528:	220a      	movs	r2, #10
 800952a:	2100      	movs	r1, #0
 800952c:	f000 b938 	b.w	80097a0 <strtol>

08009530 <__errno>:
 8009530:	4b01      	ldr	r3, [pc, #4]	; (8009538 <__errno+0x8>)
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	20000014 	.word	0x20000014

0800953c <__libc_init_array>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	4e0d      	ldr	r6, [pc, #52]	; (8009574 <__libc_init_array+0x38>)
 8009540:	4c0d      	ldr	r4, [pc, #52]	; (8009578 <__libc_init_array+0x3c>)
 8009542:	1ba4      	subs	r4, r4, r6
 8009544:	10a4      	asrs	r4, r4, #2
 8009546:	2500      	movs	r5, #0
 8009548:	42a5      	cmp	r5, r4
 800954a:	d109      	bne.n	8009560 <__libc_init_array+0x24>
 800954c:	4e0b      	ldr	r6, [pc, #44]	; (800957c <__libc_init_array+0x40>)
 800954e:	4c0c      	ldr	r4, [pc, #48]	; (8009580 <__libc_init_array+0x44>)
 8009550:	f000 fd4e 	bl	8009ff0 <_init>
 8009554:	1ba4      	subs	r4, r4, r6
 8009556:	10a4      	asrs	r4, r4, #2
 8009558:	2500      	movs	r5, #0
 800955a:	42a5      	cmp	r5, r4
 800955c:	d105      	bne.n	800956a <__libc_init_array+0x2e>
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009564:	4798      	blx	r3
 8009566:	3501      	adds	r5, #1
 8009568:	e7ee      	b.n	8009548 <__libc_init_array+0xc>
 800956a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800956e:	4798      	blx	r3
 8009570:	3501      	adds	r5, #1
 8009572:	e7f2      	b.n	800955a <__libc_init_array+0x1e>
 8009574:	0800a2c8 	.word	0x0800a2c8
 8009578:	0800a2c8 	.word	0x0800a2c8
 800957c:	0800a2c8 	.word	0x0800a2c8
 8009580:	0800a2cc 	.word	0x0800a2cc

08009584 <memset>:
 8009584:	4402      	add	r2, r0
 8009586:	4603      	mov	r3, r0
 8009588:	4293      	cmp	r3, r2
 800958a:	d100      	bne.n	800958e <memset+0xa>
 800958c:	4770      	bx	lr
 800958e:	f803 1b01 	strb.w	r1, [r3], #1
 8009592:	e7f9      	b.n	8009588 <memset+0x4>

08009594 <siprintf>:
 8009594:	b40e      	push	{r1, r2, r3}
 8009596:	b500      	push	{lr}
 8009598:	b09c      	sub	sp, #112	; 0x70
 800959a:	ab1d      	add	r3, sp, #116	; 0x74
 800959c:	9002      	str	r0, [sp, #8]
 800959e:	9006      	str	r0, [sp, #24]
 80095a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095a4:	4809      	ldr	r0, [pc, #36]	; (80095cc <siprintf+0x38>)
 80095a6:	9107      	str	r1, [sp, #28]
 80095a8:	9104      	str	r1, [sp, #16]
 80095aa:	4909      	ldr	r1, [pc, #36]	; (80095d0 <siprintf+0x3c>)
 80095ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b0:	9105      	str	r1, [sp, #20]
 80095b2:	6800      	ldr	r0, [r0, #0]
 80095b4:	9301      	str	r3, [sp, #4]
 80095b6:	a902      	add	r1, sp, #8
 80095b8:	f000 fa28 	bl	8009a0c <_svfiprintf_r>
 80095bc:	9b02      	ldr	r3, [sp, #8]
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	b01c      	add	sp, #112	; 0x70
 80095c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095c8:	b003      	add	sp, #12
 80095ca:	4770      	bx	lr
 80095cc:	20000014 	.word	0x20000014
 80095d0:	ffff0208 	.word	0xffff0208

080095d4 <strncpy>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	3901      	subs	r1, #1
 80095d8:	4604      	mov	r4, r0
 80095da:	b902      	cbnz	r2, 80095de <strncpy+0xa>
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
 80095de:	4623      	mov	r3, r4
 80095e0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80095e4:	f803 5b01 	strb.w	r5, [r3], #1
 80095e8:	1e56      	subs	r6, r2, #1
 80095ea:	b92d      	cbnz	r5, 80095f8 <strncpy+0x24>
 80095ec:	4414      	add	r4, r2
 80095ee:	42a3      	cmp	r3, r4
 80095f0:	d0f4      	beq.n	80095dc <strncpy+0x8>
 80095f2:	f803 5b01 	strb.w	r5, [r3], #1
 80095f6:	e7fa      	b.n	80095ee <strncpy+0x1a>
 80095f8:	461c      	mov	r4, r3
 80095fa:	4632      	mov	r2, r6
 80095fc:	e7ed      	b.n	80095da <strncpy+0x6>
	...

08009600 <strtok>:
 8009600:	4b13      	ldr	r3, [pc, #76]	; (8009650 <strtok+0x50>)
 8009602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	681d      	ldr	r5, [r3, #0]
 8009608:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800960a:	4606      	mov	r6, r0
 800960c:	460f      	mov	r7, r1
 800960e:	b9b4      	cbnz	r4, 800963e <strtok+0x3e>
 8009610:	2050      	movs	r0, #80	; 0x50
 8009612:	f000 f8df 	bl	80097d4 <malloc>
 8009616:	65a8      	str	r0, [r5, #88]	; 0x58
 8009618:	e9c0 4400 	strd	r4, r4, [r0]
 800961c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009620:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009624:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009628:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800962c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009630:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009634:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009638:	6184      	str	r4, [r0, #24]
 800963a:	7704      	strb	r4, [r0, #28]
 800963c:	6244      	str	r4, [r0, #36]	; 0x24
 800963e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009640:	4639      	mov	r1, r7
 8009642:	4630      	mov	r0, r6
 8009644:	2301      	movs	r3, #1
 8009646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964a:	f000 b803 	b.w	8009654 <__strtok_r>
 800964e:	bf00      	nop
 8009650:	20000014 	.word	0x20000014

08009654 <__strtok_r>:
 8009654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009656:	b918      	cbnz	r0, 8009660 <__strtok_r+0xc>
 8009658:	6810      	ldr	r0, [r2, #0]
 800965a:	b908      	cbnz	r0, 8009660 <__strtok_r+0xc>
 800965c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965e:	4620      	mov	r0, r4
 8009660:	4604      	mov	r4, r0
 8009662:	460f      	mov	r7, r1
 8009664:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009668:	f817 6b01 	ldrb.w	r6, [r7], #1
 800966c:	b91e      	cbnz	r6, 8009676 <__strtok_r+0x22>
 800966e:	b96d      	cbnz	r5, 800968c <__strtok_r+0x38>
 8009670:	6015      	str	r5, [r2, #0]
 8009672:	4628      	mov	r0, r5
 8009674:	e7f2      	b.n	800965c <__strtok_r+0x8>
 8009676:	42b5      	cmp	r5, r6
 8009678:	d1f6      	bne.n	8009668 <__strtok_r+0x14>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1ef      	bne.n	800965e <__strtok_r+0xa>
 800967e:	6014      	str	r4, [r2, #0]
 8009680:	7003      	strb	r3, [r0, #0]
 8009682:	e7eb      	b.n	800965c <__strtok_r+0x8>
 8009684:	462b      	mov	r3, r5
 8009686:	e00d      	b.n	80096a4 <__strtok_r+0x50>
 8009688:	b926      	cbnz	r6, 8009694 <__strtok_r+0x40>
 800968a:	461c      	mov	r4, r3
 800968c:	4623      	mov	r3, r4
 800968e:	460f      	mov	r7, r1
 8009690:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009694:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009698:	42b5      	cmp	r5, r6
 800969a:	d1f5      	bne.n	8009688 <__strtok_r+0x34>
 800969c:	2d00      	cmp	r5, #0
 800969e:	d0f1      	beq.n	8009684 <__strtok_r+0x30>
 80096a0:	2100      	movs	r1, #0
 80096a2:	7021      	strb	r1, [r4, #0]
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	e7d9      	b.n	800965c <__strtok_r+0x8>

080096a8 <_strtol_l.isra.0>:
 80096a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ac:	4680      	mov	r8, r0
 80096ae:	4689      	mov	r9, r1
 80096b0:	4692      	mov	sl, r2
 80096b2:	461e      	mov	r6, r3
 80096b4:	460f      	mov	r7, r1
 80096b6:	463d      	mov	r5, r7
 80096b8:	9808      	ldr	r0, [sp, #32]
 80096ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096be:	f000 f885 	bl	80097cc <__locale_ctype_ptr_l>
 80096c2:	4420      	add	r0, r4
 80096c4:	7843      	ldrb	r3, [r0, #1]
 80096c6:	f013 0308 	ands.w	r3, r3, #8
 80096ca:	d132      	bne.n	8009732 <_strtol_l.isra.0+0x8a>
 80096cc:	2c2d      	cmp	r4, #45	; 0x2d
 80096ce:	d132      	bne.n	8009736 <_strtol_l.isra.0+0x8e>
 80096d0:	787c      	ldrb	r4, [r7, #1]
 80096d2:	1cbd      	adds	r5, r7, #2
 80096d4:	2201      	movs	r2, #1
 80096d6:	2e00      	cmp	r6, #0
 80096d8:	d05d      	beq.n	8009796 <_strtol_l.isra.0+0xee>
 80096da:	2e10      	cmp	r6, #16
 80096dc:	d109      	bne.n	80096f2 <_strtol_l.isra.0+0x4a>
 80096de:	2c30      	cmp	r4, #48	; 0x30
 80096e0:	d107      	bne.n	80096f2 <_strtol_l.isra.0+0x4a>
 80096e2:	782b      	ldrb	r3, [r5, #0]
 80096e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096e8:	2b58      	cmp	r3, #88	; 0x58
 80096ea:	d14f      	bne.n	800978c <_strtol_l.isra.0+0xe4>
 80096ec:	786c      	ldrb	r4, [r5, #1]
 80096ee:	2610      	movs	r6, #16
 80096f0:	3502      	adds	r5, #2
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	bf14      	ite	ne
 80096f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80096fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80096fe:	2700      	movs	r7, #0
 8009700:	fbb1 fcf6 	udiv	ip, r1, r6
 8009704:	4638      	mov	r0, r7
 8009706:	fb06 1e1c 	mls	lr, r6, ip, r1
 800970a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800970e:	2b09      	cmp	r3, #9
 8009710:	d817      	bhi.n	8009742 <_strtol_l.isra.0+0x9a>
 8009712:	461c      	mov	r4, r3
 8009714:	42a6      	cmp	r6, r4
 8009716:	dd23      	ble.n	8009760 <_strtol_l.isra.0+0xb8>
 8009718:	1c7b      	adds	r3, r7, #1
 800971a:	d007      	beq.n	800972c <_strtol_l.isra.0+0x84>
 800971c:	4584      	cmp	ip, r0
 800971e:	d31c      	bcc.n	800975a <_strtol_l.isra.0+0xb2>
 8009720:	d101      	bne.n	8009726 <_strtol_l.isra.0+0x7e>
 8009722:	45a6      	cmp	lr, r4
 8009724:	db19      	blt.n	800975a <_strtol_l.isra.0+0xb2>
 8009726:	fb00 4006 	mla	r0, r0, r6, r4
 800972a:	2701      	movs	r7, #1
 800972c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009730:	e7eb      	b.n	800970a <_strtol_l.isra.0+0x62>
 8009732:	462f      	mov	r7, r5
 8009734:	e7bf      	b.n	80096b6 <_strtol_l.isra.0+0xe>
 8009736:	2c2b      	cmp	r4, #43	; 0x2b
 8009738:	bf04      	itt	eq
 800973a:	1cbd      	addeq	r5, r7, #2
 800973c:	787c      	ldrbeq	r4, [r7, #1]
 800973e:	461a      	mov	r2, r3
 8009740:	e7c9      	b.n	80096d6 <_strtol_l.isra.0+0x2e>
 8009742:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009746:	2b19      	cmp	r3, #25
 8009748:	d801      	bhi.n	800974e <_strtol_l.isra.0+0xa6>
 800974a:	3c37      	subs	r4, #55	; 0x37
 800974c:	e7e2      	b.n	8009714 <_strtol_l.isra.0+0x6c>
 800974e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009752:	2b19      	cmp	r3, #25
 8009754:	d804      	bhi.n	8009760 <_strtol_l.isra.0+0xb8>
 8009756:	3c57      	subs	r4, #87	; 0x57
 8009758:	e7dc      	b.n	8009714 <_strtol_l.isra.0+0x6c>
 800975a:	f04f 37ff 	mov.w	r7, #4294967295
 800975e:	e7e5      	b.n	800972c <_strtol_l.isra.0+0x84>
 8009760:	1c7b      	adds	r3, r7, #1
 8009762:	d108      	bne.n	8009776 <_strtol_l.isra.0+0xce>
 8009764:	2322      	movs	r3, #34	; 0x22
 8009766:	f8c8 3000 	str.w	r3, [r8]
 800976a:	4608      	mov	r0, r1
 800976c:	f1ba 0f00 	cmp.w	sl, #0
 8009770:	d107      	bne.n	8009782 <_strtol_l.isra.0+0xda>
 8009772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009776:	b102      	cbz	r2, 800977a <_strtol_l.isra.0+0xd2>
 8009778:	4240      	negs	r0, r0
 800977a:	f1ba 0f00 	cmp.w	sl, #0
 800977e:	d0f8      	beq.n	8009772 <_strtol_l.isra.0+0xca>
 8009780:	b10f      	cbz	r7, 8009786 <_strtol_l.isra.0+0xde>
 8009782:	f105 39ff 	add.w	r9, r5, #4294967295
 8009786:	f8ca 9000 	str.w	r9, [sl]
 800978a:	e7f2      	b.n	8009772 <_strtol_l.isra.0+0xca>
 800978c:	2430      	movs	r4, #48	; 0x30
 800978e:	2e00      	cmp	r6, #0
 8009790:	d1af      	bne.n	80096f2 <_strtol_l.isra.0+0x4a>
 8009792:	2608      	movs	r6, #8
 8009794:	e7ad      	b.n	80096f2 <_strtol_l.isra.0+0x4a>
 8009796:	2c30      	cmp	r4, #48	; 0x30
 8009798:	d0a3      	beq.n	80096e2 <_strtol_l.isra.0+0x3a>
 800979a:	260a      	movs	r6, #10
 800979c:	e7a9      	b.n	80096f2 <_strtol_l.isra.0+0x4a>
	...

080097a0 <strtol>:
 80097a0:	4b08      	ldr	r3, [pc, #32]	; (80097c4 <strtol+0x24>)
 80097a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097a4:	681c      	ldr	r4, [r3, #0]
 80097a6:	4d08      	ldr	r5, [pc, #32]	; (80097c8 <strtol+0x28>)
 80097a8:	6a23      	ldr	r3, [r4, #32]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bf08      	it	eq
 80097ae:	462b      	moveq	r3, r5
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	4613      	mov	r3, r2
 80097b4:	460a      	mov	r2, r1
 80097b6:	4601      	mov	r1, r0
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7ff ff75 	bl	80096a8 <_strtol_l.isra.0>
 80097be:	b003      	add	sp, #12
 80097c0:	bd30      	pop	{r4, r5, pc}
 80097c2:	bf00      	nop
 80097c4:	20000014 	.word	0x20000014
 80097c8:	20000078 	.word	0x20000078

080097cc <__locale_ctype_ptr_l>:
 80097cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80097d0:	4770      	bx	lr
	...

080097d4 <malloc>:
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <malloc+0xc>)
 80097d6:	4601      	mov	r1, r0
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f000 b863 	b.w	80098a4 <_malloc_r>
 80097de:	bf00      	nop
 80097e0:	20000014 	.word	0x20000014

080097e4 <__ascii_mbtowc>:
 80097e4:	b082      	sub	sp, #8
 80097e6:	b901      	cbnz	r1, 80097ea <__ascii_mbtowc+0x6>
 80097e8:	a901      	add	r1, sp, #4
 80097ea:	b142      	cbz	r2, 80097fe <__ascii_mbtowc+0x1a>
 80097ec:	b14b      	cbz	r3, 8009802 <__ascii_mbtowc+0x1e>
 80097ee:	7813      	ldrb	r3, [r2, #0]
 80097f0:	600b      	str	r3, [r1, #0]
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	1c10      	adds	r0, r2, #0
 80097f6:	bf18      	it	ne
 80097f8:	2001      	movne	r0, #1
 80097fa:	b002      	add	sp, #8
 80097fc:	4770      	bx	lr
 80097fe:	4610      	mov	r0, r2
 8009800:	e7fb      	b.n	80097fa <__ascii_mbtowc+0x16>
 8009802:	f06f 0001 	mvn.w	r0, #1
 8009806:	e7f8      	b.n	80097fa <__ascii_mbtowc+0x16>

08009808 <_free_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4605      	mov	r5, r0
 800980c:	2900      	cmp	r1, #0
 800980e:	d045      	beq.n	800989c <_free_r+0x94>
 8009810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009814:	1f0c      	subs	r4, r1, #4
 8009816:	2b00      	cmp	r3, #0
 8009818:	bfb8      	it	lt
 800981a:	18e4      	addlt	r4, r4, r3
 800981c:	f000 fbb7 	bl	8009f8e <__malloc_lock>
 8009820:	4a1f      	ldr	r2, [pc, #124]	; (80098a0 <_free_r+0x98>)
 8009822:	6813      	ldr	r3, [r2, #0]
 8009824:	4610      	mov	r0, r2
 8009826:	b933      	cbnz	r3, 8009836 <_free_r+0x2e>
 8009828:	6063      	str	r3, [r4, #4]
 800982a:	6014      	str	r4, [r2, #0]
 800982c:	4628      	mov	r0, r5
 800982e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009832:	f000 bbad 	b.w	8009f90 <__malloc_unlock>
 8009836:	42a3      	cmp	r3, r4
 8009838:	d90c      	bls.n	8009854 <_free_r+0x4c>
 800983a:	6821      	ldr	r1, [r4, #0]
 800983c:	1862      	adds	r2, r4, r1
 800983e:	4293      	cmp	r3, r2
 8009840:	bf04      	itt	eq
 8009842:	681a      	ldreq	r2, [r3, #0]
 8009844:	685b      	ldreq	r3, [r3, #4]
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	bf04      	itt	eq
 800984a:	1852      	addeq	r2, r2, r1
 800984c:	6022      	streq	r2, [r4, #0]
 800984e:	6004      	str	r4, [r0, #0]
 8009850:	e7ec      	b.n	800982c <_free_r+0x24>
 8009852:	4613      	mov	r3, r2
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	b10a      	cbz	r2, 800985c <_free_r+0x54>
 8009858:	42a2      	cmp	r2, r4
 800985a:	d9fa      	bls.n	8009852 <_free_r+0x4a>
 800985c:	6819      	ldr	r1, [r3, #0]
 800985e:	1858      	adds	r0, r3, r1
 8009860:	42a0      	cmp	r0, r4
 8009862:	d10b      	bne.n	800987c <_free_r+0x74>
 8009864:	6820      	ldr	r0, [r4, #0]
 8009866:	4401      	add	r1, r0
 8009868:	1858      	adds	r0, r3, r1
 800986a:	4282      	cmp	r2, r0
 800986c:	6019      	str	r1, [r3, #0]
 800986e:	d1dd      	bne.n	800982c <_free_r+0x24>
 8009870:	6810      	ldr	r0, [r2, #0]
 8009872:	6852      	ldr	r2, [r2, #4]
 8009874:	605a      	str	r2, [r3, #4]
 8009876:	4401      	add	r1, r0
 8009878:	6019      	str	r1, [r3, #0]
 800987a:	e7d7      	b.n	800982c <_free_r+0x24>
 800987c:	d902      	bls.n	8009884 <_free_r+0x7c>
 800987e:	230c      	movs	r3, #12
 8009880:	602b      	str	r3, [r5, #0]
 8009882:	e7d3      	b.n	800982c <_free_r+0x24>
 8009884:	6820      	ldr	r0, [r4, #0]
 8009886:	1821      	adds	r1, r4, r0
 8009888:	428a      	cmp	r2, r1
 800988a:	bf04      	itt	eq
 800988c:	6811      	ldreq	r1, [r2, #0]
 800988e:	6852      	ldreq	r2, [r2, #4]
 8009890:	6062      	str	r2, [r4, #4]
 8009892:	bf04      	itt	eq
 8009894:	1809      	addeq	r1, r1, r0
 8009896:	6021      	streq	r1, [r4, #0]
 8009898:	605c      	str	r4, [r3, #4]
 800989a:	e7c7      	b.n	800982c <_free_r+0x24>
 800989c:	bd38      	pop	{r3, r4, r5, pc}
 800989e:	bf00      	nop
 80098a0:	2000020c 	.word	0x2000020c

080098a4 <_malloc_r>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	1ccd      	adds	r5, r1, #3
 80098a8:	f025 0503 	bic.w	r5, r5, #3
 80098ac:	3508      	adds	r5, #8
 80098ae:	2d0c      	cmp	r5, #12
 80098b0:	bf38      	it	cc
 80098b2:	250c      	movcc	r5, #12
 80098b4:	2d00      	cmp	r5, #0
 80098b6:	4606      	mov	r6, r0
 80098b8:	db01      	blt.n	80098be <_malloc_r+0x1a>
 80098ba:	42a9      	cmp	r1, r5
 80098bc:	d903      	bls.n	80098c6 <_malloc_r+0x22>
 80098be:	230c      	movs	r3, #12
 80098c0:	6033      	str	r3, [r6, #0]
 80098c2:	2000      	movs	r0, #0
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
 80098c6:	f000 fb62 	bl	8009f8e <__malloc_lock>
 80098ca:	4a21      	ldr	r2, [pc, #132]	; (8009950 <_malloc_r+0xac>)
 80098cc:	6814      	ldr	r4, [r2, #0]
 80098ce:	4621      	mov	r1, r4
 80098d0:	b991      	cbnz	r1, 80098f8 <_malloc_r+0x54>
 80098d2:	4c20      	ldr	r4, [pc, #128]	; (8009954 <_malloc_r+0xb0>)
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	b91b      	cbnz	r3, 80098e0 <_malloc_r+0x3c>
 80098d8:	4630      	mov	r0, r6
 80098da:	f000 fb17 	bl	8009f0c <_sbrk_r>
 80098de:	6020      	str	r0, [r4, #0]
 80098e0:	4629      	mov	r1, r5
 80098e2:	4630      	mov	r0, r6
 80098e4:	f000 fb12 	bl	8009f0c <_sbrk_r>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d124      	bne.n	8009936 <_malloc_r+0x92>
 80098ec:	230c      	movs	r3, #12
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	4630      	mov	r0, r6
 80098f2:	f000 fb4d 	bl	8009f90 <__malloc_unlock>
 80098f6:	e7e4      	b.n	80098c2 <_malloc_r+0x1e>
 80098f8:	680b      	ldr	r3, [r1, #0]
 80098fa:	1b5b      	subs	r3, r3, r5
 80098fc:	d418      	bmi.n	8009930 <_malloc_r+0x8c>
 80098fe:	2b0b      	cmp	r3, #11
 8009900:	d90f      	bls.n	8009922 <_malloc_r+0x7e>
 8009902:	600b      	str	r3, [r1, #0]
 8009904:	50cd      	str	r5, [r1, r3]
 8009906:	18cc      	adds	r4, r1, r3
 8009908:	4630      	mov	r0, r6
 800990a:	f000 fb41 	bl	8009f90 <__malloc_unlock>
 800990e:	f104 000b 	add.w	r0, r4, #11
 8009912:	1d23      	adds	r3, r4, #4
 8009914:	f020 0007 	bic.w	r0, r0, #7
 8009918:	1ac3      	subs	r3, r0, r3
 800991a:	d0d3      	beq.n	80098c4 <_malloc_r+0x20>
 800991c:	425a      	negs	r2, r3
 800991e:	50e2      	str	r2, [r4, r3]
 8009920:	e7d0      	b.n	80098c4 <_malloc_r+0x20>
 8009922:	428c      	cmp	r4, r1
 8009924:	684b      	ldr	r3, [r1, #4]
 8009926:	bf16      	itet	ne
 8009928:	6063      	strne	r3, [r4, #4]
 800992a:	6013      	streq	r3, [r2, #0]
 800992c:	460c      	movne	r4, r1
 800992e:	e7eb      	b.n	8009908 <_malloc_r+0x64>
 8009930:	460c      	mov	r4, r1
 8009932:	6849      	ldr	r1, [r1, #4]
 8009934:	e7cc      	b.n	80098d0 <_malloc_r+0x2c>
 8009936:	1cc4      	adds	r4, r0, #3
 8009938:	f024 0403 	bic.w	r4, r4, #3
 800993c:	42a0      	cmp	r0, r4
 800993e:	d005      	beq.n	800994c <_malloc_r+0xa8>
 8009940:	1a21      	subs	r1, r4, r0
 8009942:	4630      	mov	r0, r6
 8009944:	f000 fae2 	bl	8009f0c <_sbrk_r>
 8009948:	3001      	adds	r0, #1
 800994a:	d0cf      	beq.n	80098ec <_malloc_r+0x48>
 800994c:	6025      	str	r5, [r4, #0]
 800994e:	e7db      	b.n	8009908 <_malloc_r+0x64>
 8009950:	2000020c 	.word	0x2000020c
 8009954:	20000210 	.word	0x20000210

08009958 <__ssputs_r>:
 8009958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800995c:	688e      	ldr	r6, [r1, #8]
 800995e:	429e      	cmp	r6, r3
 8009960:	4682      	mov	sl, r0
 8009962:	460c      	mov	r4, r1
 8009964:	4690      	mov	r8, r2
 8009966:	4699      	mov	r9, r3
 8009968:	d837      	bhi.n	80099da <__ssputs_r+0x82>
 800996a:	898a      	ldrh	r2, [r1, #12]
 800996c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009970:	d031      	beq.n	80099d6 <__ssputs_r+0x7e>
 8009972:	6825      	ldr	r5, [r4, #0]
 8009974:	6909      	ldr	r1, [r1, #16]
 8009976:	1a6f      	subs	r7, r5, r1
 8009978:	6965      	ldr	r5, [r4, #20]
 800997a:	2302      	movs	r3, #2
 800997c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009980:	fb95 f5f3 	sdiv	r5, r5, r3
 8009984:	f109 0301 	add.w	r3, r9, #1
 8009988:	443b      	add	r3, r7
 800998a:	429d      	cmp	r5, r3
 800998c:	bf38      	it	cc
 800998e:	461d      	movcc	r5, r3
 8009990:	0553      	lsls	r3, r2, #21
 8009992:	d530      	bpl.n	80099f6 <__ssputs_r+0x9e>
 8009994:	4629      	mov	r1, r5
 8009996:	f7ff ff85 	bl	80098a4 <_malloc_r>
 800999a:	4606      	mov	r6, r0
 800999c:	b950      	cbnz	r0, 80099b4 <__ssputs_r+0x5c>
 800999e:	230c      	movs	r3, #12
 80099a0:	f8ca 3000 	str.w	r3, [sl]
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b4:	463a      	mov	r2, r7
 80099b6:	6921      	ldr	r1, [r4, #16]
 80099b8:	f000 fac5 	bl	8009f46 <memcpy>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	6126      	str	r6, [r4, #16]
 80099ca:	6165      	str	r5, [r4, #20]
 80099cc:	443e      	add	r6, r7
 80099ce:	1bed      	subs	r5, r5, r7
 80099d0:	6026      	str	r6, [r4, #0]
 80099d2:	60a5      	str	r5, [r4, #8]
 80099d4:	464e      	mov	r6, r9
 80099d6:	454e      	cmp	r6, r9
 80099d8:	d900      	bls.n	80099dc <__ssputs_r+0x84>
 80099da:	464e      	mov	r6, r9
 80099dc:	4632      	mov	r2, r6
 80099de:	4641      	mov	r1, r8
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	f000 fabb 	bl	8009f5c <memmove>
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	1b9b      	subs	r3, r3, r6
 80099ea:	60a3      	str	r3, [r4, #8]
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	441e      	add	r6, r3
 80099f0:	6026      	str	r6, [r4, #0]
 80099f2:	2000      	movs	r0, #0
 80099f4:	e7dc      	b.n	80099b0 <__ssputs_r+0x58>
 80099f6:	462a      	mov	r2, r5
 80099f8:	f000 facb 	bl	8009f92 <_realloc_r>
 80099fc:	4606      	mov	r6, r0
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d1e2      	bne.n	80099c8 <__ssputs_r+0x70>
 8009a02:	6921      	ldr	r1, [r4, #16]
 8009a04:	4650      	mov	r0, sl
 8009a06:	f7ff feff 	bl	8009808 <_free_r>
 8009a0a:	e7c8      	b.n	800999e <__ssputs_r+0x46>

08009a0c <_svfiprintf_r>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	461d      	mov	r5, r3
 8009a12:	898b      	ldrh	r3, [r1, #12]
 8009a14:	061f      	lsls	r7, r3, #24
 8009a16:	b09d      	sub	sp, #116	; 0x74
 8009a18:	4680      	mov	r8, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	4616      	mov	r6, r2
 8009a1e:	d50f      	bpl.n	8009a40 <_svfiprintf_r+0x34>
 8009a20:	690b      	ldr	r3, [r1, #16]
 8009a22:	b96b      	cbnz	r3, 8009a40 <_svfiprintf_r+0x34>
 8009a24:	2140      	movs	r1, #64	; 0x40
 8009a26:	f7ff ff3d 	bl	80098a4 <_malloc_r>
 8009a2a:	6020      	str	r0, [r4, #0]
 8009a2c:	6120      	str	r0, [r4, #16]
 8009a2e:	b928      	cbnz	r0, 8009a3c <_svfiprintf_r+0x30>
 8009a30:	230c      	movs	r3, #12
 8009a32:	f8c8 3000 	str.w	r3, [r8]
 8009a36:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3a:	e0c8      	b.n	8009bce <_svfiprintf_r+0x1c2>
 8009a3c:	2340      	movs	r3, #64	; 0x40
 8009a3e:	6163      	str	r3, [r4, #20]
 8009a40:	2300      	movs	r3, #0
 8009a42:	9309      	str	r3, [sp, #36]	; 0x24
 8009a44:	2320      	movs	r3, #32
 8009a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a4a:	2330      	movs	r3, #48	; 0x30
 8009a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a50:	9503      	str	r5, [sp, #12]
 8009a52:	f04f 0b01 	mov.w	fp, #1
 8009a56:	4637      	mov	r7, r6
 8009a58:	463d      	mov	r5, r7
 8009a5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a5e:	b10b      	cbz	r3, 8009a64 <_svfiprintf_r+0x58>
 8009a60:	2b25      	cmp	r3, #37	; 0x25
 8009a62:	d13e      	bne.n	8009ae2 <_svfiprintf_r+0xd6>
 8009a64:	ebb7 0a06 	subs.w	sl, r7, r6
 8009a68:	d00b      	beq.n	8009a82 <_svfiprintf_r+0x76>
 8009a6a:	4653      	mov	r3, sl
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4640      	mov	r0, r8
 8009a72:	f7ff ff71 	bl	8009958 <__ssputs_r>
 8009a76:	3001      	adds	r0, #1
 8009a78:	f000 80a4 	beq.w	8009bc4 <_svfiprintf_r+0x1b8>
 8009a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7e:	4453      	add	r3, sl
 8009a80:	9309      	str	r3, [sp, #36]	; 0x24
 8009a82:	783b      	ldrb	r3, [r7, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 809d 	beq.w	8009bc4 <_svfiprintf_r+0x1b8>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	9307      	str	r3, [sp, #28]
 8009a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a9e:	462f      	mov	r7, r5
 8009aa0:	2205      	movs	r2, #5
 8009aa2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009aa6:	4850      	ldr	r0, [pc, #320]	; (8009be8 <_svfiprintf_r+0x1dc>)
 8009aa8:	f7f6 fbe2 	bl	8000270 <memchr>
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	b9d0      	cbnz	r0, 8009ae6 <_svfiprintf_r+0xda>
 8009ab0:	06d9      	lsls	r1, r3, #27
 8009ab2:	bf44      	itt	mi
 8009ab4:	2220      	movmi	r2, #32
 8009ab6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009aba:	071a      	lsls	r2, r3, #28
 8009abc:	bf44      	itt	mi
 8009abe:	222b      	movmi	r2, #43	; 0x2b
 8009ac0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ac4:	782a      	ldrb	r2, [r5, #0]
 8009ac6:	2a2a      	cmp	r2, #42	; 0x2a
 8009ac8:	d015      	beq.n	8009af6 <_svfiprintf_r+0xea>
 8009aca:	9a07      	ldr	r2, [sp, #28]
 8009acc:	462f      	mov	r7, r5
 8009ace:	2000      	movs	r0, #0
 8009ad0:	250a      	movs	r5, #10
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ad8:	3b30      	subs	r3, #48	; 0x30
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	d94d      	bls.n	8009b7a <_svfiprintf_r+0x16e>
 8009ade:	b1b8      	cbz	r0, 8009b10 <_svfiprintf_r+0x104>
 8009ae0:	e00f      	b.n	8009b02 <_svfiprintf_r+0xf6>
 8009ae2:	462f      	mov	r7, r5
 8009ae4:	e7b8      	b.n	8009a58 <_svfiprintf_r+0x4c>
 8009ae6:	4a40      	ldr	r2, [pc, #256]	; (8009be8 <_svfiprintf_r+0x1dc>)
 8009ae8:	1a80      	subs	r0, r0, r2
 8009aea:	fa0b f000 	lsl.w	r0, fp, r0
 8009aee:	4318      	orrs	r0, r3
 8009af0:	9004      	str	r0, [sp, #16]
 8009af2:	463d      	mov	r5, r7
 8009af4:	e7d3      	b.n	8009a9e <_svfiprintf_r+0x92>
 8009af6:	9a03      	ldr	r2, [sp, #12]
 8009af8:	1d11      	adds	r1, r2, #4
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	9103      	str	r1, [sp, #12]
 8009afe:	2a00      	cmp	r2, #0
 8009b00:	db01      	blt.n	8009b06 <_svfiprintf_r+0xfa>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e004      	b.n	8009b10 <_svfiprintf_r+0x104>
 8009b06:	4252      	negs	r2, r2
 8009b08:	f043 0302 	orr.w	r3, r3, #2
 8009b0c:	9207      	str	r2, [sp, #28]
 8009b0e:	9304      	str	r3, [sp, #16]
 8009b10:	783b      	ldrb	r3, [r7, #0]
 8009b12:	2b2e      	cmp	r3, #46	; 0x2e
 8009b14:	d10c      	bne.n	8009b30 <_svfiprintf_r+0x124>
 8009b16:	787b      	ldrb	r3, [r7, #1]
 8009b18:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1a:	d133      	bne.n	8009b84 <_svfiprintf_r+0x178>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	1d1a      	adds	r2, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	9203      	str	r2, [sp, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfb8      	it	lt
 8009b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b2c:	3702      	adds	r7, #2
 8009b2e:	9305      	str	r3, [sp, #20]
 8009b30:	4d2e      	ldr	r5, [pc, #184]	; (8009bec <_svfiprintf_r+0x1e0>)
 8009b32:	7839      	ldrb	r1, [r7, #0]
 8009b34:	2203      	movs	r2, #3
 8009b36:	4628      	mov	r0, r5
 8009b38:	f7f6 fb9a 	bl	8000270 <memchr>
 8009b3c:	b138      	cbz	r0, 8009b4e <_svfiprintf_r+0x142>
 8009b3e:	2340      	movs	r3, #64	; 0x40
 8009b40:	1b40      	subs	r0, r0, r5
 8009b42:	fa03 f000 	lsl.w	r0, r3, r0
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	4303      	orrs	r3, r0
 8009b4a:	3701      	adds	r7, #1
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	7839      	ldrb	r1, [r7, #0]
 8009b50:	4827      	ldr	r0, [pc, #156]	; (8009bf0 <_svfiprintf_r+0x1e4>)
 8009b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b56:	2206      	movs	r2, #6
 8009b58:	1c7e      	adds	r6, r7, #1
 8009b5a:	f7f6 fb89 	bl	8000270 <memchr>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d038      	beq.n	8009bd4 <_svfiprintf_r+0x1c8>
 8009b62:	4b24      	ldr	r3, [pc, #144]	; (8009bf4 <_svfiprintf_r+0x1e8>)
 8009b64:	bb13      	cbnz	r3, 8009bac <_svfiprintf_r+0x1a0>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	3307      	adds	r3, #7
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	3308      	adds	r3, #8
 8009b70:	9303      	str	r3, [sp, #12]
 8009b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b74:	444b      	add	r3, r9
 8009b76:	9309      	str	r3, [sp, #36]	; 0x24
 8009b78:	e76d      	b.n	8009a56 <_svfiprintf_r+0x4a>
 8009b7a:	fb05 3202 	mla	r2, r5, r2, r3
 8009b7e:	2001      	movs	r0, #1
 8009b80:	460f      	mov	r7, r1
 8009b82:	e7a6      	b.n	8009ad2 <_svfiprintf_r+0xc6>
 8009b84:	2300      	movs	r3, #0
 8009b86:	3701      	adds	r7, #1
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	250a      	movs	r5, #10
 8009b8e:	4638      	mov	r0, r7
 8009b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b94:	3a30      	subs	r2, #48	; 0x30
 8009b96:	2a09      	cmp	r2, #9
 8009b98:	d903      	bls.n	8009ba2 <_svfiprintf_r+0x196>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0c8      	beq.n	8009b30 <_svfiprintf_r+0x124>
 8009b9e:	9105      	str	r1, [sp, #20]
 8009ba0:	e7c6      	b.n	8009b30 <_svfiprintf_r+0x124>
 8009ba2:	fb05 2101 	mla	r1, r5, r1, r2
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4607      	mov	r7, r0
 8009baa:	e7f0      	b.n	8009b8e <_svfiprintf_r+0x182>
 8009bac:	ab03      	add	r3, sp, #12
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4b11      	ldr	r3, [pc, #68]	; (8009bf8 <_svfiprintf_r+0x1ec>)
 8009bb4:	a904      	add	r1, sp, #16
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	f3af 8000 	nop.w
 8009bbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bc0:	4681      	mov	r9, r0
 8009bc2:	d1d6      	bne.n	8009b72 <_svfiprintf_r+0x166>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	065b      	lsls	r3, r3, #25
 8009bc8:	f53f af35 	bmi.w	8009a36 <_svfiprintf_r+0x2a>
 8009bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bce:	b01d      	add	sp, #116	; 0x74
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	ab03      	add	r3, sp, #12
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	4622      	mov	r2, r4
 8009bda:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <_svfiprintf_r+0x1ec>)
 8009bdc:	a904      	add	r1, sp, #16
 8009bde:	4640      	mov	r0, r8
 8009be0:	f000 f882 	bl	8009ce8 <_printf_i>
 8009be4:	e7ea      	b.n	8009bbc <_svfiprintf_r+0x1b0>
 8009be6:	bf00      	nop
 8009be8:	0800a18a 	.word	0x0800a18a
 8009bec:	0800a190 	.word	0x0800a190
 8009bf0:	0800a194 	.word	0x0800a194
 8009bf4:	00000000 	.word	0x00000000
 8009bf8:	08009959 	.word	0x08009959

08009bfc <_printf_common>:
 8009bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c00:	4691      	mov	r9, r2
 8009c02:	461f      	mov	r7, r3
 8009c04:	688a      	ldr	r2, [r1, #8]
 8009c06:	690b      	ldr	r3, [r1, #16]
 8009c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	bfb8      	it	lt
 8009c10:	4613      	movlt	r3, r2
 8009c12:	f8c9 3000 	str.w	r3, [r9]
 8009c16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	b112      	cbz	r2, 8009c26 <_printf_common+0x2a>
 8009c20:	3301      	adds	r3, #1
 8009c22:	f8c9 3000 	str.w	r3, [r9]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	0699      	lsls	r1, r3, #26
 8009c2a:	bf42      	ittt	mi
 8009c2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c30:	3302      	addmi	r3, #2
 8009c32:	f8c9 3000 	strmi.w	r3, [r9]
 8009c36:	6825      	ldr	r5, [r4, #0]
 8009c38:	f015 0506 	ands.w	r5, r5, #6
 8009c3c:	d107      	bne.n	8009c4e <_printf_common+0x52>
 8009c3e:	f104 0a19 	add.w	sl, r4, #25
 8009c42:	68e3      	ldr	r3, [r4, #12]
 8009c44:	f8d9 2000 	ldr.w	r2, [r9]
 8009c48:	1a9b      	subs	r3, r3, r2
 8009c4a:	42ab      	cmp	r3, r5
 8009c4c:	dc28      	bgt.n	8009ca0 <_printf_common+0xa4>
 8009c4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	3300      	adds	r3, #0
 8009c56:	bf18      	it	ne
 8009c58:	2301      	movne	r3, #1
 8009c5a:	0692      	lsls	r2, r2, #26
 8009c5c:	d42d      	bmi.n	8009cba <_printf_common+0xbe>
 8009c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c62:	4639      	mov	r1, r7
 8009c64:	4630      	mov	r0, r6
 8009c66:	47c0      	blx	r8
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d020      	beq.n	8009cae <_printf_common+0xb2>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	68e5      	ldr	r5, [r4, #12]
 8009c70:	f8d9 2000 	ldr.w	r2, [r9]
 8009c74:	f003 0306 	and.w	r3, r3, #6
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	bf08      	it	eq
 8009c7c:	1aad      	subeq	r5, r5, r2
 8009c7e:	68a3      	ldr	r3, [r4, #8]
 8009c80:	6922      	ldr	r2, [r4, #16]
 8009c82:	bf0c      	ite	eq
 8009c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c88:	2500      	movne	r5, #0
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	bfc4      	itt	gt
 8009c8e:	1a9b      	subgt	r3, r3, r2
 8009c90:	18ed      	addgt	r5, r5, r3
 8009c92:	f04f 0900 	mov.w	r9, #0
 8009c96:	341a      	adds	r4, #26
 8009c98:	454d      	cmp	r5, r9
 8009c9a:	d11a      	bne.n	8009cd2 <_printf_common+0xd6>
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	e008      	b.n	8009cb2 <_printf_common+0xb6>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4652      	mov	r2, sl
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	47c0      	blx	r8
 8009caa:	3001      	adds	r0, #1
 8009cac:	d103      	bne.n	8009cb6 <_printf_common+0xba>
 8009cae:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb6:	3501      	adds	r5, #1
 8009cb8:	e7c3      	b.n	8009c42 <_printf_common+0x46>
 8009cba:	18e1      	adds	r1, r4, r3
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	2030      	movs	r0, #48	; 0x30
 8009cc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cc4:	4422      	add	r2, r4
 8009cc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cce:	3302      	adds	r3, #2
 8009cd0:	e7c5      	b.n	8009c5e <_printf_common+0x62>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4622      	mov	r2, r4
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4630      	mov	r0, r6
 8009cda:	47c0      	blx	r8
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d0e6      	beq.n	8009cae <_printf_common+0xb2>
 8009ce0:	f109 0901 	add.w	r9, r9, #1
 8009ce4:	e7d8      	b.n	8009c98 <_printf_common+0x9c>
	...

08009ce8 <_printf_i>:
 8009ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	7e09      	ldrb	r1, [r1, #24]
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	296e      	cmp	r1, #110	; 0x6e
 8009cf8:	4617      	mov	r7, r2
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	4698      	mov	r8, r3
 8009cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d00:	f000 80b3 	beq.w	8009e6a <_printf_i+0x182>
 8009d04:	d822      	bhi.n	8009d4c <_printf_i+0x64>
 8009d06:	2963      	cmp	r1, #99	; 0x63
 8009d08:	d036      	beq.n	8009d78 <_printf_i+0x90>
 8009d0a:	d80a      	bhi.n	8009d22 <_printf_i+0x3a>
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	f000 80b9 	beq.w	8009e84 <_printf_i+0x19c>
 8009d12:	2958      	cmp	r1, #88	; 0x58
 8009d14:	f000 8083 	beq.w	8009e1e <_printf_i+0x136>
 8009d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d20:	e032      	b.n	8009d88 <_printf_i+0xa0>
 8009d22:	2964      	cmp	r1, #100	; 0x64
 8009d24:	d001      	beq.n	8009d2a <_printf_i+0x42>
 8009d26:	2969      	cmp	r1, #105	; 0x69
 8009d28:	d1f6      	bne.n	8009d18 <_printf_i+0x30>
 8009d2a:	6820      	ldr	r0, [r4, #0]
 8009d2c:	6813      	ldr	r3, [r2, #0]
 8009d2e:	0605      	lsls	r5, r0, #24
 8009d30:	f103 0104 	add.w	r1, r3, #4
 8009d34:	d52a      	bpl.n	8009d8c <_printf_i+0xa4>
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6011      	str	r1, [r2, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	da03      	bge.n	8009d46 <_printf_i+0x5e>
 8009d3e:	222d      	movs	r2, #45	; 0x2d
 8009d40:	425b      	negs	r3, r3
 8009d42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d46:	486f      	ldr	r0, [pc, #444]	; (8009f04 <_printf_i+0x21c>)
 8009d48:	220a      	movs	r2, #10
 8009d4a:	e039      	b.n	8009dc0 <_printf_i+0xd8>
 8009d4c:	2973      	cmp	r1, #115	; 0x73
 8009d4e:	f000 809d 	beq.w	8009e8c <_printf_i+0x1a4>
 8009d52:	d808      	bhi.n	8009d66 <_printf_i+0x7e>
 8009d54:	296f      	cmp	r1, #111	; 0x6f
 8009d56:	d020      	beq.n	8009d9a <_printf_i+0xb2>
 8009d58:	2970      	cmp	r1, #112	; 0x70
 8009d5a:	d1dd      	bne.n	8009d18 <_printf_i+0x30>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	f043 0320 	orr.w	r3, r3, #32
 8009d62:	6023      	str	r3, [r4, #0]
 8009d64:	e003      	b.n	8009d6e <_printf_i+0x86>
 8009d66:	2975      	cmp	r1, #117	; 0x75
 8009d68:	d017      	beq.n	8009d9a <_printf_i+0xb2>
 8009d6a:	2978      	cmp	r1, #120	; 0x78
 8009d6c:	d1d4      	bne.n	8009d18 <_printf_i+0x30>
 8009d6e:	2378      	movs	r3, #120	; 0x78
 8009d70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d74:	4864      	ldr	r0, [pc, #400]	; (8009f08 <_printf_i+0x220>)
 8009d76:	e055      	b.n	8009e24 <_printf_i+0x13c>
 8009d78:	6813      	ldr	r3, [r2, #0]
 8009d7a:	1d19      	adds	r1, r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6011      	str	r1, [r2, #0]
 8009d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e08c      	b.n	8009ea6 <_printf_i+0x1be>
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6011      	str	r1, [r2, #0]
 8009d90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d94:	bf18      	it	ne
 8009d96:	b21b      	sxthne	r3, r3
 8009d98:	e7cf      	b.n	8009d3a <_printf_i+0x52>
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	6825      	ldr	r5, [r4, #0]
 8009d9e:	1d18      	adds	r0, r3, #4
 8009da0:	6010      	str	r0, [r2, #0]
 8009da2:	0628      	lsls	r0, r5, #24
 8009da4:	d501      	bpl.n	8009daa <_printf_i+0xc2>
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	e002      	b.n	8009db0 <_printf_i+0xc8>
 8009daa:	0668      	lsls	r0, r5, #25
 8009dac:	d5fb      	bpl.n	8009da6 <_printf_i+0xbe>
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	4854      	ldr	r0, [pc, #336]	; (8009f04 <_printf_i+0x21c>)
 8009db2:	296f      	cmp	r1, #111	; 0x6f
 8009db4:	bf14      	ite	ne
 8009db6:	220a      	movne	r2, #10
 8009db8:	2208      	moveq	r2, #8
 8009dba:	2100      	movs	r1, #0
 8009dbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dc0:	6865      	ldr	r5, [r4, #4]
 8009dc2:	60a5      	str	r5, [r4, #8]
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	f2c0 8095 	blt.w	8009ef4 <_printf_i+0x20c>
 8009dca:	6821      	ldr	r1, [r4, #0]
 8009dcc:	f021 0104 	bic.w	r1, r1, #4
 8009dd0:	6021      	str	r1, [r4, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d13d      	bne.n	8009e52 <_printf_i+0x16a>
 8009dd6:	2d00      	cmp	r5, #0
 8009dd8:	f040 808e 	bne.w	8009ef8 <_printf_i+0x210>
 8009ddc:	4665      	mov	r5, ip
 8009dde:	2a08      	cmp	r2, #8
 8009de0:	d10b      	bne.n	8009dfa <_printf_i+0x112>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	07db      	lsls	r3, r3, #31
 8009de6:	d508      	bpl.n	8009dfa <_printf_i+0x112>
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	6862      	ldr	r2, [r4, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	bfde      	ittt	le
 8009df0:	2330      	movle	r3, #48	; 0x30
 8009df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009df6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dfa:	ebac 0305 	sub.w	r3, ip, r5
 8009dfe:	6123      	str	r3, [r4, #16]
 8009e00:	f8cd 8000 	str.w	r8, [sp]
 8009e04:	463b      	mov	r3, r7
 8009e06:	aa03      	add	r2, sp, #12
 8009e08:	4621      	mov	r1, r4
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff fef6 	bl	8009bfc <_printf_common>
 8009e10:	3001      	adds	r0, #1
 8009e12:	d14d      	bne.n	8009eb0 <_printf_i+0x1c8>
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	b005      	add	sp, #20
 8009e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e1e:	4839      	ldr	r0, [pc, #228]	; (8009f04 <_printf_i+0x21c>)
 8009e20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e24:	6813      	ldr	r3, [r2, #0]
 8009e26:	6821      	ldr	r1, [r4, #0]
 8009e28:	1d1d      	adds	r5, r3, #4
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6015      	str	r5, [r2, #0]
 8009e2e:	060a      	lsls	r2, r1, #24
 8009e30:	d50b      	bpl.n	8009e4a <_printf_i+0x162>
 8009e32:	07ca      	lsls	r2, r1, #31
 8009e34:	bf44      	itt	mi
 8009e36:	f041 0120 	orrmi.w	r1, r1, #32
 8009e3a:	6021      	strmi	r1, [r4, #0]
 8009e3c:	b91b      	cbnz	r3, 8009e46 <_printf_i+0x15e>
 8009e3e:	6822      	ldr	r2, [r4, #0]
 8009e40:	f022 0220 	bic.w	r2, r2, #32
 8009e44:	6022      	str	r2, [r4, #0]
 8009e46:	2210      	movs	r2, #16
 8009e48:	e7b7      	b.n	8009dba <_printf_i+0xd2>
 8009e4a:	064d      	lsls	r5, r1, #25
 8009e4c:	bf48      	it	mi
 8009e4e:	b29b      	uxthmi	r3, r3
 8009e50:	e7ef      	b.n	8009e32 <_printf_i+0x14a>
 8009e52:	4665      	mov	r5, ip
 8009e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e58:	fb02 3311 	mls	r3, r2, r1, r3
 8009e5c:	5cc3      	ldrb	r3, [r0, r3]
 8009e5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e62:	460b      	mov	r3, r1
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d1f5      	bne.n	8009e54 <_printf_i+0x16c>
 8009e68:	e7b9      	b.n	8009dde <_printf_i+0xf6>
 8009e6a:	6813      	ldr	r3, [r2, #0]
 8009e6c:	6825      	ldr	r5, [r4, #0]
 8009e6e:	6961      	ldr	r1, [r4, #20]
 8009e70:	1d18      	adds	r0, r3, #4
 8009e72:	6010      	str	r0, [r2, #0]
 8009e74:	0628      	lsls	r0, r5, #24
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	d501      	bpl.n	8009e7e <_printf_i+0x196>
 8009e7a:	6019      	str	r1, [r3, #0]
 8009e7c:	e002      	b.n	8009e84 <_printf_i+0x19c>
 8009e7e:	066a      	lsls	r2, r5, #25
 8009e80:	d5fb      	bpl.n	8009e7a <_printf_i+0x192>
 8009e82:	8019      	strh	r1, [r3, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	4665      	mov	r5, ip
 8009e8a:	e7b9      	b.n	8009e00 <_printf_i+0x118>
 8009e8c:	6813      	ldr	r3, [r2, #0]
 8009e8e:	1d19      	adds	r1, r3, #4
 8009e90:	6011      	str	r1, [r2, #0]
 8009e92:	681d      	ldr	r5, [r3, #0]
 8009e94:	6862      	ldr	r2, [r4, #4]
 8009e96:	2100      	movs	r1, #0
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f7f6 f9e9 	bl	8000270 <memchr>
 8009e9e:	b108      	cbz	r0, 8009ea4 <_printf_i+0x1bc>
 8009ea0:	1b40      	subs	r0, r0, r5
 8009ea2:	6060      	str	r0, [r4, #4]
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	6123      	str	r3, [r4, #16]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eae:	e7a7      	b.n	8009e00 <_printf_i+0x118>
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	47c0      	blx	r8
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d0aa      	beq.n	8009e14 <_printf_i+0x12c>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	079b      	lsls	r3, r3, #30
 8009ec2:	d413      	bmi.n	8009eec <_printf_i+0x204>
 8009ec4:	68e0      	ldr	r0, [r4, #12]
 8009ec6:	9b03      	ldr	r3, [sp, #12]
 8009ec8:	4298      	cmp	r0, r3
 8009eca:	bfb8      	it	lt
 8009ecc:	4618      	movlt	r0, r3
 8009ece:	e7a3      	b.n	8009e18 <_printf_i+0x130>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	464a      	mov	r2, r9
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	47c0      	blx	r8
 8009eda:	3001      	adds	r0, #1
 8009edc:	d09a      	beq.n	8009e14 <_printf_i+0x12c>
 8009ede:	3501      	adds	r5, #1
 8009ee0:	68e3      	ldr	r3, [r4, #12]
 8009ee2:	9a03      	ldr	r2, [sp, #12]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	42ab      	cmp	r3, r5
 8009ee8:	dcf2      	bgt.n	8009ed0 <_printf_i+0x1e8>
 8009eea:	e7eb      	b.n	8009ec4 <_printf_i+0x1dc>
 8009eec:	2500      	movs	r5, #0
 8009eee:	f104 0919 	add.w	r9, r4, #25
 8009ef2:	e7f5      	b.n	8009ee0 <_printf_i+0x1f8>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1ac      	bne.n	8009e52 <_printf_i+0x16a>
 8009ef8:	7803      	ldrb	r3, [r0, #0]
 8009efa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009efe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f02:	e76c      	b.n	8009dde <_printf_i+0xf6>
 8009f04:	0800a19b 	.word	0x0800a19b
 8009f08:	0800a1ac 	.word	0x0800a1ac

08009f0c <_sbrk_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4c06      	ldr	r4, [pc, #24]	; (8009f28 <_sbrk_r+0x1c>)
 8009f10:	2300      	movs	r3, #0
 8009f12:	4605      	mov	r5, r0
 8009f14:	4608      	mov	r0, r1
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	f7f9 f8ca 	bl	80030b0 <_sbrk>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_sbrk_r+0x1a>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_sbrk_r+0x1a>
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	2005aa48 	.word	0x2005aa48

08009f2c <__ascii_wctomb>:
 8009f2c:	b149      	cbz	r1, 8009f42 <__ascii_wctomb+0x16>
 8009f2e:	2aff      	cmp	r2, #255	; 0xff
 8009f30:	bf85      	ittet	hi
 8009f32:	238a      	movhi	r3, #138	; 0x8a
 8009f34:	6003      	strhi	r3, [r0, #0]
 8009f36:	700a      	strbls	r2, [r1, #0]
 8009f38:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f3c:	bf98      	it	ls
 8009f3e:	2001      	movls	r0, #1
 8009f40:	4770      	bx	lr
 8009f42:	4608      	mov	r0, r1
 8009f44:	4770      	bx	lr

08009f46 <memcpy>:
 8009f46:	b510      	push	{r4, lr}
 8009f48:	1e43      	subs	r3, r0, #1
 8009f4a:	440a      	add	r2, r1
 8009f4c:	4291      	cmp	r1, r2
 8009f4e:	d100      	bne.n	8009f52 <memcpy+0xc>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f5a:	e7f7      	b.n	8009f4c <memcpy+0x6>

08009f5c <memmove>:
 8009f5c:	4288      	cmp	r0, r1
 8009f5e:	b510      	push	{r4, lr}
 8009f60:	eb01 0302 	add.w	r3, r1, r2
 8009f64:	d807      	bhi.n	8009f76 <memmove+0x1a>
 8009f66:	1e42      	subs	r2, r0, #1
 8009f68:	4299      	cmp	r1, r3
 8009f6a:	d00a      	beq.n	8009f82 <memmove+0x26>
 8009f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009f74:	e7f8      	b.n	8009f68 <memmove+0xc>
 8009f76:	4283      	cmp	r3, r0
 8009f78:	d9f5      	bls.n	8009f66 <memmove+0xa>
 8009f7a:	1881      	adds	r1, r0, r2
 8009f7c:	1ad2      	subs	r2, r2, r3
 8009f7e:	42d3      	cmn	r3, r2
 8009f80:	d100      	bne.n	8009f84 <memmove+0x28>
 8009f82:	bd10      	pop	{r4, pc}
 8009f84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009f8c:	e7f7      	b.n	8009f7e <memmove+0x22>

08009f8e <__malloc_lock>:
 8009f8e:	4770      	bx	lr

08009f90 <__malloc_unlock>:
 8009f90:	4770      	bx	lr

08009f92 <_realloc_r>:
 8009f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f94:	4607      	mov	r7, r0
 8009f96:	4614      	mov	r4, r2
 8009f98:	460e      	mov	r6, r1
 8009f9a:	b921      	cbnz	r1, 8009fa6 <_realloc_r+0x14>
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fa2:	f7ff bc7f 	b.w	80098a4 <_malloc_r>
 8009fa6:	b922      	cbnz	r2, 8009fb2 <_realloc_r+0x20>
 8009fa8:	f7ff fc2e 	bl	8009808 <_free_r>
 8009fac:	4625      	mov	r5, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb2:	f000 f814 	bl	8009fde <_malloc_usable_size_r>
 8009fb6:	42a0      	cmp	r0, r4
 8009fb8:	d20f      	bcs.n	8009fda <_realloc_r+0x48>
 8009fba:	4621      	mov	r1, r4
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	f7ff fc71 	bl	80098a4 <_malloc_r>
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d0f2      	beq.n	8009fae <_realloc_r+0x1c>
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4622      	mov	r2, r4
 8009fcc:	f7ff ffbb 	bl	8009f46 <memcpy>
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f7ff fc18 	bl	8009808 <_free_r>
 8009fd8:	e7e9      	b.n	8009fae <_realloc_r+0x1c>
 8009fda:	4635      	mov	r5, r6
 8009fdc:	e7e7      	b.n	8009fae <_realloc_r+0x1c>

08009fde <_malloc_usable_size_r>:
 8009fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe2:	1f18      	subs	r0, r3, #4
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bfbc      	itt	lt
 8009fe8:	580b      	ldrlt	r3, [r1, r0]
 8009fea:	18c0      	addlt	r0, r0, r3
 8009fec:	4770      	bx	lr
	...

08009ff0 <_init>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	bf00      	nop
 8009ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff6:	bc08      	pop	{r3}
 8009ff8:	469e      	mov	lr, r3
 8009ffa:	4770      	bx	lr

08009ffc <_fini>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	bf00      	nop
 800a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a002:	bc08      	pop	{r3}
 800a004:	469e      	mov	lr, r3
 800a006:	4770      	bx	lr
