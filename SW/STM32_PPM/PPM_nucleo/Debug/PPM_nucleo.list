
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d5c  08008d5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d64  08008d64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d64  08008d64  00018d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d68  08008d68  00018d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b84c  20000074  08008de0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2002b8c0  08008de0  0002b8c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163d6  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b77  00000000  00000000  00036478  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d8  00000000  00000000  00038ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  0003a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b7e4  00000000  00000000  0003b878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd9c  00000000  00000000  0006705c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111822  00000000  00000000  00076df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018861a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c30  00000000  00000000  00188698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08008cc8 	.word	0x08008cc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08008cc8 	.word	0x08008cc8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000624:	f001 fb1b 	bl	8001c5e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000628:	f000 f824 	bl	8000674 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062c:	f000 fbea 	bl	8000e04 <MX_GPIO_Init>
	MX_DMA_Init();
 8000630:	f000 fbd0 	bl	8000dd4 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8000634:	f000 fb70 	bl	8000d18 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000638:	f000 fb9e 	bl	8000d78 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 800063c:	f000 f904 	bl	8000848 <MX_SPI1_Init>
	MX_TIM8_Init();
 8000640:	f000 fa9e 	bl	8000b80 <MX_TIM8_Init>
	MX_TIM1_Init();
 8000644:	f000 f93a 	bl	80008bc <MX_TIM1_Init>
	MX_TIM2_Init();
 8000648:	f000 f9f8 	bl	8000a3c <MX_TIM2_Init>
	MX_ADC1_Init();
 800064c:	f000 f8aa 	bl	80007a4 <MX_ADC1_Init>
	MX_TIM4_Init();
 8000650:	f000 fa48 	bl	8000ae4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	// Start timers
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8000654:	2100      	movs	r1, #0
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <main+0x48>)
 8000658:	f004 ff96 	bl	8005588 <HAL_TIM_PWM_Start_IT>
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 800065c:	2203      	movs	r2, #3
 800065e:	4903      	ldr	r1, [pc, #12]	; (800066c <main+0x4c>)
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <main+0x50>)
 8000662:	f006 fd41 	bl	80070e8 <HAL_UART_Receive_IT>
	//LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000666:	e7fe      	b.n	8000666 <main+0x46>
 8000668:	200000b4 	.word	0x200000b4
 800066c:	200005b8 	.word	0x200005b8
 8000670:	20000134 	.word	0x20000134

08000674 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b0b8      	sub	sp, #224	; 0xe0
 8000678:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800067a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800067e:	2234      	movs	r2, #52	; 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f007 ff12 	bl	80084ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000688:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2290      	movs	r2, #144	; 0x90
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f007 ff03 	bl	80084ac <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80006a6:	f002 ffef 	bl	8003688 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006aa:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <SystemClock_Config+0x124>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a3a      	ldr	r2, [pc, #232]	; (8000798 <SystemClock_Config+0x124>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b38      	ldr	r3, [pc, #224]	; (8000798 <SystemClock_Config+0x124>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c2:	4b36      	ldr	r3, [pc, #216]	; (800079c <SystemClock_Config+0x128>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a35      	ldr	r2, [pc, #212]	; (800079c <SystemClock_Config+0x128>)
 80006c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	4b33      	ldr	r3, [pc, #204]	; (800079c <SystemClock_Config+0x128>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006da:	2301      	movs	r3, #1
 80006dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 80006fc:	23d8      	movs	r3, #216	; 0xd8
 80006fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000708:	2309      	movs	r3, #9
 800070a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800070e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f818 	bl	8003748 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xae>
		Error_Handler();
 800071e:	f000 fefb 	bl	8001518 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000722:	f002 ffc1 	bl	80036a8 <HAL_PWREx_EnableOverDrive>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xbc>
		Error_Handler();
 800072c:	f000 fef4 	bl	8001518 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8000752:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000756:	2107      	movs	r1, #7
 8000758:	4618      	mov	r0, r3
 800075a:	f003 faa3 	bl	8003ca4 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xf4>
		Error_Handler();
 8000764:	f000 fed8 	bl	8001518 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <SystemClock_Config+0x12c>)
 800076a:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800076c:	2300      	movs	r3, #0
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8000776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800077a:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fc87 	bl	8004094 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x11c>
		Error_Handler();
 800078c:	f000 fec4 	bl	8001518 <Error_Handler>
	}
}
 8000790:	bf00      	nop
 8000792:	37e0      	adds	r7, #224	; 0xe0
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000
 80007a0:	00200110 	.word	0x00200110

080007a4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80007b6:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007b8:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MX_ADC1_Init+0xa0>)
 80007ba:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_TRGO;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007e8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_ADC1_Init+0x9c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ADC1_Init+0x9c>)
 8000804:	2201      	movs	r2, #1
 8000806:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_ADC1_Init+0x9c>)
 800080a:	f001 faa7 	bl	8001d5c <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x74>
		Error_Handler();
 8000814:	f000 fe80 	bl	8001518 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800081c:	2301      	movs	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000820:	2301      	movs	r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_ADC1_Init+0x9c>)
 800082a:	f001 fc27 	bl	800207c <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x94>
		Error_Handler();
 8000834:	f000 fe70 	bl	8001518 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20015e44 	.word	0x20015e44
 8000844:	40012000 	.word	0x40012000

08000848 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_SPI1_Init+0x6c>)
 800084e:	4a1a      	ldr	r2, [pc, #104]	; (80008b8 <MX_SPI1_Init+0x70>)
 8000850:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_SPI1_Init+0x6c>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI1_Init+0x6c>)
 800085a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800085e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI1_Init+0x6c>)
 8000862:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000866:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI1_Init+0x6c>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI1_Init+0x6c>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0x6c>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI1_Init+0x6c>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI1_Init+0x6c>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_SPI1_Init+0x6c>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI1_Init+0x6c>)
 800088e:	2207      	movs	r2, #7
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_SPI1_Init+0x6c>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI1_Init+0x6c>)
 800089a:	2200      	movs	r2, #0
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_SPI1_Init+0x6c>)
 80008a0:	f004 f81e 	bl	80048e0 <HAL_SPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI1_Init+0x66>
		Error_Handler();
 80008aa:	f000 fe35 	bl	8001518 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2002b7b4 	.word	0x2002b7b4
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09a      	sub	sp, #104	; 0x68
 80008c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	222c      	movs	r2, #44	; 0x2c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 fdd8 	bl	80084ac <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008fc:	4b4d      	ldr	r3, [pc, #308]	; (8000a34 <MX_TIM1_Init+0x178>)
 80008fe:	4a4e      	ldr	r2, [pc, #312]	; (8000a38 <MX_TIM1_Init+0x17c>)
 8000900:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <MX_TIM1_Init+0x178>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 800090e:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000910:	f241 3221 	movw	r2, #4897	; 0x1321
 8000914:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800091c:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <MX_TIM1_Init+0x178>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000928:	4842      	ldr	r0, [pc, #264]	; (8000a34 <MX_TIM1_Init+0x178>)
 800092a:	f004 fd78 	bl	800541e <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000934:	f000 fdf0 	bl	8001518 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800093e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000942:	4619      	mov	r1, r3
 8000944:	483b      	ldr	r0, [pc, #236]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000946:	f005 faf7 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x98>
		Error_Handler();
 8000950:	f000 fde2 	bl	8001518 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000954:	4837      	ldr	r0, [pc, #220]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000956:	f004 fde2 	bl	800551e <HAL_TIM_PWM_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000960:	f000 fdda 	bl	8001518 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000964:	2320      	movs	r3, #32
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000974:	4619      	mov	r1, r3
 8000976:	482f      	ldr	r0, [pc, #188]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000978:	f006 f9ac 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8000982:	f000 fdc9 	bl	8001518 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000986:	2370      	movs	r3, #112	; 0x70
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 800098a:	f240 336a 	movw	r3, #874	; 0x36a
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000990:	2302      	movs	r3, #2
 8000992:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80009a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4821      	ldr	r0, [pc, #132]	; (8000a34 <MX_TIM1_Init+0x178>)
 80009b0:	f005 f9aa 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 80009ba:	f000 fdad 	bl	8001518 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009be:	2360      	movs	r3, #96	; 0x60
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 80009c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80009c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009cc:	2204      	movs	r2, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4818      	ldr	r0, [pc, #96]	; (8000a34 <MX_TIM1_Init+0x178>)
 80009d2:	f005 f999 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x124>
			!= HAL_OK) {
		Error_Handler();
 80009dc:	f000 fd9c 	bl	8001518 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000a16:	f006 f9eb 	bl	8006df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x168>
			!= HAL_OK) {
		Error_Handler();
 8000a20:	f000 fd7a 	bl	8001518 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <MX_TIM1_Init+0x178>)
 8000a26:	f000 ff35 	bl	8001894 <HAL_TIM_MspPostInit>

}
 8000a2a:	bf00      	nop
 8000a2c:	3768      	adds	r7, #104	; 0x68
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2002b774 	.word	0x2002b774
 8000a38:	40010000 	.word	0x40010000

08000a3c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a60:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000a82:	4817      	ldr	r0, [pc, #92]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000a84:	f004 fea4 	bl	80057d0 <HAL_TIM_IC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000a8e:	f000 fd43 	bl	8001518 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000aa2:	f006 f917 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8000aac:	f000 fd34 	bl	8001518 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_TIM2_Init+0xa4>)
 8000ac8:	f005 f881 	bl	8005bce <HAL_TIM_IC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000ad2:	f000 fd21 	bl	8001518 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2002b818 	.word	0x2002b818

08000ae4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <MX_TIM4_Init+0x98>)
 8000b06:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 2449 - 1;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b16:	f44f 6219 	mov.w	r2, #2448	; 0x990
 8000b1a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000b28:	4813      	ldr	r0, [pc, #76]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b2a:	f004 fc78 	bl	800541e <HAL_TIM_Base_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM4_Init+0x54>
		Error_Handler();
 8000b34:	f000 fcf0 	bl	8001518 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b46:	f005 f9f7 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM4_Init+0x70>
		Error_Handler();
 8000b50:	f000 fce2 	bl	8001518 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b54:	2320      	movs	r3, #32
 8000b56:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_TIM4_Init+0x94>)
 8000b62:	f006 f8b7 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM4_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000b6c:	f000 fcd4 	bl	8001518 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000f4 	.word	0x200000f4
 8000b7c:	40000800 	.word	0x40000800

08000b80 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b09e      	sub	sp, #120	; 0x78
 8000b84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b86:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	222c      	movs	r2, #44	; 0x2c
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f007 fc6e 	bl	80084ac <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000bd2:	4a50      	ldr	r2, [pc, #320]	; (8000d14 <MX_TIM8_Init+0x194>)
 8000bd4:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000bd6:	4b4e      	ldr	r3, [pc, #312]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b4c      	ldr	r3, [pc, #304]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 8000be2:	4b4b      	ldr	r3, [pc, #300]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000be4:	226b      	movs	r2, #107	; 0x6b
 8000be6:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000bf0:	2218      	movs	r2, #24
 8000bf2:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf4:	4b46      	ldr	r3, [pc, #280]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8000bfa:	4845      	ldr	r0, [pc, #276]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000bfc:	f004 fc0f 	bl	800541e <HAL_TIM_Base_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM8_Init+0x8a>
		Error_Handler();
 8000c06:	f000 fc87 	bl	8001518 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0e:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8000c10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c14:	4619      	mov	r1, r3
 8000c16:	483e      	ldr	r0, [pc, #248]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000c18:	f005 f98e 	bl	8005f38 <HAL_TIM_ConfigClockSource>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8000c22:	f000 fc79 	bl	8001518 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8000c26:	483a      	ldr	r0, [pc, #232]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000c28:	f004 fc79 	bl	800551e <HAL_TIM_PWM_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM8_Init+0xb6>
		Error_Handler();
 8000c32:	f000 fc71 	bl	8001518 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 8000c36:	2108      	movs	r1, #8
 8000c38:	4835      	ldr	r0, [pc, #212]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000c3a:	f004 fe63 	bl	8005904 <HAL_TIM_OnePulse_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM8_Init+0xc8>
		Error_Handler();
 8000c44:	f000 fc68 	bl	8001518 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8000c50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c54:	4619      	mov	r1, r3
 8000c56:	482e      	ldr	r0, [pc, #184]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000c58:	f005 fa28 	bl	80060ac <HAL_TIM_SlaveConfigSynchro>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM8_Init+0xe6>
		Error_Handler();
 8000c62:	f000 fc59 	bl	8001518 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8000c72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c76:	4619      	mov	r1, r3
 8000c78:	4825      	ldr	r0, [pc, #148]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000c7a:	f006 f82b 	bl	8006cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM8_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000c84:	f000 fc48 	bl	8001518 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c88:	2370      	movs	r3, #112	; 0x70
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8000c8c:	2336      	movs	r3, #54	; 0x36
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8000ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca8:	2200      	movs	r2, #0
 8000caa:	4619      	mov	r1, r3
 8000cac:	4818      	ldr	r0, [pc, #96]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000cae:	f005 f82b 	bl	8005d08 <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM8_Init+0x13c>
			!= HAL_OK) {
		Error_Handler();
 8000cb8:	f000 fc2e 	bl	8001518 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ce2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000cf2:	f006 f87d 	bl	8006df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM8_Init+0x180>
			!= HAL_OK) {
		Error_Handler();
 8000cfc:	f000 fc0c 	bl	8001518 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <MX_TIM8_Init+0x190>)
 8000d02:	f000 fdc7 	bl	8001894 <HAL_TIM_MspPostInit>

}
 8000d06:	bf00      	nop
 8000d08:	3778      	adds	r7, #120	; 0x78
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000b4 	.word	0x200000b4
 8000d14:	40010400 	.word	0x40010400

08000d18 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d20:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2000000;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <MX_USART3_UART_Init+0x5c>)
 8000d26:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d3c:	220c      	movs	r2, #12
 8000d3e:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_USART3_UART_Init+0x54>)
 8000d5a:	f006 f8e5 	bl	8006f28 <HAL_UART_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART3_UART_Init+0x50>
		Error_Handler();
 8000d64:	f000 fbd8 	bl	8001518 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000134 	.word	0x20000134
 8000d70:	40004800 	.word	0x40004800
 8000d74:	001e8480 	.word	0x001e8480

08000d78 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d82:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	2206      	movs	r2, #6
 8000d88:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbc:	f002 fb1b 	bl	80033f6 <HAL_PCD_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000dc6:	f000 fba7 	bl	8001518 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001b4 	.word	0x200001b4

08000dd4 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

	/* Init with LL driver */
	/* DMA controller clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000dd8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ddc:	f7ff fc08 	bl	80005f0 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2101      	movs	r1, #1
 8000de4:	2038      	movs	r0, #56	; 0x38
 8000de6:	f001 fcea 	bl	80027be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000dea:	2038      	movs	r0, #56	; 0x38
 8000dec:	f001 fd03 	bl	80027f6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 1, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2101      	movs	r1, #1
 8000df4:	203c      	movs	r0, #60	; 0x3c
 8000df6:	f001 fce2 	bl	80027be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000dfa:	203c      	movs	r0, #60	; 0x3c
 8000dfc:	f001 fcfb 	bl	80027f6 <HAL_NVIC_EnableIRQ>

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	; 0x30
 8000e08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b65      	ldr	r3, [pc, #404]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a64      	ldr	r2, [pc, #400]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b62      	ldr	r3, [pc, #392]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	4b5f      	ldr	r3, [pc, #380]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a5e      	ldr	r2, [pc, #376]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b5c      	ldr	r3, [pc, #368]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b59      	ldr	r3, [pc, #356]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a58      	ldr	r2, [pc, #352]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b56      	ldr	r3, [pc, #344]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a52      	ldr	r2, [pc, #328]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b50      	ldr	r3, [pc, #320]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7a:	4b4d      	ldr	r3, [pc, #308]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b47      	ldr	r3, [pc, #284]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a46      	ldr	r2, [pc, #280]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b44      	ldr	r3, [pc, #272]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a40      	ldr	r2, [pc, #256]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	; (8000fb0 <MX_GPIO_Init+0x1ac>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ec8:	483a      	ldr	r0, [pc, #232]	; (8000fb4 <MX_GPIO_Init+0x1b0>)
 8000eca:	f002 fa61 	bl	8003390 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	4839      	ldr	r0, [pc, #228]	; (8000fb8 <MX_GPIO_Init+0x1b4>)
 8000ed4:	f002 fa5c 	bl	8003390 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <MX_GPIO_Init+0x1b8>)
 8000ee0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	4834      	ldr	r0, [pc, #208]	; (8000fc0 <MX_GPIO_Init+0x1bc>)
 8000eee:	f002 f8a5 	bl	800303c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000ef2:	2332      	movs	r3, #50	; 0x32
 8000ef4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f02:	230b      	movs	r3, #11
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <MX_GPIO_Init+0x1bc>)
 8000f0e:	f002 f895 	bl	800303c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000f12:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4822      	ldr	r0, [pc, #136]	; (8000fb4 <MX_GPIO_Init+0x1b0>)
 8000f2c:	f002 f886 	bl	800303c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f42:	230b      	movs	r3, #11
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <MX_GPIO_Init+0x1b0>)
 8000f4e:	f002 f875 	bl	800303c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f52:	2340      	movs	r3, #64	; 0x40
 8000f54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <MX_GPIO_Init+0x1b4>)
 8000f6a:	f002 f867 	bl	800303c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_GPIO_Init+0x1b4>)
 8000f82:	f002 f85b 	bl	800303c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000f86:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f98:	230b      	movs	r3, #11
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_GPIO_Init+0x1b4>)
 8000fa4:	f002 f84a 	bl	800303c <HAL_GPIO_Init>

}
 8000fa8:	bf00      	nop
 8000faa:	3730      	adds	r7, #48	; 0x30
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	10110000 	.word	0x10110000
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8000fcc:	481d      	ldr	r0, [pc, #116]	; (8001044 <HAL_ADC_ConvCpltCallback+0x80>)
 8000fce:	f000 fff7 	bl	8001fc0 <HAL_ADC_Stop_DMA>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	481c      	ldr	r0, [pc, #112]	; (8001048 <HAL_ADC_ConvCpltCallback+0x84>)
 8000fd6:	f002 f9f4 	bl	80033c2 <HAL_GPIO_TogglePin>
	if (measureTechnique == 2) {
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_ADC_ConvCpltCallback+0x88>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d12c      	bne.n	800103c <HAL_ADC_ConvCpltCallback+0x78>
		filledBuffers++;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000fec:	701a      	strb	r2, [r3, #0]
		// observe interval of SPI receiving
		// Run the measurement again

		//first buffer is filled
		if (filledBuffers == 1) {
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d107      	bne.n	8001006 <HAL_ADC_ConvCpltCallback+0x42>

			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx2.uint16,
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_ADC_ConvCpltCallback+0x90>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4916      	ldr	r1, [pc, #88]	; (8001058 <HAL_ADC_ConvCpltCallback+0x94>)
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <HAL_ADC_ConvCpltCallback+0x80>)
 8001000:	f000 fef0 	bl	8001de4 <HAL_ADC_Start_DMA>
						samplesPerPeriod);

			}
		}
	}
}
 8001004:	e01a      	b.n	800103c <HAL_ADC_ConvCpltCallback+0x78>
		else if (filledBuffers == 2) {
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d116      	bne.n	800103c <HAL_ADC_ConvCpltCallback+0x78>
			filledBuffers = 0;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
			sendDataOverUART();
 8001014:	f000 f95a 	bl	80012cc <sendDataOverUART>
			if (measureCount == 1) {
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_ADC_ConvCpltCallback+0x98>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d106      	bne.n	800102e <HAL_ADC_ConvCpltCallback+0x6a>
				measureTechnique = 0;
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_ADC_ConvCpltCallback+0x88>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001028:	f004 fa4e 	bl	80054c8 <HAL_TIM_Base_Stop_IT>
}
 800102c:	e006      	b.n	800103c <HAL_ADC_ConvCpltCallback+0x78>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_ADC_ConvCpltCallback+0x90>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	490b      	ldr	r1, [pc, #44]	; (8001064 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <HAL_ADC_ConvCpltCallback+0x80>)
 8001038:	f000 fed4 	bl	8001de4 <HAL_ADC_Start_DMA>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20015e44 	.word	0x20015e44
 8001048:	40020400 	.word	0x40020400
 800104c:	20000091 	.word	0x20000091
 8001050:	20000090 	.word	0x20000090
 8001054:	20000000 	.word	0x20000000
 8001058:	200005bc 	.word	0x200005bc
 800105c:	20000092 	.word	0x20000092
 8001060:	200000f4 	.word	0x200000f4
 8001064:	20015e8c 	.word	0x20015e8c

08001068 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a5b      	ldr	r2, [pc, #364]	; (80011e4 <HAL_UART_RxCpltCallback+0x17c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	f040 80b0 	bne.w	80011dc <HAL_UART_RxCpltCallback+0x174>
		switch (buffer_uart_rx[0]) {
 800107c:	4b5a      	ldr	r3, [pc, #360]	; (80011e8 <HAL_UART_RxCpltCallback+0x180>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3b30      	subs	r3, #48	; 0x30
 8001082:	2b03      	cmp	r3, #3
 8001084:	d878      	bhi.n	8001178 <HAL_UART_RxCpltCallback+0x110>
 8001086:	a201      	add	r2, pc, #4	; (adr r2, 800108c <HAL_UART_RxCpltCallback+0x24>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	0800109d 	.word	0x0800109d
 8001090:	080010c5 	.word	0x080010c5
 8001094:	0800110d 	.word	0x0800110d
 8001098:	08001149 	.word	0x08001149
		case '0':
			measureTechnique = 0;
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_UART_RxCpltCallback+0x184>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2101      	movs	r1, #1
 80010a6:	4852      	ldr	r0, [pc, #328]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 80010a8:	f002 f972 	bl	8003390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	484f      	ldr	r0, [pc, #316]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 80010b2:	f002 f96d 	bl	8003390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010bc:	484c      	ldr	r0, [pc, #304]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 80010be:	f002 f967 	bl	8003390 <HAL_GPIO_WritePin>
			break;
 80010c2:	e05d      	b.n	8001180 <HAL_UART_RxCpltCallback+0x118>
		case '1':
			measureTechnique = 1;
 80010c4:	4b49      	ldr	r3, [pc, #292]	; (80011ec <HAL_UART_RxCpltCallback+0x184>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
			// Start SPI communication over DMA
			HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 80010ca:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <HAL_UART_RxCpltCallback+0x18c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4949      	ldr	r1, [pc, #292]	; (80011f8 <HAL_UART_RxCpltCallback+0x190>)
 80010d4:	4849      	ldr	r0, [pc, #292]	; (80011fc <HAL_UART_RxCpltCallback+0x194>)
 80010d6:	f003 fc95 	bl	8004a04 <HAL_SPI_Receive_DMA>
			//turn on timers
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80010da:	2100      	movs	r1, #0
 80010dc:	4848      	ldr	r0, [pc, #288]	; (8001200 <HAL_UART_RxCpltCallback+0x198>)
 80010de:	f004 fa53 	bl	8005588 <HAL_TIM_PWM_Start_IT>
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80010e2:	2104      	movs	r1, #4
 80010e4:	4846      	ldr	r0, [pc, #280]	; (8001200 <HAL_UART_RxCpltCallback+0x198>)
 80010e6:	f004 fa4f 	bl	8005588 <HAL_TIM_PWM_Start_IT>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2101      	movs	r1, #1
 80010ee:	4840      	ldr	r0, [pc, #256]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 80010f0:	f002 f94e 	bl	8003390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	483d      	ldr	r0, [pc, #244]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 80010fa:	f002 f949 	bl	8003390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001104:	483a      	ldr	r0, [pc, #232]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 8001106:	f002 f943 	bl	8003390 <HAL_GPIO_WritePin>
			break;
 800110a:	e039      	b.n	8001180 <HAL_UART_RxCpltCallback+0x118>
		case '2':
			//start ADC
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
 800110c:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <HAL_UART_RxCpltCallback+0x18c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4939      	ldr	r1, [pc, #228]	; (80011f8 <HAL_UART_RxCpltCallback+0x190>)
 8001114:	483b      	ldr	r0, [pc, #236]	; (8001204 <HAL_UART_RxCpltCallback+0x19c>)
 8001116:	f000 fe65 	bl	8001de4 <HAL_ADC_Start_DMA>
					samplesPerPeriod);

			HAL_TIM_Base_Start_IT(&htim4);
 800111a:	483b      	ldr	r0, [pc, #236]	; (8001208 <HAL_UART_RxCpltCallback+0x1a0>)
 800111c:	f004 f9aa 	bl	8005474 <HAL_TIM_Base_Start_IT>
			measureTechnique = 2;
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <HAL_UART_RxCpltCallback+0x184>)
 8001122:	2202      	movs	r2, #2
 8001124:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2101      	movs	r1, #1
 800112a:	4831      	ldr	r0, [pc, #196]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 800112c:	f002 f930 	bl	8003390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001130:	2201      	movs	r2, #1
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	482e      	ldr	r0, [pc, #184]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 8001136:	f002 f92b 	bl	8003390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001140:	482b      	ldr	r0, [pc, #172]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 8001142:	f002 f925 	bl	8003390 <HAL_GPIO_WritePin>
			break;
 8001146:	e01b      	b.n	8001180 <HAL_UART_RxCpltCallback+0x118>
		case '3':
			measureTechnique = 3;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <HAL_UART_RxCpltCallback+0x184>)
 800114a:	2203      	movs	r2, #3
 800114c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800114e:	2100      	movs	r1, #0
 8001150:	482e      	ldr	r0, [pc, #184]	; (800120c <HAL_UART_RxCpltCallback+0x1a4>)
 8001152:	f004 fb69 	bl	8005828 <HAL_TIM_IC_Start_IT>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2101      	movs	r1, #1
 800115a:	4825      	ldr	r0, [pc, #148]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 800115c:	f002 f918 	bl	8003390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	4822      	ldr	r0, [pc, #136]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 8001166:	f002 f913 	bl	8003390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001170:	481f      	ldr	r0, [pc, #124]	; (80011f0 <HAL_UART_RxCpltCallback+0x188>)
 8001172:	f002 f90d 	bl	8003390 <HAL_GPIO_WritePin>
			break;
 8001176:	e003      	b.n	8001180 <HAL_UART_RxCpltCallback+0x118>
		default:
			measureTechnique = 0;
 8001178:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <HAL_UART_RxCpltCallback+0x184>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
			break;
 800117e:	bf00      	nop
		}
		switch (buffer_uart_rx[1]) {
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_UART_RxCpltCallback+0x180>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	2b30      	cmp	r3, #48	; 0x30
 8001186:	d002      	beq.n	800118e <HAL_UART_RxCpltCallback+0x126>
 8001188:	2b31      	cmp	r3, #49	; 0x31
 800118a:	d004      	beq.n	8001196 <HAL_UART_RxCpltCallback+0x12e>
 800118c:	e007      	b.n	800119e <HAL_UART_RxCpltCallback+0x136>
		case '0':
			measureCount = 0;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_UART_RxCpltCallback+0x1a8>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
			break;
 8001194:	e007      	b.n	80011a6 <HAL_UART_RxCpltCallback+0x13e>
		case '1':
			measureCount = 1;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <HAL_UART_RxCpltCallback+0x1a8>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
			break;
 800119c:	e003      	b.n	80011a6 <HAL_UART_RxCpltCallback+0x13e>
		default:
			measureCount = 1;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <HAL_UART_RxCpltCallback+0x1a8>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
			break;
 80011a4:	bf00      	nop
		}
		char msg_buffer[18];
		sprintf(msg_buffer, "Mode %u selected\n\r", measureTechnique);
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_UART_RxCpltCallback+0x184>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4918      	ldr	r1, [pc, #96]	; (8001214 <HAL_UART_RxCpltCallback+0x1ac>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 f982 	bl	80084bc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffer, strlen(msg_buffer),
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f83f 	bl	8000240 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f107 010c 	add.w	r1, r7, #12
 80011ca:	230a      	movs	r3, #10
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <HAL_UART_RxCpltCallback+0x1b0>)
 80011ce:	f005 fef9 	bl	8006fc4 <HAL_UART_Transmit>
				10);
		//wait for next incomming data
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 80011d2:	2203      	movs	r2, #3
 80011d4:	4904      	ldr	r1, [pc, #16]	; (80011e8 <HAL_UART_RxCpltCallback+0x180>)
 80011d6:	4810      	ldr	r0, [pc, #64]	; (8001218 <HAL_UART_RxCpltCallback+0x1b0>)
 80011d8:	f005 ff86 	bl	80070e8 <HAL_UART_Receive_IT>
	}
}
 80011dc:	bf00      	nop
 80011de:	3720      	adds	r7, #32
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40004800 	.word	0x40004800
 80011e8:	200005b8 	.word	0x200005b8
 80011ec:	20000091 	.word	0x20000091
 80011f0:	40020400 	.word	0x40020400
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20015e8c 	.word	0x20015e8c
 80011fc:	2002b7b4 	.word	0x2002b7b4
 8001200:	2002b774 	.word	0x2002b774
 8001204:	20015e44 	.word	0x20015e44
 8001208:	200000f4 	.word	0x200000f4
 800120c:	2002b818 	.word	0x2002b818
 8001210:	20000092 	.word	0x20000092
 8001214:	08008ce0 	.word	0x08008ce0
 8001218:	20000134 	.word	0x20000134

0800121c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	if (measureTechnique == 1) {
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_SPI_RxCpltCallback+0x90>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d13b      	bne.n	80012a4 <HAL_SPI_RxCpltCallback+0x88>
		filledBuffers++;
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_SPI_RxCpltCallback+0x94>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <HAL_SPI_RxCpltCallback+0x94>)
 8001236:	701a      	strb	r2, [r3, #0]
		// observe interval of SPI receiving
		// Run the measurement again

		//first buffer is filled
		if (filledBuffers == 1) {
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_SPI_RxCpltCallback+0x94>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <HAL_SPI_RxCpltCallback+0x36>
			HAL_SPI_Receive_DMA(&hspi1, buffer_rx2.uint8, samplesPerPeriod);
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <HAL_SPI_RxCpltCallback+0x98>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	461a      	mov	r2, r3
 8001248:	491b      	ldr	r1, [pc, #108]	; (80012b8 <HAL_SPI_RxCpltCallback+0x9c>)
 800124a:	481c      	ldr	r0, [pc, #112]	; (80012bc <HAL_SPI_RxCpltCallback+0xa0>)
 800124c:	f003 fbda 	bl	8004a04 <HAL_SPI_Receive_DMA>
	 samplesPerPeriod++;
	 sprintf(msg_buffers, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);

	 }*/
}
 8001250:	e028      	b.n	80012a4 <HAL_SPI_RxCpltCallback+0x88>
		else if (filledBuffers == 2) {
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_SPI_RxCpltCallback+0x94>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d124      	bne.n	80012a4 <HAL_SPI_RxCpltCallback+0x88>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 800125a:	2100      	movs	r1, #0
 800125c:	4818      	ldr	r0, [pc, #96]	; (80012c0 <HAL_SPI_RxCpltCallback+0xa4>)
 800125e:	f004 fa1d 	bl	800569c <HAL_TIM_PWM_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001262:	2104      	movs	r1, #4
 8001264:	4816      	ldr	r0, [pc, #88]	; (80012c0 <HAL_SPI_RxCpltCallback+0xa4>)
 8001266:	f004 fa19 	bl	800569c <HAL_TIM_PWM_Stop_IT>
			filledBuffers = 0;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_SPI_RxCpltCallback+0x94>)
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
			sendDataOverUART();
 8001270:	f000 f82c 	bl	80012cc <sendDataOverUART>
			if (measureCount == 1) {
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_SPI_RxCpltCallback+0xa8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d103      	bne.n	8001284 <HAL_SPI_RxCpltCallback+0x68>
				measureTechnique = 0;
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_SPI_RxCpltCallback+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	e00f      	b.n	80012a4 <HAL_SPI_RxCpltCallback+0x88>
				HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_SPI_RxCpltCallback+0x98>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	490e      	ldr	r1, [pc, #56]	; (80012c8 <HAL_SPI_RxCpltCallback+0xac>)
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <HAL_SPI_RxCpltCallback+0xa0>)
 8001290:	f003 fbb8 	bl	8004a04 <HAL_SPI_Receive_DMA>
				HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001294:	2100      	movs	r1, #0
 8001296:	480a      	ldr	r0, [pc, #40]	; (80012c0 <HAL_SPI_RxCpltCallback+0xa4>)
 8001298:	f004 f976 	bl	8005588 <HAL_TIM_PWM_Start_IT>
				HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 800129c:	2104      	movs	r1, #4
 800129e:	4808      	ldr	r0, [pc, #32]	; (80012c0 <HAL_SPI_RxCpltCallback+0xa4>)
 80012a0:	f004 f972 	bl	8005588 <HAL_TIM_PWM_Start_IT>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000091 	.word	0x20000091
 80012b0:	20000090 	.word	0x20000090
 80012b4:	20000000 	.word	0x20000000
 80012b8:	200005bc 	.word	0x200005bc
 80012bc:	2002b7b4 	.word	0x2002b7b4
 80012c0:	2002b774 	.word	0x2002b774
 80012c4:	20000092 	.word	0x20000092
 80012c8:	20015e8c 	.word	0x20015e8c

080012cc <sendDataOverUART>:

void sendDataOverUART() {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	847b      	strh	r3, [r7, #34]	; 0x22
	int i = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
	if (measureTechnique == 1 || measureTechnique == 2) {
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <sendDataOverUART+0x138>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d003      	beq.n	80012ea <sendDataOverUART+0x1e>
 80012e2:	4b48      	ldr	r3, [pc, #288]	; (8001404 <sendDataOverUART+0x138>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d16e      	bne.n	80013c8 <sendDataOverUART+0xfc>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
 80012ee:	e025      	b.n	800133c <sendDataOverUART+0x70>
			adc = (uint16_t) (buffer_rx1.uint8[i])
 80012f0:	4a45      	ldr	r2, [pc, #276]	; (8001408 <sendDataOverUART+0x13c>)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx1.uint8[i + 1]);
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	3301      	adds	r3, #1
 80012fe:	4942      	ldr	r1, [pc, #264]	; (8001408 <sendDataOverUART+0x13c>)
 8001300:	5ccb      	ldrb	r3, [r1, r3]
 8001302:	b29b      	uxth	r3, r3
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx1.uint8[i])
 8001308:	4413      	add	r3, r2
 800130a:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 800130c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800130e:	463b      	mov	r3, r7
 8001310:	493e      	ldr	r1, [pc, #248]	; (800140c <sendDataOverUART+0x140>)
 8001312:	4618      	mov	r0, r3
 8001314:	f007 f8d2 	bl	80084bc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001318:	463b      	mov	r3, r7
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ff90 	bl	8000240 <strlen>
 8001320:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 8001322:	b29a      	uxth	r2, r3
 8001324:	4639      	mov	r1, r7
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	4839      	ldr	r0, [pc, #228]	; (8001410 <sendDataOverUART+0x144>)
 800132c:	f005 fe4a 	bl	8006fc4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3301      	adds	r3, #1
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	3301      	adds	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
 800133c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <sendDataOverUART+0x148>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3d4      	bcc.n	80012f0 <sendDataOverUART+0x24>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	e025      	b.n	8001398 <sendDataOverUART+0xcc>
			adc = (uint16_t) (buffer_rx2.uint8[i])
 800134c:	4a32      	ldr	r2, [pc, #200]	; (8001418 <sendDataOverUART+0x14c>)
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx2.uint8[i + 1]);
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	3301      	adds	r3, #1
 800135a:	492f      	ldr	r1, [pc, #188]	; (8001418 <sendDataOverUART+0x14c>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	b29b      	uxth	r3, r3
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001364:	4413      	add	r3, r2
 8001366:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 8001368:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800136a:	463b      	mov	r3, r7
 800136c:	4927      	ldr	r1, [pc, #156]	; (800140c <sendDataOverUART+0x140>)
 800136e:	4618      	mov	r0, r3
 8001370:	f007 f8a4 	bl	80084bc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001374:	463b      	mov	r3, r7
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ff62 	bl	8000240 <strlen>
 800137c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800137e:	b29a      	uxth	r2, r3
 8001380:	4639      	mov	r1, r7
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	4822      	ldr	r0, [pc, #136]	; (8001410 <sendDataOverUART+0x144>)
 8001388:	f005 fe1c 	bl	8006fc4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	3301      	adds	r3, #1
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	3301      	adds	r3, #1
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <sendDataOverUART+0x148>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d3d4      	bcc.n	800134c <sendDataOverUART+0x80>
		}
		sprintf(msg_buffers, ";%hu\n", 50);
 80013a2:	463b      	mov	r3, r7
 80013a4:	2232      	movs	r2, #50	; 0x32
 80013a6:	491d      	ldr	r1, [pc, #116]	; (800141c <sendDataOverUART+0x150>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f007 f887 	bl	80084bc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80013ae:	463b      	mov	r3, r7
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff45 	bl	8000240 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	4639      	mov	r1, r7
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	4813      	ldr	r0, [pc, #76]	; (8001410 <sendDataOverUART+0x144>)
 80013c2:	f005 fdff 	bl	8006fc4 <HAL_UART_Transmit>
		sprintf(msg_freq, "%d\n", frequency);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
		HAL_MAX_DELAY);
	}

}
 80013c6:	e019      	b.n	80013fc <sendDataOverUART+0x130>
	} else if (measureTechnique == 3) {
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <sendDataOverUART+0x138>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d115      	bne.n	80013fc <sendDataOverUART+0x130>
		sprintf(msg_freq, "%d\n", frequency);
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <sendDataOverUART+0x154>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4912      	ldr	r1, [pc, #72]	; (8001424 <sendDataOverUART+0x158>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 f86e 	bl	80084bc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe ff2b 	bl	8000240 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f107 0110 	add.w	r1, r7, #16
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <sendDataOverUART+0x144>)
 80013f8:	f005 fde4 	bl	8006fc4 <HAL_UART_Transmit>
}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000091 	.word	0x20000091
 8001408:	20015e8c 	.word	0x20015e8c
 800140c:	08008cf4 	.word	0x08008cf4
 8001410:	20000134 	.word	0x20000134
 8001414:	20000000 	.word	0x20000000
 8001418:	200005bc 	.word	0x200005bc
 800141c:	08008cfc 	.word	0x08008cfc
 8001420:	200000a0 	.word	0x200000a0
 8001424:	08008d04 	.word	0x08008d04

08001428 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a05      	ldr	r2, [pc, #20]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d103      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800143a:	2101      	movs	r1, #1
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800143e:	f001 ffc0 	bl	80033c2 <HAL_GPIO_TogglePin>
	}

}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40000800 	.word	0x40000800
 8001450:	40020400 	.word	0x40020400

08001454 <HAL_TIM_IC_CaptureCallback>:
	LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_0);
	NVIC_SetPriority(DMA2_Stream0_IRQn, 0);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001464:	d106      	bne.n	8001474 <HAL_TIM_IC_CaptureCallback+0x20>
		if (measureTechnique == 3) {
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d102      	bne.n	8001474 <HAL_TIM_IC_CaptureCallback+0x20>
			measureFrequencyWithTimer(htim);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f806 	bl	8001480 <measureFrequencyWithTimer>

		}
	}
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000091 	.word	0x20000091

08001480 <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if (firstCapturedSample == 0) {
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <measureFrequencyWithTimer+0x7c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d10a      	bne.n	80014a6 <measureFrequencyWithTimer+0x26>
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001490:	2100      	movs	r1, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f004 fe4c 	bl	8006130 <HAL_TIM_ReadCapturedValue>
 8001498:	4602      	mov	r2, r0
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <measureFrequencyWithTimer+0x80>)
 800149c:	601a      	str	r2, [r3, #0]
		firstCapturedSample = 1;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <measureFrequencyWithTimer+0x7c>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
		//if freq should be measured only once, after the measurement, go to idle state
		if (measureCount == 1) {
			measureTechnique = 0;
		}
	}
}
 80014a4:	e026      	b.n	80014f4 <measureFrequencyWithTimer+0x74>
	else if (firstCapturedSample) {
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <measureFrequencyWithTimer+0x7c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d022      	beq.n	80014f4 <measureFrequencyWithTimer+0x74>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80014ae:	2100      	movs	r1, #0
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f004 fe3d 	bl	8006130 <HAL_TIM_ReadCapturedValue>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <measureFrequencyWithTimer+0x84>)
 80014ba:	601a      	str	r2, [r3, #0]
		difference = IC_Value2 - IC_Value1;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <measureFrequencyWithTimer+0x84>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <measureFrequencyWithTimer+0x80>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <measureFrequencyWithTimer+0x88>)
 80014c8:	6013      	str	r3, [r2, #0]
		frequency = HAL_RCC_GetHCLKFreq() / difference;
 80014ca:	f002 fdaf 	bl	800402c <HAL_RCC_GetHCLKFreq>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <measureFrequencyWithTimer+0x88>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <measureFrequencyWithTimer+0x8c>)
 80014da:	6013      	str	r3, [r2, #0]
		firstCapturedSample = 0;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <measureFrequencyWithTimer+0x7c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 80014e2:	f7ff fef3 	bl	80012cc <sendDataOverUART>
		if (measureCount == 1) {
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <measureFrequencyWithTimer+0x90>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d102      	bne.n	80014f4 <measureFrequencyWithTimer+0x74>
			measureTechnique = 0;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <measureFrequencyWithTimer+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200000a4 	.word	0x200000a4
 8001500:	20000094 	.word	0x20000094
 8001504:	20000098 	.word	0x20000098
 8001508:	2000009c 	.word	0x2000009c
 800150c:	200000a0 	.word	0x200000a0
 8001510:	20000092 	.word	0x20000092
 8001514:	20000091 	.word	0x20000091

08001518 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x44>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x44>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x44>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_MspInit+0x44>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x44>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x44>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2c      	ldr	r2, [pc, #176]	; (8001640 <HAL_ADC_MspInit+0xd0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d152      	bne.n	8001638 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <HAL_ADC_MspInit+0xd4>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a2b      	ldr	r2, [pc, #172]	; (8001644 <HAL_ADC_MspInit+0xd4>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_ADC_MspInit+0xd4>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_ADC_MspInit+0xd4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a25      	ldr	r2, [pc, #148]	; (8001644 <HAL_ADC_MspInit+0xd4>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <HAL_ADC_MspInit+0xd4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c6:	2303      	movs	r3, #3
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	481c      	ldr	r0, [pc, #112]	; (8001648 <HAL_ADC_MspInit+0xd8>)
 80015d6:	f001 fd31 	bl	800303c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_ADC_MspInit+0xdc>)
 80015dc:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <HAL_ADC_MspInit+0xe0>)
 80015de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_ADC_MspInit+0xdc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_ADC_MspInit+0xdc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_ADC_MspInit+0xdc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_ADC_MspInit+0xdc>)
 80015f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_ADC_MspInit+0xdc>)
 80015fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001600:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_ADC_MspInit+0xdc>)
 8001604:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001608:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_ADC_MspInit+0xdc>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_ADC_MspInit+0xdc>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_ADC_MspInit+0xdc>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <HAL_ADC_MspInit+0xdc>)
 800161e:	f001 f905 	bl	800282c <HAL_DMA_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001628:	f7ff ff76 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_ADC_MspInit+0xdc>)
 8001630:	639a      	str	r2, [r3, #56]	; 0x38
 8001632:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_ADC_MspInit+0xdc>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40012000 	.word	0x40012000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	2002b714 	.word	0x2002b714
 8001650:	40026470 	.word	0x40026470

08001654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <HAL_SPI_MspInit+0xdc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d157      	bne.n	8001726 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_SPI_MspInit+0xe0>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a2e      	ldr	r2, [pc, #184]	; (8001734 <HAL_SPI_MspInit+0xe0>)
 800167c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HAL_SPI_MspInit+0xe0>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_SPI_MspInit+0xe0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <HAL_SPI_MspInit+0xe0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_SPI_MspInit+0xe0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016a6:	23f0      	movs	r3, #240	; 0xf0
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b6:	2305      	movs	r3, #5
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	481d      	ldr	r0, [pc, #116]	; (8001738 <HAL_SPI_MspInit+0xe4>)
 80016c2:	f001 fcbb 	bl	800303c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_SPI_MspInit+0xe8>)
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_SPI_MspInit+0xec>)
 80016ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_SPI_MspInit+0xe8>)
 80016ce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016d2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_SPI_MspInit+0xe8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_SPI_MspInit+0xe8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_SPI_MspInit+0xe8>)
 80016e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_SPI_MspInit+0xe8>)
 80016ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_SPI_MspInit+0xe8>)
 80016f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_SPI_MspInit+0xe8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_SPI_MspInit+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_SPI_MspInit+0xe8>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <HAL_SPI_MspInit+0xe8>)
 800170c:	f001 f88e 	bl	800282c <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8001716:	f7ff feff 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_SPI_MspInit+0xe8>)
 800171e:	659a      	str	r2, [r3, #88]	; 0x58
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_SPI_MspInit+0xe8>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40013000 	.word	0x40013000
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000
 800173c:	2002b858 	.word	0x2002b858
 8001740:	40026410 	.word	0x40026410

08001744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_TIM_Base_MspInit+0xac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d114      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a26      	ldr	r2, [pc, #152]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2101      	movs	r1, #1
 8001772:	201b      	movs	r0, #27
 8001774:	f001 f823 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001778:	201b      	movs	r0, #27
 800177a:	f001 f83c 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800177e:	e032      	b.n	80017e6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d114      	bne.n	80017b4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2101      	movs	r1, #1
 80017a6:	201e      	movs	r0, #30
 80017a8:	f001 f809 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017ac:	201e      	movs	r0, #30
 80017ae:	f001 f822 	bl	80027f6 <HAL_NVIC_EnableIRQ>
}
 80017b2:	e018      	b.n	80017e6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a10      	ldr	r2, [pc, #64]	; (80017fc <HAL_TIM_Base_MspInit+0xb8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d113      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_TIM_Base_MspInit+0xb0>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2101      	movs	r1, #1
 80017da:	202e      	movs	r0, #46	; 0x2e
 80017dc:	f000 ffef 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80017e0:	202e      	movs	r0, #46	; 0x2e
 80017e2:	f001 f808 	bl	80027f6 <HAL_NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40010000 	.word	0x40010000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40000800 	.word	0x40000800
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001820:	d130      	bne.n	8001884 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_TIM_IC_MspInit+0x8c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_TIM_IC_MspInit+0x8c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_TIM_IC_MspInit+0x8c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_TIM_IC_MspInit+0x8c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_TIM_IC_MspInit+0x8c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_TIM_IC_MspInit+0x8c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8001852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4808      	ldr	r0, [pc, #32]	; (8001890 <HAL_TIM_IC_MspInit+0x90>)
 8001870:	f001 fbe4 	bl	800303c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2101      	movs	r1, #1
 8001878:	201c      	movs	r0, #28
 800187a:	f000 ffa0 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800187e:	201c      	movs	r0, #28
 8001880:	f000 ffb9 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a22      	ldr	r2, [pc, #136]	; (800193c <HAL_TIM_MspPostInit+0xa8>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d11d      	bne.n	80018f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_TIM_MspPostInit+0xac>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a21      	ldr	r2, [pc, #132]	; (8001940 <HAL_TIM_MspPostInit+0xac>)
 80018bc:	f043 0310 	orr.w	r3, r3, #16
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_TIM_MspPostInit+0xac>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 80018ce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4816      	ldr	r0, [pc, #88]	; (8001944 <HAL_TIM_MspPostInit+0xb0>)
 80018ec:	f001 fba6 	bl	800303c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80018f0:	e020      	b.n	8001934 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a14      	ldr	r2, [pc, #80]	; (8001948 <HAL_TIM_MspPostInit+0xb4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d11b      	bne.n	8001934 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_TIM_MspPostInit+0xac>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_TIM_MspPostInit+0xac>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6313      	str	r3, [r2, #48]	; 0x30
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_TIM_MspPostInit+0xac>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8001914:	2340      	movs	r3, #64	; 0x40
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001924:	2303      	movs	r3, #3
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <HAL_TIM_MspPostInit+0xb8>)
 8001930:	f001 fb84 	bl	800303c <HAL_GPIO_Init>
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40010000 	.word	0x40010000
 8001940:	40023800 	.word	0x40023800
 8001944:	40021000 	.word	0x40021000
 8001948:	40010400 	.word	0x40010400
 800194c:	40020800 	.word	0x40020800

08001950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_UART_MspInit+0x8c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d130      	bne.n	80019d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_UART_MspInit+0x90>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b4:	2307      	movs	r3, #7
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <HAL_UART_MspInit+0x94>)
 80019c0:	f001 fb3c 	bl	800303c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2027      	movs	r0, #39	; 0x27
 80019ca:	f000 fef8 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019ce:	2027      	movs	r0, #39	; 0x27
 80019d0:	f000 ff11 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40004800 	.word	0x40004800
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020c00 	.word	0x40020c00

080019e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a08:	d141      	bne.n	8001a8e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a22:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a34:	230a      	movs	r3, #10
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4817      	ldr	r0, [pc, #92]	; (8001a9c <HAL_PCD_MspInit+0xb4>)
 8001a40:	f001 fafc 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4810      	ldr	r0, [pc, #64]	; (8001a9c <HAL_PCD_MspInit+0xb4>)
 8001a5a:	f001 faef 	bl	800303c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a68:	6353      	str	r3, [r2, #52]	; 0x34
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_PCD_MspInit+0xb0>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <HardFault_Handler+0x4>

08001ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <MemManage_Handler+0x4>

08001aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 f8f0 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM1_CC_IRQHandler+0x10>)
 8001b02:	f003 ff45 	bl	8005990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2002b774 	.word	0x2002b774

08001b10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <TIM2_IRQHandler+0x10>)
 8001b16:	f003 ff3b 	bl	8005990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2002b818 	.word	0x2002b818

08001b24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <TIM4_IRQHandler+0x10>)
 8001b2a:	f003 ff31 	bl	8005990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200000f4 	.word	0x200000f4

08001b38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <USART3_IRQHandler+0x10>)
 8001b3e:	f005 fb75 	bl	800722c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000134 	.word	0x20000134

08001b4c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM8_CC_IRQHandler+0x10>)
 8001b52:	f003 ff1d 	bl	8005990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200000b4 	.word	0x200000b4

08001b60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <DMA2_Stream0_IRQHandler+0x10>)
 8001b66:	f001 f801 	bl	8002b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2002b858 	.word	0x2002b858

08001b74 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <DMA2_Stream4_IRQHandler+0x10>)
 8001b7a:	f000 fff7 	bl	8002b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2002b714 	.word	0x2002b714

08001b88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x50>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x16>
		heap_end = &end;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <_sbrk+0x50>)
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <_sbrk+0x54>)
 8001b9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <_sbrk+0x50>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <_sbrk+0x50>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	466a      	mov	r2, sp
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d907      	bls.n	8001bc2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bb2:	f006 fc51 	bl	8008458 <__errno>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	230c      	movs	r3, #12
 8001bba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc0:	e006      	b.n	8001bd0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <_sbrk+0x50>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a03      	ldr	r2, [pc, #12]	; (8001bd8 <_sbrk+0x50>)
 8001bcc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200000a8 	.word	0x200000a8
 8001bdc:	2002b8c0 	.word	0x2002b8c0

08001be0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <SystemInit+0x28>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <SystemInit+0x28>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SystemInit+0x28>)
 8001bf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bfa:	609a      	str	r2, [r3, #8]
#endif
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c12:	e003      	b.n	8001c1c <LoopCopyDataInit>

08001c14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c1a:	3104      	adds	r1, #4

08001c1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c1c:	480b      	ldr	r0, [pc, #44]	; (8001c4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c24:	d3f6      	bcc.n	8001c14 <CopyDataInit>
  ldr  r2, =_sbss
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c28:	e002      	b.n	8001c30 <LoopFillZerobss>

08001c2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c2c:	f842 3b04 	str.w	r3, [r2], #4

08001c30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c34:	d3f9      	bcc.n	8001c2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c36:	f7ff ffd3 	bl	8001be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f006 fc13 	bl	8008464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3e:	f7fe fcef 	bl	8000620 <main>
  bx  lr    
 8001c42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c44:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001c48:	08008d6c 	.word	0x08008d6c
  ldr  r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c50:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001c54:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001c58:	2002b8c0 	.word	0x2002b8c0

08001c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC_IRQHandler>

08001c5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 fda0 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 f805 	bl	8001c78 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c6e:	f7ff fc5b 	bl	8001528 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fdbb 	bl	8002812 <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 fd83 	bl	80027be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000004 	.word	0x20000004
 8001cd0:	2000000c 	.word	0x2000000c
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000000c 	.word	0x2000000c
 8001cfc:	2002b8b8 	.word	0x2002b8b8

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	2002b8b8 	.word	0x2002b8b8

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff ffee 	bl	8001d00 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d005      	beq.n	8001d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_Delay+0x40>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d3e:	bf00      	nop
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f7      	bhi.n	8001d40 <HAL_Delay+0x28>
  {
  }
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000000c 	.word	0x2000000c

08001d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e031      	b.n	8001dd6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fbf8 	bl	8001570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d116      	bne.n	8001dc8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_ADC_Init+0x84>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	f043 0202 	orr.w	r2, r3, #2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fab0 	bl	8002310 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f023 0303 	bic.w	r3, r3, #3
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc6:	e001      	b.n	8001dcc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	ffffeefd 	.word	0xffffeefd

08001de4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Start_DMA+0x1e>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e0c7      	b.n	8001f92 <HAL_ADC_Start_DMA+0x1ae>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d018      	beq.n	8001e4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e28:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_ADC_Start_DMA+0x1b8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a5c      	ldr	r2, [pc, #368]	; (8001fa0 <HAL_ADC_Start_DMA+0x1bc>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0c9a      	lsrs	r2, r3, #18
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001e3c:	e002      	b.n	8001e44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f9      	bne.n	8001e3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f040 809b 	bne.w	8001f90 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e5e:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <HAL_ADC_Start_DMA+0x1c0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e94:	d106      	bne.n	8001ea4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f023 0206 	bic.w	r2, r3, #6
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ea2:	e002      	b.n	8001eaa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_ADC_Start_DMA+0x1c4>)
 8001eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_ADC_Start_DMA+0x1c8>)
 8001ec0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <HAL_ADC_Start_DMA+0x1cc>)
 8001ec8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ee2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	334c      	adds	r3, #76	; 0x4c
 8001efe:	4619      	mov	r1, r3
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f000 fd40 	bl	8002988 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_ADC_Start_DMA+0x1d0>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10f      	bne.n	8001f34 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d136      	bne.n	8001f90 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	e02d      	b.n	8001f90 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_ADC_Start_DMA+0x1d4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10e      	bne.n	8001f5c <HAL_ADC_Start_DMA+0x178>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f5a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_ADC_Start_DMA+0x1d0>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d113      	bne.n	8001f90 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <HAL_ADC_Start_DMA+0x1d8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10e      	bne.n	8001f90 <HAL_ADC_Start_DMA+0x1ac>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f8e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000004 	.word	0x20000004
 8001fa0:	431bde83 	.word	0x431bde83
 8001fa4:	fffff8fe 	.word	0xfffff8fe
 8001fa8:	08002505 	.word	0x08002505
 8001fac:	080025bf 	.word	0x080025bf
 8001fb0:	080025db 	.word	0x080025db
 8001fb4:	40012300 	.word	0x40012300
 8001fb8:	40012000 	.word	0x40012000
 8001fbc:	40012200 	.word	0x40012200

08001fc0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Stop_DMA+0x1a>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e036      	b.n	8002048 <HAL_ADC_Stop_DMA+0x88>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11e      	bne.n	800203e <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800200e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	4618      	mov	r0, r3
 8002016:	f000 fd17 	bl	8002a48 <HAL_DMA_Abort>
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800202c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_ADC_Stop_DMA+0x90>)
 8002034:	4013      	ands	r3, r2
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	ffffeefe 	.word	0xffffeefe

08002054 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x1c>
 8002094:	2302      	movs	r3, #2
 8002096:	e12a      	b.n	80022ee <HAL_ADC_ConfigChannel+0x272>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d93a      	bls.n	800211e <HAL_ADC_ConfigChannel+0xa2>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020b0:	d035      	beq.n	800211e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68d9      	ldr	r1, [r3, #12]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	3b1e      	subs	r3, #30
 80020c8:	2207      	movs	r2, #7
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	400a      	ands	r2, r1
 80020d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a87      	ldr	r2, [pc, #540]	; (80022fc <HAL_ADC_ConfigChannel+0x280>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10a      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68d9      	ldr	r1, [r3, #12]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	061a      	lsls	r2, r3, #24
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f6:	e035      	b.n	8002164 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68d9      	ldr	r1, [r3, #12]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	4603      	mov	r3, r0
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4403      	add	r3, r0
 8002110:	3b1e      	subs	r3, #30
 8002112:	409a      	lsls	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211c:	e022      	b.n	8002164 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6919      	ldr	r1, [r3, #16]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	2207      	movs	r2, #7
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6919      	ldr	r1, [r3, #16]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	4618      	mov	r0, r3
 8002154:	4603      	mov	r3, r0
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4403      	add	r3, r0
 800215a:	409a      	lsls	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b06      	cmp	r3, #6
 800216a:	d824      	bhi.n	80021b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b05      	subs	r3, #5
 800217e:	221f      	movs	r2, #31
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43da      	mvns	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	400a      	ands	r2, r1
 800218c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b05      	subs	r3, #5
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
 80021b4:	e04c      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b0c      	cmp	r3, #12
 80021bc:	d824      	bhi.n	8002208 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b23      	subs	r3, #35	; 0x23
 80021d0:	221f      	movs	r2, #31
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b23      	subs	r3, #35	; 0x23
 80021fa:	fa00 f203 	lsl.w	r2, r0, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
 8002206:	e023      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b41      	subs	r3, #65	; 0x41
 800221a:	221f      	movs	r2, #31
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4618      	mov	r0, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b41      	subs	r3, #65	; 0x41
 8002244:	fa00 f203 	lsl.w	r2, r0, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2a      	ldr	r2, [pc, #168]	; (8002300 <HAL_ADC_ConfigChannel+0x284>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10a      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1f4>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002262:	d105      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_ADC_ConfigChannel+0x288>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <HAL_ADC_ConfigChannel+0x288>)
 800226a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800226e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <HAL_ADC_ConfigChannel+0x284>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d109      	bne.n	800228e <HAL_ADC_ConfigChannel+0x212>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b12      	cmp	r3, #18
 8002280:	d105      	bne.n	800228e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_ADC_ConfigChannel+0x288>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_ADC_ConfigChannel+0x288>)
 8002288:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800228c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <HAL_ADC_ConfigChannel+0x284>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d125      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x268>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <HAL_ADC_ConfigChannel+0x280>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x22e>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b11      	cmp	r3, #17
 80022a8:	d11c      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_ADC_ConfigChannel+0x288>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <HAL_ADC_ConfigChannel+0x288>)
 80022b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022b4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_ADC_ConfigChannel+0x280>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d111      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_ADC_ConfigChannel+0x28c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_ADC_ConfigChannel+0x290>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0c9a      	lsrs	r2, r3, #18
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022d6:	e002      	b.n	80022de <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3b01      	subs	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f9      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	10000012 	.word	0x10000012
 8002300:	40012000 	.word	0x40012000
 8002304:	40012300 	.word	0x40012300
 8002308:	20000004 	.word	0x20000004
 800230c:	431bde83 	.word	0x431bde83

08002310 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002318:	4b78      	ldr	r3, [pc, #480]	; (80024fc <ADC_Init+0x1ec>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a77      	ldr	r2, [pc, #476]	; (80024fc <ADC_Init+0x1ec>)
 800231e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002322:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002324:	4b75      	ldr	r3, [pc, #468]	; (80024fc <ADC_Init+0x1ec>)
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4973      	ldr	r1, [pc, #460]	; (80024fc <ADC_Init+0x1ec>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	021a      	lsls	r2, r3, #8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6899      	ldr	r1, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	4a58      	ldr	r2, [pc, #352]	; (8002500 <ADC_Init+0x1f0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d022      	beq.n	80023ea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6899      	ldr	r1, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	e00f      	b.n	800240a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002408:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0202 	bic.w	r2, r2, #2
 8002418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	005a      	lsls	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002446:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	3b01      	subs	r3, #1
 8002464:	035a      	lsls	r2, r3, #13
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	e007      	b.n	8002480 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800247e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	3b01      	subs	r3, #1
 800249c:	051a      	lsls	r2, r3, #20
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6899      	ldr	r1, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024c2:	025a      	lsls	r2, r3, #9
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6899      	ldr	r1, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	029a      	lsls	r2, r3, #10
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40012300 	.word	0x40012300
 8002500:	0f000001 	.word	0x0f000001

08002504 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800251a:	2b00      	cmp	r3, #0
 800251c:	d13c      	bne.n	8002598 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d12b      	bne.n	8002590 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800253c:	2b00      	cmp	r3, #0
 800253e:	d127      	bne.n	8002590 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002558:	2b00      	cmp	r3, #0
 800255a:	d119      	bne.n	8002590 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0220 	bic.w	r2, r2, #32
 800256a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7fe fd17 	bl	8000fc4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002596:	e00e      	b.n	80025b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fd5f 	bl	8002068 <HAL_ADC_ErrorCallback>
}
 80025aa:	e004      	b.n	80025b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f7ff fd41 	bl	8002054 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f043 0204 	orr.w	r2, r3, #4
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff fd34 	bl	8002068 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <__NVIC_SetPriorityGrouping+0x40>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 8002632:	4313      	orrs	r3, r2
 8002634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002636:	4a04      	ldr	r2, [pc, #16]	; (8002648 <__NVIC_SetPriorityGrouping+0x40>)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	60d3      	str	r3, [r2, #12]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00
 800264c:	05fa0000 	.word	0x05fa0000

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff8e 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff29 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff3e 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff8e 	bl	80026fc <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5d 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff31 	bl	800266c <__NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffa2 	bl	8002764 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff fa62 	bl	8001d00 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e099      	b.n	800297c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002868:	e00f      	b.n	800288a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286a:	f7ff fa49 	bl	8001d00 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b05      	cmp	r3, #5
 8002876:	d908      	bls.n	800288a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2203      	movs	r2, #3
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e078      	b.n	800297c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e8      	bne.n	800286a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4b38      	ldr	r3, [pc, #224]	; (8002984 <HAL_DMA_Init+0x158>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d107      	bne.n	80028f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	4313      	orrs	r3, r2
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f023 0307 	bic.w	r3, r3, #7
 800290a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2b04      	cmp	r3, #4
 800291c:	d117      	bne.n	800294e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00e      	beq.n	800294e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fb09 	bl	8002f48 <DMA_CheckFifoParam>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800294a:	2301      	movs	r3, #1
 800294c:	e016      	b.n	800297c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fac0 	bl	8002edc <DMA_CalcBaseAndBitshift>
 800295c:	4603      	mov	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002964:	223f      	movs	r2, #63	; 0x3f
 8002966:	409a      	lsls	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	e010803f 	.word	0xe010803f

08002988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_DMA_Start_IT+0x26>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e048      	b.n	8002a40 <HAL_DMA_Start_IT+0xb8>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d137      	bne.n	8002a32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2202      	movs	r2, #2
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fa52 	bl	8002e80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	223f      	movs	r2, #63	; 0x3f
 80029e2:	409a      	lsls	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0216 	orr.w	r2, r2, #22
 80029f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a06:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0208 	orr.w	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e005      	b.n	8002a3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a56:	f7ff f953 	bl	8001d00 <HAL_GetTick>
 8002a5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d008      	beq.n	8002a7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e052      	b.n	8002b20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0216 	bic.w	r2, r2, #22
 8002a88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_DMA_Abort+0x62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0208 	bic.w	r2, r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aca:	e013      	b.n	8002af4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002acc:	f7ff f918 	bl	8001d00 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d90c      	bls.n	8002af4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2203      	movs	r2, #3
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e015      	b.n	8002b20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e4      	bne.n	8002acc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	223f      	movs	r2, #63	; 0x3f
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d004      	beq.n	8002b46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00c      	b.n	8002b60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2205      	movs	r2, #5
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b78:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <HAL_DMA_IRQHandler+0x258>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a92      	ldr	r2, [pc, #584]	; (8002dc8 <HAL_DMA_IRQHandler+0x25c>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0a9b      	lsrs	r3, r3, #10
 8002b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2208      	movs	r2, #8
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0204 	bic.w	r2, r2, #4
 8002bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d012      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f043 0202 	orr.w	r2, r3, #2
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	2204      	movs	r2, #4
 8002c14:	409a      	lsls	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d012      	beq.n	8002c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	2204      	movs	r2, #4
 8002c32:	409a      	lsls	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f043 0204 	orr.w	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	2210      	movs	r2, #16
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d043      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d03c      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	2210      	movs	r2, #16
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d018      	beq.n	8002cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d024      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
 8002c9a:	e01f      	b.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01b      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
 8002cac:	e016      	b.n	8002cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d107      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0208 	bic.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 808e 	beq.w	8002e0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8086 	beq.w	8002e0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	2220      	movs	r2, #32
 8002d04:	409a      	lsls	r2, r3
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d136      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0216 	bic.w	r2, r2, #22
 8002d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_DMA_IRQHandler+0x1da>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0208 	bic.w	r2, r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	223f      	movs	r2, #63	; 0x3f
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d07d      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
        }
        return;
 8002d82:	e078      	b.n	8002e76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01c      	beq.n	8002dcc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d108      	bne.n	8002db2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d030      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
 8002db0:	e02b      	b.n	8002e0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d027      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
 8002dc2:	e022      	b.n	8002e0a <HAL_DMA_IRQHandler+0x29e>
 8002dc4:	20000004 	.word	0x20000004
 8002dc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0210 	bic.w	r2, r2, #16
 8002de8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d032      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d022      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2205      	movs	r2, #5
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d307      	bcc.n	8002e52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f2      	bne.n	8002e36 <HAL_DMA_IRQHandler+0x2ca>
 8002e50:	e000      	b.n	8002e54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
 8002e74:	e000      	b.n	8002e78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e76:	bf00      	nop
    }
  }
}
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop

08002e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d108      	bne.n	8002ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ebe:	e007      	b.n	8002ed0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3b10      	subs	r3, #16
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <DMA_CalcBaseAndBitshift+0x60>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <DMA_CalcBaseAndBitshift+0x64>)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d908      	bls.n	8002f1c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <DMA_CalcBaseAndBitshift+0x68>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	1d1a      	adds	r2, r3, #4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	659a      	str	r2, [r3, #88]	; 0x58
 8002f1a:	e006      	b.n	8002f2a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <DMA_CalcBaseAndBitshift+0x68>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	aaaaaaab 	.word	0xaaaaaaab
 8002f40:	08008d20 	.word	0x08008d20
 8002f44:	fffffc00 	.word	0xfffffc00

08002f48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11f      	bne.n	8002fa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d855      	bhi.n	8003014 <DMA_CheckFifoParam+0xcc>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <DMA_CheckFifoParam+0x28>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f93 	.word	0x08002f93
 8002f78:	08002f81 	.word	0x08002f81
 8002f7c:	08003015 	.word	0x08003015
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d045      	beq.n	8003018 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e042      	b.n	8003018 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f9a:	d13f      	bne.n	800301c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa0:	e03c      	b.n	800301c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002faa:	d121      	bne.n	8002ff0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d836      	bhi.n	8003020 <DMA_CheckFifoParam+0xd8>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <DMA_CheckFifoParam+0x70>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08002fc9 	.word	0x08002fc9
 8002fbc:	08002fcf 	.word	0x08002fcf
 8002fc0:	08002fc9 	.word	0x08002fc9
 8002fc4:	08002fe1 	.word	0x08002fe1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      break;
 8002fcc:	e02f      	b.n	800302e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d024      	beq.n	8003024 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fde:	e021      	b.n	8003024 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fe8:	d11e      	bne.n	8003028 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fee:	e01b      	b.n	8003028 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <DMA_CheckFifoParam+0xb4>
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d003      	beq.n	8003002 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ffa:	e018      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8003000:	e015      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
      break;
 8003012:	e00b      	b.n	800302c <DMA_CheckFifoParam+0xe4>
      break;
 8003014:	bf00      	nop
 8003016:	e00a      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      break;
 8003018:	bf00      	nop
 800301a:	e008      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      break;
 800301c:	bf00      	nop
 800301e:	e006      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      break;
 8003020:	bf00      	nop
 8003022:	e004      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      break;
 8003024:	bf00      	nop
 8003026:	e002      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      break;   
 8003028:	bf00      	nop
 800302a:	e000      	b.n	800302e <DMA_CheckFifoParam+0xe6>
      break;
 800302c:	bf00      	nop
    }
  } 
  
  return status; 
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003052:	2300      	movs	r3, #0
 8003054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e175      	b.n	8003348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800305c:	2201      	movs	r2, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4013      	ands	r3, r2
 800306e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	f040 8164 	bne.w	8003342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d00b      	beq.n	800309a <HAL_GPIO_Init+0x5e>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d007      	beq.n	800309a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800308e:	2b11      	cmp	r3, #17
 8003090:	d003      	beq.n	800309a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b12      	cmp	r3, #18
 8003098:	d130      	bne.n	80030fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2203      	movs	r2, #3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 0201 	and.w	r2, r3, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x100>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b12      	cmp	r3, #18
 800313a:	d123      	bne.n	8003184 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	08da      	lsrs	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3208      	adds	r2, #8
 8003144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	220f      	movs	r2, #15
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	08da      	lsrs	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3208      	adds	r2, #8
 800317e:	69b9      	ldr	r1, [r7, #24]
 8003180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0203 	and.w	r2, r3, #3
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80be 	beq.w	8003342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c6:	4b65      	ldr	r3, [pc, #404]	; (800335c <HAL_GPIO_Init+0x320>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	4a64      	ldr	r2, [pc, #400]	; (800335c <HAL_GPIO_Init+0x320>)
 80031cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d0:	6453      	str	r3, [r2, #68]	; 0x44
 80031d2:	4b62      	ldr	r3, [pc, #392]	; (800335c <HAL_GPIO_Init+0x320>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031de:	4a60      	ldr	r2, [pc, #384]	; (8003360 <HAL_GPIO_Init+0x324>)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	3302      	adds	r3, #2
 80031e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a57      	ldr	r2, [pc, #348]	; (8003364 <HAL_GPIO_Init+0x328>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d037      	beq.n	800327a <HAL_GPIO_Init+0x23e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a56      	ldr	r2, [pc, #344]	; (8003368 <HAL_GPIO_Init+0x32c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d031      	beq.n	8003276 <HAL_GPIO_Init+0x23a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a55      	ldr	r2, [pc, #340]	; (800336c <HAL_GPIO_Init+0x330>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02b      	beq.n	8003272 <HAL_GPIO_Init+0x236>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a54      	ldr	r2, [pc, #336]	; (8003370 <HAL_GPIO_Init+0x334>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d025      	beq.n	800326e <HAL_GPIO_Init+0x232>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a53      	ldr	r2, [pc, #332]	; (8003374 <HAL_GPIO_Init+0x338>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01f      	beq.n	800326a <HAL_GPIO_Init+0x22e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a52      	ldr	r2, [pc, #328]	; (8003378 <HAL_GPIO_Init+0x33c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d019      	beq.n	8003266 <HAL_GPIO_Init+0x22a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a51      	ldr	r2, [pc, #324]	; (800337c <HAL_GPIO_Init+0x340>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_GPIO_Init+0x226>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a50      	ldr	r2, [pc, #320]	; (8003380 <HAL_GPIO_Init+0x344>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00d      	beq.n	800325e <HAL_GPIO_Init+0x222>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4f      	ldr	r2, [pc, #316]	; (8003384 <HAL_GPIO_Init+0x348>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <HAL_GPIO_Init+0x21e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4e      	ldr	r2, [pc, #312]	; (8003388 <HAL_GPIO_Init+0x34c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_GPIO_Init+0x21a>
 8003252:	2309      	movs	r3, #9
 8003254:	e012      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003256:	230a      	movs	r3, #10
 8003258:	e010      	b.n	800327c <HAL_GPIO_Init+0x240>
 800325a:	2308      	movs	r3, #8
 800325c:	e00e      	b.n	800327c <HAL_GPIO_Init+0x240>
 800325e:	2307      	movs	r3, #7
 8003260:	e00c      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003262:	2306      	movs	r3, #6
 8003264:	e00a      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003266:	2305      	movs	r3, #5
 8003268:	e008      	b.n	800327c <HAL_GPIO_Init+0x240>
 800326a:	2304      	movs	r3, #4
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x240>
 800326e:	2303      	movs	r3, #3
 8003270:	e004      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003272:	2302      	movs	r3, #2
 8003274:	e002      	b.n	800327c <HAL_GPIO_Init+0x240>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_GPIO_Init+0x240>
 800327a:	2300      	movs	r3, #0
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	f002 0203 	and.w	r2, r2, #3
 8003282:	0092      	lsls	r2, r2, #2
 8003284:	4093      	lsls	r3, r2
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800328c:	4934      	ldr	r1, [pc, #208]	; (8003360 <HAL_GPIO_Init+0x324>)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800329a:	4b3c      	ldr	r3, [pc, #240]	; (800338c <HAL_GPIO_Init+0x350>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032be:	4a33      	ldr	r2, [pc, #204]	; (800338c <HAL_GPIO_Init+0x350>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032c4:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_GPIO_Init+0x350>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e8:	4a28      	ldr	r2, [pc, #160]	; (800338c <HAL_GPIO_Init+0x350>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ee:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_GPIO_Init+0x350>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003312:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_GPIO_Init+0x350>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <HAL_GPIO_Init+0x350>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800333c:	4a13      	ldr	r2, [pc, #76]	; (800338c <HAL_GPIO_Init+0x350>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	f67f ae86 	bls.w	800305c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003350:	bf00      	nop
 8003352:	3724      	adds	r7, #36	; 0x24
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40023800 	.word	0x40023800
 8003360:	40013800 	.word	0x40013800
 8003364:	40020000 	.word	0x40020000
 8003368:	40020400 	.word	0x40020400
 800336c:	40020800 	.word	0x40020800
 8003370:	40020c00 	.word	0x40020c00
 8003374:	40021000 	.word	0x40021000
 8003378:	40021400 	.word	0x40021400
 800337c:	40021800 	.word	0x40021800
 8003380:	40021c00 	.word	0x40021c00
 8003384:	40022000 	.word	0x40022000
 8003388:	40022400 	.word	0x40022400
 800338c:	40013c00 	.word	0x40013c00

08003390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
 800339c:	4613      	mov	r3, r2
 800339e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a0:	787b      	ldrb	r3, [r7, #1]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033ac:	e003      	b.n	80033b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	041a      	lsls	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	619a      	str	r2, [r3, #24]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	887b      	ldrh	r3, [r7, #2]
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80033da:	887b      	ldrh	r3, [r7, #2]
 80033dc:	041a      	lsls	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80033e2:	e002      	b.n	80033ea <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033e4:	887a      	ldrh	r2, [r7, #2]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	619a      	str	r2, [r3, #24]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f8:	b08f      	sub	sp, #60	; 0x3c
 80033fa:	af0a      	add	r7, sp, #40	; 0x28
 80033fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e116      	b.n	8003636 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe fae0 	bl	80019e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d102      	bne.n	8003442 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f004 fdae 	bl	8007fa8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	687e      	ldr	r6, [r7, #4]
 8003454:	466d      	mov	r5, sp
 8003456:	f106 0410 	add.w	r4, r6, #16
 800345a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800345c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800345e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003462:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003466:	e885 0003 	stmia.w	r5, {r0, r1}
 800346a:	1d33      	adds	r3, r6, #4
 800346c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800346e:	6838      	ldr	r0, [r7, #0]
 8003470:	f004 fd42 	bl	8007ef8 <USB_CoreInit>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0d7      	b.n	8003636 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f004 fd9c 	bl	8007fca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	e04a      	b.n	800352e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	333d      	adds	r3, #61	; 0x3d
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	333c      	adds	r3, #60	; 0x3c
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	b298      	uxth	r0, r3
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3342      	adds	r3, #66	; 0x42
 80034d4:	4602      	mov	r2, r0
 80034d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	333f      	adds	r3, #63	; 0x3f
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3344      	adds	r3, #68	; 0x44
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3348      	adds	r3, #72	; 0x48
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3350      	adds	r3, #80	; 0x50
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	3301      	adds	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d3af      	bcc.n	8003498 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	e044      	b.n	80035c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	3301      	adds	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3b5      	bcc.n	800353e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	687e      	ldr	r6, [r7, #4]
 80035da:	466d      	mov	r5, sp
 80035dc:	f106 0410 	add.w	r4, r6, #16
 80035e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80035f0:	1d33      	adds	r3, r6, #4
 80035f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f4:	6838      	ldr	r0, [r7, #0]
 80035f6:	f004 fd13 	bl	8008020 <USB_DevInit>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e014      	b.n	8003636 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f80b 	bl	8003640 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 fec5 	bl	80083be <USB_DevDisconnect>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003640 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_PCDEx_ActivateLPM+0x44>)
 8003670:	4313      	orrs	r3, r2
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	10000003 	.word	0x10000003

08003688 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003696:	6013      	str	r3, [r2, #0]
}
 8003698:	bf00      	nop
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40007000 	.word	0x40007000

080036a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_PWREx_EnableOverDrive+0x98>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	4a22      	ldr	r2, [pc, #136]	; (8003740 <HAL_PWREx_EnableOverDrive+0x98>)
 80036b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036bc:	6413      	str	r3, [r2, #64]	; 0x40
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_PWREx_EnableOverDrive+0x98>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d6:	f7fe fb13 	bl	8001d00 <HAL_GetTick>
 80036da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036dc:	e009      	b.n	80036f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036de:	f7fe fb0f 	bl	8001d00 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ec:	d901      	bls.n	80036f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e022      	b.n	8003738 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fe:	d1ee      	bne.n	80036de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003700:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0f      	ldr	r2, [pc, #60]	; (8003744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800370c:	f7fe faf8 	bl	8001d00 <HAL_GetTick>
 8003710:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003712:	e009      	b.n	8003728 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003714:	f7fe faf4 	bl	8001d00 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003722:	d901      	bls.n	8003728 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e007      	b.n	8003738 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_PWREx_EnableOverDrive+0x9c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003734:	d1ee      	bne.n	8003714 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	40007000 	.word	0x40007000

08003748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e29b      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 8087 	beq.w	800387a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800376c:	4b96      	ldr	r3, [pc, #600]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b04      	cmp	r3, #4
 8003776:	d00c      	beq.n	8003792 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003778:	4b93      	ldr	r3, [pc, #588]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d112      	bne.n	80037aa <HAL_RCC_OscConfig+0x62>
 8003784:	4b90      	ldr	r3, [pc, #576]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003790:	d10b      	bne.n	80037aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003792:	4b8d      	ldr	r3, [pc, #564]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d06c      	beq.n	8003878 <HAL_RCC_OscConfig+0x130>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d168      	bne.n	8003878 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e275      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x7a>
 80037b4:	4b84      	ldr	r3, [pc, #528]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a83      	ldr	r2, [pc, #524]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	e02e      	b.n	8003820 <HAL_RCC_OscConfig+0xd8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x9c>
 80037ca:	4b7f      	ldr	r3, [pc, #508]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a7e      	ldr	r2, [pc, #504]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b7c      	ldr	r3, [pc, #496]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7b      	ldr	r2, [pc, #492]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e01d      	b.n	8003820 <HAL_RCC_OscConfig+0xd8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0xc0>
 80037ee:	4b76      	ldr	r3, [pc, #472]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a75      	ldr	r2, [pc, #468]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b73      	ldr	r3, [pc, #460]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a72      	ldr	r2, [pc, #456]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0xd8>
 8003808:	4b6f      	ldr	r3, [pc, #444]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a6e      	ldr	r2, [pc, #440]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 800380e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b6c      	ldr	r3, [pc, #432]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a6b      	ldr	r2, [pc, #428]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 800381a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fe fa6a 	bl	8001d00 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe fa66 	bl	8001d00 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e229      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b61      	ldr	r3, [pc, #388]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0xe8>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe fa56 	bl	8001d00 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7fe fa52 	bl	8001d00 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e215      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386a:	4b57      	ldr	r3, [pc, #348]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x110>
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d069      	beq.n	800395a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003886:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003892:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d11c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x190>
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d116      	bne.n	80038d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_RCC_OscConfig+0x17a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e1e9      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c2:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	493d      	ldr	r1, [pc, #244]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	e040      	b.n	800395a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d023      	beq.n	8003928 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e0:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a38      	ldr	r2, [pc, #224]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe fa08 	bl	8001d00 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe fa04 	bl	8001d00 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1c7      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4929      	ldr	r1, [pc, #164]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
 8003926:	e018      	b.n	800395a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003928:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe f9e4 	bl	8001d00 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393c:	f7fe f9e0 	bl	8001d00 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e1a3      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d038      	beq.n	80039d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d019      	beq.n	80039a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fe f9c1 	bl	8001d00 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003982:	f7fe f9bd 	bl	8001d00 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e180      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 8003996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x23a>
 80039a0:	e01a      	b.n	80039d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	4a08      	ldr	r2, [pc, #32]	; (80039c8 <HAL_RCC_OscConfig+0x280>)
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fe f9a7 	bl	8001d00 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	e00a      	b.n	80039cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fe f9a3 	bl	8001d00 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d903      	bls.n	80039cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e166      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
 80039c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	4b92      	ldr	r3, [pc, #584]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 80039ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1ee      	bne.n	80039b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a4 	beq.w	8003b2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e6:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	4b89      	ldr	r3, [pc, #548]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a88      	ldr	r2, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b86      	ldr	r3, [pc, #536]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0e:	4b83      	ldr	r3, [pc, #524]	; (8003c1c <HAL_RCC_OscConfig+0x4d4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d118      	bne.n	8003a4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a1a:	4b80      	ldr	r3, [pc, #512]	; (8003c1c <HAL_RCC_OscConfig+0x4d4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7f      	ldr	r2, [pc, #508]	; (8003c1c <HAL_RCC_OscConfig+0x4d4>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fe f96b 	bl	8001d00 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fe f967 	bl	8001d00 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	; 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e12a      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a40:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_RCC_OscConfig+0x4d4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x31a>
 8003a54:	4b70      	ldr	r3, [pc, #448]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a6f      	ldr	r2, [pc, #444]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a60:	e02d      	b.n	8003abe <HAL_RCC_OscConfig+0x376>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x33c>
 8003a6a:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a6a      	ldr	r2, [pc, #424]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70
 8003a76:	4b68      	ldr	r3, [pc, #416]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a67      	ldr	r2, [pc, #412]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	6713      	str	r3, [r2, #112]	; 0x70
 8003a82:	e01c      	b.n	8003abe <HAL_RCC_OscConfig+0x376>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x35e>
 8003a8c:	4b62      	ldr	r3, [pc, #392]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a61      	ldr	r2, [pc, #388]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
 8003a98:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a5e      	ldr	r2, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	e00b      	b.n	8003abe <HAL_RCC_OscConfig+0x376>
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a5b      	ldr	r2, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a58      	ldr	r2, [pc, #352]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d015      	beq.n	8003af2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fe f91b 	bl	8001d00 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe f917 	bl	8001d00 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0d8      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ee      	beq.n	8003ace <HAL_RCC_OscConfig+0x386>
 8003af0:	e014      	b.n	8003b1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af2:	f7fe f905 	bl	8001d00 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe f901 	bl	8001d00 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0c2      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	4b41      	ldr	r3, [pc, #260]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80ae 	beq.w	8003c94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b38:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d06d      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d14b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a31      	ldr	r2, [pc, #196]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe f8d2 	bl	8001d00 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe f8ce 	bl	8001d00 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e091      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b72:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	019b      	lsls	r3, r3, #6
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	3b01      	subs	r3, #1
 8003b98:	041b      	lsls	r3, r3, #16
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	071b      	lsls	r3, r3, #28
 8003baa:	491b      	ldr	r1, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a18      	ldr	r2, [pc, #96]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe f8a0 	bl	8001d00 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7fe f89c 	bl	8001d00 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e05f      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x47c>
 8003be2:	e057      	b.n	8003c94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0b      	ldr	r2, [pc, #44]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fe f886 	bl	8001d00 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fe f882 	bl	8001d00 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e045      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_RCC_OscConfig+0x4d0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4b0>
 8003c16:	e03d      	b.n	8003c94 <HAL_RCC_OscConfig+0x54c>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c20:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <HAL_RCC_OscConfig+0x558>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d030      	beq.n	8003c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d129      	bne.n	8003c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d122      	bne.n	8003c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d119      	bne.n	8003c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d10f      	bne.n	8003c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800

08003ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0d0      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d910      	bls.n	8003cec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 020f 	bic.w	r2, r3, #15
 8003cd2:	4965      	ldr	r1, [pc, #404]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0b8      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a52      	ldr	r2, [pc, #328]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	494d      	ldr	r1, [pc, #308]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d040      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d115      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07f      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e073      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06b      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4936      	ldr	r1, [pc, #216]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd ffb2 	bl	8001d00 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f7fd ffae 	bl	8001d00 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e053      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 020c 	and.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1eb      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b27      	ldr	r3, [pc, #156]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d210      	bcs.n	8003df8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 020f 	bic.w	r2, r3, #15
 8003dde:	4922      	ldr	r1, [pc, #136]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e032      	b.n	8003e5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	490e      	ldr	r1, [pc, #56]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e36:	f000 f821 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x1cc>)
 8003e48:	5cd3      	ldrb	r3, [r2, r3]
 8003e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e4e:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_RCC_ClockConfig+0x1d0>)
 8003e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1d4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd ff0e 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40023c00 	.word	0x40023c00
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08008d08 	.word	0x08008d08
 8003e74:	20000004 	.word	0x20000004
 8003e78:	20000008 	.word	0x20000008

08003e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d007      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x32>
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x38>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 80b4 	bne.w	8004010 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eaa:	60bb      	str	r3, [r7, #8]
      break;
 8003eac:	e0b3      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eae:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003eb0:	60bb      	str	r3, [r7, #8]
      break;
 8003eb2:	e0b0      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb4:	4b5a      	ldr	r3, [pc, #360]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ebc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ebe:	4b58      	ldr	r3, [pc, #352]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d04a      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eca:	4b55      	ldr	r3, [pc, #340]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	099b      	lsrs	r3, r3, #6
 8003ed0:	f04f 0400 	mov.w	r4, #0
 8003ed4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	ea03 0501 	and.w	r5, r3, r1
 8003ee0:	ea04 0602 	and.w	r6, r4, r2
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	f04f 0400 	mov.w	r4, #0
 8003ef0:	0154      	lsls	r4, r2, #5
 8003ef2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ef6:	014b      	lsls	r3, r1, #5
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4622      	mov	r2, r4
 8003efc:	1b49      	subs	r1, r1, r5
 8003efe:	eb62 0206 	sbc.w	r2, r2, r6
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	f04f 0400 	mov.w	r4, #0
 8003f0a:	0194      	lsls	r4, r2, #6
 8003f0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f10:	018b      	lsls	r3, r1, #6
 8003f12:	1a5b      	subs	r3, r3, r1
 8003f14:	eb64 0402 	sbc.w	r4, r4, r2
 8003f18:	f04f 0100 	mov.w	r1, #0
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	00e2      	lsls	r2, r4, #3
 8003f22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f26:	00d9      	lsls	r1, r3, #3
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4614      	mov	r4, r2
 8003f2c:	195b      	adds	r3, r3, r5
 8003f2e:	eb44 0406 	adc.w	r4, r4, r6
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	0262      	lsls	r2, r4, #9
 8003f3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f40:	0259      	lsls	r1, r3, #9
 8003f42:	460b      	mov	r3, r1
 8003f44:	4614      	mov	r4, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	4621      	mov	r1, r4
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f04f 0400 	mov.w	r4, #0
 8003f50:	461a      	mov	r2, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	f7fc f9cc 	bl	80002f0 <__aeabi_uldivmod>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e049      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f60:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	f04f 0400 	mov.w	r4, #0
 8003f6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	ea03 0501 	and.w	r5, r3, r1
 8003f76:	ea04 0602 	and.w	r6, r4, r2
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	f04f 0400 	mov.w	r4, #0
 8003f86:	0154      	lsls	r4, r2, #5
 8003f88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f8c:	014b      	lsls	r3, r1, #5
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4622      	mov	r2, r4
 8003f92:	1b49      	subs	r1, r1, r5
 8003f94:	eb62 0206 	sbc.w	r2, r2, r6
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	f04f 0400 	mov.w	r4, #0
 8003fa0:	0194      	lsls	r4, r2, #6
 8003fa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fa6:	018b      	lsls	r3, r1, #6
 8003fa8:	1a5b      	subs	r3, r3, r1
 8003faa:	eb64 0402 	sbc.w	r4, r4, r2
 8003fae:	f04f 0100 	mov.w	r1, #0
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	00e2      	lsls	r2, r4, #3
 8003fb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fbc:	00d9      	lsls	r1, r3, #3
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	195b      	adds	r3, r3, r5
 8003fc4:	eb44 0406 	adc.w	r4, r4, r6
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	02a2      	lsls	r2, r4, #10
 8003fd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003fd6:	0299      	lsls	r1, r3, #10
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4614      	mov	r4, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	4621      	mov	r1, r4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f04f 0400 	mov.w	r4, #0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4623      	mov	r3, r4
 8003fea:	f7fc f981 	bl	80002f0 <__aeabi_uldivmod>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	3301      	adds	r3, #1
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	60bb      	str	r3, [r7, #8]
      break;
 800400e:	e002      	b.n	8004016 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004012:	60bb      	str	r3, [r7, #8]
      break;
 8004014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004016:	68bb      	ldr	r3, [r7, #8]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	00f42400 	.word	0x00f42400
 8004028:	007a1200 	.word	0x007a1200

0800402c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCC_GetHCLKFreq+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000004 	.word	0x20000004

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004048:	f7ff fff0 	bl	800402c <HAL_RCC_GetHCLKFreq>
 800404c:	4601      	mov	r1, r0
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	0a9b      	lsrs	r3, r3, #10
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4a03      	ldr	r2, [pc, #12]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405a:	5cd3      	ldrb	r3, [r2, r3]
 800405c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40023800 	.word	0x40023800
 8004068:	08008d18 	.word	0x08008d18

0800406c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004070:	f7ff ffdc 	bl	800402c <HAL_RCC_GetHCLKFreq>
 8004074:	4601      	mov	r1, r0
 8004076:	4b05      	ldr	r3, [pc, #20]	; (800408c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	0b5b      	lsrs	r3, r3, #13
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	4a03      	ldr	r2, [pc, #12]	; (8004090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004082:	5cd3      	ldrb	r3, [r2, r3]
 8004084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004088:	4618      	mov	r0, r3
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40023800 	.word	0x40023800
 8004090:	08008d18 	.word	0x08008d18

08004094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d012      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040bc:	4b69      	ldr	r3, [pc, #420]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a68      	ldr	r2, [pc, #416]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040c6:	6093      	str	r3, [r2, #8]
 80040c8:	4b66      	ldr	r3, [pc, #408]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	4964      	ldr	r1, [pc, #400]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040de:	2301      	movs	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ee:	4b5d      	ldr	r3, [pc, #372]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	4959      	ldr	r1, [pc, #356]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800410c:	d101      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800410e:	2301      	movs	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800411a:	2301      	movs	r3, #1
 800411c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d017      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800412a:	4b4e      	ldr	r3, [pc, #312]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004130:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	494a      	ldr	r1, [pc, #296]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004148:	d101      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800414a:	2301      	movs	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004166:	2301      	movs	r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 808b 	beq.w	800428e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004178:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	6413      	str	r3, [r2, #64]	; 0x40
 8004184:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004190:	4b35      	ldr	r3, [pc, #212]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a34      	ldr	r2, [pc, #208]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fd fdb0 	bl	8001d00 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a4:	f7fd fdac 	bl	8001d00 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e38d      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041b6:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041c2:	4b28      	ldr	r3, [pc, #160]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d035      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d02e      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041e0:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ea:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041f6:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004202:	4a18      	ldr	r2, [pc, #96]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004208:	4b16      	ldr	r3, [pc, #88]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d114      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd fd74 	bl	8001d00 <HAL_GetTick>
 8004218:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421a:	e00a      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421c:	f7fd fd70 	bl	8001d00 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e34f      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0ee      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424a:	d111      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800425a:	400b      	ands	r3, r1
 800425c:	4901      	ldr	r1, [pc, #4]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
 8004262:	e00b      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004264:	40023800 	.word	0x40023800
 8004268:	40007000 	.word	0x40007000
 800426c:	0ffffcff 	.word	0x0ffffcff
 8004270:	4bb3      	ldr	r3, [pc, #716]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	4ab2      	ldr	r2, [pc, #712]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004276:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800427a:	6093      	str	r3, [r2, #8]
 800427c:	4bb0      	ldr	r3, [pc, #704]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800427e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004288:	49ad      	ldr	r1, [pc, #692]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800428a:	4313      	orrs	r3, r2
 800428c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	d010      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800429a:	4ba9      	ldr	r3, [pc, #676]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800429c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a0:	4aa7      	ldr	r2, [pc, #668]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042aa:	4ba5      	ldr	r3, [pc, #660]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	49a2      	ldr	r1, [pc, #648]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c8:	4b9d      	ldr	r3, [pc, #628]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d6:	499a      	ldr	r1, [pc, #616]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ea:	4b95      	ldr	r3, [pc, #596]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f8:	4991      	ldr	r1, [pc, #580]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800430c:	4b8c      	ldr	r3, [pc, #560]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431a:	4989      	ldr	r1, [pc, #548]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800432e:	4b84      	ldr	r3, [pc, #528]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4980      	ldr	r1, [pc, #512]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004350:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f023 0203 	bic.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	4978      	ldr	r1, [pc, #480]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004372:	4b73      	ldr	r3, [pc, #460]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f023 020c 	bic.w	r2, r3, #12
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004380:	496f      	ldr	r1, [pc, #444]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004394:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	4967      	ldr	r1, [pc, #412]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043b6:	4b62      	ldr	r3, [pc, #392]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	495e      	ldr	r1, [pc, #376]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043d8:	4b59      	ldr	r3, [pc, #356]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	4956      	ldr	r1, [pc, #344]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043fa:	4b51      	ldr	r3, [pc, #324]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	494d      	ldr	r1, [pc, #308]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800441c:	4b48      	ldr	r3, [pc, #288]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	4945      	ldr	r1, [pc, #276]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800443e:	4b40      	ldr	r3, [pc, #256]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444c:	493c      	ldr	r1, [pc, #240]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004460:	4b37      	ldr	r3, [pc, #220]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800446e:	4934      	ldr	r1, [pc, #208]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d011      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004482:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004490:	492b      	ldr	r1, [pc, #172]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a0:	d101      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044c2:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d0:	491b      	ldr	r1, [pc, #108]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00b      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044f4:	4912      	ldr	r1, [pc, #72]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004508:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004518:	4909      	ldr	r1, [pc, #36]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00f      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800452e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004532:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453c:	e002      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	4985      	ldr	r1, [pc, #532]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004558:	4b80      	ldr	r3, [pc, #512]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800455a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800455e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004568:	497c      	ldr	r1, [pc, #496]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d005      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800457e:	f040 80d6 	bne.w	800472e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004582:	4b76      	ldr	r3, [pc, #472]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a75      	ldr	r2, [pc, #468]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004588:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800458c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458e:	f7fd fbb7 	bl	8001d00 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004596:	f7fd fbb3 	bl	8001d00 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b64      	cmp	r3, #100	; 0x64
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e194      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a8:	4b6c      	ldr	r3, [pc, #432]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d021      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d11d      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045c8:	4b64      	ldr	r3, [pc, #400]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80045ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045d6:	4b61      	ldr	r3, [pc, #388]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80045d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045dc:	0e1b      	lsrs	r3, r3, #24
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	019a      	lsls	r2, r3, #6
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	431a      	orrs	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	061b      	lsls	r3, r3, #24
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	071b      	lsls	r3, r3, #28
 80045fc:	4957      	ldr	r1, [pc, #348]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02e      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462e:	d129      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004630:	4b4a      	ldr	r3, [pc, #296]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	f003 0303 	and.w	r3, r3, #3
 800463c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800463e:	4b47      	ldr	r3, [pc, #284]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004644:	0f1b      	lsrs	r3, r3, #28
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	019a      	lsls	r2, r3, #6
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	431a      	orrs	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	071b      	lsls	r3, r3, #28
 8004664:	493d      	ldr	r1, [pc, #244]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800466c:	4b3b      	ldr	r3, [pc, #236]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800466e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004672:	f023 021f 	bic.w	r2, r3, #31
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	3b01      	subs	r3, #1
 800467c:	4937      	ldr	r1, [pc, #220]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01d      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004690:	4b32      	ldr	r3, [pc, #200]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004696:	0e1b      	lsrs	r3, r3, #24
 8004698:	f003 030f 	and.w	r3, r3, #15
 800469c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800469e:	4b2f      	ldr	r3, [pc, #188]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a4:	0f1b      	lsrs	r3, r3, #28
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	019a      	lsls	r2, r3, #6
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	431a      	orrs	r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	431a      	orrs	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	071b      	lsls	r3, r3, #28
 80046c4:	4925      	ldr	r1, [pc, #148]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d011      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	019a      	lsls	r2, r3, #6
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	071b      	lsls	r3, r3, #28
 80046f4:	4919      	ldr	r1, [pc, #100]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046fc:	4b17      	ldr	r3, [pc, #92]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a16      	ldr	r2, [pc, #88]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004708:	f7fd fafa 	bl	8001d00 <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004710:	f7fd faf6 	bl	8001d00 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e0d7      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 80cd 	bne.w	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a08      	ldr	r2, [pc, #32]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004742:	f7fd fadd 	bl	8001d00 <HAL_GetTick>
 8004746:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004748:	e00a      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800474a:	f7fd fad9 	bl	8001d00 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b64      	cmp	r3, #100	; 0x64
 8004756:	d903      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e0ba      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800475c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004760:	4b5e      	ldr	r3, [pc, #376]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800476c:	d0ed      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800478a:	2b00      	cmp	r3, #0
 800478c:	d02e      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d12a      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004796:	4b51      	ldr	r3, [pc, #324]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047a4:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	0f1b      	lsrs	r3, r3, #28
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	019a      	lsls	r2, r3, #6
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	061b      	lsls	r3, r3, #24
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	071b      	lsls	r3, r3, #28
 80047ca:	4944      	ldr	r1, [pc, #272]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047d2:	4b42      	ldr	r3, [pc, #264]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80047d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	021b      	lsls	r3, r3, #8
 80047e4:	493d      	ldr	r1, [pc, #244]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d022      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004800:	d11d      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004802:	4b36      	ldr	r3, [pc, #216]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004808:	0e1b      	lsrs	r3, r3, #24
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004810:	4b32      	ldr	r3, [pc, #200]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	0f1b      	lsrs	r3, r3, #28
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	019a      	lsls	r2, r3, #6
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	431a      	orrs	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	061b      	lsls	r3, r3, #24
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	071b      	lsls	r3, r3, #28
 8004836:	4929      	ldr	r1, [pc, #164]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d028      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	0e1b      	lsrs	r3, r3, #24
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004858:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	0c1b      	lsrs	r3, r3, #16
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	019a      	lsls	r2, r3, #6
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	041b      	lsls	r3, r3, #16
 8004870:	431a      	orrs	r2, r3
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	071b      	lsls	r3, r3, #28
 800487e:	4917      	ldr	r1, [pc, #92]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004886:	4b15      	ldr	r3, [pc, #84]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	4911      	ldr	r1, [pc, #68]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0e      	ldr	r2, [pc, #56]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a8:	f7fd fa2a 	bl	8001d00 <HAL_GetTick>
 80048ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048b0:	f7fd fa26 	bl	8001d00 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e007      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ce:	d1ef      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3720      	adds	r7, #32
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800

080048e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e084      	b.n	80049fc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc fea1 	bl	8001654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004928:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004932:	d902      	bls.n	800493a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	e002      	b.n	8004940 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800493a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800493e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004948:	d007      	beq.n	800495a <HAL_SPI_Init+0x7a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004952:	d002      	beq.n	800495a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800496a:	d903      	bls.n	8004974 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
 8004972:	e002      	b.n	800497a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	ea42 0103 	orr.w	r1, r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0204 	and.w	r2, r3, #4
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	ea42 0103 	orr.w	r1, r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d110      	bne.n	8004a40 <HAL_SPI_Receive_DMA+0x3c>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a26:	d10b      	bne.n	8004a40 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f900 	bl	8004c3c <HAL_SPI_TransmitReceive_DMA>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	e0f3      	b.n	8004c28 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_SPI_Receive_DMA+0x4a>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e0ec      	b.n	8004c28 <HAL_SPI_Receive_DMA+0x224>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d002      	beq.n	8004a68 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a66:	e0da      	b.n	8004c1e <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Receive_DMA+0x70>
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a78:	e0d1      	b.n	8004c1e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004abe:	d107      	bne.n	8004ad0 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ace:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ade:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ae8:	d908      	bls.n	8004afc <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	e042      	b.n	8004b82 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b0a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b16:	d134      	bne.n	8004b82 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b26:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d111      	bne.n	8004b5c <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b46:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004b5a:	e012      	b.n	8004b82 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b6a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b86:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <HAL_SPI_Receive_DMA+0x22c>)
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <HAL_SPI_Receive_DMA+0x230>)
 8004b90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b96:	4a28      	ldr	r2, [pc, #160]	; (8004c38 <HAL_SPI_Receive_DMA+0x234>)
 8004b98:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	4619      	mov	r1, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f7fd fee4 	bl	8002988 <HAL_DMA_Start_IT>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00c      	beq.n	8004be0 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bca:	f043 0210 	orr.w	r2, r3, #16
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004bde:	e01e      	b.n	8004c1e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d007      	beq.n	8004bfe <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bfc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0220 	orr.w	r2, r2, #32
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	080050bd 	.word	0x080050bd
 8004c34:	08004fa5 	.word	0x08004fa5
 8004c38:	080050f5 	.word	0x080050f5

08004c3c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_SPI_TransmitReceive_DMA+0x20>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e16c      	b.n	8004f36 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c6a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004c72:	7dbb      	ldrb	r3, [r7, #22]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d00d      	beq.n	8004c94 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7e:	d106      	bne.n	8004c8e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004c88:	7dbb      	ldrb	r3, [r7, #22]
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d002      	beq.n	8004c94 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c92:	e14b      	b.n	8004f2c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004caa:	e13f      	b.n	8004f2c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d003      	beq.n	8004cc0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2205      	movs	r2, #5
 8004cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	887a      	ldrh	r2, [r7, #2]
 8004cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	887a      	ldrh	r2, [r7, #2]
 8004ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004d08:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d12:	d908      	bls.n	8004d26 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	e06f      	b.n	8004e06 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d34:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d40:	d126      	bne.n	8004d90 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10f      	bne.n	8004d6e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d5c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d6c:	e010      	b.n	8004d90 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d7c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d9a:	d134      	bne.n	8004e06 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004daa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d111      	bne.n	8004de0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004dde:	e012      	b.n	8004e06 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d108      	bne.n	8004e24 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	4a4a      	ldr	r2, [pc, #296]	; (8004f40 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1e:	4a49      	ldr	r2, [pc, #292]	; (8004f44 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004e20:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e22:	e007      	b.n	8004e34 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	4a47      	ldr	r2, [pc, #284]	; (8004f48 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	4a46      	ldr	r2, [pc, #280]	; (8004f4c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004e32:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	4a45      	ldr	r2, [pc, #276]	; (8004f50 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8004e3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e40:	2200      	movs	r2, #0
 8004e42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	4619      	mov	r1, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	461a      	mov	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f7fd fd93 	bl	8002988 <HAL_DMA_Start_IT>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00c      	beq.n	8004e82 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004e80:	e054      	b.n	8004f2c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	2200      	movs	r2, #0
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	2200      	movs	r2, #0
 8004eb0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	4619      	mov	r1, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f7fd fd5d 	bl	8002988 <HAL_DMA_Start_IT>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00c      	beq.n	8004eee <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed8:	f043 0210 	orr.w	r2, r3, #16
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004eec:	e01e      	b.n	8004f2c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d007      	beq.n	8004f0c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f0a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0220 	orr.w	r2, r2, #32
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0202 	orr.w	r2, r2, #2
 8004f2a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	080050bd 	.word	0x080050bd
 8004f44:	08004fa5 	.word	0x08004fa5
 8004f48:	080050d9 	.word	0x080050d9
 8004f4c:	0800502b 	.word	0x0800502b
 8004f50:	080050f5 	.word	0x080050f5

08004f54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb2:	f7fc fea5 	bl	8001d00 <HAL_GetTick>
 8004fb6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc6:	d02a      	beq.n	800501e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0220 	bic.w	r2, r2, #32
 8004fd6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0203 	bic.w	r2, r2, #3
 8004fe6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	2164      	movs	r1, #100	; 0x64
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f978 	bl	80052e2 <SPI_EndRxTransaction>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff ffba 	bl	8004f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800501c:	e002      	b.n	8005024 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7fc f8fc 	bl	800121c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005038:	f7fc fe62 	bl	8001d00 <HAL_GetTick>
 800503c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800504c:	d030      	beq.n	80050b0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0220 	bic.w	r2, r2, #32
 800505c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	2164      	movs	r1, #100	; 0x64
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f995 	bl	8005392 <SPI_EndRxTxTransaction>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0203 	bic.w	r2, r2, #3
 8005088:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff ff71 	bl	8004f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80050ae:	e002      	b.n	80050b6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff4f 	bl	8004f54 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff4c 	bl	8004f68 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff ff48 	bl	8004f7c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0203 	bic.w	r2, r2, #3
 8005110:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005116:	f043 0210 	orr.w	r2, r3, #16
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff ff32 	bl	8004f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005144:	e04c      	b.n	80051e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d048      	beq.n	80051e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800514e:	f7fc fdd7 	bl	8001d00 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d902      	bls.n	8005164 <SPI_WaitFlagStateUntilTimeout+0x30>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d13d      	bne.n	80051e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005172:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517c:	d111      	bne.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005186:	d004      	beq.n	8005192 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005190:	d107      	bne.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051aa:	d10f      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e00f      	b.n	8005200 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d1a3      	bne.n	8005146 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005216:	e057      	b.n	80052c8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800521e:	d106      	bne.n	800522e <SPI_WaitFifoStateUntilTimeout+0x26>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d103      	bne.n	800522e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d048      	beq.n	80052c8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005236:	f7fc fd63 	bl	8001d00 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d902      	bls.n	800524c <SPI_WaitFifoStateUntilTimeout+0x44>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d13d      	bne.n	80052c8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800525a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005264:	d111      	bne.n	800528a <SPI_WaitFifoStateUntilTimeout+0x82>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800526e:	d004      	beq.n	800527a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005278:	d107      	bne.n	800528a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005288:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005292:	d10f      	bne.n	80052b4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e008      	b.n	80052da <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4013      	ands	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d19f      	bne.n	8005218 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af02      	add	r7, sp, #8
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f6:	d111      	bne.n	800531c <SPI_EndRxTransaction+0x3a>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005300:	d004      	beq.n	800530c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530a:	d107      	bne.n	800531c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff ff04 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e023      	b.n	800538a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534a:	d11d      	bne.n	8005388 <SPI_EndRxTransaction+0xa6>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005354:	d004      	beq.n	8005360 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535e:	d113      	bne.n	8005388 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2200      	movs	r2, #0
 8005368:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff4b 	bl	8005208 <SPI_WaitFifoStateUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e000      	b.n	800538a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af02      	add	r7, sp, #8
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff ff2c 	bl	8005208 <SPI_WaitFifoStateUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ba:	f043 0220 	orr.w	r2, r3, #32
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e027      	b.n	8005416 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2200      	movs	r2, #0
 80053ce:	2180      	movs	r1, #128	; 0x80
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff feaf 	bl	8005134 <SPI_WaitFlagStateUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e014      	b.n	8005416 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff ff05 	bl	8005208 <SPI_WaitFifoStateUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005408:	f043 0220 	orr.w	r2, r3, #32
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e000      	b.n	8005416 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e01d      	b.n	800546c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fc f97d 	bl	8001744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3304      	adds	r3, #4
 800545a:	4619      	mov	r1, r3
 800545c:	4610      	mov	r0, r2
 800545e:	f000 fec9 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_TIM_Base_Start_IT+0x50>)
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d00b      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0x42>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a4:	d007      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00010007 	.word	0x00010007

080054c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6a1a      	ldr	r2, [r3, #32]
 80054e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10f      	bne.n	8005510 <HAL_TIM_Base_Stop_IT+0x48>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	f240 4344 	movw	r3, #1092	; 0x444
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_Base_Stop_IT+0x48>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e01d      	b.n	800556c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f815 	bl	8005574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	4619      	mov	r1, r3
 800555c:	4610      	mov	r0, r2
 800555e:	f000 fe49 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d841      	bhi.n	800561c <HAL_TIM_PWM_Start_IT+0x94>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <HAL_TIM_PWM_Start_IT+0x18>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	0800561d 	.word	0x0800561d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800561d 	.word	0x0800561d
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	0800561d 	.word	0x0800561d
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800560b 	.word	0x0800560b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0202 	orr.w	r2, r2, #2
 80055e2:	60da      	str	r2, [r3, #12]
      break;
 80055e4:	e01b      	b.n	800561e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0204 	orr.w	r2, r2, #4
 80055f4:	60da      	str	r2, [r3, #12]
      break;
 80055f6:	e012      	b.n	800561e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0208 	orr.w	r2, r2, #8
 8005606:	60da      	str	r2, [r3, #12]
      break;
 8005608:	e009      	b.n	800561e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0210 	orr.w	r2, r2, #16
 8005618:	60da      	str	r2, [r3, #12]
      break;
 800561a:	e000      	b.n	800561e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800561c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fb2e 	bl	8006c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a17      	ldr	r2, [pc, #92]	; (8005690 <HAL_TIM_PWM_Start_IT+0x108>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_TIM_PWM_Start_IT+0xb8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a16      	ldr	r2, [pc, #88]	; (8005694 <HAL_TIM_PWM_Start_IT+0x10c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_TIM_PWM_Start_IT+0xbc>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <HAL_TIM_PWM_Start_IT+0xbe>
 8005644:	2300      	movs	r3, #0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d007      	beq.n	800565a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005658:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <HAL_TIM_PWM_Start_IT+0x110>)
 8005662:	4013      	ands	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b06      	cmp	r3, #6
 800566a:	d00b      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0xfc>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005672:	d007      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400
 8005698:	00010007 	.word	0x00010007

0800569c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b0c      	cmp	r3, #12
 80056aa:	d841      	bhi.n	8005730 <HAL_TIM_PWM_Stop_IT+0x94>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <HAL_TIM_PWM_Stop_IT+0x18>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056e9 	.word	0x080056e9
 80056b8:	08005731 	.word	0x08005731
 80056bc:	08005731 	.word	0x08005731
 80056c0:	08005731 	.word	0x08005731
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	08005731 	.word	0x08005731
 80056cc:	08005731 	.word	0x08005731
 80056d0:	08005731 	.word	0x08005731
 80056d4:	0800570d 	.word	0x0800570d
 80056d8:	08005731 	.word	0x08005731
 80056dc:	08005731 	.word	0x08005731
 80056e0:	08005731 	.word	0x08005731
 80056e4:	0800571f 	.word	0x0800571f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0202 	bic.w	r2, r2, #2
 80056f6:	60da      	str	r2, [r3, #12]
      break;
 80056f8:	e01b      	b.n	8005732 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0204 	bic.w	r2, r2, #4
 8005708:	60da      	str	r2, [r3, #12]
      break;
 800570a:	e012      	b.n	8005732 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0208 	bic.w	r2, r2, #8
 800571a:	60da      	str	r2, [r3, #12]
      break;
 800571c:	e009      	b.n	8005732 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0210 	bic.w	r2, r2, #16
 800572c:	60da      	str	r2, [r3, #12]
      break;
 800572e:	e000      	b.n	8005732 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8005730:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	6839      	ldr	r1, [r7, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f001 faa4 	bl	8006c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_TIM_PWM_Stop_IT+0xb8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <HAL_TIM_PWM_Stop_IT+0x130>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d101      	bne.n	8005758 <HAL_TIM_PWM_Stop_IT+0xbc>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_TIM_PWM_Stop_IT+0xbe>
 8005758:	2300      	movs	r3, #0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d017      	beq.n	800578e <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	f241 1311 	movw	r3, #4369	; 0x1111
 8005768:	4013      	ands	r3, r2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10f      	bne.n	800578e <HAL_TIM_PWM_Stop_IT+0xf2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6a1a      	ldr	r2, [r3, #32]
 8005774:	f240 4344 	movw	r3, #1092	; 0x444
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d107      	bne.n	800578e <HAL_TIM_PWM_Stop_IT+0xf2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a1a      	ldr	r2, [r3, #32]
 8005794:	f241 1311 	movw	r3, #4369	; 0x1111
 8005798:	4013      	ands	r3, r2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10f      	bne.n	80057be <HAL_TIM_PWM_Stop_IT+0x122>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	f240 4344 	movw	r3, #1092	; 0x444
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d107      	bne.n	80057be <HAL_TIM_PWM_Stop_IT+0x122>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40010000 	.word	0x40010000
 80057cc:	40010400 	.word	0x40010400

080057d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e01d      	b.n	800581e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fc f802 	bl	8001800 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	4619      	mov	r1, r3
 800580e:	4610      	mov	r0, r2
 8005810:	f000 fcf0 	bl	80061f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d841      	bhi.n	80058bc <HAL_TIM_IC_Start_IT+0x94>
 8005838:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <HAL_TIM_IC_Start_IT+0x18>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005875 	.word	0x08005875
 8005844:	080058bd 	.word	0x080058bd
 8005848:	080058bd 	.word	0x080058bd
 800584c:	080058bd 	.word	0x080058bd
 8005850:	08005887 	.word	0x08005887
 8005854:	080058bd 	.word	0x080058bd
 8005858:	080058bd 	.word	0x080058bd
 800585c:	080058bd 	.word	0x080058bd
 8005860:	08005899 	.word	0x08005899
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058bd 	.word	0x080058bd
 800586c:	080058bd 	.word	0x080058bd
 8005870:	080058ab 	.word	0x080058ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0202 	orr.w	r2, r2, #2
 8005882:	60da      	str	r2, [r3, #12]
      break;
 8005884:	e01b      	b.n	80058be <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0204 	orr.w	r2, r2, #4
 8005894:	60da      	str	r2, [r3, #12]
      break;
 8005896:	e012      	b.n	80058be <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	60da      	str	r2, [r3, #12]
      break;
 80058a8:	e009      	b.n	80058be <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0210 	orr.w	r2, r2, #16
 80058b8:	60da      	str	r2, [r3, #12]
      break;
 80058ba:	e000      	b.n	80058be <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80058bc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2201      	movs	r2, #1
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 f9de 	bl	8006c88 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_TIM_IC_Start_IT+0xd8>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b06      	cmp	r3, #6
 80058dc:	d00b      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0xce>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e4:	d007      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	00010007 	.word	0x00010007

08005904 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e02d      	b.n	8005974 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f825 	bl	800597c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f000 fc55 	bl	80061f4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0208 	bic.w	r2, r2, #8
 8005958:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d122      	bne.n	80059ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0202 	mvn.w	r2, #2
 80059bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fb fd3e 	bl	8001454 <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fbec 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fbf3 	bl	80061cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0204 	mvn.w	r2, #4
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fb fd14 	bl	8001454 <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fbc2 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fbc9 	bl	80061cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d122      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d11b      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0208 	mvn.w	r2, #8
 8005a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2204      	movs	r2, #4
 8005a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb fcea 	bl	8001454 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fb98 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fb9f 	bl	80061cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d122      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d11b      	bne.n	8005ae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0210 	mvn.w	r2, #16
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2208      	movs	r2, #8
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fb fcc0 	bl	8001454 <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fb6e 	bl	80061b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fb75 	bl	80061cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d10e      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d107      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0201 	mvn.w	r2, #1
 8005b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fb fc8a 	bl	8001428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d10e      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b80      	cmp	r3, #128	; 0x80
 8005b2e:	d107      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 f9e0 	bl	8006f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4e:	d10e      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d107      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 f9d3 	bl	8006f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b40      	cmp	r3, #64	; 0x40
 8005b7a:	d10e      	bne.n	8005b9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b40      	cmp	r3, #64	; 0x40
 8005b88:	d107      	bne.n	8005b9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fb23 	bl	80061e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d10e      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d107      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f06f 0220 	mvn.w	r2, #32
 8005bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f993 	bl	8006eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e08a      	b.n	8005cfe <HAL_TIM_IC_ConfigChannel+0x130>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d11b      	bne.n	8005c36 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6819      	ldr	r1, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f000 fe77 	bl	8006900 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699a      	ldr	r2, [r3, #24]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 020c 	bic.w	r2, r2, #12
 8005c20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6999      	ldr	r1, [r3, #24]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	619a      	str	r2, [r3, #24]
 8005c34:	e05a      	b.n	8005cec <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d11c      	bne.n	8005c76 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f000 fefb 	bl	8006a46 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6999      	ldr	r1, [r3, #24]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	619a      	str	r2, [r3, #24]
 8005c74:	e03a      	b.n	8005cec <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f000 ff48 	bl	8006b20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69da      	ldr	r2, [r3, #28]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 020c 	bic.w	r2, r2, #12
 8005c9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69d9      	ldr	r1, [r3, #28]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	61da      	str	r2, [r3, #28]
 8005cb2:	e01b      	b.n	8005cec <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6819      	ldr	r1, [r3, #0]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f000 ff68 	bl	8006b98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69d9      	ldr	r1, [r3, #28]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	021a      	lsls	r2, r3, #8
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e105      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b14      	cmp	r3, #20
 8005d36:	f200 80f0 	bhi.w	8005f1a <HAL_TIM_PWM_ConfigChannel+0x212>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d95 	.word	0x08005d95
 8005d44:	08005f1b 	.word	0x08005f1b
 8005d48:	08005f1b 	.word	0x08005f1b
 8005d4c:	08005f1b 	.word	0x08005f1b
 8005d50:	08005dd5 	.word	0x08005dd5
 8005d54:	08005f1b 	.word	0x08005f1b
 8005d58:	08005f1b 	.word	0x08005f1b
 8005d5c:	08005f1b 	.word	0x08005f1b
 8005d60:	08005e17 	.word	0x08005e17
 8005d64:	08005f1b 	.word	0x08005f1b
 8005d68:	08005f1b 	.word	0x08005f1b
 8005d6c:	08005f1b 	.word	0x08005f1b
 8005d70:	08005e57 	.word	0x08005e57
 8005d74:	08005f1b 	.word	0x08005f1b
 8005d78:	08005f1b 	.word	0x08005f1b
 8005d7c:	08005f1b 	.word	0x08005f1b
 8005d80:	08005e99 	.word	0x08005e99
 8005d84:	08005f1b 	.word	0x08005f1b
 8005d88:	08005f1b 	.word	0x08005f1b
 8005d8c:	08005f1b 	.word	0x08005f1b
 8005d90:	08005ed9 	.word	0x08005ed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 faca 	bl	8006334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0208 	orr.w	r2, r2, #8
 8005dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6999      	ldr	r1, [r3, #24]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	619a      	str	r2, [r3, #24]
      break;
 8005dd2:	e0a3      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fb1c 	bl	8006418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	021a      	lsls	r2, r3, #8
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	619a      	str	r2, [r3, #24]
      break;
 8005e14:	e082      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fb73 	bl	8006508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0208 	orr.w	r2, r2, #8
 8005e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0204 	bic.w	r2, r2, #4
 8005e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69d9      	ldr	r1, [r3, #28]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	61da      	str	r2, [r3, #28]
      break;
 8005e54:	e062      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fbc9 	bl	80065f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69d9      	ldr	r1, [r3, #28]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	021a      	lsls	r2, r3, #8
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	61da      	str	r2, [r3, #28]
      break;
 8005e96:	e041      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fc00 	bl	80066a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0208 	orr.w	r2, r2, #8
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0204 	bic.w	r2, r2, #4
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ed6:	e021      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fc32 	bl	8006748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f18:	e000      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005f1a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop

08005f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIM_ConfigClockSource+0x18>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e0a6      	b.n	800609e <HAL_TIM_ConfigClockSource+0x166>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4b4f      	ldr	r3, [pc, #316]	; (80060a8 <HAL_TIM_ConfigClockSource+0x170>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d067      	beq.n	8006058 <HAL_TIM_ConfigClockSource+0x120>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d80b      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x6c>
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d073      	beq.n	8006078 <HAL_TIM_ConfigClockSource+0x140>
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d802      	bhi.n	8005f9a <HAL_TIM_ConfigClockSource+0x62>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d06f      	beq.n	8006078 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005f98:	e078      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f9a:	2b20      	cmp	r3, #32
 8005f9c:	d06c      	beq.n	8006078 <HAL_TIM_ConfigClockSource+0x140>
 8005f9e:	2b30      	cmp	r3, #48	; 0x30
 8005fa0:	d06a      	beq.n	8006078 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005fa2:	e073      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005fa4:	2b70      	cmp	r3, #112	; 0x70
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_TIM_ConfigClockSource+0x8c>
 8005fa8:	2b70      	cmp	r3, #112	; 0x70
 8005faa:	d804      	bhi.n	8005fb6 <HAL_TIM_ConfigClockSource+0x7e>
 8005fac:	2b50      	cmp	r3, #80	; 0x50
 8005fae:	d033      	beq.n	8006018 <HAL_TIM_ConfigClockSource+0xe0>
 8005fb0:	2b60      	cmp	r3, #96	; 0x60
 8005fb2:	d041      	beq.n	8006038 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005fb4:	e06a      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fba:	d066      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x152>
 8005fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc0:	d017      	beq.n	8005ff2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005fc2:	e063      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f000 fe38 	bl	8006c48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fe6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	609a      	str	r2, [r3, #8]
      break;
 8005ff0:	e04c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6818      	ldr	r0, [r3, #0]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6899      	ldr	r1, [r3, #8]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f000 fe21 	bl	8006c48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006014:	609a      	str	r2, [r3, #8]
      break;
 8006016:	e039      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	6859      	ldr	r1, [r3, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	461a      	mov	r2, r3
 8006026:	f000 fcdf 	bl	80069e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2150      	movs	r1, #80	; 0x50
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fdee 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006036:	e029      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	461a      	mov	r2, r3
 8006046:	f000 fd3b 	bl	8006ac0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2160      	movs	r1, #96	; 0x60
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fdde 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006056:	e019      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	6859      	ldr	r1, [r3, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	461a      	mov	r2, r3
 8006066:	f000 fcbf 	bl	80069e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2140      	movs	r1, #64	; 0x40
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fdce 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006076:	e009      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f000 fdc5 	bl	8006c12 <TIM_ITRx_SetConfig>
      break;
 8006088:	e000      	b.n	800608c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800608a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	fffeff88 	.word	0xfffeff88

080060ac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e031      	b.n	8006128 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fb8a 	bl	80067f0 <TIM_SlaveTimer_SetConfig>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e018      	b.n	8006128 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006114:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b0c      	cmp	r3, #12
 8006142:	d831      	bhi.n	80061a8 <HAL_TIM_ReadCapturedValue+0x78>
 8006144:	a201      	add	r2, pc, #4	; (adr r2, 800614c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614a:	bf00      	nop
 800614c:	08006181 	.word	0x08006181
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061a9 	.word	0x080061a9
 8006158:	080061a9 	.word	0x080061a9
 800615c:	0800618b 	.word	0x0800618b
 8006160:	080061a9 	.word	0x080061a9
 8006164:	080061a9 	.word	0x080061a9
 8006168:	080061a9 	.word	0x080061a9
 800616c:	08006195 	.word	0x08006195
 8006170:	080061a9 	.word	0x080061a9
 8006174:	080061a9 	.word	0x080061a9
 8006178:	080061a9 	.word	0x080061a9
 800617c:	0800619f 	.word	0x0800619f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006186:	60fb      	str	r3, [r7, #12]

      break;
 8006188:	e00f      	b.n	80061aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	60fb      	str	r3, [r7, #12]

      break;
 8006192:	e00a      	b.n	80061aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619a:	60fb      	str	r3, [r7, #12]

      break;
 800619c:	e005      	b.n	80061aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	60fb      	str	r3, [r7, #12]

      break;
 80061a6:	e000      	b.n	80061aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80061a8:	bf00      	nop
  }

  return tmpreg;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a40      	ldr	r2, [pc, #256]	; (8006308 <TIM_Base_SetConfig+0x114>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006212:	d00f      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a3d      	ldr	r2, [pc, #244]	; (800630c <TIM_Base_SetConfig+0x118>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00b      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a3c      	ldr	r2, [pc, #240]	; (8006310 <TIM_Base_SetConfig+0x11c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d007      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a3b      	ldr	r2, [pc, #236]	; (8006314 <TIM_Base_SetConfig+0x120>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d003      	beq.n	8006234 <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a3a      	ldr	r2, [pc, #232]	; (8006318 <TIM_Base_SetConfig+0x124>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d108      	bne.n	8006246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a2f      	ldr	r2, [pc, #188]	; (8006308 <TIM_Base_SetConfig+0x114>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d02b      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006254:	d027      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2c      	ldr	r2, [pc, #176]	; (800630c <TIM_Base_SetConfig+0x118>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d023      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2b      	ldr	r2, [pc, #172]	; (8006310 <TIM_Base_SetConfig+0x11c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01f      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2a      	ldr	r2, [pc, #168]	; (8006314 <TIM_Base_SetConfig+0x120>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d01b      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a29      	ldr	r2, [pc, #164]	; (8006318 <TIM_Base_SetConfig+0x124>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d017      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a28      	ldr	r2, [pc, #160]	; (800631c <TIM_Base_SetConfig+0x128>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a27      	ldr	r2, [pc, #156]	; (8006320 <TIM_Base_SetConfig+0x12c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00f      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a26      	ldr	r2, [pc, #152]	; (8006324 <TIM_Base_SetConfig+0x130>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00b      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a25      	ldr	r2, [pc, #148]	; (8006328 <TIM_Base_SetConfig+0x134>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d007      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a24      	ldr	r2, [pc, #144]	; (800632c <TIM_Base_SetConfig+0x138>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a23      	ldr	r2, [pc, #140]	; (8006330 <TIM_Base_SetConfig+0x13c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d108      	bne.n	80062b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <TIM_Base_SetConfig+0x114>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <TIM_Base_SetConfig+0xf8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <TIM_Base_SetConfig+0x124>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d103      	bne.n	80062f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	615a      	str	r2, [r3, #20]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400
 800631c:	40014000 	.word	0x40014000
 8006320:	40014400 	.word	0x40014400
 8006324:	40014800 	.word	0x40014800
 8006328:	40001800 	.word	0x40001800
 800632c:	40001c00 	.word	0x40001c00
 8006330:	40002000 	.word	0x40002000

08006334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0201 	bic.w	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4b2b      	ldr	r3, [pc, #172]	; (800640c <TIM_OC1_SetConfig+0xd8>)
 8006360:	4013      	ands	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f023 0302 	bic.w	r3, r3, #2
 800637c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a21      	ldr	r2, [pc, #132]	; (8006410 <TIM_OC1_SetConfig+0xdc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_OC1_SetConfig+0x64>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a20      	ldr	r2, [pc, #128]	; (8006414 <TIM_OC1_SetConfig+0xe0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d10c      	bne.n	80063b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f023 0308 	bic.w	r3, r3, #8
 800639e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 0304 	bic.w	r3, r3, #4
 80063b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a16      	ldr	r2, [pc, #88]	; (8006410 <TIM_OC1_SetConfig+0xdc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d003      	beq.n	80063c2 <TIM_OC1_SetConfig+0x8e>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a15      	ldr	r2, [pc, #84]	; (8006414 <TIM_OC1_SetConfig+0xe0>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d111      	bne.n	80063e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	621a      	str	r2, [r3, #32]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	fffeff8f 	.word	0xfffeff8f
 8006410:	40010000 	.word	0x40010000
 8006414:	40010400 	.word	0x40010400

08006418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f023 0210 	bic.w	r2, r3, #16
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4b2e      	ldr	r3, [pc, #184]	; (80064fc <TIM_OC2_SetConfig+0xe4>)
 8006444:	4013      	ands	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	021b      	lsls	r3, r3, #8
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f023 0320 	bic.w	r3, r3, #32
 8006462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a23      	ldr	r2, [pc, #140]	; (8006500 <TIM_OC2_SetConfig+0xe8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC2_SetConfig+0x68>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a22      	ldr	r2, [pc, #136]	; (8006504 <TIM_OC2_SetConfig+0xec>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10d      	bne.n	800649c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a18      	ldr	r2, [pc, #96]	; (8006500 <TIM_OC2_SetConfig+0xe8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_OC2_SetConfig+0x94>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <TIM_OC2_SetConfig+0xec>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d113      	bne.n	80064d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	feff8fff 	.word	0xfeff8fff
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400

08006508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <TIM_OC3_SetConfig+0xe0>)
 8006534:	4013      	ands	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0303 	bic.w	r3, r3, #3
 800653e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a22      	ldr	r2, [pc, #136]	; (80065ec <TIM_OC3_SetConfig+0xe4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d003      	beq.n	800656e <TIM_OC3_SetConfig+0x66>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <TIM_OC3_SetConfig+0xe8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d10d      	bne.n	800658a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a17      	ldr	r2, [pc, #92]	; (80065ec <TIM_OC3_SetConfig+0xe4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d003      	beq.n	800659a <TIM_OC3_SetConfig+0x92>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <TIM_OC3_SetConfig+0xe8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d113      	bne.n	80065c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	fffeff8f 	.word	0xfffeff8f
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40010400 	.word	0x40010400

080065f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <TIM_OC4_SetConfig+0xa4>)
 8006620:	4013      	ands	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800663e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	031b      	lsls	r3, r3, #12
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a13      	ldr	r2, [pc, #76]	; (800669c <TIM_OC4_SetConfig+0xa8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC4_SetConfig+0x68>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a12      	ldr	r2, [pc, #72]	; (80066a0 <TIM_OC4_SetConfig+0xac>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d109      	bne.n	8006670 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	019b      	lsls	r3, r3, #6
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	621a      	str	r2, [r3, #32]
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	feff8fff 	.word	0xfeff8fff
 800669c:	40010000 	.word	0x40010000
 80066a0:	40010400 	.word	0x40010400

080066a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4b1b      	ldr	r3, [pc, #108]	; (800673c <TIM_OC5_SetConfig+0x98>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a12      	ldr	r2, [pc, #72]	; (8006740 <TIM_OC5_SetConfig+0x9c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_OC5_SetConfig+0x5e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a11      	ldr	r2, [pc, #68]	; (8006744 <TIM_OC5_SetConfig+0xa0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d109      	bne.n	8006716 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006708:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	621a      	str	r2, [r3, #32]
}
 8006730:	bf00      	nop
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	fffeff8f 	.word	0xfffeff8f
 8006740:	40010000 	.word	0x40010000
 8006744:	40010400 	.word	0x40010400

08006748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <TIM_OC6_SetConfig+0x9c>)
 8006774:	4013      	ands	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800678a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	051b      	lsls	r3, r3, #20
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <TIM_OC6_SetConfig+0xa0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_OC6_SetConfig+0x60>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a12      	ldr	r2, [pc, #72]	; (80067ec <TIM_OC6_SetConfig+0xa4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d109      	bne.n	80067bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	621a      	str	r2, [r3, #32]
}
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	feff8fff 	.word	0xfeff8fff
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400

080067f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006808:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4b39      	ldr	r3, [pc, #228]	; (80068fc <TIM_SlaveTimer_SetConfig+0x10c>)
 8006818:	4013      	ands	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b30      	cmp	r3, #48	; 0x30
 8006834:	d05c      	beq.n	80068f0 <TIM_SlaveTimer_SetConfig+0x100>
 8006836:	2b30      	cmp	r3, #48	; 0x30
 8006838:	d806      	bhi.n	8006848 <TIM_SlaveTimer_SetConfig+0x58>
 800683a:	2b10      	cmp	r3, #16
 800683c:	d058      	beq.n	80068f0 <TIM_SlaveTimer_SetConfig+0x100>
 800683e:	2b20      	cmp	r3, #32
 8006840:	d056      	beq.n	80068f0 <TIM_SlaveTimer_SetConfig+0x100>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d054      	beq.n	80068f0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006846:	e054      	b.n	80068f2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006848:	2b50      	cmp	r3, #80	; 0x50
 800684a:	d03d      	beq.n	80068c8 <TIM_SlaveTimer_SetConfig+0xd8>
 800684c:	2b50      	cmp	r3, #80	; 0x50
 800684e:	d802      	bhi.n	8006856 <TIM_SlaveTimer_SetConfig+0x66>
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d010      	beq.n	8006876 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006854:	e04d      	b.n	80068f2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006856:	2b60      	cmp	r3, #96	; 0x60
 8006858:	d040      	beq.n	80068dc <TIM_SlaveTimer_SetConfig+0xec>
 800685a:	2b70      	cmp	r3, #112	; 0x70
 800685c:	d000      	beq.n	8006860 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800685e:	e048      	b.n	80068f2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68d9      	ldr	r1, [r3, #12]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f000 f9ea 	bl	8006c48 <TIM_ETR_SetConfig>
      break;
 8006874:	e03d      	b.n	80068f2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b05      	cmp	r3, #5
 800687c:	d101      	bne.n	8006882 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e038      	b.n	80068f4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6a1a      	ldr	r2, [r3, #32]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	621a      	str	r2, [r3, #32]
      break;
 80068c6:	e014      	b.n	80068f2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6899      	ldr	r1, [r3, #8]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	461a      	mov	r2, r3
 80068d6:	f000 f887 	bl	80069e8 <TIM_TI1_ConfigInputStage>
      break;
 80068da:	e00a      	b.n	80068f2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	6899      	ldr	r1, [r3, #8]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	461a      	mov	r2, r3
 80068ea:	f000 f8e9 	bl	8006ac0 <TIM_TI2_ConfigInputStage>
      break;
 80068ee:	e000      	b.n	80068f2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80068f0:	bf00      	nop
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	fffefff8 	.word	0xfffefff8

08006900 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a28      	ldr	r2, [pc, #160]	; (80069cc <TIM_TI1_SetConfig+0xcc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d01b      	beq.n	8006966 <TIM_TI1_SetConfig+0x66>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006934:	d017      	beq.n	8006966 <TIM_TI1_SetConfig+0x66>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <TIM_TI1_SetConfig+0xd0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d013      	beq.n	8006966 <TIM_TI1_SetConfig+0x66>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4a24      	ldr	r2, [pc, #144]	; (80069d4 <TIM_TI1_SetConfig+0xd4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00f      	beq.n	8006966 <TIM_TI1_SetConfig+0x66>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <TIM_TI1_SetConfig+0xd8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00b      	beq.n	8006966 <TIM_TI1_SetConfig+0x66>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4a22      	ldr	r2, [pc, #136]	; (80069dc <TIM_TI1_SetConfig+0xdc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d007      	beq.n	8006966 <TIM_TI1_SetConfig+0x66>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a21      	ldr	r2, [pc, #132]	; (80069e0 <TIM_TI1_SetConfig+0xe0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <TIM_TI1_SetConfig+0x66>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a20      	ldr	r2, [pc, #128]	; (80069e4 <TIM_TI1_SetConfig+0xe4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d101      	bne.n	800696a <TIM_TI1_SetConfig+0x6a>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <TIM_TI1_SetConfig+0x6c>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e003      	b.n	800698a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	b2db      	uxtb	r3, r3
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f023 030a 	bic.w	r3, r3, #10
 80069a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f003 030a 	and.w	r3, r3, #10
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800
 80069d8:	40000c00 	.word	0x40000c00
 80069dc:	40010400 	.word	0x40010400
 80069e0:	40014000 	.word	0x40014000
 80069e4:	40001800 	.word	0x40001800

080069e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 030a 	bic.w	r3, r3, #10
 8006a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	f023 0210 	bic.w	r2, r3, #16
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	021b      	lsls	r3, r3, #8
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	031b      	lsls	r3, r3, #12
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f023 0210 	bic.w	r2, r3, #16
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	031b      	lsls	r3, r3, #12
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006afc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	621a      	str	r2, [r3, #32]
}
 8006b14:	bf00      	nop
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 0303 	bic.w	r3, r3, #3
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	031b      	lsls	r3, r3, #12
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006bea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	031b      	lsls	r3, r3, #12
 8006bf0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	621a      	str	r2, [r3, #32]
}
 8006c06:	bf00      	nop
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f043 0307 	orr.w	r3, r3, #7
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	609a      	str	r2, [r3, #8]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	021a      	lsls	r2, r3, #8
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1a      	ldr	r2, [r3, #32]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	401a      	ands	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a1a      	ldr	r2, [r3, #32]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e06d      	b.n	8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a30      	ldr	r2, [pc, #192]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2f      	ldr	r2, [pc, #188]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d108      	bne.n	8006d32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a20      	ldr	r2, [pc, #128]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d022      	beq.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5e:	d01d      	beq.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d018      	beq.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d013      	beq.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00e      	beq.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d009      	beq.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a16      	ldr	r2, [pc, #88]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a15      	ldr	r2, [pc, #84]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d10c      	bne.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006da2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	40010000 	.word	0x40010000
 8006dd8:	40010400 	.word	0x40010400
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40014000 	.word	0x40014000
 8006dec:	40001800 	.word	0x40001800

08006df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e065      	b.n	8006ed8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d115      	bne.n	8006ec6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	051b      	lsls	r3, r3, #20
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400

08006eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e040      	b.n	8006fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fa fd00 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2224      	movs	r2, #36	; 0x24
 8006f54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fac4 	bl	80074f4 <UART_SetConfig>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e022      	b.n	8006fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fd62 	bl	8007a48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fde9 	bl	8007b8c <UART_CheckIdleState>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b08a      	sub	sp, #40	; 0x28
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d17f      	bne.n	80070dc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_UART_Transmit+0x24>
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e078      	b.n	80070de <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_UART_Transmit+0x36>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e071      	b.n	80070de <HAL_UART_Transmit+0x11a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2221      	movs	r2, #33	; 0x21
 800700c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800700e:	f7fa fe77 	bl	8001d00 <HAL_GetTick>
 8007012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702c:	d108      	bne.n	8007040 <HAL_UART_Transmit+0x7c>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007036:	2300      	movs	r3, #0
 8007038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	e003      	b.n	8007048 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007044:	2300      	movs	r3, #0
 8007046:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007050:	e02c      	b.n	80070ac <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2200      	movs	r2, #0
 800705a:	2180      	movs	r1, #128	; 0x80
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fdda 	bl	8007c16 <UART_WaitOnFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e038      	b.n	80070de <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007080:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	3302      	adds	r3, #2
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	e007      	b.n	800709a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	781a      	ldrb	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	3301      	adds	r3, #1
 8007098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1cc      	bne.n	8007052 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2200      	movs	r2, #0
 80070c0:	2140      	movs	r1, #64	; 0x40
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 fda7 	bl	8007c16 <UART_WaitOnFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e005      	b.n	80070de <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	e000      	b.n	80070de <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80070dc:	2302      	movs	r3, #2
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3720      	adds	r7, #32
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	f040 808a 	bne.w	8007214 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_UART_Receive_IT+0x24>
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e082      	b.n	8007216 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_UART_Receive_IT+0x36>
 800711a:	2302      	movs	r3, #2
 800711c:	e07b      	b.n	8007216 <HAL_UART_Receive_IT+0x12e>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	88fa      	ldrh	r2, [r7, #6]
 8007138:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d10e      	bne.n	800716a <HAL_UART_Receive_IT+0x82>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d105      	bne.n	8007160 <HAL_UART_Receive_IT+0x78>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f240 12ff 	movw	r2, #511	; 0x1ff
 800715a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800715e:	e02d      	b.n	80071bc <HAL_UART_Receive_IT+0xd4>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	22ff      	movs	r2, #255	; 0xff
 8007164:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007168:	e028      	b.n	80071bc <HAL_UART_Receive_IT+0xd4>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10d      	bne.n	800718e <HAL_UART_Receive_IT+0xa6>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <HAL_UART_Receive_IT+0x9c>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	22ff      	movs	r2, #255	; 0xff
 800717e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007182:	e01b      	b.n	80071bc <HAL_UART_Receive_IT+0xd4>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	227f      	movs	r2, #127	; 0x7f
 8007188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800718c:	e016      	b.n	80071bc <HAL_UART_Receive_IT+0xd4>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007196:	d10d      	bne.n	80071b4 <HAL_UART_Receive_IT+0xcc>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_UART_Receive_IT+0xc2>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	227f      	movs	r2, #127	; 0x7f
 80071a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071a8:	e008      	b.n	80071bc <HAL_UART_Receive_IT+0xd4>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	223f      	movs	r2, #63	; 0x3f
 80071ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071b2:	e003      	b.n	80071bc <HAL_UART_Receive_IT+0xd4>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2222      	movs	r2, #34	; 0x22
 80071c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0201 	orr.w	r2, r2, #1
 80071d6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e0:	d107      	bne.n	80071f2 <HAL_UART_Receive_IT+0x10a>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a0d      	ldr	r2, [pc, #52]	; (8007224 <HAL_UART_Receive_IT+0x13c>)
 80071ee:	661a      	str	r2, [r3, #96]	; 0x60
 80071f0:	e002      	b.n	80071f8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a0c      	ldr	r2, [pc, #48]	; (8007228 <HAL_UART_Receive_IT+0x140>)
 80071f6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800720e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	e000      	b.n	8007216 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
  }
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	08007e51 	.word	0x08007e51
 8007228:	08007dab 	.word	0x08007dab

0800722c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007252:	4013      	ands	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d113      	bne.n	8007284 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00e      	beq.n	8007284 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d009      	beq.n	8007284 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 8114 	beq.w	80074a2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	4798      	blx	r3
      }
      return;
 8007282:	e10e      	b.n	80074a2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 80d6 	beq.w	8007438 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d105      	bne.n	80072a2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 80cb 	beq.w	8007438 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00e      	beq.n	80072ca <HAL_UART_IRQHandler+0x9e>
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2201      	movs	r2, #1
 80072bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072c2:	f043 0201 	orr.w	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00e      	beq.n	80072f2 <HAL_UART_IRQHandler+0xc6>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2202      	movs	r2, #2
 80072e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ea:	f043 0204 	orr.w	r2, r3, #4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00e      	beq.n	800731a <HAL_UART_IRQHandler+0xee>
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2204      	movs	r2, #4
 800730c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007312:	f043 0202 	orr.w	r2, r3, #2
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d013      	beq.n	800734c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2208      	movs	r2, #8
 800733e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007344:	f043 0208 	orr.w	r2, r3, #8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00f      	beq.n	8007376 <HAL_UART_IRQHandler+0x14a>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800736e:	f043 0220 	orr.w	r2, r3, #32
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 8093 	beq.w	80074a6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00c      	beq.n	80073a4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b4:	2b40      	cmp	r3, #64	; 0x40
 80073b6:	d004      	beq.n	80073c2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d031      	beq.n	8007426 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fca2 	bl	8007d0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d123      	bne.n	800741e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d013      	beq.n	8007416 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f2:	4a30      	ldr	r2, [pc, #192]	; (80074b4 <HAL_UART_IRQHandler+0x288>)
 80073f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fb fb94 	bl	8002b28 <HAL_DMA_Abort_IT>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	e00e      	b.n	8007434 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f858 	bl	80074cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	e00a      	b.n	8007434 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f854 	bl	80074cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	e006      	b.n	8007434 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f850 	bl	80074cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007432:	e038      	b.n	80074a6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	bf00      	nop
    return;
 8007436:	e036      	b.n	80074a6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00d      	beq.n	800745e <HAL_UART_IRQHandler+0x232>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f842 	bl	80074e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800745c:	e026      	b.n	80074ac <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746e:	2b00      	cmp	r3, #0
 8007470:	d008      	beq.n	8007484 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007476:	2b00      	cmp	r3, #0
 8007478:	d017      	beq.n	80074aa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
    }
    return;
 8007482:	e012      	b.n	80074aa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00e      	beq.n	80074ac <HAL_UART_IRQHandler+0x280>
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d009      	beq.n	80074ac <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fc6d 	bl	8007d78 <UART_EndTransmit_IT>
    return;
 800749e:	bf00      	nop
 80074a0:	e004      	b.n	80074ac <HAL_UART_IRQHandler+0x280>
      return;
 80074a2:	bf00      	nop
 80074a4:	e002      	b.n	80074ac <HAL_UART_IRQHandler+0x280>
    return;
 80074a6:	bf00      	nop
 80074a8:	e000      	b.n	80074ac <HAL_UART_IRQHandler+0x280>
    return;
 80074aa:	bf00      	nop
  }

}
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	08007d4d 	.word	0x08007d4d

080074b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4bb1      	ldr	r3, [pc, #708]	; (80077e8 <UART_SetConfig+0x2f4>)
 8007524:	4013      	ands	r3, r2
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	6939      	ldr	r1, [r7, #16]
 800752c:	430b      	orrs	r3, r1
 800752e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	430a      	orrs	r2, r1
 8007568:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a9f      	ldr	r2, [pc, #636]	; (80077ec <UART_SetConfig+0x2f8>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d121      	bne.n	80075b8 <UART_SetConfig+0xc4>
 8007574:	4b9e      	ldr	r3, [pc, #632]	; (80077f0 <UART_SetConfig+0x2fc>)
 8007576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	2b03      	cmp	r3, #3
 8007580:	d816      	bhi.n	80075b0 <UART_SetConfig+0xbc>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <UART_SetConfig+0x94>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	08007599 	.word	0x08007599
 800758c:	080075a5 	.word	0x080075a5
 8007590:	0800759f 	.word	0x0800759f
 8007594:	080075ab 	.word	0x080075ab
 8007598:	2301      	movs	r3, #1
 800759a:	77fb      	strb	r3, [r7, #31]
 800759c:	e151      	b.n	8007842 <UART_SetConfig+0x34e>
 800759e:	2302      	movs	r3, #2
 80075a0:	77fb      	strb	r3, [r7, #31]
 80075a2:	e14e      	b.n	8007842 <UART_SetConfig+0x34e>
 80075a4:	2304      	movs	r3, #4
 80075a6:	77fb      	strb	r3, [r7, #31]
 80075a8:	e14b      	b.n	8007842 <UART_SetConfig+0x34e>
 80075aa:	2308      	movs	r3, #8
 80075ac:	77fb      	strb	r3, [r7, #31]
 80075ae:	e148      	b.n	8007842 <UART_SetConfig+0x34e>
 80075b0:	2310      	movs	r3, #16
 80075b2:	77fb      	strb	r3, [r7, #31]
 80075b4:	bf00      	nop
 80075b6:	e144      	b.n	8007842 <UART_SetConfig+0x34e>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a8d      	ldr	r2, [pc, #564]	; (80077f4 <UART_SetConfig+0x300>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d134      	bne.n	800762c <UART_SetConfig+0x138>
 80075c2:	4b8b      	ldr	r3, [pc, #556]	; (80077f0 <UART_SetConfig+0x2fc>)
 80075c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c8:	f003 030c 	and.w	r3, r3, #12
 80075cc:	2b0c      	cmp	r3, #12
 80075ce:	d829      	bhi.n	8007624 <UART_SetConfig+0x130>
 80075d0:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <UART_SetConfig+0xe4>)
 80075d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d6:	bf00      	nop
 80075d8:	0800760d 	.word	0x0800760d
 80075dc:	08007625 	.word	0x08007625
 80075e0:	08007625 	.word	0x08007625
 80075e4:	08007625 	.word	0x08007625
 80075e8:	08007619 	.word	0x08007619
 80075ec:	08007625 	.word	0x08007625
 80075f0:	08007625 	.word	0x08007625
 80075f4:	08007625 	.word	0x08007625
 80075f8:	08007613 	.word	0x08007613
 80075fc:	08007625 	.word	0x08007625
 8007600:	08007625 	.word	0x08007625
 8007604:	08007625 	.word	0x08007625
 8007608:	0800761f 	.word	0x0800761f
 800760c:	2300      	movs	r3, #0
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e117      	b.n	8007842 <UART_SetConfig+0x34e>
 8007612:	2302      	movs	r3, #2
 8007614:	77fb      	strb	r3, [r7, #31]
 8007616:	e114      	b.n	8007842 <UART_SetConfig+0x34e>
 8007618:	2304      	movs	r3, #4
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e111      	b.n	8007842 <UART_SetConfig+0x34e>
 800761e:	2308      	movs	r3, #8
 8007620:	77fb      	strb	r3, [r7, #31]
 8007622:	e10e      	b.n	8007842 <UART_SetConfig+0x34e>
 8007624:	2310      	movs	r3, #16
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	bf00      	nop
 800762a:	e10a      	b.n	8007842 <UART_SetConfig+0x34e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a71      	ldr	r2, [pc, #452]	; (80077f8 <UART_SetConfig+0x304>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d120      	bne.n	8007678 <UART_SetConfig+0x184>
 8007636:	4b6e      	ldr	r3, [pc, #440]	; (80077f0 <UART_SetConfig+0x2fc>)
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007640:	2b10      	cmp	r3, #16
 8007642:	d00f      	beq.n	8007664 <UART_SetConfig+0x170>
 8007644:	2b10      	cmp	r3, #16
 8007646:	d802      	bhi.n	800764e <UART_SetConfig+0x15a>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <UART_SetConfig+0x164>
 800764c:	e010      	b.n	8007670 <UART_SetConfig+0x17c>
 800764e:	2b20      	cmp	r3, #32
 8007650:	d005      	beq.n	800765e <UART_SetConfig+0x16a>
 8007652:	2b30      	cmp	r3, #48	; 0x30
 8007654:	d009      	beq.n	800766a <UART_SetConfig+0x176>
 8007656:	e00b      	b.n	8007670 <UART_SetConfig+0x17c>
 8007658:	2300      	movs	r3, #0
 800765a:	77fb      	strb	r3, [r7, #31]
 800765c:	e0f1      	b.n	8007842 <UART_SetConfig+0x34e>
 800765e:	2302      	movs	r3, #2
 8007660:	77fb      	strb	r3, [r7, #31]
 8007662:	e0ee      	b.n	8007842 <UART_SetConfig+0x34e>
 8007664:	2304      	movs	r3, #4
 8007666:	77fb      	strb	r3, [r7, #31]
 8007668:	e0eb      	b.n	8007842 <UART_SetConfig+0x34e>
 800766a:	2308      	movs	r3, #8
 800766c:	77fb      	strb	r3, [r7, #31]
 800766e:	e0e8      	b.n	8007842 <UART_SetConfig+0x34e>
 8007670:	2310      	movs	r3, #16
 8007672:	77fb      	strb	r3, [r7, #31]
 8007674:	bf00      	nop
 8007676:	e0e4      	b.n	8007842 <UART_SetConfig+0x34e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a5f      	ldr	r2, [pc, #380]	; (80077fc <UART_SetConfig+0x308>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d120      	bne.n	80076c4 <UART_SetConfig+0x1d0>
 8007682:	4b5b      	ldr	r3, [pc, #364]	; (80077f0 <UART_SetConfig+0x2fc>)
 8007684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007688:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d00f      	beq.n	80076b0 <UART_SetConfig+0x1bc>
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d802      	bhi.n	800769a <UART_SetConfig+0x1a6>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d005      	beq.n	80076a4 <UART_SetConfig+0x1b0>
 8007698:	e010      	b.n	80076bc <UART_SetConfig+0x1c8>
 800769a:	2b80      	cmp	r3, #128	; 0x80
 800769c:	d005      	beq.n	80076aa <UART_SetConfig+0x1b6>
 800769e:	2bc0      	cmp	r3, #192	; 0xc0
 80076a0:	d009      	beq.n	80076b6 <UART_SetConfig+0x1c2>
 80076a2:	e00b      	b.n	80076bc <UART_SetConfig+0x1c8>
 80076a4:	2300      	movs	r3, #0
 80076a6:	77fb      	strb	r3, [r7, #31]
 80076a8:	e0cb      	b.n	8007842 <UART_SetConfig+0x34e>
 80076aa:	2302      	movs	r3, #2
 80076ac:	77fb      	strb	r3, [r7, #31]
 80076ae:	e0c8      	b.n	8007842 <UART_SetConfig+0x34e>
 80076b0:	2304      	movs	r3, #4
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e0c5      	b.n	8007842 <UART_SetConfig+0x34e>
 80076b6:	2308      	movs	r3, #8
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e0c2      	b.n	8007842 <UART_SetConfig+0x34e>
 80076bc:	2310      	movs	r3, #16
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	bf00      	nop
 80076c2:	e0be      	b.n	8007842 <UART_SetConfig+0x34e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a4d      	ldr	r2, [pc, #308]	; (8007800 <UART_SetConfig+0x30c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d124      	bne.n	8007718 <UART_SetConfig+0x224>
 80076ce:	4b48      	ldr	r3, [pc, #288]	; (80077f0 <UART_SetConfig+0x2fc>)
 80076d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076dc:	d012      	beq.n	8007704 <UART_SetConfig+0x210>
 80076de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e2:	d802      	bhi.n	80076ea <UART_SetConfig+0x1f6>
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <UART_SetConfig+0x204>
 80076e8:	e012      	b.n	8007710 <UART_SetConfig+0x21c>
 80076ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076ee:	d006      	beq.n	80076fe <UART_SetConfig+0x20a>
 80076f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076f4:	d009      	beq.n	800770a <UART_SetConfig+0x216>
 80076f6:	e00b      	b.n	8007710 <UART_SetConfig+0x21c>
 80076f8:	2300      	movs	r3, #0
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e0a1      	b.n	8007842 <UART_SetConfig+0x34e>
 80076fe:	2302      	movs	r3, #2
 8007700:	77fb      	strb	r3, [r7, #31]
 8007702:	e09e      	b.n	8007842 <UART_SetConfig+0x34e>
 8007704:	2304      	movs	r3, #4
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e09b      	b.n	8007842 <UART_SetConfig+0x34e>
 800770a:	2308      	movs	r3, #8
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e098      	b.n	8007842 <UART_SetConfig+0x34e>
 8007710:	2310      	movs	r3, #16
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	bf00      	nop
 8007716:	e094      	b.n	8007842 <UART_SetConfig+0x34e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a39      	ldr	r2, [pc, #228]	; (8007804 <UART_SetConfig+0x310>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d124      	bne.n	800776c <UART_SetConfig+0x278>
 8007722:	4b33      	ldr	r3, [pc, #204]	; (80077f0 <UART_SetConfig+0x2fc>)
 8007724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007728:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800772c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007730:	d012      	beq.n	8007758 <UART_SetConfig+0x264>
 8007732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007736:	d802      	bhi.n	800773e <UART_SetConfig+0x24a>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d007      	beq.n	800774c <UART_SetConfig+0x258>
 800773c:	e012      	b.n	8007764 <UART_SetConfig+0x270>
 800773e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007742:	d006      	beq.n	8007752 <UART_SetConfig+0x25e>
 8007744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007748:	d009      	beq.n	800775e <UART_SetConfig+0x26a>
 800774a:	e00b      	b.n	8007764 <UART_SetConfig+0x270>
 800774c:	2301      	movs	r3, #1
 800774e:	77fb      	strb	r3, [r7, #31]
 8007750:	e077      	b.n	8007842 <UART_SetConfig+0x34e>
 8007752:	2302      	movs	r3, #2
 8007754:	77fb      	strb	r3, [r7, #31]
 8007756:	e074      	b.n	8007842 <UART_SetConfig+0x34e>
 8007758:	2304      	movs	r3, #4
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e071      	b.n	8007842 <UART_SetConfig+0x34e>
 800775e:	2308      	movs	r3, #8
 8007760:	77fb      	strb	r3, [r7, #31]
 8007762:	e06e      	b.n	8007842 <UART_SetConfig+0x34e>
 8007764:	2310      	movs	r3, #16
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	bf00      	nop
 800776a:	e06a      	b.n	8007842 <UART_SetConfig+0x34e>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a25      	ldr	r2, [pc, #148]	; (8007808 <UART_SetConfig+0x314>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d124      	bne.n	80077c0 <UART_SetConfig+0x2cc>
 8007776:	4b1e      	ldr	r3, [pc, #120]	; (80077f0 <UART_SetConfig+0x2fc>)
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007784:	d012      	beq.n	80077ac <UART_SetConfig+0x2b8>
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778a:	d802      	bhi.n	8007792 <UART_SetConfig+0x29e>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <UART_SetConfig+0x2ac>
 8007790:	e012      	b.n	80077b8 <UART_SetConfig+0x2c4>
 8007792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007796:	d006      	beq.n	80077a6 <UART_SetConfig+0x2b2>
 8007798:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800779c:	d009      	beq.n	80077b2 <UART_SetConfig+0x2be>
 800779e:	e00b      	b.n	80077b8 <UART_SetConfig+0x2c4>
 80077a0:	2300      	movs	r3, #0
 80077a2:	77fb      	strb	r3, [r7, #31]
 80077a4:	e04d      	b.n	8007842 <UART_SetConfig+0x34e>
 80077a6:	2302      	movs	r3, #2
 80077a8:	77fb      	strb	r3, [r7, #31]
 80077aa:	e04a      	b.n	8007842 <UART_SetConfig+0x34e>
 80077ac:	2304      	movs	r3, #4
 80077ae:	77fb      	strb	r3, [r7, #31]
 80077b0:	e047      	b.n	8007842 <UART_SetConfig+0x34e>
 80077b2:	2308      	movs	r3, #8
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e044      	b.n	8007842 <UART_SetConfig+0x34e>
 80077b8:	2310      	movs	r3, #16
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	bf00      	nop
 80077be:	e040      	b.n	8007842 <UART_SetConfig+0x34e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a11      	ldr	r2, [pc, #68]	; (800780c <UART_SetConfig+0x318>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d139      	bne.n	800783e <UART_SetConfig+0x34a>
 80077ca:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <UART_SetConfig+0x2fc>)
 80077cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80077d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077d8:	d027      	beq.n	800782a <UART_SetConfig+0x336>
 80077da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077de:	d817      	bhi.n	8007810 <UART_SetConfig+0x31c>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01c      	beq.n	800781e <UART_SetConfig+0x32a>
 80077e4:	e027      	b.n	8007836 <UART_SetConfig+0x342>
 80077e6:	bf00      	nop
 80077e8:	efff69f3 	.word	0xefff69f3
 80077ec:	40011000 	.word	0x40011000
 80077f0:	40023800 	.word	0x40023800
 80077f4:	40004400 	.word	0x40004400
 80077f8:	40004800 	.word	0x40004800
 80077fc:	40004c00 	.word	0x40004c00
 8007800:	40005000 	.word	0x40005000
 8007804:	40011400 	.word	0x40011400
 8007808:	40007800 	.word	0x40007800
 800780c:	40007c00 	.word	0x40007c00
 8007810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007814:	d006      	beq.n	8007824 <UART_SetConfig+0x330>
 8007816:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800781a:	d009      	beq.n	8007830 <UART_SetConfig+0x33c>
 800781c:	e00b      	b.n	8007836 <UART_SetConfig+0x342>
 800781e:	2300      	movs	r3, #0
 8007820:	77fb      	strb	r3, [r7, #31]
 8007822:	e00e      	b.n	8007842 <UART_SetConfig+0x34e>
 8007824:	2302      	movs	r3, #2
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e00b      	b.n	8007842 <UART_SetConfig+0x34e>
 800782a:	2304      	movs	r3, #4
 800782c:	77fb      	strb	r3, [r7, #31]
 800782e:	e008      	b.n	8007842 <UART_SetConfig+0x34e>
 8007830:	2308      	movs	r3, #8
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e005      	b.n	8007842 <UART_SetConfig+0x34e>
 8007836:	2310      	movs	r3, #16
 8007838:	77fb      	strb	r3, [r7, #31]
 800783a:	bf00      	nop
 800783c:	e001      	b.n	8007842 <UART_SetConfig+0x34e>
 800783e:	2310      	movs	r3, #16
 8007840:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784a:	d17f      	bne.n	800794c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800784c:	7ffb      	ldrb	r3, [r7, #31]
 800784e:	2b08      	cmp	r3, #8
 8007850:	d85c      	bhi.n	800790c <UART_SetConfig+0x418>
 8007852:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0x364>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	0800787d 	.word	0x0800787d
 800785c:	0800789d 	.word	0x0800789d
 8007860:	080078bd 	.word	0x080078bd
 8007864:	0800790d 	.word	0x0800790d
 8007868:	080078d5 	.word	0x080078d5
 800786c:	0800790d 	.word	0x0800790d
 8007870:	0800790d 	.word	0x0800790d
 8007874:	0800790d 	.word	0x0800790d
 8007878:	080078f5 	.word	0x080078f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787c:	f7fc fbe2 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8007880:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	005a      	lsls	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	441a      	add	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	fbb2 f3f3 	udiv	r3, r2, r3
 8007896:	b29b      	uxth	r3, r3
 8007898:	61bb      	str	r3, [r7, #24]
        break;
 800789a:	e03a      	b.n	8007912 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800789c:	f7fc fbe6 	bl	800406c <HAL_RCC_GetPCLK2Freq>
 80078a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	005a      	lsls	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	085b      	lsrs	r3, r3, #1
 80078ac:	441a      	add	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	61bb      	str	r3, [r7, #24]
        break;
 80078ba:	e02a      	b.n	8007912 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	085a      	lsrs	r2, r3, #1
 80078c2:	4b5f      	ldr	r3, [pc, #380]	; (8007a40 <UART_SetConfig+0x54c>)
 80078c4:	4413      	add	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	6852      	ldr	r2, [r2, #4]
 80078ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	61bb      	str	r3, [r7, #24]
        break;
 80078d2:	e01e      	b.n	8007912 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078d4:	f7fc fad2 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 80078d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	005a      	lsls	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	61bb      	str	r3, [r7, #24]
        break;
 80078f2:	e00e      	b.n	8007912 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	085b      	lsrs	r3, r3, #1
 80078fa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	fbb2 f3f3 	udiv	r3, r2, r3
 8007906:	b29b      	uxth	r3, r3
 8007908:	61bb      	str	r3, [r7, #24]
        break;
 800790a:	e002      	b.n	8007912 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	75fb      	strb	r3, [r7, #23]
        break;
 8007910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b0f      	cmp	r3, #15
 8007916:	d916      	bls.n	8007946 <UART_SetConfig+0x452>
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791e:	d212      	bcs.n	8007946 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	b29b      	uxth	r3, r3
 8007924:	f023 030f 	bic.w	r3, r3, #15
 8007928:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	b29b      	uxth	r3, r3
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	b29a      	uxth	r2, r3
 8007936:	897b      	ldrh	r3, [r7, #10]
 8007938:	4313      	orrs	r3, r2
 800793a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	897a      	ldrh	r2, [r7, #10]
 8007942:	60da      	str	r2, [r3, #12]
 8007944:	e070      	b.n	8007a28 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
 800794a:	e06d      	b.n	8007a28 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800794c:	7ffb      	ldrb	r3, [r7, #31]
 800794e:	2b08      	cmp	r3, #8
 8007950:	d859      	bhi.n	8007a06 <UART_SetConfig+0x512>
 8007952:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <UART_SetConfig+0x464>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	0800797d 	.word	0x0800797d
 800795c:	0800799b 	.word	0x0800799b
 8007960:	080079b9 	.word	0x080079b9
 8007964:	08007a07 	.word	0x08007a07
 8007968:	080079d1 	.word	0x080079d1
 800796c:	08007a07 	.word	0x08007a07
 8007970:	08007a07 	.word	0x08007a07
 8007974:	08007a07 	.word	0x08007a07
 8007978:	080079ef 	.word	0x080079ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800797c:	f7fc fb62 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8007980:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	085a      	lsrs	r2, r3, #1
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	441a      	add	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	b29b      	uxth	r3, r3
 8007996:	61bb      	str	r3, [r7, #24]
        break;
 8007998:	e038      	b.n	8007a0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800799a:	f7fc fb67 	bl	800406c <HAL_RCC_GetPCLK2Freq>
 800799e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	085a      	lsrs	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	441a      	add	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	61bb      	str	r3, [r7, #24]
        break;
 80079b6:	e029      	b.n	8007a0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	085a      	lsrs	r2, r3, #1
 80079be:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <UART_SetConfig+0x550>)
 80079c0:	4413      	add	r3, r2
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6852      	ldr	r2, [r2, #4]
 80079c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	61bb      	str	r3, [r7, #24]
        break;
 80079ce:	e01d      	b.n	8007a0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079d0:	f7fc fa54 	bl	8003e7c <HAL_RCC_GetSysClockFreq>
 80079d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	085a      	lsrs	r2, r3, #1
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	441a      	add	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	61bb      	str	r3, [r7, #24]
        break;
 80079ec:	e00e      	b.n	8007a0c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	085b      	lsrs	r3, r3, #1
 80079f4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	61bb      	str	r3, [r7, #24]
        break;
 8007a04:	e002      	b.n	8007a0c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
        break;
 8007a0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b0f      	cmp	r3, #15
 8007a10:	d908      	bls.n	8007a24 <UART_SetConfig+0x530>
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a18:	d204      	bcs.n	8007a24 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	60da      	str	r2, [r3, #12]
 8007a22:	e001      	b.n	8007a28 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	01e84800 	.word	0x01e84800
 8007a44:	00f42400 	.word	0x00f42400

08007a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	f003 0304 	and.w	r3, r3, #4
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01a      	beq.n	8007b5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b46:	d10a      	bne.n	8007b5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
  }
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b9a:	f7fa f8b1 	bl	8001d00 <HAL_GetTick>
 8007b9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d10e      	bne.n	8007bcc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f82a 	bl	8007c16 <UART_WaitOnFlagUntilTimeout>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e020      	b.n	8007c0e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d10e      	bne.n	8007bf8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f814 	bl	8007c16 <UART_WaitOnFlagUntilTimeout>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e00a      	b.n	8007c0e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2220      	movs	r2, #32
 8007c02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	603b      	str	r3, [r7, #0]
 8007c22:	4613      	mov	r3, r2
 8007c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c26:	e05d      	b.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d059      	beq.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c30:	f7fa f866 	bl	8001d00 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d302      	bcc.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d11b      	bne.n	8007c7e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0201 	bic.w	r2, r2, #1
 8007c64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e042      	b.n	8007d04 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d02b      	beq.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9a:	d123      	bne.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ca4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007cb4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0201 	bic.w	r2, r2, #1
 8007cc4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e00f      	b.n	8007d04 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4013      	ands	r3, r2
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	bf0c      	ite	eq
 8007cf4:	2301      	moveq	r3, #1
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d092      	beq.n	8007c28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d22:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f7ff fbae 	bl	80074cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d70:	bf00      	nop
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff fb8b 	bl	80074b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007db8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dbe:	2b22      	cmp	r3, #34	; 0x22
 8007dc0:	d13a      	bne.n	8007e38 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007dca:	89bb      	ldrh	r3, [r7, #12]
 8007dcc:	b2d9      	uxtb	r1, r3
 8007dce:	89fb      	ldrh	r3, [r7, #14]
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	400a      	ands	r2, r1
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d121      	bne.n	8007e48 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e12:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7f9 f919 	bl	8001068 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e36:	e007      	b.n	8007e48 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0208 	orr.w	r2, r2, #8
 8007e46:	619a      	str	r2, [r3, #24]
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e5e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e64:	2b22      	cmp	r3, #34	; 0x22
 8007e66:	d13a      	bne.n	8007ede <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e74:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e76:	89ba      	ldrh	r2, [r7, #12]
 8007e78:	89fb      	ldrh	r3, [r7, #14]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	1c9a      	adds	r2, r3, #2
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	3b01      	subs	r3, #1
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d121      	bne.n	8007eee <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007eb8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7f9 f8c6 	bl	8001068 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007edc:	e007      	b.n	8007eee <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f042 0208 	orr.w	r2, r2, #8
 8007eec:	619a      	str	r2, [r3, #24]
}
 8007eee:	bf00      	nop
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ef8:	b084      	sub	sp, #16
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	f107 001c 	add.w	r0, r7, #28
 8007f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d120      	bne.n	8007f52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	4b20      	ldr	r3, [pc, #128]	; (8007fa4 <USB_CoreInit+0xac>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d105      	bne.n	8007f46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa52 	bl	80083f0 <USB_CoreReset>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]
 8007f50:	e010      	b.n	8007f74 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa46 	bl	80083f0 <USB_CoreReset>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d10b      	bne.n	8007f92 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f043 0206 	orr.w	r2, r3, #6
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f043 0220 	orr.w	r2, r3, #32
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f9e:	b004      	add	sp, #16
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	ffbdffbf 	.word	0xffbdffbf

08007fa8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f023 0201 	bic.w	r2, r3, #1
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fe2:	78fb      	ldrb	r3, [r7, #3]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d106      	bne.n	8007ff6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	60da      	str	r2, [r3, #12]
 8007ff4:	e00b      	b.n	800800e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	60da      	str	r2, [r3, #12]
 8008008:	e001      	b.n	800800e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e003      	b.n	8008016 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800800e:	2032      	movs	r0, #50	; 0x32
 8008010:	f7f9 fe82 	bl	8001d18 <HAL_Delay>

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008020:	b084      	sub	sp, #16
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800802e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800803a:	2300      	movs	r3, #0
 800803c:	613b      	str	r3, [r7, #16]
 800803e:	e009      	b.n	8008054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3340      	adds	r3, #64	; 0x40
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	3301      	adds	r3, #1
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2b0e      	cmp	r3, #14
 8008058:	d9f2      	bls.n	8008040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800805a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d11c      	bne.n	800809a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800806e:	f043 0302 	orr.w	r3, r3, #2
 8008072:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	e005      	b.n	80080a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080ac:	461a      	mov	r2, r3
 80080ae:	2300      	movs	r3, #0
 80080b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b8:	4619      	mov	r1, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c0:	461a      	mov	r2, r3
 80080c2:	680b      	ldr	r3, [r1, #0]
 80080c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d10c      	bne.n	80080e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d104      	bne.n	80080dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080d2:	2100      	movs	r1, #0
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f959 	bl	800838c <USB_SetDevSpeed>
 80080da:	e018      	b.n	800810e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080dc:	2101      	movs	r1, #1
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f954 	bl	800838c <USB_SetDevSpeed>
 80080e4:	e013      	b.n	800810e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d10c      	bne.n	8008106 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d104      	bne.n	80080fc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f949 	bl	800838c <USB_SetDevSpeed>
 80080fa:	e008      	b.n	800810e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080fc:	2101      	movs	r1, #1
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f944 	bl	800838c <USB_SetDevSpeed>
 8008104:	e003      	b.n	800810e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008106:	2103      	movs	r1, #3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f93f 	bl	800838c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800810e:	2110      	movs	r1, #16
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f8f3 	bl	80082fc <USB_FlushTxFifo>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f911 	bl	8008348 <USB_FlushRxFifo>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	461a      	mov	r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	461a      	mov	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800814e:	461a      	mov	r2, r3
 8008150:	2300      	movs	r3, #0
 8008152:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	e043      	b.n	80081e2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800816c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008170:	d118      	bne.n	80081a4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008184:	461a      	mov	r2, r3
 8008186:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	e013      	b.n	80081b6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819a:	461a      	mov	r2, r3
 800819c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	e008      	b.n	80081b6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	461a      	mov	r2, r3
 80081b2:	2300      	movs	r3, #0
 80081b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d4:	461a      	mov	r2, r3
 80081d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	3301      	adds	r3, #1
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d3b7      	bcc.n	800815a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ea:	2300      	movs	r3, #0
 80081ec:	613b      	str	r3, [r7, #16]
 80081ee:	e043      	b.n	8008278 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008206:	d118      	bne.n	800823a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10a      	bne.n	8008224 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821a:	461a      	mov	r2, r3
 800821c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	e013      	b.n	800824c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008230:	461a      	mov	r2, r3
 8008232:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	e008      	b.n	800824c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	461a      	mov	r2, r3
 8008248:	2300      	movs	r3, #0
 800824a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008258:	461a      	mov	r2, r3
 800825a:	2300      	movs	r3, #0
 800825c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	015a      	lsls	r2, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4413      	add	r3, r2
 8008266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826a:	461a      	mov	r2, r3
 800826c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	3301      	adds	r3, #1
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	429a      	cmp	r2, r3
 800827e:	d3b7      	bcc.n	80081f0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800828e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008292:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d105      	bne.n	80082b4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f043 0210 	orr.w	r2, r3, #16
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <USB_DevInit+0x2d4>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d005      	beq.n	80082d2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	f043 0208 	orr.w	r2, r3, #8
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d105      	bne.n	80082e4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	699a      	ldr	r2, [r3, #24]
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <USB_DevInit+0x2d8>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082f0:	b004      	add	sp, #16
 80082f2:	4770      	bx	lr
 80082f4:	803c3800 	.word	0x803c3800
 80082f8:	40000004 	.word	0x40000004

080082fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	019b      	lsls	r3, r3, #6
 800830e:	f043 0220 	orr.w	r2, r3, #32
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3301      	adds	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4a09      	ldr	r2, [pc, #36]	; (8008344 <USB_FlushTxFifo+0x48>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d901      	bls.n	8008328 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e006      	b.n	8008336 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d0f0      	beq.n	8008316 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	00030d40 	.word	0x00030d40

08008348 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2210      	movs	r2, #16
 8008358:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3301      	adds	r3, #1
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4a09      	ldr	r2, [pc, #36]	; (8008388 <USB_FlushRxFifo+0x40>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d901      	bls.n	800836c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e006      	b.n	800837a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	2b10      	cmp	r3, #16
 8008376:	d0f0      	beq.n	800835a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	00030d40 	.word	0x00030d40

0800838c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	68f9      	ldr	r1, [r7, #12]
 80083a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ac:	4313      	orrs	r3, r2
 80083ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083d8:	f043 0302 	orr.w	r3, r3, #2
 80083dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80083de:	2003      	movs	r0, #3
 80083e0:	f7f9 fc9a 	bl	8001d18 <HAL_Delay>

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4a13      	ldr	r2, [pc, #76]	; (8008454 <USB_CoreReset+0x64>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d901      	bls.n	800840e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e01b      	b.n	8008446 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	daf2      	bge.n	80083fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	f043 0201 	orr.w	r2, r3, #1
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3301      	adds	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4a09      	ldr	r2, [pc, #36]	; (8008454 <USB_CoreReset+0x64>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d901      	bls.n	8008438 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e006      	b.n	8008446 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b01      	cmp	r3, #1
 8008442:	d0f0      	beq.n	8008426 <USB_CoreReset+0x36>

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	00030d40 	.word	0x00030d40

08008458 <__errno>:
 8008458:	4b01      	ldr	r3, [pc, #4]	; (8008460 <__errno+0x8>)
 800845a:	6818      	ldr	r0, [r3, #0]
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000010 	.word	0x20000010

08008464 <__libc_init_array>:
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	4e0d      	ldr	r6, [pc, #52]	; (800849c <__libc_init_array+0x38>)
 8008468:	4c0d      	ldr	r4, [pc, #52]	; (80084a0 <__libc_init_array+0x3c>)
 800846a:	1ba4      	subs	r4, r4, r6
 800846c:	10a4      	asrs	r4, r4, #2
 800846e:	2500      	movs	r5, #0
 8008470:	42a5      	cmp	r5, r4
 8008472:	d109      	bne.n	8008488 <__libc_init_array+0x24>
 8008474:	4e0b      	ldr	r6, [pc, #44]	; (80084a4 <__libc_init_array+0x40>)
 8008476:	4c0c      	ldr	r4, [pc, #48]	; (80084a8 <__libc_init_array+0x44>)
 8008478:	f000 fc26 	bl	8008cc8 <_init>
 800847c:	1ba4      	subs	r4, r4, r6
 800847e:	10a4      	asrs	r4, r4, #2
 8008480:	2500      	movs	r5, #0
 8008482:	42a5      	cmp	r5, r4
 8008484:	d105      	bne.n	8008492 <__libc_init_array+0x2e>
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800848c:	4798      	blx	r3
 800848e:	3501      	adds	r5, #1
 8008490:	e7ee      	b.n	8008470 <__libc_init_array+0xc>
 8008492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008496:	4798      	blx	r3
 8008498:	3501      	adds	r5, #1
 800849a:	e7f2      	b.n	8008482 <__libc_init_array+0x1e>
 800849c:	08008d64 	.word	0x08008d64
 80084a0:	08008d64 	.word	0x08008d64
 80084a4:	08008d64 	.word	0x08008d64
 80084a8:	08008d68 	.word	0x08008d68

080084ac <memset>:
 80084ac:	4402      	add	r2, r0
 80084ae:	4603      	mov	r3, r0
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d100      	bne.n	80084b6 <memset+0xa>
 80084b4:	4770      	bx	lr
 80084b6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ba:	e7f9      	b.n	80084b0 <memset+0x4>

080084bc <siprintf>:
 80084bc:	b40e      	push	{r1, r2, r3}
 80084be:	b500      	push	{lr}
 80084c0:	b09c      	sub	sp, #112	; 0x70
 80084c2:	ab1d      	add	r3, sp, #116	; 0x74
 80084c4:	9002      	str	r0, [sp, #8]
 80084c6:	9006      	str	r0, [sp, #24]
 80084c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084cc:	4809      	ldr	r0, [pc, #36]	; (80084f4 <siprintf+0x38>)
 80084ce:	9107      	str	r1, [sp, #28]
 80084d0:	9104      	str	r1, [sp, #16]
 80084d2:	4909      	ldr	r1, [pc, #36]	; (80084f8 <siprintf+0x3c>)
 80084d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d8:	9105      	str	r1, [sp, #20]
 80084da:	6800      	ldr	r0, [r0, #0]
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	a902      	add	r1, sp, #8
 80084e0:	f000 f866 	bl	80085b0 <_svfiprintf_r>
 80084e4:	9b02      	ldr	r3, [sp, #8]
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
 80084ea:	b01c      	add	sp, #112	; 0x70
 80084ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80084f0:	b003      	add	sp, #12
 80084f2:	4770      	bx	lr
 80084f4:	20000010 	.word	0x20000010
 80084f8:	ffff0208 	.word	0xffff0208

080084fc <__ssputs_r>:
 80084fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008500:	688e      	ldr	r6, [r1, #8]
 8008502:	429e      	cmp	r6, r3
 8008504:	4682      	mov	sl, r0
 8008506:	460c      	mov	r4, r1
 8008508:	4690      	mov	r8, r2
 800850a:	4699      	mov	r9, r3
 800850c:	d837      	bhi.n	800857e <__ssputs_r+0x82>
 800850e:	898a      	ldrh	r2, [r1, #12]
 8008510:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008514:	d031      	beq.n	800857a <__ssputs_r+0x7e>
 8008516:	6825      	ldr	r5, [r4, #0]
 8008518:	6909      	ldr	r1, [r1, #16]
 800851a:	1a6f      	subs	r7, r5, r1
 800851c:	6965      	ldr	r5, [r4, #20]
 800851e:	2302      	movs	r3, #2
 8008520:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008524:	fb95 f5f3 	sdiv	r5, r5, r3
 8008528:	f109 0301 	add.w	r3, r9, #1
 800852c:	443b      	add	r3, r7
 800852e:	429d      	cmp	r5, r3
 8008530:	bf38      	it	cc
 8008532:	461d      	movcc	r5, r3
 8008534:	0553      	lsls	r3, r2, #21
 8008536:	d530      	bpl.n	800859a <__ssputs_r+0x9e>
 8008538:	4629      	mov	r1, r5
 800853a:	f000 fb2b 	bl	8008b94 <_malloc_r>
 800853e:	4606      	mov	r6, r0
 8008540:	b950      	cbnz	r0, 8008558 <__ssputs_r+0x5c>
 8008542:	230c      	movs	r3, #12
 8008544:	f8ca 3000 	str.w	r3, [sl]
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800854e:	81a3      	strh	r3, [r4, #12]
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008558:	463a      	mov	r2, r7
 800855a:	6921      	ldr	r1, [r4, #16]
 800855c:	f000 faa8 	bl	8008ab0 <memcpy>
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	6126      	str	r6, [r4, #16]
 800856e:	6165      	str	r5, [r4, #20]
 8008570:	443e      	add	r6, r7
 8008572:	1bed      	subs	r5, r5, r7
 8008574:	6026      	str	r6, [r4, #0]
 8008576:	60a5      	str	r5, [r4, #8]
 8008578:	464e      	mov	r6, r9
 800857a:	454e      	cmp	r6, r9
 800857c:	d900      	bls.n	8008580 <__ssputs_r+0x84>
 800857e:	464e      	mov	r6, r9
 8008580:	4632      	mov	r2, r6
 8008582:	4641      	mov	r1, r8
 8008584:	6820      	ldr	r0, [r4, #0]
 8008586:	f000 fa9e 	bl	8008ac6 <memmove>
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	1b9b      	subs	r3, r3, r6
 800858e:	60a3      	str	r3, [r4, #8]
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	441e      	add	r6, r3
 8008594:	6026      	str	r6, [r4, #0]
 8008596:	2000      	movs	r0, #0
 8008598:	e7dc      	b.n	8008554 <__ssputs_r+0x58>
 800859a:	462a      	mov	r2, r5
 800859c:	f000 fb54 	bl	8008c48 <_realloc_r>
 80085a0:	4606      	mov	r6, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1e2      	bne.n	800856c <__ssputs_r+0x70>
 80085a6:	6921      	ldr	r1, [r4, #16]
 80085a8:	4650      	mov	r0, sl
 80085aa:	f000 faa5 	bl	8008af8 <_free_r>
 80085ae:	e7c8      	b.n	8008542 <__ssputs_r+0x46>

080085b0 <_svfiprintf_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	461d      	mov	r5, r3
 80085b6:	898b      	ldrh	r3, [r1, #12]
 80085b8:	061f      	lsls	r7, r3, #24
 80085ba:	b09d      	sub	sp, #116	; 0x74
 80085bc:	4680      	mov	r8, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	4616      	mov	r6, r2
 80085c2:	d50f      	bpl.n	80085e4 <_svfiprintf_r+0x34>
 80085c4:	690b      	ldr	r3, [r1, #16]
 80085c6:	b96b      	cbnz	r3, 80085e4 <_svfiprintf_r+0x34>
 80085c8:	2140      	movs	r1, #64	; 0x40
 80085ca:	f000 fae3 	bl	8008b94 <_malloc_r>
 80085ce:	6020      	str	r0, [r4, #0]
 80085d0:	6120      	str	r0, [r4, #16]
 80085d2:	b928      	cbnz	r0, 80085e0 <_svfiprintf_r+0x30>
 80085d4:	230c      	movs	r3, #12
 80085d6:	f8c8 3000 	str.w	r3, [r8]
 80085da:	f04f 30ff 	mov.w	r0, #4294967295
 80085de:	e0c8      	b.n	8008772 <_svfiprintf_r+0x1c2>
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	6163      	str	r3, [r4, #20]
 80085e4:	2300      	movs	r3, #0
 80085e6:	9309      	str	r3, [sp, #36]	; 0x24
 80085e8:	2320      	movs	r3, #32
 80085ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ee:	2330      	movs	r3, #48	; 0x30
 80085f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085f4:	9503      	str	r5, [sp, #12]
 80085f6:	f04f 0b01 	mov.w	fp, #1
 80085fa:	4637      	mov	r7, r6
 80085fc:	463d      	mov	r5, r7
 80085fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008602:	b10b      	cbz	r3, 8008608 <_svfiprintf_r+0x58>
 8008604:	2b25      	cmp	r3, #37	; 0x25
 8008606:	d13e      	bne.n	8008686 <_svfiprintf_r+0xd6>
 8008608:	ebb7 0a06 	subs.w	sl, r7, r6
 800860c:	d00b      	beq.n	8008626 <_svfiprintf_r+0x76>
 800860e:	4653      	mov	r3, sl
 8008610:	4632      	mov	r2, r6
 8008612:	4621      	mov	r1, r4
 8008614:	4640      	mov	r0, r8
 8008616:	f7ff ff71 	bl	80084fc <__ssputs_r>
 800861a:	3001      	adds	r0, #1
 800861c:	f000 80a4 	beq.w	8008768 <_svfiprintf_r+0x1b8>
 8008620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008622:	4453      	add	r3, sl
 8008624:	9309      	str	r3, [sp, #36]	; 0x24
 8008626:	783b      	ldrb	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 809d 	beq.w	8008768 <_svfiprintf_r+0x1b8>
 800862e:	2300      	movs	r3, #0
 8008630:	f04f 32ff 	mov.w	r2, #4294967295
 8008634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008638:	9304      	str	r3, [sp, #16]
 800863a:	9307      	str	r3, [sp, #28]
 800863c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008640:	931a      	str	r3, [sp, #104]	; 0x68
 8008642:	462f      	mov	r7, r5
 8008644:	2205      	movs	r2, #5
 8008646:	f817 1b01 	ldrb.w	r1, [r7], #1
 800864a:	4850      	ldr	r0, [pc, #320]	; (800878c <_svfiprintf_r+0x1dc>)
 800864c:	f7f7 fe00 	bl	8000250 <memchr>
 8008650:	9b04      	ldr	r3, [sp, #16]
 8008652:	b9d0      	cbnz	r0, 800868a <_svfiprintf_r+0xda>
 8008654:	06d9      	lsls	r1, r3, #27
 8008656:	bf44      	itt	mi
 8008658:	2220      	movmi	r2, #32
 800865a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800865e:	071a      	lsls	r2, r3, #28
 8008660:	bf44      	itt	mi
 8008662:	222b      	movmi	r2, #43	; 0x2b
 8008664:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008668:	782a      	ldrb	r2, [r5, #0]
 800866a:	2a2a      	cmp	r2, #42	; 0x2a
 800866c:	d015      	beq.n	800869a <_svfiprintf_r+0xea>
 800866e:	9a07      	ldr	r2, [sp, #28]
 8008670:	462f      	mov	r7, r5
 8008672:	2000      	movs	r0, #0
 8008674:	250a      	movs	r5, #10
 8008676:	4639      	mov	r1, r7
 8008678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800867c:	3b30      	subs	r3, #48	; 0x30
 800867e:	2b09      	cmp	r3, #9
 8008680:	d94d      	bls.n	800871e <_svfiprintf_r+0x16e>
 8008682:	b1b8      	cbz	r0, 80086b4 <_svfiprintf_r+0x104>
 8008684:	e00f      	b.n	80086a6 <_svfiprintf_r+0xf6>
 8008686:	462f      	mov	r7, r5
 8008688:	e7b8      	b.n	80085fc <_svfiprintf_r+0x4c>
 800868a:	4a40      	ldr	r2, [pc, #256]	; (800878c <_svfiprintf_r+0x1dc>)
 800868c:	1a80      	subs	r0, r0, r2
 800868e:	fa0b f000 	lsl.w	r0, fp, r0
 8008692:	4318      	orrs	r0, r3
 8008694:	9004      	str	r0, [sp, #16]
 8008696:	463d      	mov	r5, r7
 8008698:	e7d3      	b.n	8008642 <_svfiprintf_r+0x92>
 800869a:	9a03      	ldr	r2, [sp, #12]
 800869c:	1d11      	adds	r1, r2, #4
 800869e:	6812      	ldr	r2, [r2, #0]
 80086a0:	9103      	str	r1, [sp, #12]
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	db01      	blt.n	80086aa <_svfiprintf_r+0xfa>
 80086a6:	9207      	str	r2, [sp, #28]
 80086a8:	e004      	b.n	80086b4 <_svfiprintf_r+0x104>
 80086aa:	4252      	negs	r2, r2
 80086ac:	f043 0302 	orr.w	r3, r3, #2
 80086b0:	9207      	str	r2, [sp, #28]
 80086b2:	9304      	str	r3, [sp, #16]
 80086b4:	783b      	ldrb	r3, [r7, #0]
 80086b6:	2b2e      	cmp	r3, #46	; 0x2e
 80086b8:	d10c      	bne.n	80086d4 <_svfiprintf_r+0x124>
 80086ba:	787b      	ldrb	r3, [r7, #1]
 80086bc:	2b2a      	cmp	r3, #42	; 0x2a
 80086be:	d133      	bne.n	8008728 <_svfiprintf_r+0x178>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	1d1a      	adds	r2, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	9203      	str	r2, [sp, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bfb8      	it	lt
 80086cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80086d0:	3702      	adds	r7, #2
 80086d2:	9305      	str	r3, [sp, #20]
 80086d4:	4d2e      	ldr	r5, [pc, #184]	; (8008790 <_svfiprintf_r+0x1e0>)
 80086d6:	7839      	ldrb	r1, [r7, #0]
 80086d8:	2203      	movs	r2, #3
 80086da:	4628      	mov	r0, r5
 80086dc:	f7f7 fdb8 	bl	8000250 <memchr>
 80086e0:	b138      	cbz	r0, 80086f2 <_svfiprintf_r+0x142>
 80086e2:	2340      	movs	r3, #64	; 0x40
 80086e4:	1b40      	subs	r0, r0, r5
 80086e6:	fa03 f000 	lsl.w	r0, r3, r0
 80086ea:	9b04      	ldr	r3, [sp, #16]
 80086ec:	4303      	orrs	r3, r0
 80086ee:	3701      	adds	r7, #1
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	7839      	ldrb	r1, [r7, #0]
 80086f4:	4827      	ldr	r0, [pc, #156]	; (8008794 <_svfiprintf_r+0x1e4>)
 80086f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086fa:	2206      	movs	r2, #6
 80086fc:	1c7e      	adds	r6, r7, #1
 80086fe:	f7f7 fda7 	bl	8000250 <memchr>
 8008702:	2800      	cmp	r0, #0
 8008704:	d038      	beq.n	8008778 <_svfiprintf_r+0x1c8>
 8008706:	4b24      	ldr	r3, [pc, #144]	; (8008798 <_svfiprintf_r+0x1e8>)
 8008708:	bb13      	cbnz	r3, 8008750 <_svfiprintf_r+0x1a0>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	3307      	adds	r3, #7
 800870e:	f023 0307 	bic.w	r3, r3, #7
 8008712:	3308      	adds	r3, #8
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008718:	444b      	add	r3, r9
 800871a:	9309      	str	r3, [sp, #36]	; 0x24
 800871c:	e76d      	b.n	80085fa <_svfiprintf_r+0x4a>
 800871e:	fb05 3202 	mla	r2, r5, r2, r3
 8008722:	2001      	movs	r0, #1
 8008724:	460f      	mov	r7, r1
 8008726:	e7a6      	b.n	8008676 <_svfiprintf_r+0xc6>
 8008728:	2300      	movs	r3, #0
 800872a:	3701      	adds	r7, #1
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	4619      	mov	r1, r3
 8008730:	250a      	movs	r5, #10
 8008732:	4638      	mov	r0, r7
 8008734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008738:	3a30      	subs	r2, #48	; 0x30
 800873a:	2a09      	cmp	r2, #9
 800873c:	d903      	bls.n	8008746 <_svfiprintf_r+0x196>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0c8      	beq.n	80086d4 <_svfiprintf_r+0x124>
 8008742:	9105      	str	r1, [sp, #20]
 8008744:	e7c6      	b.n	80086d4 <_svfiprintf_r+0x124>
 8008746:	fb05 2101 	mla	r1, r5, r1, r2
 800874a:	2301      	movs	r3, #1
 800874c:	4607      	mov	r7, r0
 800874e:	e7f0      	b.n	8008732 <_svfiprintf_r+0x182>
 8008750:	ab03      	add	r3, sp, #12
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	4622      	mov	r2, r4
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <_svfiprintf_r+0x1ec>)
 8008758:	a904      	add	r1, sp, #16
 800875a:	4640      	mov	r0, r8
 800875c:	f3af 8000 	nop.w
 8008760:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008764:	4681      	mov	r9, r0
 8008766:	d1d6      	bne.n	8008716 <_svfiprintf_r+0x166>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	065b      	lsls	r3, r3, #25
 800876c:	f53f af35 	bmi.w	80085da <_svfiprintf_r+0x2a>
 8008770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008772:	b01d      	add	sp, #116	; 0x74
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008778:	ab03      	add	r3, sp, #12
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	4622      	mov	r2, r4
 800877e:	4b07      	ldr	r3, [pc, #28]	; (800879c <_svfiprintf_r+0x1ec>)
 8008780:	a904      	add	r1, sp, #16
 8008782:	4640      	mov	r0, r8
 8008784:	f000 f882 	bl	800888c <_printf_i>
 8008788:	e7ea      	b.n	8008760 <_svfiprintf_r+0x1b0>
 800878a:	bf00      	nop
 800878c:	08008d28 	.word	0x08008d28
 8008790:	08008d2e 	.word	0x08008d2e
 8008794:	08008d32 	.word	0x08008d32
 8008798:	00000000 	.word	0x00000000
 800879c:	080084fd 	.word	0x080084fd

080087a0 <_printf_common>:
 80087a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	4691      	mov	r9, r2
 80087a6:	461f      	mov	r7, r3
 80087a8:	688a      	ldr	r2, [r1, #8]
 80087aa:	690b      	ldr	r3, [r1, #16]
 80087ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087b0:	4293      	cmp	r3, r2
 80087b2:	bfb8      	it	lt
 80087b4:	4613      	movlt	r3, r2
 80087b6:	f8c9 3000 	str.w	r3, [r9]
 80087ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087be:	4606      	mov	r6, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	b112      	cbz	r2, 80087ca <_printf_common+0x2a>
 80087c4:	3301      	adds	r3, #1
 80087c6:	f8c9 3000 	str.w	r3, [r9]
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	0699      	lsls	r1, r3, #26
 80087ce:	bf42      	ittt	mi
 80087d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087d4:	3302      	addmi	r3, #2
 80087d6:	f8c9 3000 	strmi.w	r3, [r9]
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	f015 0506 	ands.w	r5, r5, #6
 80087e0:	d107      	bne.n	80087f2 <_printf_common+0x52>
 80087e2:	f104 0a19 	add.w	sl, r4, #25
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	f8d9 2000 	ldr.w	r2, [r9]
 80087ec:	1a9b      	subs	r3, r3, r2
 80087ee:	42ab      	cmp	r3, r5
 80087f0:	dc28      	bgt.n	8008844 <_printf_common+0xa4>
 80087f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	3300      	adds	r3, #0
 80087fa:	bf18      	it	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	0692      	lsls	r2, r2, #26
 8008800:	d42d      	bmi.n	800885e <_printf_common+0xbe>
 8008802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008806:	4639      	mov	r1, r7
 8008808:	4630      	mov	r0, r6
 800880a:	47c0      	blx	r8
 800880c:	3001      	adds	r0, #1
 800880e:	d020      	beq.n	8008852 <_printf_common+0xb2>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	68e5      	ldr	r5, [r4, #12]
 8008814:	f8d9 2000 	ldr.w	r2, [r9]
 8008818:	f003 0306 	and.w	r3, r3, #6
 800881c:	2b04      	cmp	r3, #4
 800881e:	bf08      	it	eq
 8008820:	1aad      	subeq	r5, r5, r2
 8008822:	68a3      	ldr	r3, [r4, #8]
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	bf0c      	ite	eq
 8008828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800882c:	2500      	movne	r5, #0
 800882e:	4293      	cmp	r3, r2
 8008830:	bfc4      	itt	gt
 8008832:	1a9b      	subgt	r3, r3, r2
 8008834:	18ed      	addgt	r5, r5, r3
 8008836:	f04f 0900 	mov.w	r9, #0
 800883a:	341a      	adds	r4, #26
 800883c:	454d      	cmp	r5, r9
 800883e:	d11a      	bne.n	8008876 <_printf_common+0xd6>
 8008840:	2000      	movs	r0, #0
 8008842:	e008      	b.n	8008856 <_printf_common+0xb6>
 8008844:	2301      	movs	r3, #1
 8008846:	4652      	mov	r2, sl
 8008848:	4639      	mov	r1, r7
 800884a:	4630      	mov	r0, r6
 800884c:	47c0      	blx	r8
 800884e:	3001      	adds	r0, #1
 8008850:	d103      	bne.n	800885a <_printf_common+0xba>
 8008852:	f04f 30ff 	mov.w	r0, #4294967295
 8008856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885a:	3501      	adds	r5, #1
 800885c:	e7c3      	b.n	80087e6 <_printf_common+0x46>
 800885e:	18e1      	adds	r1, r4, r3
 8008860:	1c5a      	adds	r2, r3, #1
 8008862:	2030      	movs	r0, #48	; 0x30
 8008864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008868:	4422      	add	r2, r4
 800886a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800886e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008872:	3302      	adds	r3, #2
 8008874:	e7c5      	b.n	8008802 <_printf_common+0x62>
 8008876:	2301      	movs	r3, #1
 8008878:	4622      	mov	r2, r4
 800887a:	4639      	mov	r1, r7
 800887c:	4630      	mov	r0, r6
 800887e:	47c0      	blx	r8
 8008880:	3001      	adds	r0, #1
 8008882:	d0e6      	beq.n	8008852 <_printf_common+0xb2>
 8008884:	f109 0901 	add.w	r9, r9, #1
 8008888:	e7d8      	b.n	800883c <_printf_common+0x9c>
	...

0800888c <_printf_i>:
 800888c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008890:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008894:	460c      	mov	r4, r1
 8008896:	7e09      	ldrb	r1, [r1, #24]
 8008898:	b085      	sub	sp, #20
 800889a:	296e      	cmp	r1, #110	; 0x6e
 800889c:	4617      	mov	r7, r2
 800889e:	4606      	mov	r6, r0
 80088a0:	4698      	mov	r8, r3
 80088a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088a4:	f000 80b3 	beq.w	8008a0e <_printf_i+0x182>
 80088a8:	d822      	bhi.n	80088f0 <_printf_i+0x64>
 80088aa:	2963      	cmp	r1, #99	; 0x63
 80088ac:	d036      	beq.n	800891c <_printf_i+0x90>
 80088ae:	d80a      	bhi.n	80088c6 <_printf_i+0x3a>
 80088b0:	2900      	cmp	r1, #0
 80088b2:	f000 80b9 	beq.w	8008a28 <_printf_i+0x19c>
 80088b6:	2958      	cmp	r1, #88	; 0x58
 80088b8:	f000 8083 	beq.w	80089c2 <_printf_i+0x136>
 80088bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80088c4:	e032      	b.n	800892c <_printf_i+0xa0>
 80088c6:	2964      	cmp	r1, #100	; 0x64
 80088c8:	d001      	beq.n	80088ce <_printf_i+0x42>
 80088ca:	2969      	cmp	r1, #105	; 0x69
 80088cc:	d1f6      	bne.n	80088bc <_printf_i+0x30>
 80088ce:	6820      	ldr	r0, [r4, #0]
 80088d0:	6813      	ldr	r3, [r2, #0]
 80088d2:	0605      	lsls	r5, r0, #24
 80088d4:	f103 0104 	add.w	r1, r3, #4
 80088d8:	d52a      	bpl.n	8008930 <_printf_i+0xa4>
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6011      	str	r1, [r2, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	da03      	bge.n	80088ea <_printf_i+0x5e>
 80088e2:	222d      	movs	r2, #45	; 0x2d
 80088e4:	425b      	negs	r3, r3
 80088e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80088ea:	486f      	ldr	r0, [pc, #444]	; (8008aa8 <_printf_i+0x21c>)
 80088ec:	220a      	movs	r2, #10
 80088ee:	e039      	b.n	8008964 <_printf_i+0xd8>
 80088f0:	2973      	cmp	r1, #115	; 0x73
 80088f2:	f000 809d 	beq.w	8008a30 <_printf_i+0x1a4>
 80088f6:	d808      	bhi.n	800890a <_printf_i+0x7e>
 80088f8:	296f      	cmp	r1, #111	; 0x6f
 80088fa:	d020      	beq.n	800893e <_printf_i+0xb2>
 80088fc:	2970      	cmp	r1, #112	; 0x70
 80088fe:	d1dd      	bne.n	80088bc <_printf_i+0x30>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	f043 0320 	orr.w	r3, r3, #32
 8008906:	6023      	str	r3, [r4, #0]
 8008908:	e003      	b.n	8008912 <_printf_i+0x86>
 800890a:	2975      	cmp	r1, #117	; 0x75
 800890c:	d017      	beq.n	800893e <_printf_i+0xb2>
 800890e:	2978      	cmp	r1, #120	; 0x78
 8008910:	d1d4      	bne.n	80088bc <_printf_i+0x30>
 8008912:	2378      	movs	r3, #120	; 0x78
 8008914:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008918:	4864      	ldr	r0, [pc, #400]	; (8008aac <_printf_i+0x220>)
 800891a:	e055      	b.n	80089c8 <_printf_i+0x13c>
 800891c:	6813      	ldr	r3, [r2, #0]
 800891e:	1d19      	adds	r1, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6011      	str	r1, [r2, #0]
 8008924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800892c:	2301      	movs	r3, #1
 800892e:	e08c      	b.n	8008a4a <_printf_i+0x1be>
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6011      	str	r1, [r2, #0]
 8008934:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008938:	bf18      	it	ne
 800893a:	b21b      	sxthne	r3, r3
 800893c:	e7cf      	b.n	80088de <_printf_i+0x52>
 800893e:	6813      	ldr	r3, [r2, #0]
 8008940:	6825      	ldr	r5, [r4, #0]
 8008942:	1d18      	adds	r0, r3, #4
 8008944:	6010      	str	r0, [r2, #0]
 8008946:	0628      	lsls	r0, r5, #24
 8008948:	d501      	bpl.n	800894e <_printf_i+0xc2>
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	e002      	b.n	8008954 <_printf_i+0xc8>
 800894e:	0668      	lsls	r0, r5, #25
 8008950:	d5fb      	bpl.n	800894a <_printf_i+0xbe>
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	4854      	ldr	r0, [pc, #336]	; (8008aa8 <_printf_i+0x21c>)
 8008956:	296f      	cmp	r1, #111	; 0x6f
 8008958:	bf14      	ite	ne
 800895a:	220a      	movne	r2, #10
 800895c:	2208      	moveq	r2, #8
 800895e:	2100      	movs	r1, #0
 8008960:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008964:	6865      	ldr	r5, [r4, #4]
 8008966:	60a5      	str	r5, [r4, #8]
 8008968:	2d00      	cmp	r5, #0
 800896a:	f2c0 8095 	blt.w	8008a98 <_printf_i+0x20c>
 800896e:	6821      	ldr	r1, [r4, #0]
 8008970:	f021 0104 	bic.w	r1, r1, #4
 8008974:	6021      	str	r1, [r4, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d13d      	bne.n	80089f6 <_printf_i+0x16a>
 800897a:	2d00      	cmp	r5, #0
 800897c:	f040 808e 	bne.w	8008a9c <_printf_i+0x210>
 8008980:	4665      	mov	r5, ip
 8008982:	2a08      	cmp	r2, #8
 8008984:	d10b      	bne.n	800899e <_printf_i+0x112>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	07db      	lsls	r3, r3, #31
 800898a:	d508      	bpl.n	800899e <_printf_i+0x112>
 800898c:	6923      	ldr	r3, [r4, #16]
 800898e:	6862      	ldr	r2, [r4, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	bfde      	ittt	le
 8008994:	2330      	movle	r3, #48	; 0x30
 8008996:	f805 3c01 	strble.w	r3, [r5, #-1]
 800899a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800899e:	ebac 0305 	sub.w	r3, ip, r5
 80089a2:	6123      	str	r3, [r4, #16]
 80089a4:	f8cd 8000 	str.w	r8, [sp]
 80089a8:	463b      	mov	r3, r7
 80089aa:	aa03      	add	r2, sp, #12
 80089ac:	4621      	mov	r1, r4
 80089ae:	4630      	mov	r0, r6
 80089b0:	f7ff fef6 	bl	80087a0 <_printf_common>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d14d      	bne.n	8008a54 <_printf_i+0x1c8>
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	b005      	add	sp, #20
 80089be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089c2:	4839      	ldr	r0, [pc, #228]	; (8008aa8 <_printf_i+0x21c>)
 80089c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80089c8:	6813      	ldr	r3, [r2, #0]
 80089ca:	6821      	ldr	r1, [r4, #0]
 80089cc:	1d1d      	adds	r5, r3, #4
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6015      	str	r5, [r2, #0]
 80089d2:	060a      	lsls	r2, r1, #24
 80089d4:	d50b      	bpl.n	80089ee <_printf_i+0x162>
 80089d6:	07ca      	lsls	r2, r1, #31
 80089d8:	bf44      	itt	mi
 80089da:	f041 0120 	orrmi.w	r1, r1, #32
 80089de:	6021      	strmi	r1, [r4, #0]
 80089e0:	b91b      	cbnz	r3, 80089ea <_printf_i+0x15e>
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	f022 0220 	bic.w	r2, r2, #32
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	2210      	movs	r2, #16
 80089ec:	e7b7      	b.n	800895e <_printf_i+0xd2>
 80089ee:	064d      	lsls	r5, r1, #25
 80089f0:	bf48      	it	mi
 80089f2:	b29b      	uxthmi	r3, r3
 80089f4:	e7ef      	b.n	80089d6 <_printf_i+0x14a>
 80089f6:	4665      	mov	r5, ip
 80089f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80089fc:	fb02 3311 	mls	r3, r2, r1, r3
 8008a00:	5cc3      	ldrb	r3, [r0, r3]
 8008a02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a06:	460b      	mov	r3, r1
 8008a08:	2900      	cmp	r1, #0
 8008a0a:	d1f5      	bne.n	80089f8 <_printf_i+0x16c>
 8008a0c:	e7b9      	b.n	8008982 <_printf_i+0xf6>
 8008a0e:	6813      	ldr	r3, [r2, #0]
 8008a10:	6825      	ldr	r5, [r4, #0]
 8008a12:	6961      	ldr	r1, [r4, #20]
 8008a14:	1d18      	adds	r0, r3, #4
 8008a16:	6010      	str	r0, [r2, #0]
 8008a18:	0628      	lsls	r0, r5, #24
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	d501      	bpl.n	8008a22 <_printf_i+0x196>
 8008a1e:	6019      	str	r1, [r3, #0]
 8008a20:	e002      	b.n	8008a28 <_printf_i+0x19c>
 8008a22:	066a      	lsls	r2, r5, #25
 8008a24:	d5fb      	bpl.n	8008a1e <_printf_i+0x192>
 8008a26:	8019      	strh	r1, [r3, #0]
 8008a28:	2300      	movs	r3, #0
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	4665      	mov	r5, ip
 8008a2e:	e7b9      	b.n	80089a4 <_printf_i+0x118>
 8008a30:	6813      	ldr	r3, [r2, #0]
 8008a32:	1d19      	adds	r1, r3, #4
 8008a34:	6011      	str	r1, [r2, #0]
 8008a36:	681d      	ldr	r5, [r3, #0]
 8008a38:	6862      	ldr	r2, [r4, #4]
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f7f7 fc07 	bl	8000250 <memchr>
 8008a42:	b108      	cbz	r0, 8008a48 <_printf_i+0x1bc>
 8008a44:	1b40      	subs	r0, r0, r5
 8008a46:	6060      	str	r0, [r4, #4]
 8008a48:	6863      	ldr	r3, [r4, #4]
 8008a4a:	6123      	str	r3, [r4, #16]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a52:	e7a7      	b.n	80089a4 <_printf_i+0x118>
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	462a      	mov	r2, r5
 8008a58:	4639      	mov	r1, r7
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	47c0      	blx	r8
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d0aa      	beq.n	80089b8 <_printf_i+0x12c>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	079b      	lsls	r3, r3, #30
 8008a66:	d413      	bmi.n	8008a90 <_printf_i+0x204>
 8008a68:	68e0      	ldr	r0, [r4, #12]
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	4298      	cmp	r0, r3
 8008a6e:	bfb8      	it	lt
 8008a70:	4618      	movlt	r0, r3
 8008a72:	e7a3      	b.n	80089bc <_printf_i+0x130>
 8008a74:	2301      	movs	r3, #1
 8008a76:	464a      	mov	r2, r9
 8008a78:	4639      	mov	r1, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	47c0      	blx	r8
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d09a      	beq.n	80089b8 <_printf_i+0x12c>
 8008a82:	3501      	adds	r5, #1
 8008a84:	68e3      	ldr	r3, [r4, #12]
 8008a86:	9a03      	ldr	r2, [sp, #12]
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	42ab      	cmp	r3, r5
 8008a8c:	dcf2      	bgt.n	8008a74 <_printf_i+0x1e8>
 8008a8e:	e7eb      	b.n	8008a68 <_printf_i+0x1dc>
 8008a90:	2500      	movs	r5, #0
 8008a92:	f104 0919 	add.w	r9, r4, #25
 8008a96:	e7f5      	b.n	8008a84 <_printf_i+0x1f8>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1ac      	bne.n	80089f6 <_printf_i+0x16a>
 8008a9c:	7803      	ldrb	r3, [r0, #0]
 8008a9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa6:	e76c      	b.n	8008982 <_printf_i+0xf6>
 8008aa8:	08008d39 	.word	0x08008d39
 8008aac:	08008d4a 	.word	0x08008d4a

08008ab0 <memcpy>:
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	1e43      	subs	r3, r0, #1
 8008ab4:	440a      	add	r2, r1
 8008ab6:	4291      	cmp	r1, r2
 8008ab8:	d100      	bne.n	8008abc <memcpy+0xc>
 8008aba:	bd10      	pop	{r4, pc}
 8008abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ac4:	e7f7      	b.n	8008ab6 <memcpy+0x6>

08008ac6 <memmove>:
 8008ac6:	4288      	cmp	r0, r1
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	eb01 0302 	add.w	r3, r1, r2
 8008ace:	d807      	bhi.n	8008ae0 <memmove+0x1a>
 8008ad0:	1e42      	subs	r2, r0, #1
 8008ad2:	4299      	cmp	r1, r3
 8008ad4:	d00a      	beq.n	8008aec <memmove+0x26>
 8008ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ada:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008ade:	e7f8      	b.n	8008ad2 <memmove+0xc>
 8008ae0:	4283      	cmp	r3, r0
 8008ae2:	d9f5      	bls.n	8008ad0 <memmove+0xa>
 8008ae4:	1881      	adds	r1, r0, r2
 8008ae6:	1ad2      	subs	r2, r2, r3
 8008ae8:	42d3      	cmn	r3, r2
 8008aea:	d100      	bne.n	8008aee <memmove+0x28>
 8008aec:	bd10      	pop	{r4, pc}
 8008aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008af2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008af6:	e7f7      	b.n	8008ae8 <memmove+0x22>

08008af8 <_free_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4605      	mov	r5, r0
 8008afc:	2900      	cmp	r1, #0
 8008afe:	d045      	beq.n	8008b8c <_free_r+0x94>
 8008b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b04:	1f0c      	subs	r4, r1, #4
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	bfb8      	it	lt
 8008b0a:	18e4      	addlt	r4, r4, r3
 8008b0c:	f000 f8d2 	bl	8008cb4 <__malloc_lock>
 8008b10:	4a1f      	ldr	r2, [pc, #124]	; (8008b90 <_free_r+0x98>)
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	4610      	mov	r0, r2
 8008b16:	b933      	cbnz	r3, 8008b26 <_free_r+0x2e>
 8008b18:	6063      	str	r3, [r4, #4]
 8008b1a:	6014      	str	r4, [r2, #0]
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b22:	f000 b8c8 	b.w	8008cb6 <__malloc_unlock>
 8008b26:	42a3      	cmp	r3, r4
 8008b28:	d90c      	bls.n	8008b44 <_free_r+0x4c>
 8008b2a:	6821      	ldr	r1, [r4, #0]
 8008b2c:	1862      	adds	r2, r4, r1
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	bf04      	itt	eq
 8008b32:	681a      	ldreq	r2, [r3, #0]
 8008b34:	685b      	ldreq	r3, [r3, #4]
 8008b36:	6063      	str	r3, [r4, #4]
 8008b38:	bf04      	itt	eq
 8008b3a:	1852      	addeq	r2, r2, r1
 8008b3c:	6022      	streq	r2, [r4, #0]
 8008b3e:	6004      	str	r4, [r0, #0]
 8008b40:	e7ec      	b.n	8008b1c <_free_r+0x24>
 8008b42:	4613      	mov	r3, r2
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	b10a      	cbz	r2, 8008b4c <_free_r+0x54>
 8008b48:	42a2      	cmp	r2, r4
 8008b4a:	d9fa      	bls.n	8008b42 <_free_r+0x4a>
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	1858      	adds	r0, r3, r1
 8008b50:	42a0      	cmp	r0, r4
 8008b52:	d10b      	bne.n	8008b6c <_free_r+0x74>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	4401      	add	r1, r0
 8008b58:	1858      	adds	r0, r3, r1
 8008b5a:	4282      	cmp	r2, r0
 8008b5c:	6019      	str	r1, [r3, #0]
 8008b5e:	d1dd      	bne.n	8008b1c <_free_r+0x24>
 8008b60:	6810      	ldr	r0, [r2, #0]
 8008b62:	6852      	ldr	r2, [r2, #4]
 8008b64:	605a      	str	r2, [r3, #4]
 8008b66:	4401      	add	r1, r0
 8008b68:	6019      	str	r1, [r3, #0]
 8008b6a:	e7d7      	b.n	8008b1c <_free_r+0x24>
 8008b6c:	d902      	bls.n	8008b74 <_free_r+0x7c>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	602b      	str	r3, [r5, #0]
 8008b72:	e7d3      	b.n	8008b1c <_free_r+0x24>
 8008b74:	6820      	ldr	r0, [r4, #0]
 8008b76:	1821      	adds	r1, r4, r0
 8008b78:	428a      	cmp	r2, r1
 8008b7a:	bf04      	itt	eq
 8008b7c:	6811      	ldreq	r1, [r2, #0]
 8008b7e:	6852      	ldreq	r2, [r2, #4]
 8008b80:	6062      	str	r2, [r4, #4]
 8008b82:	bf04      	itt	eq
 8008b84:	1809      	addeq	r1, r1, r0
 8008b86:	6021      	streq	r1, [r4, #0]
 8008b88:	605c      	str	r4, [r3, #4]
 8008b8a:	e7c7      	b.n	8008b1c <_free_r+0x24>
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	bf00      	nop
 8008b90:	200000ac 	.word	0x200000ac

08008b94 <_malloc_r>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	1ccd      	adds	r5, r1, #3
 8008b98:	f025 0503 	bic.w	r5, r5, #3
 8008b9c:	3508      	adds	r5, #8
 8008b9e:	2d0c      	cmp	r5, #12
 8008ba0:	bf38      	it	cc
 8008ba2:	250c      	movcc	r5, #12
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	db01      	blt.n	8008bae <_malloc_r+0x1a>
 8008baa:	42a9      	cmp	r1, r5
 8008bac:	d903      	bls.n	8008bb6 <_malloc_r+0x22>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	bd70      	pop	{r4, r5, r6, pc}
 8008bb6:	f000 f87d 	bl	8008cb4 <__malloc_lock>
 8008bba:	4a21      	ldr	r2, [pc, #132]	; (8008c40 <_malloc_r+0xac>)
 8008bbc:	6814      	ldr	r4, [r2, #0]
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	b991      	cbnz	r1, 8008be8 <_malloc_r+0x54>
 8008bc2:	4c20      	ldr	r4, [pc, #128]	; (8008c44 <_malloc_r+0xb0>)
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	b91b      	cbnz	r3, 8008bd0 <_malloc_r+0x3c>
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f863 	bl	8008c94 <_sbrk_r>
 8008bce:	6020      	str	r0, [r4, #0]
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f000 f85e 	bl	8008c94 <_sbrk_r>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d124      	bne.n	8008c26 <_malloc_r+0x92>
 8008bdc:	230c      	movs	r3, #12
 8008bde:	6033      	str	r3, [r6, #0]
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 f868 	bl	8008cb6 <__malloc_unlock>
 8008be6:	e7e4      	b.n	8008bb2 <_malloc_r+0x1e>
 8008be8:	680b      	ldr	r3, [r1, #0]
 8008bea:	1b5b      	subs	r3, r3, r5
 8008bec:	d418      	bmi.n	8008c20 <_malloc_r+0x8c>
 8008bee:	2b0b      	cmp	r3, #11
 8008bf0:	d90f      	bls.n	8008c12 <_malloc_r+0x7e>
 8008bf2:	600b      	str	r3, [r1, #0]
 8008bf4:	50cd      	str	r5, [r1, r3]
 8008bf6:	18cc      	adds	r4, r1, r3
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f000 f85c 	bl	8008cb6 <__malloc_unlock>
 8008bfe:	f104 000b 	add.w	r0, r4, #11
 8008c02:	1d23      	adds	r3, r4, #4
 8008c04:	f020 0007 	bic.w	r0, r0, #7
 8008c08:	1ac3      	subs	r3, r0, r3
 8008c0a:	d0d3      	beq.n	8008bb4 <_malloc_r+0x20>
 8008c0c:	425a      	negs	r2, r3
 8008c0e:	50e2      	str	r2, [r4, r3]
 8008c10:	e7d0      	b.n	8008bb4 <_malloc_r+0x20>
 8008c12:	428c      	cmp	r4, r1
 8008c14:	684b      	ldr	r3, [r1, #4]
 8008c16:	bf16      	itet	ne
 8008c18:	6063      	strne	r3, [r4, #4]
 8008c1a:	6013      	streq	r3, [r2, #0]
 8008c1c:	460c      	movne	r4, r1
 8008c1e:	e7eb      	b.n	8008bf8 <_malloc_r+0x64>
 8008c20:	460c      	mov	r4, r1
 8008c22:	6849      	ldr	r1, [r1, #4]
 8008c24:	e7cc      	b.n	8008bc0 <_malloc_r+0x2c>
 8008c26:	1cc4      	adds	r4, r0, #3
 8008c28:	f024 0403 	bic.w	r4, r4, #3
 8008c2c:	42a0      	cmp	r0, r4
 8008c2e:	d005      	beq.n	8008c3c <_malloc_r+0xa8>
 8008c30:	1a21      	subs	r1, r4, r0
 8008c32:	4630      	mov	r0, r6
 8008c34:	f000 f82e 	bl	8008c94 <_sbrk_r>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d0cf      	beq.n	8008bdc <_malloc_r+0x48>
 8008c3c:	6025      	str	r5, [r4, #0]
 8008c3e:	e7db      	b.n	8008bf8 <_malloc_r+0x64>
 8008c40:	200000ac 	.word	0x200000ac
 8008c44:	200000b0 	.word	0x200000b0

08008c48 <_realloc_r>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	4614      	mov	r4, r2
 8008c4e:	460e      	mov	r6, r1
 8008c50:	b921      	cbnz	r1, 8008c5c <_realloc_r+0x14>
 8008c52:	4611      	mov	r1, r2
 8008c54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c58:	f7ff bf9c 	b.w	8008b94 <_malloc_r>
 8008c5c:	b922      	cbnz	r2, 8008c68 <_realloc_r+0x20>
 8008c5e:	f7ff ff4b 	bl	8008af8 <_free_r>
 8008c62:	4625      	mov	r5, r4
 8008c64:	4628      	mov	r0, r5
 8008c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c68:	f000 f826 	bl	8008cb8 <_malloc_usable_size_r>
 8008c6c:	42a0      	cmp	r0, r4
 8008c6e:	d20f      	bcs.n	8008c90 <_realloc_r+0x48>
 8008c70:	4621      	mov	r1, r4
 8008c72:	4638      	mov	r0, r7
 8008c74:	f7ff ff8e 	bl	8008b94 <_malloc_r>
 8008c78:	4605      	mov	r5, r0
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d0f2      	beq.n	8008c64 <_realloc_r+0x1c>
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4622      	mov	r2, r4
 8008c82:	f7ff ff15 	bl	8008ab0 <memcpy>
 8008c86:	4631      	mov	r1, r6
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f7ff ff35 	bl	8008af8 <_free_r>
 8008c8e:	e7e9      	b.n	8008c64 <_realloc_r+0x1c>
 8008c90:	4635      	mov	r5, r6
 8008c92:	e7e7      	b.n	8008c64 <_realloc_r+0x1c>

08008c94 <_sbrk_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4c06      	ldr	r4, [pc, #24]	; (8008cb0 <_sbrk_r+0x1c>)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	f7f8 ff72 	bl	8001b88 <_sbrk>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	d102      	bne.n	8008cae <_sbrk_r+0x1a>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	b103      	cbz	r3, 8008cae <_sbrk_r+0x1a>
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
 8008cb0:	2002b8bc 	.word	0x2002b8bc

08008cb4 <__malloc_lock>:
 8008cb4:	4770      	bx	lr

08008cb6 <__malloc_unlock>:
 8008cb6:	4770      	bx	lr

08008cb8 <_malloc_usable_size_r>:
 8008cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cbc:	1f18      	subs	r0, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfbc      	itt	lt
 8008cc2:	580b      	ldrlt	r3, [r1, r0]
 8008cc4:	18c0      	addlt	r0, r0, r3
 8008cc6:	4770      	bx	lr

08008cc8 <_init>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	bf00      	nop
 8008ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cce:	bc08      	pop	{r3}
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_fini>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr
