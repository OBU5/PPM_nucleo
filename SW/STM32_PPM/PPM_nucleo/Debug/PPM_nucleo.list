
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e98  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009114  08009114  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009114  08009114  00019114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800911c  0800911c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800911c  0800911c  0001911c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009120  08009120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b898  20000074  08009198  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002b90c  08009198  0002b90c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016679  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c0e  00000000  00000000  0003671b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  00039330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001410  00000000  00000000  0003a868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b84b  00000000  00000000  0003bc78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fef8  00000000  00000000  000674c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111af0  00000000  00000000  000773bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00188eab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da4  00000000  00000000  00188f28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08009080 	.word	0x08009080

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08009080 	.word	0x08009080

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000624:	f001 fd11 	bl	800204a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000628:	f000 f828 	bl	800067c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062c:	f000 fc3e 	bl	8000eac <MX_GPIO_Init>
	MX_DMA_Init();
 8000630:	f000 fc24 	bl	8000e7c <MX_DMA_Init>
	MX_USART3_UART_Init();
 8000634:	f000 fbc4 	bl	8000dc0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000638:	f000 fbf2 	bl	8000e20 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 800063c:	f000 f908 	bl	8000850 <MX_SPI1_Init>
	MX_TIM8_Init();
 8000640:	f000 faf2 	bl	8000c28 <MX_TIM8_Init>
	MX_TIM1_Init();
 8000644:	f000 f93e 	bl	80008c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000648:	f000 f9fc 	bl	8000a44 <MX_TIM2_Init>
	MX_ADC1_Init();
 800064c:	f000 f8ae 	bl	80007ac <MX_ADC1_Init>
	MX_TIM4_Init();
 8000650:	f000 fa9c 	bl	8000b8c <MX_TIM4_Init>
	MX_TIM3_Init();
 8000654:	f000 fa4a 	bl	8000aec <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	// Start timers
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8000658:	2203      	movs	r2, #3
 800065a:	4905      	ldr	r1, [pc, #20]	; (8000670 <main+0x50>)
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <main+0x54>)
 800065e:	f006 ff1f 	bl	80074a0 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (state.preparedToRunPolarizationPhase) {
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <main+0x58>)
 8000664:	79db      	ldrb	r3, [r3, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0fb      	beq.n	8000662 <main+0x42>
			chooseActionByState();
 800066a:	f000 ff3d 	bl	80014e8 <chooseActionByState>
		if (state.preparedToRunPolarizationPhase) {
 800066e:	e7f8      	b.n	8000662 <main+0x42>
 8000670:	200005b8 	.word	0x200005b8
 8000674:	20000134 	.word	0x20000134
 8000678:	20015e84 	.word	0x20015e84

0800067c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b0b8      	sub	sp, #224	; 0xe0
 8000680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000682:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f008 f8ea 	bl	8008864 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000690:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2290      	movs	r2, #144	; 0x90
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f008 f8db 	bl	8008864 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80006ae:	f003 f9c7 	bl	8003a40 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <SystemClock_Config+0x124>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <SystemClock_Config+0x124>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <SystemClock_Config+0x124>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ca:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <SystemClock_Config+0x128>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a35      	ldr	r2, [pc, #212]	; (80007a4 <SystemClock_Config+0x128>)
 80006d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <SystemClock_Config+0x128>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006fe:	2304      	movs	r3, #4
 8000700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000704:	23d8      	movs	r3, #216	; 0xd8
 8000706:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000710:	2309      	movs	r3, #9
 8000712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000716:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800071a:	4618      	mov	r0, r3
 800071c:	f003 f9f0 	bl	8003b00 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xae>
		Error_Handler();
 8000726:	f001 f8c7 	bl	80018b8 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800072a:	f003 f999 	bl	8003a60 <HAL_PWREx_EnableOverDrive>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xbc>
		Error_Handler();
 8000734:	f001 f8c0 	bl	80018b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800075a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800075e:	2107      	movs	r1, #7
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fc7b 	bl	800405c <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xf4>
		Error_Handler();
 800076c:	f001 f8a4 	bl	80018b8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <SystemClock_Config+0x12c>)
 8000772:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000774:	2300      	movs	r3, #0
 8000776:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800077e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000782:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fe5f 	bl	800444c <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x11c>
		Error_Handler();
 8000794:	f001 f890 	bl	80018b8 <Error_Handler>
	}
}
 8000798:	bf00      	nop
 800079a:	37e0      	adds	r7, #224	; 0xe0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000
 80007a8:	00200110 	.word	0x00200110

080007ac <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_ADC1_Init+0xa0>)
 80007c2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ca:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_TRGO;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007f0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0x9c>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000812:	f001 fc99 	bl	8002148 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x74>
		Error_Handler();
 800081c:	f001 f84c 	bl	80018b8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000832:	f001 fe19 	bl	8002468 <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x94>
		Error_Handler();
 800083c:	f001 f83c 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20015e90 	.word	0x20015e90
 800084c:	40012000 	.word	0x40012000

08000850 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <MX_SPI1_Init+0x70>)
 8000858:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_SPI1_Init+0x6c>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000866:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI1_Init+0x6c>)
 800086a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800086e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI1_Init+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI1_Init+0x6c>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000896:	2207      	movs	r2, #7
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_SPI1_Init+0x6c>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI1_Init+0x6c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_SPI1_Init+0x6c>)
 80008a8:	f004 f9f6 	bl	8004c98 <HAL_SPI_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_SPI1_Init+0x66>
		Error_Handler();
 80008b2:	f001 f801 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2002b800 	.word	0x2002b800
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09a      	sub	sp, #104	; 0x68
 80008c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	222c      	movs	r2, #44	; 0x2c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f007 ffb0 	bl	8008864 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000904:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000906:	4a4e      	ldr	r2, [pc, #312]	; (8000a40 <MX_TIM1_Init+0x17c>)
 8000908:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800090a:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <MX_TIM1_Init+0x178>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 8000916:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000918:	f241 3221 	movw	r2, #4897	; 0x1321
 800091c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000924:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <MX_TIM1_Init+0x178>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000930:	4842      	ldr	r0, [pc, #264]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000932:	f004 ff50 	bl	80057d6 <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x7c>
		Error_Handler();
 800093c:	f000 ffbc 	bl	80018b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000946:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800094a:	4619      	mov	r1, r3
 800094c:	483b      	ldr	r0, [pc, #236]	; (8000a3c <MX_TIM1_Init+0x178>)
 800094e:	f005 fccf 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x98>
		Error_Handler();
 8000958:	f000 ffae 	bl	80018b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800095c:	4837      	ldr	r0, [pc, #220]	; (8000a3c <MX_TIM1_Init+0x178>)
 800095e:	f004 ffba 	bl	80058d6 <HAL_TIM_PWM_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000968:	f000 ffa6 	bl	80018b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800096c:	2320      	movs	r3, #32
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000978:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800097c:	4619      	mov	r1, r3
 800097e:	482f      	ldr	r0, [pc, #188]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000980:	f006 fb84 	bl	800708c <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 800098a:	f000 ff95 	bl	80018b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800098e:	2370      	movs	r3, #112	; 0x70
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 8000992:	f240 336a 	movw	r3, #874	; 0x36a
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000998:	2302      	movs	r3, #2
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80009a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80009ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4821      	ldr	r0, [pc, #132]	; (8000a3c <MX_TIM1_Init+0x178>)
 80009b8:	f005 fb82 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 80009c2:	f000 ff79 	bl	80018b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c6:	2360      	movs	r3, #96	; 0x60
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 80009ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80009d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d4:	2204      	movs	r2, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4818      	ldr	r0, [pc, #96]	; (8000a3c <MX_TIM1_Init+0x178>)
 80009da:	f005 fb71 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x124>
			!= HAL_OK) {
		Error_Handler();
 80009e4:	f000 ff68 	bl	80018b8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000a1e:	f006 fbc3 	bl	80071a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x168>
			!= HAL_OK) {
		Error_Handler();
 8000a28:	f000 ff46 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000a2e:	f001 f91d 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3768      	adds	r7, #104	; 0x68
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2002b7c0 	.word	0x2002b7c0
 8000a40:	40010000 	.word	0x40010000

08000a44 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a68:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a8c:	f005 f87c 	bl	8005b88 <HAL_TIM_IC_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x56>
		Error_Handler();
 8000a96:	f000 ff0f 	bl	80018b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000aaa:	f006 faef 	bl	800708c <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8000ab4:	f000 ff00 	bl	80018b8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000abc:	2301      	movs	r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000ad0:	f005 fa59 	bl	8005f86 <HAL_TIM_IC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000ada:	f000 feed 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2002b864 	.word	0x2002b864

08000aec <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b0c:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <MX_TIM3_Init+0x9c>)
 8000b0e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 50000;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b16:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 43200 - 1;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b20:	f64a 02bf 	movw	r2, #43199	; 0xa8bf
 8000b24:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b34:	f004 fe4f 	bl	80057d6 <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x56>
		Error_Handler();
 8000b3e:	f000 febb 	bl	80018b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b50:	f005 fbce 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM3_Init+0x72>
		Error_Handler();
 8000b5a:	f000 fead 	bl	80018b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b6c:	f006 fa8e 	bl	800708c <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000b76:	f000 fe9f 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3720      	adds	r7, #32
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20015e44 	.word	0x20015e44
 8000b88:	40000400 	.word	0x40000400

08000b8c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <MX_TIM4_Init+0x98>)
 8000bae:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 4898 - 1;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000bbe:	f241 3221 	movw	r2, #4897	; 0x1321
 8000bc2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000bd0:	4813      	ldr	r0, [pc, #76]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000bd2:	f004 fe00 	bl	80057d6 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM4_Init+0x54>
		Error_Handler();
 8000bdc:	f000 fe6c 	bl	80018b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000bee:	f005 fb7f 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM4_Init+0x70>
		Error_Handler();
 8000bf8:	f000 fe5e 	bl	80018b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_TIM4_Init+0x94>)
 8000c0a:	f006 fa3f 	bl	800708c <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM4_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000c14:	f000 fe50 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3720      	adds	r7, #32
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000f4 	.word	0x200000f4
 8000c24:	40000800 	.word	0x40000800

08000c28 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09e      	sub	sp, #120	; 0x78
 8000c2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000c3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	222c      	movs	r2, #44	; 0x2c
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f007 fdf6 	bl	8008864 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000c78:	4b4f      	ldr	r3, [pc, #316]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000c7a:	4a50      	ldr	r2, [pc, #320]	; (8000dbc <MX_TIM8_Init+0x194>)
 8000c7c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 8000c8a:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000c8c:	226b      	movs	r2, #107	; 0x6b
 8000c8e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 8000c96:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000c98:	2218      	movs	r2, #24
 8000c9a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8000ca2:	4845      	ldr	r0, [pc, #276]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000ca4:	f004 fd97 	bl	80057d6 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM8_Init+0x8a>
		Error_Handler();
 8000cae:	f000 fe03 	bl	80018b8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8000cb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	483e      	ldr	r0, [pc, #248]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000cc0:	f005 fb16 	bl	80062f0 <HAL_TIM_ConfigClockSource>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM8_Init+0xa6>
		Error_Handler();
 8000cca:	f000 fdf5 	bl	80018b8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8000cce:	483a      	ldr	r0, [pc, #232]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000cd0:	f004 fe01 	bl	80058d6 <HAL_TIM_PWM_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM8_Init+0xb6>
		Error_Handler();
 8000cda:	f000 fded 	bl	80018b8 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4835      	ldr	r0, [pc, #212]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000ce2:	f004 ffeb 	bl	8005cbc <HAL_TIM_OnePulse_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM8_Init+0xc8>
		Error_Handler();
 8000cec:	f000 fde4 	bl	80018b8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000cf0:	2306      	movs	r3, #6
 8000cf2:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8000cf8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	482e      	ldr	r0, [pc, #184]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000d00:	f005 fbb0 	bl	8006464 <HAL_TIM_SlaveConfigSynchro>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM8_Init+0xe6>
		Error_Handler();
 8000d0a:	f000 fdd5 	bl	80018b8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8000d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4825      	ldr	r0, [pc, #148]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000d22:	f006 f9b3 	bl	800708c <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM8_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000d2c:	f000 fdc4 	bl	80018b8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d30:	2370      	movs	r3, #112	; 0x70
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8000d34:	2336      	movs	r3, #54	; 0x36
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	2200      	movs	r2, #0
 8000d52:	4619      	mov	r1, r3
 8000d54:	4818      	ldr	r0, [pc, #96]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000d56:	f005 f9b3 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM8_Init+0x13c>
			!= HAL_OK) {
		Error_Handler();
 8000d60:	f000 fdaa 	bl	80018b8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d8a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000d9a:	f006 fa05 	bl	80071a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM8_Init+0x180>
			!= HAL_OK) {
		Error_Handler();
 8000da4:	f000 fd88 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8000da8:	4803      	ldr	r0, [pc, #12]	; (8000db8 <MX_TIM8_Init+0x190>)
 8000daa:	f000 ff5f 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 8000dae:	bf00      	nop
 8000db0:	3778      	adds	r7, #120	; 0x78
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000b4 	.word	0x200000b4
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dc8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2000000;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <MX_USART3_UART_Init+0x5c>)
 8000dce:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000de4:	220c      	movs	r2, #12
 8000de6:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_USART3_UART_Init+0x54>)
 8000e02:	f006 fa6d 	bl	80072e0 <HAL_UART_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART3_UART_Init+0x50>
		Error_Handler();
 8000e0c:	f000 fd54 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000134 	.word	0x20000134
 8000e18:	40004800 	.word	0x40004800
 8000e1c:	001e8480 	.word	0x001e8480

08000e20 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e2a:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	2206      	movs	r2, #6
 8000e30:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e64:	f002 fca3 	bl	80037ae <HAL_PCD_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000e6e:	f000 fd23 	bl	80018b8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001b4 	.word	0x200001b4

08000e7c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

	/* Init with LL driver */
	/* DMA controller clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000e80:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e84:	f7ff fbb4 	bl	80005f0 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2038      	movs	r0, #56	; 0x38
 8000e8e:	f001 fe8c 	bl	8002baa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e92:	2038      	movs	r0, #56	; 0x38
 8000e94:	f001 fea5 	bl	8002be2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 1, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	203c      	movs	r0, #60	; 0x3c
 8000e9e:	f001 fe84 	bl	8002baa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ea2:	203c      	movs	r0, #60	; 0x3c
 8000ea4:	f001 fe9d 	bl	8002be2 <HAL_NVIC_EnableIRQ>

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b6f      	ldr	r3, [pc, #444]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a6e      	ldr	r2, [pc, #440]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b6c      	ldr	r3, [pc, #432]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b69      	ldr	r3, [pc, #420]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a68      	ldr	r2, [pc, #416]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b66      	ldr	r3, [pc, #408]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b63      	ldr	r3, [pc, #396]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a62      	ldr	r2, [pc, #392]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b60      	ldr	r3, [pc, #384]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a5c      	ldr	r2, [pc, #368]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b5a      	ldr	r3, [pc, #360]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f22:	4b57      	ldr	r3, [pc, #348]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a56      	ldr	r2, [pc, #344]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b54      	ldr	r3, [pc, #336]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4b51      	ldr	r3, [pc, #324]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a50      	ldr	r2, [pc, #320]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f52:	4b4b      	ldr	r3, [pc, #300]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a4a      	ldr	r2, [pc, #296]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b48      	ldr	r3, [pc, #288]	; (8001080 <MX_GPIO_Init+0x1d4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f70:	4844      	ldr	r0, [pc, #272]	; (8001084 <MX_GPIO_Init+0x1d8>)
 8000f72:	f002 fc03 	bl	800377c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000f76:	2200      	movs	r2, #0
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	4843      	ldr	r0, [pc, #268]	; (8001088 <MX_GPIO_Init+0x1dc>)
 8000f7c:	f002 fbfe 	bl	800377c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000f80:	2200      	movs	r2, #0
 8000f82:	217f      	movs	r1, #127	; 0x7f
 8000f84:	4841      	ldr	r0, [pc, #260]	; (800108c <MX_GPIO_Init+0x1e0>)
 8000f86:	f002 fbf9 	bl	800377c <HAL_GPIO_WritePin>
			Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin
					| S5_Pin | S6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f90:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <MX_GPIO_Init+0x1e4>)
 8000f92:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	483d      	ldr	r0, [pc, #244]	; (8001094 <MX_GPIO_Init+0x1e8>)
 8000fa0:	f002 fa42 	bl	8003428 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000fa4:	2332      	movs	r3, #50	; 0x32
 8000fa6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb4:	230b      	movs	r3, #11
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4835      	ldr	r0, [pc, #212]	; (8001094 <MX_GPIO_Init+0x1e8>)
 8000fc0:	f002 fa32 	bl	8003428 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000fc4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4829      	ldr	r0, [pc, #164]	; (8001084 <MX_GPIO_Init+0x1d8>)
 8000fde:	f002 fa23 	bl	8003428 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff4:	230b      	movs	r3, #11
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4821      	ldr	r0, [pc, #132]	; (8001084 <MX_GPIO_Init+0x1d8>)
 8001000:	f002 fa12 	bl	8003428 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001004:	2340      	movs	r3, #64	; 0x40
 8001006:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	481b      	ldr	r0, [pc, #108]	; (8001088 <MX_GPIO_Init+0x1dc>)
 800101c:	f002 fa04 	bl	8003428 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4815      	ldr	r0, [pc, #84]	; (8001088 <MX_GPIO_Init+0x1dc>)
 8001034:	f002 f9f8 	bl	8003428 <HAL_GPIO_Init>

	/*Configure GPIO pins : Switches_driver_enable_Pin S1_Pin S2_Pin S3_Pin
	 S4_Pin S5_Pin S6_Pin */
	GPIO_InitStruct.Pin = Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin
 8001038:	237f      	movs	r3, #127	; 0x7f
 800103a:	61fb      	str	r3, [r7, #28]
			| S4_Pin | S5_Pin | S6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <MX_GPIO_Init+0x1e0>)
 8001050:	f002 f9ea 	bl	8003428 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8001054:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001058:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_GPIO_Init+0x1dc>)
 8001072:	f002 f9d9 	bl	8003428 <HAL_GPIO_Init>

}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400
 8001088:	40021800 	.word	0x40021800
 800108c:	40020c00 	.word	0x40020c00
 8001090:	10110000 	.word	0x10110000
 8001094:	40020800 	.word	0x40020800

08001098 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	//stop the ADC when in interrupt
	HAL_ADC_Stop_DMA(&hadc1);
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <HAL_ADC_ConvCpltCallback+0x88>)
 80010a2:	f001 f983 	bl	80023ac <HAL_ADC_Stop_DMA>
	filledBuffers++;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <HAL_ADC_ConvCpltCallback+0x8c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_ADC_ConvCpltCallback+0x8c>)
 80010b0:	701a      	strb	r2, [r3, #0]
	// observe interval of SPI receiving
	// Run the measurement again

	//first buffer is filled
	if (filledBuffers == 1) {
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_ADC_ConvCpltCallback+0x8c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d107      	bne.n	80010ca <HAL_ADC_ConvCpltCallback+0x32>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx2.uint16,
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_ADC_ConvCpltCallback+0x90>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	491a      	ldr	r1, [pc, #104]	; (800112c <HAL_ADC_ConvCpltCallback+0x94>)
 80010c2:	4817      	ldr	r0, [pc, #92]	; (8001120 <HAL_ADC_ConvCpltCallback+0x88>)
 80010c4:	f001 f884 	bl	80021d0 <HAL_ADC_Start_DMA>
					samplesPerPeriod);
		}

	}

}
 80010c8:	e026      	b.n	8001118 <HAL_ADC_ConvCpltCallback+0x80>
	else if (filledBuffers == 2) {
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_ADC_ConvCpltCallback+0x8c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d122      	bne.n	8001118 <HAL_ADC_ConvCpltCallback+0x80>
		switchingCircuitIdle();
 80010d2:	f000 fbc3 	bl	800185c <switchingCircuitIdle>
		filledBuffers = 0;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_ADC_ConvCpltCallback+0x8c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 80010dc:	f000 f93c 	bl	8001358 <sendDataOverUART>
		state.remainingMeasurements--;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_ConvCpltCallback+0x98>)
 80010e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3b01      	subs	r3, #1
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_ADC_ConvCpltCallback+0x98>)
 80010f0:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_ADC_ConvCpltCallback+0x98>)
 80010f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d106      	bne.n	800110a <HAL_ADC_ConvCpltCallback+0x72>
			state.activeMeasureTechnique = 0;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_ADC_ConvCpltCallback+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim4);
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001104:	f004 fbbc 	bl	8005880 <HAL_TIM_Base_Stop_IT>
}
 8001108:	e006      	b.n	8001118 <HAL_ADC_ConvCpltCallback+0x80>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_ADC_ConvCpltCallback+0x90>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4909      	ldr	r1, [pc, #36]	; (8001138 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <HAL_ADC_ConvCpltCallback+0x88>)
 8001114:	f001 f85c 	bl	80021d0 <HAL_ADC_Start_DMA>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20015e90 	.word	0x20015e90
 8001124:	20000090 	.word	0x20000090
 8001128:	20000000 	.word	0x20000000
 800112c:	200005bc 	.word	0x200005bc
 8001130:	20015e84 	.word	0x20015e84
 8001134:	200000f4 	.word	0x200000f4
 8001138:	20015ed8 	.word	0x20015ed8

0800113c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_UART_RxCpltCallback+0x5c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d120      	bne.n	8001190 <HAL_UART_RxCpltCallback+0x54>
		state.measureTechniqueUpdated = 1;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_UART_RxCpltCallback+0x60>)
 8001150:	2201      	movs	r2, #1
 8001152:	719a      	strb	r2, [r3, #6]
		prepareForNextMeasurements(buffer_uart_rx);
 8001154:	4812      	ldr	r0, [pc, #72]	; (80011a0 <HAL_UART_RxCpltCallback+0x64>)
 8001156:	f000 f829 	bl	80011ac <prepareForNextMeasurements>
		char msg_buffer[18];
		sprintf(msg_buffer, "Mode %u selected\n\r", state.setMeasureTechnique);
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_UART_RxCpltCallback+0x60>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	490f      	ldr	r1, [pc, #60]	; (80011a4 <HAL_UART_RxCpltCallback+0x68>)
 8001166:	4618      	mov	r0, r3
 8001168:	f007 fb84 	bl	8008874 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffer, strlen(msg_buffer),
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f865 	bl	8000240 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	f107 010c 	add.w	r1, r7, #12
 800117e:	230a      	movs	r3, #10
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <HAL_UART_RxCpltCallback+0x6c>)
 8001182:	f006 f8fb 	bl	800737c <HAL_UART_Transmit>
				10);
		//wait for next incomming data
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8001186:	2203      	movs	r2, #3
 8001188:	4905      	ldr	r1, [pc, #20]	; (80011a0 <HAL_UART_RxCpltCallback+0x64>)
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <HAL_UART_RxCpltCallback+0x6c>)
 800118c:	f006 f988 	bl	80074a0 <HAL_UART_Receive_IT>
	}
}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004800 	.word	0x40004800
 800119c:	20015e84 	.word	0x20015e84
 80011a0:	200005b8 	.word	0x200005b8
 80011a4:	08009098 	.word	0x08009098
 80011a8:	20000134 	.word	0x20000134

080011ac <prepareForNextMeasurements>:

prepareForNextMeasurements(char *receivedData) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

	//set measurement method
	switch (receivedData[0]) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3b30      	subs	r3, #48	; 0x30
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d81a      	bhi.n	80011f4 <prepareForNextMeasurements+0x48>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <prepareForNextMeasurements+0x18>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	080011d5 	.word	0x080011d5
 80011c8:	080011dd 	.word	0x080011dd
 80011cc:	080011e5 	.word	0x080011e5
 80011d0:	080011ed 	.word	0x080011ed
	case '0':
		state.setMeasureTechnique = 0;
 80011d4:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
		break;
 80011da:	e00f      	b.n	80011fc <prepareForNextMeasurements+0x50>
	case '1':
		state.setMeasureTechnique = 1;
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
		break;
 80011e2:	e00b      	b.n	80011fc <prepareForNextMeasurements+0x50>
	case '2':
		state.setMeasureTechnique = 2;
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	701a      	strb	r2, [r3, #0]
		break;
 80011ea:	e007      	b.n	80011fc <prepareForNextMeasurements+0x50>
	case '3':
		state.setMeasureTechnique = 3;
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 80011ee:	2203      	movs	r2, #3
 80011f0:	701a      	strb	r2, [r3, #0]
		break;
 80011f2:	e003      	b.n	80011fc <prepareForNextMeasurements+0x50>
	default:
		state.setMeasureTechnique = 0;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
		break;
 80011fa:	bf00      	nop
	}

	//set number of measurements
	switch (receivedData[1]) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3301      	adds	r3, #1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	3b30      	subs	r3, #48	; 0x30
 8001204:	2b09      	cmp	r3, #9
 8001206:	d840      	bhi.n	800128a <prepareForNextMeasurements+0xde>
 8001208:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <prepareForNextMeasurements+0x64>)
 800120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120e:	bf00      	nop
 8001210:	08001239 	.word	0x08001239
 8001214:	08001243 	.word	0x08001243
 8001218:	0800124b 	.word	0x0800124b
 800121c:	08001253 	.word	0x08001253
 8001220:	0800125b 	.word	0x0800125b
 8001224:	08001263 	.word	0x08001263
 8001228:	0800126b 	.word	0x0800126b
 800122c:	08001273 	.word	0x08001273
 8001230:	0800127b 	.word	0x0800127b
 8001234:	08001283 	.word	0x08001283
	case '0':
		state.setMeasurements = -1;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 800123a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123e:	809a      	strh	r2, [r3, #4]
		break;
 8001240:	e027      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '1':
		state.setMeasurements = 1;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 8001244:	2201      	movs	r2, #1
 8001246:	809a      	strh	r2, [r3, #4]
		break;
 8001248:	e023      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '2':
		state.setMeasurements = 2;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 800124c:	2202      	movs	r2, #2
 800124e:	809a      	strh	r2, [r3, #4]
		break;
 8001250:	e01f      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '3':
		state.setMeasurements = 3;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 8001254:	2203      	movs	r2, #3
 8001256:	809a      	strh	r2, [r3, #4]
		break;
 8001258:	e01b      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '4':
		state.setMeasurements = 4;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 800125c:	2204      	movs	r2, #4
 800125e:	809a      	strh	r2, [r3, #4]
		break;
 8001260:	e017      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '5':
		state.setMeasurements = 5;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 8001264:	2205      	movs	r2, #5
 8001266:	809a      	strh	r2, [r3, #4]
		break;
 8001268:	e013      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '6':
		state.setMeasurements = 6;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 800126c:	2206      	movs	r2, #6
 800126e:	809a      	strh	r2, [r3, #4]
		break;
 8001270:	e00f      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '7':
		state.setMeasurements = 7;
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 8001274:	2207      	movs	r2, #7
 8001276:	809a      	strh	r2, [r3, #4]
		break;
 8001278:	e00b      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '8':
		state.setMeasurements = 8;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 800127c:	2208      	movs	r2, #8
 800127e:	809a      	strh	r2, [r3, #4]
		break;
 8001280:	e007      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	case '9':
		state.setMeasurements = 9;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 8001284:	2209      	movs	r2, #9
 8001286:	809a      	strh	r2, [r3, #4]
		break;
 8001288:	e003      	b.n	8001292 <prepareForNextMeasurements+0xe6>
	default:
		state.setMeasurements = 1;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 800128c:	2201      	movs	r2, #1
 800128e:	809a      	strh	r2, [r3, #4]
		break;
 8001290:	bf00      	nop
	}
	state.preparedToRunPolarizationPhase = 1;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <prepareForNextMeasurements+0xfc>)
 8001294:	2201      	movs	r2, #1
 8001296:	71da      	strb	r2, [r3, #7]
}
 8001298:	bf00      	nop
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20015e84 	.word	0x20015e84

080012ac <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	filledBuffers++;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_SPI_RxCpltCallback+0x90>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_SPI_RxCpltCallback+0x90>)
 80012be:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 80012c0:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_SPI_RxCpltCallback+0x90>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d108      	bne.n	80012da <HAL_SPI_RxCpltCallback+0x2e>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2.uint8, samplesPerPeriod);
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_SPI_RxCpltCallback+0x94>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	491c      	ldr	r1, [pc, #112]	; (8001344 <HAL_SPI_RxCpltCallback+0x98>)
 80012d2:	481d      	ldr	r0, [pc, #116]	; (8001348 <HAL_SPI_RxCpltCallback+0x9c>)
 80012d4:	f003 fd72 	bl	8004dbc <HAL_SPI_Receive_DMA>
	 samplesPerPeriod++;
	 sprintf(msg_buffers, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);

	 }*/
}
 80012d8:	e02b      	b.n	8001332 <HAL_SPI_RxCpltCallback+0x86>
	else if (filledBuffers == 2) {
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_SPI_RxCpltCallback+0x90>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d127      	bne.n	8001332 <HAL_SPI_RxCpltCallback+0x86>
		switchingCircuitIdle();
 80012e2:	f000 fabb 	bl	800185c <switchingCircuitIdle>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80012e6:	2100      	movs	r1, #0
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <HAL_SPI_RxCpltCallback+0xa0>)
 80012ea:	f004 fbb3 	bl	8005a54 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 80012ee:	2104      	movs	r1, #4
 80012f0:	4816      	ldr	r0, [pc, #88]	; (800134c <HAL_SPI_RxCpltCallback+0xa0>)
 80012f2:	f004 fbaf 	bl	8005a54 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80012f6:	2100      	movs	r1, #0
 80012f8:	4815      	ldr	r0, [pc, #84]	; (8001350 <HAL_SPI_RxCpltCallback+0xa4>)
 80012fa:	f004 fbab 	bl	8005a54 <HAL_TIM_PWM_Stop_IT>
		filledBuffers = 0;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_SPI_RxCpltCallback+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001304:	f000 f828 	bl	8001358 <sendDataOverUART>
		state.remainingMeasurements--;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_SPI_RxCpltCallback+0xa8>)
 800130a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800130e:	b29b      	uxth	r3, r3
 8001310:	3b01      	subs	r3, #1
 8001312:	b29b      	uxth	r3, r3
 8001314:	b21a      	sxth	r2, r3
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_SPI_RxCpltCallback+0xa8>)
 8001318:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_SPI_RxCpltCallback+0xa8>)
 800131c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d103      	bne.n	800132c <HAL_SPI_RxCpltCallback+0x80>
			state.activeMeasureTechnique = 0;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_SPI_RxCpltCallback+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	705a      	strb	r2, [r3, #1]
}
 800132a:	e002      	b.n	8001332 <HAL_SPI_RxCpltCallback+0x86>
			state.preparedToRunPolarizationPhase = 1;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_SPI_RxCpltCallback+0xa8>)
 800132e:	2201      	movs	r2, #1
 8001330:	71da      	strb	r2, [r3, #7]
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000090 	.word	0x20000090
 8001340:	20000000 	.word	0x20000000
 8001344:	200005bc 	.word	0x200005bc
 8001348:	2002b800 	.word	0x2002b800
 800134c:	2002b7c0 	.word	0x2002b7c0
 8001350:	200000b4 	.word	0x200000b4
 8001354:	20015e84 	.word	0x20015e84

08001358 <sendDataOverUART>:

void sendDataOverUART() {
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	847b      	strh	r3, [r7, #34]	; 0x22
	int i = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
	if (state.activeMeasureTechnique == 1
 8001366:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <sendDataOverUART+0x138>)
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d003      	beq.n	8001376 <sendDataOverUART+0x1e>
			|| state.activeMeasureTechnique == 2) {
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <sendDataOverUART+0x138>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d16e      	bne.n	8001454 <sendDataOverUART+0xfc>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	e025      	b.n	80013c8 <sendDataOverUART+0x70>
			adc = (uint16_t) (buffer_rx1.uint8[i])
 800137c:	4a45      	ldr	r2, [pc, #276]	; (8001494 <sendDataOverUART+0x13c>)
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx1.uint8[i + 1]);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	3301      	adds	r3, #1
 800138a:	4942      	ldr	r1, [pc, #264]	; (8001494 <sendDataOverUART+0x13c>)
 800138c:	5ccb      	ldrb	r3, [r1, r3]
 800138e:	b29b      	uxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx1.uint8[i])
 8001394:	4413      	add	r3, r2
 8001396:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 8001398:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800139a:	463b      	mov	r3, r7
 800139c:	493e      	ldr	r1, [pc, #248]	; (8001498 <sendDataOverUART+0x140>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 fa68 	bl	8008874 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 80013a4:	463b      	mov	r3, r7
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff4a 	bl	8000240 <strlen>
 80013ac:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4639      	mov	r1, r7
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	4839      	ldr	r0, [pc, #228]	; (800149c <sendDataOverUART+0x144>)
 80013b8:	f005 ffe0 	bl	800737c <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	3301      	adds	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	3301      	adds	r3, #1
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
 80013c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <sendDataOverUART+0x148>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3d4      	bcc.n	800137c <sendDataOverUART+0x24>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
 80013d6:	e025      	b.n	8001424 <sendDataOverUART+0xcc>
			adc = (uint16_t) (buffer_rx2.uint8[i])
 80013d8:	4a32      	ldr	r2, [pc, #200]	; (80014a4 <sendDataOverUART+0x14c>)
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx2.uint8[i + 1]);
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	3301      	adds	r3, #1
 80013e6:	492f      	ldr	r1, [pc, #188]	; (80014a4 <sendDataOverUART+0x14c>)
 80013e8:	5ccb      	ldrb	r3, [r1, r3]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx2.uint8[i])
 80013f0:	4413      	add	r3, r2
 80013f2:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 80013f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013f6:	463b      	mov	r3, r7
 80013f8:	4927      	ldr	r1, [pc, #156]	; (8001498 <sendDataOverUART+0x140>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 fa3a 	bl	8008874 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001400:	463b      	mov	r3, r7
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ff1c 	bl	8000240 <strlen>
 8001408:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800140a:	b29a      	uxth	r2, r3
 800140c:	4639      	mov	r1, r7
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	4822      	ldr	r0, [pc, #136]	; (800149c <sendDataOverUART+0x144>)
 8001414:	f005 ffb2 	bl	800737c <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	3301      	adds	r3, #1
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	3301      	adds	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
 8001424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <sendDataOverUART+0x148>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d3d4      	bcc.n	80013d8 <sendDataOverUART+0x80>
		}
		sprintf(msg_buffers, ";%hu\n", 50);
 800142e:	463b      	mov	r3, r7
 8001430:	2232      	movs	r2, #50	; 0x32
 8001432:	491d      	ldr	r1, [pc, #116]	; (80014a8 <sendDataOverUART+0x150>)
 8001434:	4618      	mov	r0, r3
 8001436:	f007 fa1d 	bl	8008874 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800143a:	463b      	mov	r3, r7
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe feff 	bl	8000240 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	4639      	mov	r1, r7
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <sendDataOverUART+0x144>)
 800144e:	f005 ff95 	bl	800737c <HAL_UART_Transmit>
		sprintf(msg_freq, "%d\n", frequency);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
		HAL_MAX_DELAY);
	}

}
 8001452:	e019      	b.n	8001488 <sendDataOverUART+0x130>
	} else if (state.activeMeasureTechnique == 3) {
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <sendDataOverUART+0x138>)
 8001456:	785b      	ldrb	r3, [r3, #1]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d115      	bne.n	8001488 <sendDataOverUART+0x130>
		sprintf(msg_freq, "%d\n", frequency);
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <sendDataOverUART+0x154>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	4912      	ldr	r1, [pc, #72]	; (80014b0 <sendDataOverUART+0x158>)
 8001466:	4618      	mov	r0, r3
 8001468:	f007 fa04 	bl	8008874 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe fee5 	bl	8000240 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	f107 0110 	add.w	r1, r7, #16
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <sendDataOverUART+0x144>)
 8001484:	f005 ff7a 	bl	800737c <HAL_UART_Transmit>
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20015e84 	.word	0x20015e84
 8001494:	20015ed8 	.word	0x20015ed8
 8001498:	080090ac 	.word	0x080090ac
 800149c:	20000134 	.word	0x20000134
 80014a0:	20000000 	.word	0x20000000
 80014a4:	200005bc 	.word	0x200005bc
 80014a8:	080090b4 	.word	0x080090b4
 80014ac:	200000a0 	.word	0x200000a0
 80014b0:	080090bc 	.word	0x080090bc

080014b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
		}
		state.index++;*/

	}

}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_TIM_IC_CaptureCallback>:
	LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_0);
	NVIC_SetPriority(DMA2_Stream0_IRQn, 0);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d102      	bne.n	80014e0 <HAL_TIM_IC_CaptureCallback+0x18>
		measureFrequencyWithTimer(htim);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f8b6 	bl	800164c <measureFrequencyWithTimer>
	}
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <chooseActionByState>:
	state.remainingMeasurements = 0;
	state.preparedToRunPolarizationPhase = 0;
	state.index = 0;
}

void chooseActionByState() {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	// if new measurement technique was set, update remaining measurements as well
	if (state.measureTechniqueUpdated) {
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <chooseActionByState+0x74>)
 80014ee:	799b      	ldrb	r3, [r3, #6]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <chooseActionByState+0x24>
		state.remainingMeasurements = state.setMeasurements;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <chooseActionByState+0x74>)
 80014f6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <chooseActionByState+0x74>)
 80014fc:	805a      	strh	r2, [r3, #2]
		state.activeMeasureTechnique = state.setMeasureTechnique;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <chooseActionByState+0x74>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <chooseActionByState+0x74>)
 8001504:	705a      	strb	r2, [r3, #1]
		state.measureTechniqueUpdated = 0;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <chooseActionByState+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	719a      	strb	r2, [r3, #6]

	}
	switch (state.activeMeasureTechnique) {
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <chooseActionByState+0x74>)
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d820      	bhi.n	8001556 <chooseActionByState+0x6e>
 8001514:	a201      	add	r2, pc, #4	; (adr r2, 800151c <chooseActionByState+0x34>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	0800152d 	.word	0x0800152d
 8001520:	08001539 	.word	0x08001539
 8001524:	08001543 	.word	0x08001543
 8001528:	0800154d 	.word	0x0800154d

	case 0:
		// Idle state
		showOnLEDs(0, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2000      	movs	r0, #0
 8001532:	f000 f815 	bl	8001560 <showOnLEDs>
		break;
 8001536:	e00e      	b.n	8001556 <chooseActionByState+0x6e>
	case 1:
		// measure with external ADC
		runPolarizationSequence();
 8001538:	f000 f8dc 	bl	80016f4 <runPolarizationSequence>
		measureWithExternalADC();
 800153c:	f000 f832 	bl	80015a4 <measureWithExternalADC>
		break;
 8001540:	e009      	b.n	8001556 <chooseActionByState+0x6e>
	case 2:
		// measure with internal ADC
		runPolarizationSequence();
 8001542:	f000 f8d7 	bl	80016f4 <runPolarizationSequence>
		measureWithInternalADC();
 8001546:	f000 f855 	bl	80015f4 <measureWithInternalADC>
		break;
 800154a:	e004      	b.n	8001556 <chooseActionByState+0x6e>
	case 3:
		// measure with comparator
		runPolarizationSequence();
 800154c:	f000 f8d2 	bl	80016f4 <runPolarizationSequence>
		measureWithComparator();
 8001550:	f000 f86c 	bl	800162c <measureWithComparator>
		break;
 8001554:	bf00      	nop

	}
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20015e84 	.word	0x20015e84

08001560 <showOnLEDs>:

void showOnLEDs(uint8_t L1, uint8_t L2, uint8_t L3) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	460b      	mov	r3, r1
 800156c:	71bb      	strb	r3, [r7, #6]
 800156e:	4613      	mov	r3, r2
 8001570:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, L1);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	461a      	mov	r2, r3
 8001576:	2101      	movs	r1, #1
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <showOnLEDs+0x40>)
 800157a:	f002 f8ff 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, L2);
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	461a      	mov	r2, r3
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <showOnLEDs+0x40>)
 8001586:	f002 f8f9 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, L3);
 800158a:	797b      	ldrb	r3, [r7, #5]
 800158c:	461a      	mov	r2, r3
 800158e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <showOnLEDs+0x40>)
 8001594:	f002 f8f2 	bl	800377c <HAL_GPIO_WritePin>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40020400 	.word	0x40020400

080015a4 <measureWithExternalADC>:

void measureWithExternalADC() {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	// visualise
	showOnLEDs(1, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff ffd7 	bl	8001560 <showOnLEDs>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <measureWithExternalADC+0x3c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	490a      	ldr	r1, [pc, #40]	; (80015e4 <measureWithExternalADC+0x40>)
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <measureWithExternalADC+0x44>)
 80015be:	f003 fbfd 	bl	8004dbc <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 80015c2:	2100      	movs	r1, #0
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <measureWithExternalADC+0x48>)
 80015c6:	f004 f9bb 	bl	8005940 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 80015ca:	2104      	movs	r1, #4
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <measureWithExternalADC+0x48>)
 80015ce:	f004 f9b7 	bl	8005940 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 80015d2:	2100      	movs	r1, #0
 80015d4:	4806      	ldr	r0, [pc, #24]	; (80015f0 <measureWithExternalADC+0x4c>)
 80015d6:	f004 f9b3 	bl	8005940 <HAL_TIM_PWM_Start_IT>
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20015ed8 	.word	0x20015ed8
 80015e8:	2002b800 	.word	0x2002b800
 80015ec:	2002b7c0 	.word	0x2002b7c0
 80015f0:	200000b4 	.word	0x200000b4

080015f4 <measureWithInternalADC>:

void measureWithInternalADC() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	// visualise
	showOnLEDs(0, 1, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2101      	movs	r1, #1
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff ffaf 	bl	8001560 <showOnLEDs>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16, samplesPerPeriod);
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <measureWithInternalADC+0x28>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4905      	ldr	r1, [pc, #20]	; (8001620 <measureWithInternalADC+0x2c>)
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <measureWithInternalADC+0x30>)
 800160c:	f000 fde0 	bl	80021d0 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim4);
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <measureWithInternalADC+0x34>)
 8001612:	f004 f90b 	bl	800582c <HAL_TIM_Base_Start_IT>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000000 	.word	0x20000000
 8001620:	20015ed8 	.word	0x20015ed8
 8001624:	20015e90 	.word	0x20015e90
 8001628:	200000f4 	.word	0x200000f4

0800162c <measureWithComparator>:

void measureWithComparator() {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	// visualise
	showOnLEDs(0, 0, 1);
 8001630:	2201      	movs	r2, #1
 8001632:	2100      	movs	r1, #0
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff ff93 	bl	8001560 <showOnLEDs>
	// run the timer
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800163a:	2100      	movs	r1, #0
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <measureWithComparator+0x1c>)
 800163e:	f004 facf 	bl	8005be0 <HAL_TIM_IC_Start_IT>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2002b864 	.word	0x2002b864

0800164c <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if (firstCapturedSample == 0) {
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <measureFrequencyWithTimer+0x90>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10a      	bne.n	8001672 <measureFrequencyWithTimer+0x26>
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800165c:	2100      	movs	r1, #0
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f004 ff42 	bl	80064e8 <HAL_TIM_ReadCapturedValue>
 8001664:	4602      	mov	r2, r0
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <measureFrequencyWithTimer+0x94>)
 8001668:	601a      	str	r2, [r3, #0]
		firstCapturedSample = 1;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <measureFrequencyWithTimer+0x90>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
		}
		else{
			state.preparedToRunPolarizationPhase = 1;
		}
	}
}
 8001670:	e02f      	b.n	80016d2 <measureFrequencyWithTimer+0x86>
	else if (firstCapturedSample) {
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <measureFrequencyWithTimer+0x90>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d02b      	beq.n	80016d2 <measureFrequencyWithTimer+0x86>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800167a:	2100      	movs	r1, #0
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f004 ff33 	bl	80064e8 <HAL_TIM_ReadCapturedValue>
 8001682:	4602      	mov	r2, r0
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <measureFrequencyWithTimer+0x98>)
 8001686:	601a      	str	r2, [r3, #0]
		difference = IC_Value2 - IC_Value1;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <measureFrequencyWithTimer+0x98>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <measureFrequencyWithTimer+0x94>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <measureFrequencyWithTimer+0x9c>)
 8001694:	6013      	str	r3, [r2, #0]
		frequency = /*HAL_RCC_GetHCLKFreq() /*/difference;
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <measureFrequencyWithTimer+0x9c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <measureFrequencyWithTimer+0xa0>)
 800169c:	6013      	str	r3, [r2, #0]
		firstCapturedSample = 0;
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <measureFrequencyWithTimer+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 80016a4:	f7ff fe58 	bl	8001358 <sendDataOverUART>
		state.remainingMeasurements--;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <measureFrequencyWithTimer+0xa4>)
 80016aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <measureFrequencyWithTimer+0xa4>)
 80016b8:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <measureFrequencyWithTimer+0xa4>)
 80016bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <measureFrequencyWithTimer+0x80>
			state.activeMeasureTechnique = 0;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <measureFrequencyWithTimer+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	705a      	strb	r2, [r3, #1]
}
 80016ca:	e002      	b.n	80016d2 <measureFrequencyWithTimer+0x86>
			state.preparedToRunPolarizationPhase = 1;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <measureFrequencyWithTimer+0xa4>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	71da      	strb	r2, [r3, #7]
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200000a4 	.word	0x200000a4
 80016e0:	20000094 	.word	0x20000094
 80016e4:	20000098 	.word	0x20000098
 80016e8:	2000009c 	.word	0x2000009c
 80016ec:	200000a0 	.word	0x200000a0
 80016f0:	20015e84 	.word	0x20015e84

080016f4 <runPolarizationSequence>:

void runPolarizationSequence() {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 80016f8:	4b56      	ldr	r3, [pc, #344]	; (8001854 <runPolarizationSequence+0x160>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	71da      	strb	r2, [r3, #7]

	// visualise
	showOnLEDs(1, 1, 1);
 80016fe:	2201      	movs	r2, #1
 8001700:	2101      	movs	r1, #1
 8001702:	2001      	movs	r0, #1
 8001704:	f7ff ff2c 	bl	8001560 <showOnLEDs>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	2102      	movs	r1, #2
 800170c:	4852      	ldr	r0, [pc, #328]	; (8001858 <runPolarizationSequence+0x164>)
 800170e:	f002 f835 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2104      	movs	r1, #4
 8001716:	4850      	ldr	r0, [pc, #320]	; (8001858 <runPolarizationSequence+0x164>)
 8001718:	f002 f830 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	2108      	movs	r1, #8
 8001720:	484d      	ldr	r0, [pc, #308]	; (8001858 <runPolarizationSequence+0x164>)
 8001722:	f002 f82b 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2110      	movs	r1, #16
 800172a:	484b      	ldr	r0, [pc, #300]	; (8001858 <runPolarizationSequence+0x164>)
 800172c:	f002 f826 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2120      	movs	r1, #32
 8001734:	4848      	ldr	r0, [pc, #288]	; (8001858 <runPolarizationSequence+0x164>)
 8001736:	f002 f821 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800173a:	2201      	movs	r2, #1
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	4846      	ldr	r0, [pc, #280]	; (8001858 <runPolarizationSequence+0x164>)
 8001740:	f002 f81c 	bl	800377c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001744:	2005      	movs	r0, #5
 8001746:	f000 fcdd 	bl	8002104 <HAL_Delay>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 800174a:	2201      	movs	r2, #1
 800174c:	2102      	movs	r1, #2
 800174e:	4842      	ldr	r0, [pc, #264]	; (8001858 <runPolarizationSequence+0x164>)
 8001750:	f002 f814 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2104      	movs	r1, #4
 8001758:	483f      	ldr	r0, [pc, #252]	; (8001858 <runPolarizationSequence+0x164>)
 800175a:	f002 f80f 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800175e:	2201      	movs	r2, #1
 8001760:	2108      	movs	r1, #8
 8001762:	483d      	ldr	r0, [pc, #244]	; (8001858 <runPolarizationSequence+0x164>)
 8001764:	f002 f80a 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001768:	2201      	movs	r2, #1
 800176a:	2110      	movs	r1, #16
 800176c:	483a      	ldr	r0, [pc, #232]	; (8001858 <runPolarizationSequence+0x164>)
 800176e:	f002 f805 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2120      	movs	r1, #32
 8001776:	4838      	ldr	r0, [pc, #224]	; (8001858 <runPolarizationSequence+0x164>)
 8001778:	f002 f800 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	4835      	ldr	r0, [pc, #212]	; (8001858 <runPolarizationSequence+0x164>)
 8001782:	f001 fffb 	bl	800377c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800178a:	f000 fcbb 	bl	8002104 <HAL_Delay>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2102      	movs	r1, #2
 8001792:	4831      	ldr	r0, [pc, #196]	; (8001858 <runPolarizationSequence+0x164>)
 8001794:	f001 fff2 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2104      	movs	r1, #4
 800179c:	482e      	ldr	r0, [pc, #184]	; (8001858 <runPolarizationSequence+0x164>)
 800179e:	f001 ffed 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2108      	movs	r1, #8
 80017a6:	482c      	ldr	r0, [pc, #176]	; (8001858 <runPolarizationSequence+0x164>)
 80017a8:	f001 ffe8 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2110      	movs	r1, #16
 80017b0:	4829      	ldr	r0, [pc, #164]	; (8001858 <runPolarizationSequence+0x164>)
 80017b2:	f001 ffe3 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80017b6:	2201      	movs	r2, #1
 80017b8:	2120      	movs	r1, #32
 80017ba:	4827      	ldr	r0, [pc, #156]	; (8001858 <runPolarizationSequence+0x164>)
 80017bc:	f001 ffde 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2140      	movs	r1, #64	; 0x40
 80017c4:	4824      	ldr	r0, [pc, #144]	; (8001858 <runPolarizationSequence+0x164>)
 80017c6:	f001 ffd9 	bl	800377c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017ca:	200a      	movs	r0, #10
 80017cc:	f000 fc9a 	bl	8002104 <HAL_Delay>

	//run sequnece T5 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2102      	movs	r1, #2
 80017d4:	4820      	ldr	r0, [pc, #128]	; (8001858 <runPolarizationSequence+0x164>)
 80017d6:	f001 ffd1 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2104      	movs	r1, #4
 80017de:	481e      	ldr	r0, [pc, #120]	; (8001858 <runPolarizationSequence+0x164>)
 80017e0:	f001 ffcc 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2108      	movs	r1, #8
 80017e8:	481b      	ldr	r0, [pc, #108]	; (8001858 <runPolarizationSequence+0x164>)
 80017ea:	f001 ffc7 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2110      	movs	r1, #16
 80017f2:	4819      	ldr	r0, [pc, #100]	; (8001858 <runPolarizationSequence+0x164>)
 80017f4:	f001 ffc2 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2120      	movs	r1, #32
 80017fc:	4816      	ldr	r0, [pc, #88]	; (8001858 <runPolarizationSequence+0x164>)
 80017fe:	f001 ffbd 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2140      	movs	r1, #64	; 0x40
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <runPolarizationSequence+0x164>)
 8001808:	f001 ffb8 	bl	800377c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800180c:	2005      	movs	r0, #5
 800180e:	f000 fc79 	bl	8002104 <HAL_Delay>

	//run sequnece T6 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001812:	2201      	movs	r2, #1
 8001814:	2102      	movs	r1, #2
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <runPolarizationSequence+0x164>)
 8001818:	f001 ffb0 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	2104      	movs	r1, #4
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <runPolarizationSequence+0x164>)
 8001822:	f001 ffab 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2108      	movs	r1, #8
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <runPolarizationSequence+0x164>)
 800182c:	f001 ffa6 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001830:	2201      	movs	r2, #1
 8001832:	2110      	movs	r1, #16
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <runPolarizationSequence+0x164>)
 8001836:	f001 ffa1 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2120      	movs	r1, #32
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <runPolarizationSequence+0x164>)
 8001840:	f001 ff9c 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001844:	2201      	movs	r2, #1
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <runPolarizationSequence+0x164>)
 800184a:	f001 ff97 	bl	800377c <HAL_GPIO_WritePin>

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20015e84 	.word	0x20015e84
 8001858:	40020c00 	.word	0x40020c00

0800185c <switchingCircuitIdle>:

void switchingCircuitIdle() {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	// visualise
	showOnLEDs(0, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff fe7b 	bl	8001560 <showOnLEDs>
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 800186a:	2200      	movs	r2, #0
 800186c:	2101      	movs	r1, #1
 800186e:	4811      	ldr	r0, [pc, #68]	; (80018b4 <switchingCircuitIdle+0x58>)
 8001870:	f001 ff84 	bl	800377c <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2102      	movs	r1, #2
 8001878:	480e      	ldr	r0, [pc, #56]	; (80018b4 <switchingCircuitIdle+0x58>)
 800187a:	f001 ff7f 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2104      	movs	r1, #4
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <switchingCircuitIdle+0x58>)
 8001884:	f001 ff7a 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	2108      	movs	r1, #8
 800188c:	4809      	ldr	r0, [pc, #36]	; (80018b4 <switchingCircuitIdle+0x58>)
 800188e:	f001 ff75 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2110      	movs	r1, #16
 8001896:	4807      	ldr	r0, [pc, #28]	; (80018b4 <switchingCircuitIdle+0x58>)
 8001898:	f001 ff70 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2120      	movs	r1, #32
 80018a0:	4804      	ldr	r0, [pc, #16]	; (80018b4 <switchingCircuitIdle+0x58>)
 80018a2:	f001 ff6b 	bl	800377c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2140      	movs	r1, #64	; 0x40
 80018aa:	4802      	ldr	r0, [pc, #8]	; (80018b4 <switchingCircuitIdle+0x58>)
 80018ac:	f001 ff66 	bl	800377c <HAL_GPIO_WritePin>
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40020c00 	.word	0x40020c00

080018b8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_MspInit+0x44>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_MspInit+0x44>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_MspInit+0x44>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x44>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x44>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x44>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_ADC_MspInit+0xd0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d152      	bne.n	80019d8 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_ADC_MspInit+0xd4>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <HAL_ADC_MspInit+0xd4>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <HAL_ADC_MspInit+0xd4>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_ADC_MspInit+0xd4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <HAL_ADC_MspInit+0xd4>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_ADC_MspInit+0xd4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001966:	2303      	movs	r3, #3
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	481c      	ldr	r0, [pc, #112]	; (80019e8 <HAL_ADC_MspInit+0xd8>)
 8001976:	f001 fd57 	bl	8003428 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 800197c:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_ADC_MspInit+0xe0>)
 800197e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 8001994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001998:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800199a:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 800199c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 80019a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 80019be:	f001 f92b 	bl	8002c18 <HAL_DMA_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80019c8:	f7ff ff76 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
 80019d2:	4a06      	ldr	r2, [pc, #24]	; (80019ec <HAL_ADC_MspInit+0xdc>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40012000 	.word	0x40012000
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	2002b760 	.word	0x2002b760
 80019f0:	40026470 	.word	0x40026470

080019f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2f      	ldr	r2, [pc, #188]	; (8001ad0 <HAL_SPI_MspInit+0xdc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d157      	bne.n	8001ac6 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_SPI_MspInit+0xe0>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a2e      	ldr	r2, [pc, #184]	; (8001ad4 <HAL_SPI_MspInit+0xe0>)
 8001a1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_SPI_MspInit+0xe0>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <HAL_SPI_MspInit+0xe0>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <HAL_SPI_MspInit+0xe0>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <HAL_SPI_MspInit+0xe0>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a46:	23f0      	movs	r3, #240	; 0xf0
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a56:	2305      	movs	r3, #5
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481d      	ldr	r0, [pc, #116]	; (8001ad8 <HAL_SPI_MspInit+0xe4>)
 8001a62:	f001 fce1 	bl	8003428 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001a68:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_SPI_MspInit+0xec>)
 8001a6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001a6e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a72:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a86:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a8e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a96:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001aaa:	480c      	ldr	r0, [pc, #48]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001aac:	f001 f8b4 	bl	8002c18 <HAL_DMA_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8001ab6:	f7ff feff 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_SPI_MspInit+0xe8>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40013000 	.word	0x40013000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	2002b8a4 	.word	0x2002b8a4
 8001ae0:	40026410 	.word	0x40026410

08001ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a34      	ldr	r2, [pc, #208]	; (8001bc4 <HAL_TIM_Base_MspInit+0xe0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d114      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af6:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a33      	ldr	r2, [pc, #204]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2101      	movs	r1, #1
 8001b12:	201b      	movs	r0, #27
 8001b14:	f001 f849 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b18:	201b      	movs	r0, #27
 8001b1a:	f001 f862 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001b1e:	e04c      	b.n	8001bba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_TIM_Base_MspInit+0xe8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d114      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	201d      	movs	r0, #29
 8001b48:	f001 f82f 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b4c:	201d      	movs	r0, #29
 8001b4e:	f001 f848 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 8001b52:	e032      	b.n	8001bba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <HAL_TIM_Base_MspInit+0xec>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d114      	bne.n	8001b88 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2101      	movs	r1, #1
 8001b7a:	201e      	movs	r0, #30
 8001b7c:	f001 f815 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b80:	201e      	movs	r0, #30
 8001b82:	f001 f82e 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 8001b86:	e018      	b.n	8001bba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d113      	bne.n	8001bba <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_TIM_Base_MspInit+0xe4>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2101      	movs	r1, #1
 8001bae:	202e      	movs	r0, #46	; 0x2e
 8001bb0:	f000 fffb 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001bb4:	202e      	movs	r0, #46	; 0x2e
 8001bb6:	f001 f814 	bl	8002be2 <HAL_NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	40000800 	.word	0x40000800
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf8:	d130      	bne.n	8001c5c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <HAL_TIM_IC_MspInit+0x8c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_TIM_IC_MspInit+0x8c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_TIM_IC_MspInit+0x8c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_TIM_IC_MspInit+0x8c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <HAL_TIM_IC_MspInit+0x8c>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_TIM_IC_MspInit+0x8c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8001c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	4808      	ldr	r0, [pc, #32]	; (8001c68 <HAL_TIM_IC_MspInit+0x90>)
 8001c48:	f001 fbee 	bl	8003428 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2101      	movs	r1, #1
 8001c50:	201c      	movs	r0, #28
 8001c52:	f000 ffaa 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c56:	201c      	movs	r0, #28
 8001c58:	f000 ffc3 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_TIM_MspPostInit+0xa8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d11d      	bne.n	8001cca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <HAL_TIM_MspPostInit+0xac>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <HAL_TIM_MspPostInit+0xac>)
 8001c94:	f043 0310 	orr.w	r3, r3, #16
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_TIM_MspPostInit+0xac>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8001ca6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4816      	ldr	r0, [pc, #88]	; (8001d1c <HAL_TIM_MspPostInit+0xb0>)
 8001cc4:	f001 fbb0 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001cc8:	e020      	b.n	8001d0c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_TIM_MspPostInit+0xb4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d11b      	bne.n	8001d0c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_TIM_MspPostInit+0xac>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_TIM_MspPostInit+0xac>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_TIM_MspPostInit+0xac>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8001cec:	2340      	movs	r3, #64	; 0x40
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <HAL_TIM_MspPostInit+0xb8>)
 8001d08:	f001 fb8e 	bl	8003428 <HAL_GPIO_Init>
}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40010000 	.word	0x40010000
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010400 	.word	0x40010400
 8001d24:	40020800 	.word	0x40020800

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d130      	bne.n	8001dac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_UART_MspInit+0x90>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <HAL_UART_MspInit+0x90>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_UART_MspInit+0x90>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_UART_MspInit+0x90>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_UART_MspInit+0x90>)
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_UART_MspInit+0x90>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <HAL_UART_MspInit+0x94>)
 8001d98:	f001 fb46 	bl	8003428 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2027      	movs	r0, #39	; 0x27
 8001da2:	f000 ff02 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001da6:	2027      	movs	r0, #39	; 0x27
 8001da8:	f000 ff1b 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40004800 	.word	0x40004800
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020c00 	.word	0x40020c00

08001dc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de0:	d141      	bne.n	8001e66 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001dfa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	4817      	ldr	r0, [pc, #92]	; (8001e74 <HAL_PCD_MspInit+0xb4>)
 8001e18:	f001 fb06 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4810      	ldr	r0, [pc, #64]	; (8001e74 <HAL_PCD_MspInit+0xb4>)
 8001e32:	f001 faf9 	bl	8003428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e40:	6353      	str	r3, [r2, #52]	; 0x34
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a07      	ldr	r2, [pc, #28]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_PCD_MspInit+0xb0>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020000 	.word	0x40020000

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <MemManage_Handler+0x4>

08001e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <BusFault_Handler+0x4>

08001e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <UsageFault_Handler+0x4>

08001e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ecc:	f000 f8fa 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <TIM1_CC_IRQHandler+0x10>)
 8001eda:	f003 ff35 	bl	8005d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2002b7c0 	.word	0x2002b7c0

08001ee8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <TIM2_IRQHandler+0x10>)
 8001eee:	f003 ff2b 	bl	8005d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2002b864 	.word	0x2002b864

08001efc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <TIM3_IRQHandler+0x10>)
 8001f02:	f003 ff21 	bl	8005d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20015e44 	.word	0x20015e44

08001f10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <TIM4_IRQHandler+0x10>)
 8001f16:	f003 ff17 	bl	8005d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200000f4 	.word	0x200000f4

08001f24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <USART3_IRQHandler+0x10>)
 8001f2a:	f005 fb5b 	bl	80075e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000134 	.word	0x20000134

08001f38 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM8_CC_IRQHandler+0x10>)
 8001f3e:	f003 ff03 	bl	8005d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200000b4 	.word	0x200000b4

08001f4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <DMA2_Stream0_IRQHandler+0x10>)
 8001f52:	f001 f801 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2002b8a4 	.word	0x2002b8a4

08001f60 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <DMA2_Stream4_IRQHandler+0x10>)
 8001f66:	f000 fff7 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2002b760 	.word	0x2002b760

08001f74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x50>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x16>
		heap_end = &end;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <_sbrk+0x50>)
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <_sbrk+0x54>)
 8001f88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <_sbrk+0x50>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <_sbrk+0x50>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	466a      	mov	r2, sp
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d907      	bls.n	8001fae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f9e:	f006 fc37 	bl	8008810 <__errno>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fac:	e006      	b.n	8001fbc <_sbrk+0x48>
	}

	heap_end += incr;
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <_sbrk+0x50>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a03      	ldr	r2, [pc, #12]	; (8001fc4 <_sbrk+0x50>)
 8001fb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200000a8 	.word	0x200000a8
 8001fc8:	2002b910 	.word	0x2002b910

08001fcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <SystemInit+0x28>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <SystemInit+0x28>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SystemInit+0x28>)
 8001fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe6:	609a      	str	r2, [r3, #8]
#endif
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002030 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ffc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ffe:	e003      	b.n	8002008 <LoopCopyDataInit>

08002000 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002002:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002004:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002006:	3104      	adds	r1, #4

08002008 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800200c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800200e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002010:	d3f6      	bcc.n	8002000 <CopyDataInit>
  ldr  r2, =_sbss
 8002012:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002014:	e002      	b.n	800201c <LoopFillZerobss>

08002016 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002016:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002018:	f842 3b04 	str.w	r3, [r2], #4

0800201c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800201e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002020:	d3f9      	bcc.n	8002016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002022:	f7ff ffd3 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f006 fbf9 	bl	800881c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7fe faf9 	bl	8000620 <main>
  bx  lr    
 800202e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002030:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002034:	08009124 	.word	0x08009124
  ldr  r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800203c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002040:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002044:	2002b90c 	.word	0x2002b90c

08002048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC_IRQHandler>

0800204a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204e:	2003      	movs	r0, #3
 8002050:	f000 fda0 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002054:	2000      	movs	r0, #0
 8002056:	f000 f805 	bl	8002064 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800205a:	f7ff fc35 	bl	80018c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fdbb 	bl	8002bfe <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 fd83 	bl	8002baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000004 	.word	0x20000004
 80020bc:	2000000c 	.word	0x2000000c
 80020c0:	20000008 	.word	0x20000008

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	2000000c 	.word	0x2000000c
 80020e8:	2002b904 	.word	0x2002b904

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2002b904 	.word	0x2002b904

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_Delay+0x40>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000000c 	.word	0x2000000c

08002148 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e031      	b.n	80021c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fbd2 	bl	8001910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_ADC_Init+0x84>)
 800218c:	4013      	ands	r3, r2
 800218e:	f043 0202 	orr.w	r2, r3, #2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fab0 	bl	80026fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
 80021b2:	e001      	b.n	80021b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	ffffeefd 	.word	0xffffeefd

080021d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Start_DMA+0x1e>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0c7      	b.n	800237e <HAL_ADC_Start_DMA+0x1ae>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d018      	beq.n	8002236 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002214:	4b5c      	ldr	r3, [pc, #368]	; (8002388 <HAL_ADC_Start_DMA+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5c      	ldr	r2, [pc, #368]	; (800238c <HAL_ADC_Start_DMA+0x1bc>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9a      	lsrs	r2, r3, #18
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002228:	e002      	b.n	8002230 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3b01      	subs	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	f040 809b 	bne.w	800237c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224a:	4b51      	ldr	r3, [pc, #324]	; (8002390 <HAL_ADC_Start_DMA+0x1c0>)
 800224c:	4013      	ands	r3, r2
 800224e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800226c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002280:	d106      	bne.n	8002290 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f023 0206 	bic.w	r2, r3, #6
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
 800228e:	e002      	b.n	8002296 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	4a3c      	ldr	r2, [pc, #240]	; (8002394 <HAL_ADC_Start_DMA+0x1c4>)
 80022a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <HAL_ADC_Start_DMA+0x1c8>)
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4a3a      	ldr	r2, [pc, #232]	; (800239c <HAL_ADC_Start_DMA+0x1cc>)
 80022b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80022be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80022ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	334c      	adds	r3, #76	; 0x4c
 80022ea:	4619      	mov	r1, r3
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f000 fd40 	bl	8002d74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_ADC_Start_DMA+0x1d0>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10f      	bne.n	8002320 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d136      	bne.n	800237c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	e02d      	b.n	800237c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_ADC_Start_DMA+0x1d4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10e      	bne.n	8002348 <HAL_ADC_Start_DMA+0x178>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002346:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_ADC_Start_DMA+0x1d0>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d113      	bne.n	800237c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_ADC_Start_DMA+0x1d8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10e      	bne.n	800237c <HAL_ADC_Start_DMA+0x1ac>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800237a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000004 	.word	0x20000004
 800238c:	431bde83 	.word	0x431bde83
 8002390:	fffff8fe 	.word	0xfffff8fe
 8002394:	080028f1 	.word	0x080028f1
 8002398:	080029ab 	.word	0x080029ab
 800239c:	080029c7 	.word	0x080029c7
 80023a0:	40012300 	.word	0x40012300
 80023a4:	40012000 	.word	0x40012000
 80023a8:	40012200 	.word	0x40012200

080023ac <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_Stop_DMA+0x1a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e036      	b.n	8002434 <HAL_ADC_Stop_DMA+0x88>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11e      	bne.n	800242a <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023fa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fd17 	bl	8002e34 <HAL_DMA_Abort>
 8002406:	4603      	mov	r3, r0
 8002408:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002418:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_ADC_Stop_DMA+0x90>)
 8002420:	4013      	ands	r3, r2
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	ffffeefe 	.word	0xffffeefe

08002440 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1c>
 8002480:	2302      	movs	r3, #2
 8002482:	e12a      	b.n	80026da <HAL_ADC_ConfigChannel+0x272>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b09      	cmp	r3, #9
 8002492:	d93a      	bls.n	800250a <HAL_ADC_ConfigChannel+0xa2>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800249c:	d035      	beq.n	800250a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68d9      	ldr	r1, [r3, #12]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	3b1e      	subs	r3, #30
 80024b4:	2207      	movs	r2, #7
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a87      	ldr	r2, [pc, #540]	; (80026e8 <HAL_ADC_ConfigChannel+0x280>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10a      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68d9      	ldr	r1, [r3, #12]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	061a      	lsls	r2, r3, #24
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024e2:	e035      	b.n	8002550 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4403      	add	r3, r0
 80024fc:	3b1e      	subs	r3, #30
 80024fe:	409a      	lsls	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002508:	e022      	b.n	8002550 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6919      	ldr	r1, [r3, #16]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	2207      	movs	r2, #7
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43da      	mvns	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	400a      	ands	r2, r1
 800252c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6919      	ldr	r1, [r3, #16]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	4603      	mov	r3, r0
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4403      	add	r3, r0
 8002546:	409a      	lsls	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b06      	cmp	r3, #6
 8002556:	d824      	bhi.n	80025a2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3b05      	subs	r3, #5
 800256a:	221f      	movs	r2, #31
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43da      	mvns	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	400a      	ands	r2, r1
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4618      	mov	r0, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b05      	subs	r3, #5
 8002594:	fa00 f203 	lsl.w	r2, r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	635a      	str	r2, [r3, #52]	; 0x34
 80025a0:	e04c      	b.n	800263c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d824      	bhi.n	80025f4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	3b23      	subs	r3, #35	; 0x23
 80025bc:	221f      	movs	r2, #31
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	400a      	ands	r2, r1
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4618      	mov	r0, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	3b23      	subs	r3, #35	; 0x23
 80025e6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
 80025f2:	e023      	b.n	800263c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	3b41      	subs	r3, #65	; 0x41
 8002606:	221f      	movs	r2, #31
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43da      	mvns	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	400a      	ands	r2, r1
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	3b41      	subs	r3, #65	; 0x41
 8002630:	fa00 f203 	lsl.w	r2, r0, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <HAL_ADC_ConfigChannel+0x284>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10a      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1f4>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800264e:	d105      	bne.n	800265c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_ADC_ConfigChannel+0x288>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a26      	ldr	r2, [pc, #152]	; (80026f0 <HAL_ADC_ConfigChannel+0x288>)
 8002656:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800265a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_ADC_ConfigChannel+0x284>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d109      	bne.n	800267a <HAL_ADC_ConfigChannel+0x212>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b12      	cmp	r3, #18
 800266c:	d105      	bne.n	800267a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_ADC_ConfigChannel+0x288>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_ADC_ConfigChannel+0x288>)
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002678:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_ADC_ConfigChannel+0x284>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d125      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x268>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_ADC_ConfigChannel+0x280>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d003      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x22e>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b11      	cmp	r3, #17
 8002694:	d11c      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002696:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_ADC_ConfigChannel+0x288>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <HAL_ADC_ConfigChannel+0x288>)
 800269c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026a0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_ADC_ConfigChannel+0x280>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d111      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <HAL_ADC_ConfigChannel+0x28c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_ADC_ConfigChannel+0x290>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0c9a      	lsrs	r2, r3, #18
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026c2:	e002      	b.n	80026ca <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	10000012 	.word	0x10000012
 80026ec:	40012000 	.word	0x40012000
 80026f0:	40012300 	.word	0x40012300
 80026f4:	20000004 	.word	0x20000004
 80026f8:	431bde83 	.word	0x431bde83

080026fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002704:	4b78      	ldr	r3, [pc, #480]	; (80028e8 <ADC_Init+0x1ec>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <ADC_Init+0x1ec>)
 800270a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800270e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002710:	4b75      	ldr	r3, [pc, #468]	; (80028e8 <ADC_Init+0x1ec>)
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4973      	ldr	r1, [pc, #460]	; (80028e8 <ADC_Init+0x1ec>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800272c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	021a      	lsls	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002750:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	4a58      	ldr	r2, [pc, #352]	; (80028ec <ADC_Init+0x1f0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800279e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6899      	ldr	r1, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	e00f      	b.n	80027f6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0202 	bic.w	r2, r2, #2
 8002804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	005a      	lsls	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002832:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002842:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	3b01      	subs	r3, #1
 8002850:	035a      	lsls	r2, r3, #13
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	e007      	b.n	800286c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	3b01      	subs	r3, #1
 8002888:	051a      	lsls	r2, r3, #20
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028ae:	025a      	lsls	r2, r3, #9
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	029a      	lsls	r2, r3, #10
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40012300 	.word	0x40012300
 80028ec:	0f000001 	.word	0x0f000001

080028f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002906:	2b00      	cmp	r3, #0
 8002908:	d13c      	bne.n	8002984 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d12b      	bne.n	800297c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002928:	2b00      	cmp	r3, #0
 800292a:	d127      	bne.n	800297c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002944:	2b00      	cmp	r3, #0
 8002946:	d119      	bne.n	800297c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0220 	bic.w	r2, r2, #32
 8002956:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7fe fb8b 	bl	8001098 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002982:	e00e      	b.n	80029a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff fd5f 	bl	8002454 <HAL_ADC_ErrorCallback>
}
 8002996:	e004      	b.n	80029a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff fd41 	bl	8002440 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b084      	sub	sp, #16
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f043 0204 	orr.w	r2, r3, #4
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff fd34 	bl	8002454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <__NVIC_SetPriorityGrouping+0x40>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <__NVIC_SetPriorityGrouping+0x40>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00
 8002a38:	05fa0000 	.word	0x05fa0000

08002a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <__NVIC_GetPriorityGrouping+0x18>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	f003 0307 	and.w	r3, r3, #7
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db0b      	blt.n	8002a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4907      	ldr	r1, [pc, #28]	; (8002a90 <__NVIC_EnableIRQ+0x38>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2001      	movs	r0, #1
 8002a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db0a      	blt.n	8002abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	490c      	ldr	r1, [pc, #48]	; (8002ae0 <__NVIC_SetPriority+0x4c>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002abc:	e00a      	b.n	8002ad4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <__NVIC_SetPriority+0x50>)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	3b04      	subs	r3, #4
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	761a      	strb	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f1c3 0307 	rsb	r3, r3, #7
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf28      	it	cs
 8002b06:	2304      	movcs	r3, #4
 8002b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d902      	bls.n	8002b18 <NVIC_EncodePriority+0x30>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	e000      	b.n	8002b1a <NVIC_EncodePriority+0x32>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	4313      	orrs	r3, r2
         );
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff8e 	bl	8002a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff29 	bl	80029f4 <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff3e 	bl	8002a3c <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff8e 	bl	8002ae8 <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5d 	bl	8002a94 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff31 	bl	8002a58 <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa2 	bl	8002b50 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff fa62 	bl	80020ec <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e099      	b.n	8002d68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c54:	e00f      	b.n	8002c76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c56:	f7ff fa49 	bl	80020ec <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d908      	bls.n	8002c76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e078      	b.n	8002d68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e8      	bne.n	8002c56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_DMA_Init+0x158>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d107      	bne.n	8002ce0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0307 	bic.w	r3, r3, #7
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d117      	bne.n	8002d3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fb09 	bl	8003334 <DMA_CheckFifoParam>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2240      	movs	r2, #64	; 0x40
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d36:	2301      	movs	r3, #1
 8002d38:	e016      	b.n	8002d68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fac0 	bl	80032c8 <DMA_CalcBaseAndBitshift>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	223f      	movs	r2, #63	; 0x3f
 8002d52:	409a      	lsls	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	e010803f 	.word	0xe010803f

08002d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_DMA_Start_IT+0x26>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e048      	b.n	8002e2c <HAL_DMA_Start_IT+0xb8>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d137      	bne.n	8002e1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fa52 	bl	800326c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	223f      	movs	r2, #63	; 0x3f
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0216 	orr.w	r2, r2, #22
 8002de2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002df2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0208 	orr.w	r2, r2, #8
 8002e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e005      	b.n	8002e2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
 8002e28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e42:	f7ff f953 	bl	80020ec <HAL_GetTick>
 8002e46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d008      	beq.n	8002e66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e052      	b.n	8002f0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0216 	bic.w	r2, r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_DMA_Abort+0x62>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb6:	e013      	b.n	8002ee0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eb8:	f7ff f918 	bl	80020ec <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d90c      	bls.n	8002ee0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e015      	b.n	8002f0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e4      	bne.n	8002eb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	223f      	movs	r2, #63	; 0x3f
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d004      	beq.n	8002f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00c      	b.n	8002f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2205      	movs	r2, #5
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f64:	4b92      	ldr	r3, [pc, #584]	; (80031b0 <HAL_DMA_IRQHandler+0x258>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a92      	ldr	r2, [pc, #584]	; (80031b4 <HAL_DMA_IRQHandler+0x25c>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	2208      	movs	r2, #8
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0204 	bic.w	r2, r2, #4
 8002faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2201      	movs	r2, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d012      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f043 0202 	orr.w	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	2204      	movs	r2, #4
 8003000:	409a      	lsls	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d012      	beq.n	8003030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	2204      	movs	r2, #4
 800301e:	409a      	lsls	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	2210      	movs	r2, #16
 8003036:	409a      	lsls	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d043      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d03c      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2210      	movs	r2, #16
 8003054:	409a      	lsls	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d018      	beq.n	800309a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d024      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
 8003086:	e01f      	b.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e016      	b.n	80030c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0208 	bic.w	r2, r2, #8
 80030b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	2220      	movs	r2, #32
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 808e 	beq.w	80031f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8086 	beq.w	80031f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	2220      	movs	r2, #32
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d136      	bne.n	8003170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0216 	bic.w	r2, r2, #22
 8003110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <HAL_DMA_IRQHandler+0x1da>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0208 	bic.w	r2, r2, #8
 8003140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	223f      	movs	r2, #63	; 0x3f
 8003148:	409a      	lsls	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003162:	2b00      	cmp	r3, #0
 8003164:	d07d      	beq.n	8003262 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
        }
        return;
 800316e:	e078      	b.n	8003262 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01c      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d108      	bne.n	800319e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	2b00      	cmp	r3, #0
 8003192:	d030      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
 800319c:	e02b      	b.n	80031f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d027      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
 80031ae:	e022      	b.n	80031f6 <HAL_DMA_IRQHandler+0x29e>
 80031b0:	20000004 	.word	0x20000004
 80031b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10f      	bne.n	80031e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0210 	bic.w	r2, r2, #16
 80031d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d032      	beq.n	8003264 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d022      	beq.n	8003250 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3301      	adds	r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	429a      	cmp	r2, r3
 800322c:	d307      	bcc.n	800323e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f2      	bne.n	8003222 <HAL_DMA_IRQHandler+0x2ca>
 800323c:	e000      	b.n	8003240 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800323e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
 8003260:	e000      	b.n	8003264 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003262:	bf00      	nop
    }
  }
}
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop

0800326c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003288:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d108      	bne.n	80032ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032aa:	e007      	b.n	80032bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	60da      	str	r2, [r3, #12]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	3b10      	subs	r3, #16
 80032d8:	4a13      	ldr	r2, [pc, #76]	; (8003328 <DMA_CalcBaseAndBitshift+0x60>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032e2:	4a12      	ldr	r2, [pc, #72]	; (800332c <DMA_CalcBaseAndBitshift+0x64>)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d908      	bls.n	8003308 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <DMA_CalcBaseAndBitshift+0x68>)
 80032fe:	4013      	ands	r3, r2
 8003300:	1d1a      	adds	r2, r3, #4
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	659a      	str	r2, [r3, #88]	; 0x58
 8003306:	e006      	b.n	8003316 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <DMA_CalcBaseAndBitshift+0x68>)
 8003310:	4013      	ands	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	aaaaaaab 	.word	0xaaaaaaab
 800332c:	080090d8 	.word	0x080090d8
 8003330:	fffffc00 	.word	0xfffffc00

08003334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d11f      	bne.n	800338e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d855      	bhi.n	8003400 <DMA_CheckFifoParam+0xcc>
 8003354:	a201      	add	r2, pc, #4	; (adr r2, 800335c <DMA_CheckFifoParam+0x28>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	0800336d 	.word	0x0800336d
 8003360:	0800337f 	.word	0x0800337f
 8003364:	0800336d 	.word	0x0800336d
 8003368:	08003401 	.word	0x08003401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d045      	beq.n	8003404 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337c:	e042      	b.n	8003404 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003386:	d13f      	bne.n	8003408 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338c:	e03c      	b.n	8003408 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003396:	d121      	bne.n	80033dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b03      	cmp	r3, #3
 800339c:	d836      	bhi.n	800340c <DMA_CheckFifoParam+0xd8>
 800339e:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <DMA_CheckFifoParam+0x70>)
 80033a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	080033bb 	.word	0x080033bb
 80033ac:	080033b5 	.word	0x080033b5
 80033b0:	080033cd 	.word	0x080033cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      break;
 80033b8:	e02f      	b.n	800341a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d024      	beq.n	8003410 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ca:	e021      	b.n	8003410 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033d4:	d11e      	bne.n	8003414 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033da:	e01b      	b.n	8003414 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <DMA_CheckFifoParam+0xb4>
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d003      	beq.n	80033ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033e6:	e018      	b.n	800341a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e015      	b.n	800341a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      break;
 80033fe:	e00b      	b.n	8003418 <DMA_CheckFifoParam+0xe4>
      break;
 8003400:	bf00      	nop
 8003402:	e00a      	b.n	800341a <DMA_CheckFifoParam+0xe6>
      break;
 8003404:	bf00      	nop
 8003406:	e008      	b.n	800341a <DMA_CheckFifoParam+0xe6>
      break;
 8003408:	bf00      	nop
 800340a:	e006      	b.n	800341a <DMA_CheckFifoParam+0xe6>
      break;
 800340c:	bf00      	nop
 800340e:	e004      	b.n	800341a <DMA_CheckFifoParam+0xe6>
      break;
 8003410:	bf00      	nop
 8003412:	e002      	b.n	800341a <DMA_CheckFifoParam+0xe6>
      break;   
 8003414:	bf00      	nop
 8003416:	e000      	b.n	800341a <DMA_CheckFifoParam+0xe6>
      break;
 8003418:	bf00      	nop
    }
  } 
  
  return status; 
 800341a:	7bfb      	ldrb	r3, [r7, #15]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e175      	b.n	8003734 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003448:	2201      	movs	r2, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	429a      	cmp	r2, r3
 8003462:	f040 8164 	bne.w	800372e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d00b      	beq.n	8003486 <HAL_GPIO_Init+0x5e>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d007      	beq.n	8003486 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800347a:	2b11      	cmp	r3, #17
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b12      	cmp	r3, #18
 8003484:	d130      	bne.n	80034e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034bc:	2201      	movs	r2, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 0201 	and.w	r2, r3, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x100>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b12      	cmp	r3, #18
 8003526:	d123      	bne.n	8003570 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	08da      	lsrs	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3208      	adds	r2, #8
 8003530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	220f      	movs	r2, #15
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	08da      	lsrs	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3208      	adds	r2, #8
 800356a:	69b9      	ldr	r1, [r7, #24]
 800356c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0203 	and.w	r2, r3, #3
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80be 	beq.w	800372e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b2:	4b65      	ldr	r3, [pc, #404]	; (8003748 <HAL_GPIO_Init+0x320>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a64      	ldr	r2, [pc, #400]	; (8003748 <HAL_GPIO_Init+0x320>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_GPIO_Init+0x320>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035ca:	4a60      	ldr	r2, [pc, #384]	; (800374c <HAL_GPIO_Init+0x324>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	3302      	adds	r3, #2
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a57      	ldr	r2, [pc, #348]	; (8003750 <HAL_GPIO_Init+0x328>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d037      	beq.n	8003666 <HAL_GPIO_Init+0x23e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a56      	ldr	r2, [pc, #344]	; (8003754 <HAL_GPIO_Init+0x32c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d031      	beq.n	8003662 <HAL_GPIO_Init+0x23a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a55      	ldr	r2, [pc, #340]	; (8003758 <HAL_GPIO_Init+0x330>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d02b      	beq.n	800365e <HAL_GPIO_Init+0x236>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a54      	ldr	r2, [pc, #336]	; (800375c <HAL_GPIO_Init+0x334>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d025      	beq.n	800365a <HAL_GPIO_Init+0x232>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a53      	ldr	r2, [pc, #332]	; (8003760 <HAL_GPIO_Init+0x338>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01f      	beq.n	8003656 <HAL_GPIO_Init+0x22e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_GPIO_Init+0x33c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d019      	beq.n	8003652 <HAL_GPIO_Init+0x22a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a51      	ldr	r2, [pc, #324]	; (8003768 <HAL_GPIO_Init+0x340>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_GPIO_Init+0x226>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a50      	ldr	r2, [pc, #320]	; (800376c <HAL_GPIO_Init+0x344>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00d      	beq.n	800364a <HAL_GPIO_Init+0x222>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4f      	ldr	r2, [pc, #316]	; (8003770 <HAL_GPIO_Init+0x348>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <HAL_GPIO_Init+0x21e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4e      	ldr	r2, [pc, #312]	; (8003774 <HAL_GPIO_Init+0x34c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_GPIO_Init+0x21a>
 800363e:	2309      	movs	r3, #9
 8003640:	e012      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003642:	230a      	movs	r3, #10
 8003644:	e010      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003646:	2308      	movs	r3, #8
 8003648:	e00e      	b.n	8003668 <HAL_GPIO_Init+0x240>
 800364a:	2307      	movs	r3, #7
 800364c:	e00c      	b.n	8003668 <HAL_GPIO_Init+0x240>
 800364e:	2306      	movs	r3, #6
 8003650:	e00a      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003652:	2305      	movs	r3, #5
 8003654:	e008      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003656:	2304      	movs	r3, #4
 8003658:	e006      	b.n	8003668 <HAL_GPIO_Init+0x240>
 800365a:	2303      	movs	r3, #3
 800365c:	e004      	b.n	8003668 <HAL_GPIO_Init+0x240>
 800365e:	2302      	movs	r3, #2
 8003660:	e002      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_GPIO_Init+0x240>
 8003666:	2300      	movs	r3, #0
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f002 0203 	and.w	r2, r2, #3
 800366e:	0092      	lsls	r2, r2, #2
 8003670:	4093      	lsls	r3, r2
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003678:	4934      	ldr	r1, [pc, #208]	; (800374c <HAL_GPIO_Init+0x324>)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	3302      	adds	r3, #2
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003686:	4b3c      	ldr	r3, [pc, #240]	; (8003778 <HAL_GPIO_Init+0x350>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036aa:	4a33      	ldr	r2, [pc, #204]	; (8003778 <HAL_GPIO_Init+0x350>)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036b0:	4b31      	ldr	r3, [pc, #196]	; (8003778 <HAL_GPIO_Init+0x350>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d4:	4a28      	ldr	r2, [pc, #160]	; (8003778 <HAL_GPIO_Init+0x350>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_GPIO_Init+0x350>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <HAL_GPIO_Init+0x350>)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <HAL_GPIO_Init+0x350>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_GPIO_Init+0x350>)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3301      	adds	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b0f      	cmp	r3, #15
 8003738:	f67f ae86 	bls.w	8003448 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800373c:	bf00      	nop
 800373e:	3724      	adds	r7, #36	; 0x24
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40023800 	.word	0x40023800
 800374c:	40013800 	.word	0x40013800
 8003750:	40020000 	.word	0x40020000
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40021400 	.word	0x40021400
 8003768:	40021800 	.word	0x40021800
 800376c:	40021c00 	.word	0x40021c00
 8003770:	40022000 	.word	0x40022000
 8003774:	40022400 	.word	0x40022400
 8003778:	40013c00 	.word	0x40013c00

0800377c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
 8003788:	4613      	mov	r3, r2
 800378a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800378c:	787b      	ldrb	r3, [r7, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003792:	887a      	ldrh	r2, [r7, #2]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003798:	e003      	b.n	80037a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800379a:	887b      	ldrh	r3, [r7, #2]
 800379c:	041a      	lsls	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	619a      	str	r2, [r3, #24]
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037b0:	b08f      	sub	sp, #60	; 0x3c
 80037b2:	af0a      	add	r7, sp, #40	; 0x28
 80037b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e116      	b.n	80039ee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe faf0 	bl	8001dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2203      	movs	r2, #3
 80037e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d102      	bne.n	80037fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f004 fdae 	bl	8008360 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	687e      	ldr	r6, [r7, #4]
 800380c:	466d      	mov	r5, sp
 800380e:	f106 0410 	add.w	r4, r6, #16
 8003812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800381a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800381e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003822:	1d33      	adds	r3, r6, #4
 8003824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003826:	6838      	ldr	r0, [r7, #0]
 8003828:	f004 fd42 	bl	80082b0 <USB_CoreInit>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0d7      	b.n	80039ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f004 fd9c 	bl	8008382 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	e04a      	b.n	80038e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	333d      	adds	r3, #61	; 0x3d
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	333c      	adds	r3, #60	; 0x3c
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	b298      	uxth	r0, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	3342      	adds	r3, #66	; 0x42
 800388c:	4602      	mov	r2, r0
 800388e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	333f      	adds	r3, #63	; 0x3f
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3344      	adds	r3, #68	; 0x44
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3348      	adds	r3, #72	; 0x48
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3350      	adds	r3, #80	; 0x50
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	3301      	adds	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3af      	bcc.n	8003850 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e044      	b.n	8003980 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800390c:	7bfa      	ldrb	r2, [r7, #15]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	3301      	adds	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d3b5      	bcc.n	80038f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	687e      	ldr	r6, [r7, #4]
 8003992:	466d      	mov	r5, sp
 8003994:	f106 0410 	add.w	r4, r6, #16
 8003998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800399a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800399c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800399e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80039a8:	1d33      	adds	r3, r6, #4
 80039aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ac:	6838      	ldr	r0, [r7, #0]
 80039ae:	f004 fd13 	bl	80083d8 <USB_DevInit>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e014      	b.n	80039ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d102      	bne.n	80039e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f80b 	bl	80039f8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 fec5 	bl	8008776 <USB_DevDisconnect>

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_PCDEx_ActivateLPM+0x44>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	10000003 	.word	0x10000003

08003a40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40007000 	.word	0x40007000

08003a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a8e:	f7fe fb2d 	bl	80020ec <HAL_GetTick>
 8003a92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a94:	e009      	b.n	8003aaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a96:	f7fe fb29 	bl	80020ec <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa4:	d901      	bls.n	8003aaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e022      	b.n	8003af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac4:	f7fe fb12 	bl	80020ec <HAL_GetTick>
 8003ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003aca:	e009      	b.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003acc:	f7fe fb0e 	bl	80020ec <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ada:	d901      	bls.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e007      	b.n	8003af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aec:	d1ee      	bne.n	8003acc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	40007000 	.word	0x40007000

08003b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e29b      	b.n	800404e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8087 	beq.w	8003c32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b24:	4b96      	ldr	r3, [pc, #600]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d00c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b30:	4b93      	ldr	r3, [pc, #588]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d112      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62>
 8003b3c:	4b90      	ldr	r3, [pc, #576]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b48:	d10b      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4a:	4b8d      	ldr	r3, [pc, #564]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d06c      	beq.n	8003c30 <HAL_RCC_OscConfig+0x130>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d168      	bne.n	8003c30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e275      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x7a>
 8003b6c:	4b84      	ldr	r3, [pc, #528]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a83      	ldr	r2, [pc, #524]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e02e      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x9c>
 8003b82:	4b7f      	ldr	r3, [pc, #508]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7e      	ldr	r2, [pc, #504]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b7c      	ldr	r3, [pc, #496]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a7b      	ldr	r2, [pc, #492]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e01d      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xc0>
 8003ba6:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a75      	ldr	r2, [pc, #468]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b73      	ldr	r3, [pc, #460]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a72      	ldr	r2, [pc, #456]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd8>
 8003bc0:	4b6f      	ldr	r3, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b6c      	ldr	r3, [pc, #432]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a6b      	ldr	r2, [pc, #428]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fa84 	bl	80020ec <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fe fa80 	bl	80020ec <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e229      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b61      	ldr	r3, [pc, #388]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0xe8>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe fa70 	bl	80020ec <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fe fa6c 	bl	80020ec <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e215      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	4b57      	ldr	r3, [pc, #348]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x110>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d069      	beq.n	8003d12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4a:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d11c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x190>
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x17a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e1e9      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	493d      	ldr	r1, [pc, #244]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	e040      	b.n	8003d12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d023      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c98:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a38      	ldr	r2, [pc, #224]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fa22 	bl	80020ec <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cac:	f7fe fa1e 	bl	80020ec <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1c7      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbe:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4929      	ldr	r1, [pc, #164]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
 8003cde:	e018      	b.n	8003d12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe f9fe 	bl	80020ec <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf4:	f7fe f9fa 	bl	80020ec <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1a3      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d038      	beq.n	8003d90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d019      	beq.n	8003d5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fe f9db 	bl	80020ec <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fe f9d7 	bl	80020ec <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e180      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x23a>
 8003d58:	e01a      	b.n	8003d90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <HAL_RCC_OscConfig+0x280>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe f9c1 	bl	80020ec <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe f9bd 	bl	80020ec <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d903      	bls.n	8003d84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e166      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
 8003d80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b92      	ldr	r3, [pc, #584]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ee      	bne.n	8003d6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80a4 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9e:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003daa:	4b89      	ldr	r3, [pc, #548]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a88      	ldr	r2, [pc, #544]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
 8003db6:	4b86      	ldr	r3, [pc, #536]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc6:	4b83      	ldr	r3, [pc, #524]	; (8003fd4 <HAL_RCC_OscConfig+0x4d4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d118      	bne.n	8003e04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dd2:	4b80      	ldr	r3, [pc, #512]	; (8003fd4 <HAL_RCC_OscConfig+0x4d4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a7f      	ldr	r2, [pc, #508]	; (8003fd4 <HAL_RCC_OscConfig+0x4d4>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dde:	f7fe f985 	bl	80020ec <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7fe f981 	bl	80020ec <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b64      	cmp	r3, #100	; 0x64
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e12a      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df8:	4b76      	ldr	r3, [pc, #472]	; (8003fd4 <HAL_RCC_OscConfig+0x4d4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCC_OscConfig+0x31a>
 8003e0c:	4b70      	ldr	r3, [pc, #448]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a6f      	ldr	r2, [pc, #444]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	e02d      	b.n	8003e76 <HAL_RCC_OscConfig+0x376>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x33c>
 8003e22:	4b6b      	ldr	r3, [pc, #428]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a6a      	ldr	r2, [pc, #424]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	e01c      	b.n	8003e76 <HAL_RCC_OscConfig+0x376>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d10c      	bne.n	8003e5e <HAL_RCC_OscConfig+0x35e>
 8003e44:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a61      	ldr	r2, [pc, #388]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	4b5f      	ldr	r3, [pc, #380]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a5e      	ldr	r2, [pc, #376]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	e00b      	b.n	8003e76 <HAL_RCC_OscConfig+0x376>
 8003e5e:	4b5c      	ldr	r3, [pc, #368]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a5b      	ldr	r2, [pc, #364]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	4b59      	ldr	r3, [pc, #356]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e70:	f023 0304 	bic.w	r3, r3, #4
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d015      	beq.n	8003eaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7e:	f7fe f935 	bl	80020ec <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e86:	f7fe f931 	bl	80020ec <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e0d8      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9c:	4b4c      	ldr	r3, [pc, #304]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0ee      	beq.n	8003e86 <HAL_RCC_OscConfig+0x386>
 8003ea8:	e014      	b.n	8003ed4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eaa:	f7fe f91f 	bl	80020ec <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb0:	e00a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb2:	f7fe f91b 	bl	80020ec <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0c2      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec8:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ee      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d105      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eda:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	4a3c      	ldr	r2, [pc, #240]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80ae 	beq.w	800404c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef0:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d06d      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d14b      	bne.n	8003f9c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f04:	4b32      	ldr	r3, [pc, #200]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a31      	ldr	r2, [pc, #196]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe f8ec 	bl	80020ec <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fe f8e8 	bl	80020ec <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e091      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69da      	ldr	r2, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	019b      	lsls	r3, r3, #6
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	085b      	lsrs	r3, r3, #1
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	061b      	lsls	r3, r3, #24
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	071b      	lsls	r3, r3, #28
 8003f62:	491b      	ldr	r1, [pc, #108]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe f8ba 	bl	80020ec <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe f8b6 	bl	80020ec <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e05f      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x47c>
 8003f9a:	e057      	b.n	800404c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0b      	ldr	r2, [pc, #44]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fe f8a0 	bl	80020ec <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fe f89c 	bl	80020ec <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e045      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_RCC_OscConfig+0x4d0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4b0>
 8003fce:	e03d      	b.n	800404c <HAL_RCC_OscConfig+0x54c>
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fd8:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <HAL_RCC_OscConfig+0x558>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d030      	beq.n	8004048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d129      	bne.n	8004048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d122      	bne.n	8004048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800400e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004010:	4293      	cmp	r3, r2
 8004012:	d119      	bne.n	8004048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d10f      	bne.n	8004048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d107      	bne.n	8004048 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0d0      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b6a      	ldr	r3, [pc, #424]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d910      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b67      	ldr	r3, [pc, #412]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 020f 	bic.w	r2, r3, #15
 800408a:	4965      	ldr	r1, [pc, #404]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b63      	ldr	r3, [pc, #396]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0b8      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040bc:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a58      	ldr	r2, [pc, #352]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80040c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a52      	ldr	r2, [pc, #328]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	494d      	ldr	r1, [pc, #308]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d040      	beq.n	8004180 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d115      	bne.n	800413e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e07f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e073      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e06b      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413e:	4b39      	ldr	r3, [pc, #228]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f023 0203 	bic.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4936      	ldr	r1, [pc, #216]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 800414c:	4313      	orrs	r3, r2
 800414e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004150:	f7fd ffcc 	bl	80020ec <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	e00a      	b.n	800416e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f7fd ffc8 	bl	80020ec <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e053      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 020c 	and.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	429a      	cmp	r2, r3
 800417e:	d1eb      	bne.n	8004158 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004180:	4b27      	ldr	r3, [pc, #156]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d210      	bcs.n	80041b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 020f 	bic.w	r2, r3, #15
 8004196:	4922      	ldr	r1, [pc, #136]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e032      	b.n	8004216 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4916      	ldr	r1, [pc, #88]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	490e      	ldr	r1, [pc, #56]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ee:	f000 f821 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 80041f2:	4601      	mov	r1, r0
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <HAL_RCC_ClockConfig+0x1cc>)
 8004200:	5cd3      	ldrb	r3, [r2, r3]
 8004202:	fa21 f303 	lsr.w	r3, r1, r3
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1d0>)
 8004208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1d4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd ff28 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00
 8004224:	40023800 	.word	0x40023800
 8004228:	080090c0 	.word	0x080090c0
 800422c:	20000004 	.word	0x20000004
 8004230:	20000008 	.word	0x20000008

08004234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	2300      	movs	r3, #0
 8004244:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b04      	cmp	r3, #4
 8004254:	d007      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0x32>
 8004256:	2b08      	cmp	r3, #8
 8004258:	d008      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x38>
 800425a:	2b00      	cmp	r3, #0
 800425c:	f040 80b4 	bne.w	80043c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b5e      	ldr	r3, [pc, #376]	; (80043dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004262:	60bb      	str	r3, [r7, #8]
      break;
 8004264:	e0b3      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004266:	4b5e      	ldr	r3, [pc, #376]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004268:	60bb      	str	r3, [r7, #8]
      break;
 800426a:	e0b0      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800426c:	4b5a      	ldr	r3, [pc, #360]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004274:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004276:	4b58      	ldr	r3, [pc, #352]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d04a      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004282:	4b55      	ldr	r3, [pc, #340]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	099b      	lsrs	r3, r3, #6
 8004288:	f04f 0400 	mov.w	r4, #0
 800428c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	ea03 0501 	and.w	r5, r3, r1
 8004298:	ea04 0602 	and.w	r6, r4, r2
 800429c:	4629      	mov	r1, r5
 800429e:	4632      	mov	r2, r6
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	0154      	lsls	r4, r2, #5
 80042aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ae:	014b      	lsls	r3, r1, #5
 80042b0:	4619      	mov	r1, r3
 80042b2:	4622      	mov	r2, r4
 80042b4:	1b49      	subs	r1, r1, r5
 80042b6:	eb62 0206 	sbc.w	r2, r2, r6
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	f04f 0400 	mov.w	r4, #0
 80042c2:	0194      	lsls	r4, r2, #6
 80042c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042c8:	018b      	lsls	r3, r1, #6
 80042ca:	1a5b      	subs	r3, r3, r1
 80042cc:	eb64 0402 	sbc.w	r4, r4, r2
 80042d0:	f04f 0100 	mov.w	r1, #0
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	00e2      	lsls	r2, r4, #3
 80042da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042de:	00d9      	lsls	r1, r3, #3
 80042e0:	460b      	mov	r3, r1
 80042e2:	4614      	mov	r4, r2
 80042e4:	195b      	adds	r3, r3, r5
 80042e6:	eb44 0406 	adc.w	r4, r4, r6
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	0262      	lsls	r2, r4, #9
 80042f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042f8:	0259      	lsls	r1, r3, #9
 80042fa:	460b      	mov	r3, r1
 80042fc:	4614      	mov	r4, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	4621      	mov	r1, r4
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f04f 0400 	mov.w	r4, #0
 8004308:	461a      	mov	r2, r3
 800430a:	4623      	mov	r3, r4
 800430c:	f7fb fff0 	bl	80002f0 <__aeabi_uldivmod>
 8004310:	4603      	mov	r3, r0
 8004312:	460c      	mov	r4, r1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e049      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004318:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	099b      	lsrs	r3, r3, #6
 800431e:	f04f 0400 	mov.w	r4, #0
 8004322:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	ea03 0501 	and.w	r5, r3, r1
 800432e:	ea04 0602 	and.w	r6, r4, r2
 8004332:	4629      	mov	r1, r5
 8004334:	4632      	mov	r2, r6
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	f04f 0400 	mov.w	r4, #0
 800433e:	0154      	lsls	r4, r2, #5
 8004340:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004344:	014b      	lsls	r3, r1, #5
 8004346:	4619      	mov	r1, r3
 8004348:	4622      	mov	r2, r4
 800434a:	1b49      	subs	r1, r1, r5
 800434c:	eb62 0206 	sbc.w	r2, r2, r6
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	f04f 0400 	mov.w	r4, #0
 8004358:	0194      	lsls	r4, r2, #6
 800435a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800435e:	018b      	lsls	r3, r1, #6
 8004360:	1a5b      	subs	r3, r3, r1
 8004362:	eb64 0402 	sbc.w	r4, r4, r2
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	00e2      	lsls	r2, r4, #3
 8004370:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004374:	00d9      	lsls	r1, r3, #3
 8004376:	460b      	mov	r3, r1
 8004378:	4614      	mov	r4, r2
 800437a:	195b      	adds	r3, r3, r5
 800437c:	eb44 0406 	adc.w	r4, r4, r6
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	02a2      	lsls	r2, r4, #10
 800438a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800438e:	0299      	lsls	r1, r3, #10
 8004390:	460b      	mov	r3, r1
 8004392:	4614      	mov	r4, r2
 8004394:	4618      	mov	r0, r3
 8004396:	4621      	mov	r1, r4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f04f 0400 	mov.w	r4, #0
 800439e:	461a      	mov	r2, r3
 80043a0:	4623      	mov	r3, r4
 80043a2:	f7fb ffa5 	bl	80002f0 <__aeabi_uldivmod>
 80043a6:	4603      	mov	r3, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	3301      	adds	r3, #1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	60bb      	str	r3, [r7, #8]
      break;
 80043c6:	e002      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043ca:	60bb      	str	r3, [r7, #8]
      break;
 80043cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ce:	68bb      	ldr	r3, [r7, #8]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d8:	40023800 	.word	0x40023800
 80043dc:	00f42400 	.word	0x00f42400
 80043e0:	007a1200 	.word	0x007a1200

080043e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000004 	.word	0x20000004

080043fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004400:	f7ff fff0 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 8004404:	4601      	mov	r1, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0a9b      	lsrs	r3, r3, #10
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4a03      	ldr	r2, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004412:	5cd3      	ldrb	r3, [r2, r3]
 8004414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	080090d0 	.word	0x080090d0

08004424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004428:	f7ff ffdc 	bl	80043e4 <HAL_RCC_GetHCLKFreq>
 800442c:	4601      	mov	r1, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0b5b      	lsrs	r3, r3, #13
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4a03      	ldr	r2, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
 800443c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	080090d0 	.word	0x080090d0

0800444c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d012      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004474:	4b69      	ldr	r3, [pc, #420]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a68      	ldr	r2, [pc, #416]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800447e:	6093      	str	r3, [r2, #8]
 8004480:	4b66      	ldr	r3, [pc, #408]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	4964      	ldr	r1, [pc, #400]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d017      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a6:	4b5d      	ldr	r3, [pc, #372]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	4959      	ldr	r1, [pc, #356]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c4:	d101      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d017      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044e2:	4b4e      	ldr	r3, [pc, #312]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	494a      	ldr	r1, [pc, #296]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004500:	d101      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800450e:	2301      	movs	r3, #1
 8004510:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 808b 	beq.w	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	4b3a      	ldr	r3, [pc, #232]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	4a39      	ldr	r2, [pc, #228]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453a:	6413      	str	r3, [r2, #64]	; 0x40
 800453c:	4b37      	ldr	r3, [pc, #220]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004548:	4b35      	ldr	r3, [pc, #212]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a34      	ldr	r2, [pc, #208]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800454e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004554:	f7fd fdca 	bl	80020ec <HAL_GetTick>
 8004558:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fd fdc6 	bl	80020ec <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e38d      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800456e:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800457a:	4b28      	ldr	r3, [pc, #160]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d035      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d02e      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004598:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045a2:	4b1e      	ldr	r3, [pc, #120]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ae:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a1a      	ldr	r2, [pc, #104]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045ba:	4a18      	ldr	r2, [pc, #96]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c0:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d114      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045cc:	f7fd fd8e 	bl	80020ec <HAL_GetTick>
 80045d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fd fd8a 	bl	80020ec <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e34f      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ee      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004602:	d111      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004612:	400b      	ands	r3, r1
 8004614:	4901      	ldr	r1, [pc, #4]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
 800461a:	e00b      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800461c:	40023800 	.word	0x40023800
 8004620:	40007000 	.word	0x40007000
 8004624:	0ffffcff 	.word	0x0ffffcff
 8004628:	4bb3      	ldr	r3, [pc, #716]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4ab2      	ldr	r2, [pc, #712]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004632:	6093      	str	r3, [r2, #8]
 8004634:	4bb0      	ldr	r3, [pc, #704]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004636:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004640:	49ad      	ldr	r1, [pc, #692]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004642:	4313      	orrs	r3, r2
 8004644:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004652:	4ba9      	ldr	r3, [pc, #676]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004658:	4aa7      	ldr	r2, [pc, #668]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004662:	4ba5      	ldr	r3, [pc, #660]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004664:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	49a2      	ldr	r1, [pc, #648]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004680:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468e:	499a      	ldr	r1, [pc, #616]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046a2:	4b95      	ldr	r3, [pc, #596]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b0:	4991      	ldr	r1, [pc, #580]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046c4:	4b8c      	ldr	r3, [pc, #560]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d2:	4989      	ldr	r1, [pc, #548]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046e6:	4b84      	ldr	r3, [pc, #528]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4980      	ldr	r1, [pc, #512]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004708:	4b7b      	ldr	r3, [pc, #492]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	4978      	ldr	r1, [pc, #480]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800472a:	4b73      	ldr	r3, [pc, #460]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f023 020c 	bic.w	r2, r3, #12
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004738:	496f      	ldr	r1, [pc, #444]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800474c:	4b6a      	ldr	r3, [pc, #424]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	4967      	ldr	r1, [pc, #412]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800476e:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477c:	495e      	ldr	r1, [pc, #376]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004790:	4b59      	ldr	r3, [pc, #356]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	4956      	ldr	r1, [pc, #344]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047b2:	4b51      	ldr	r3, [pc, #324]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	494d      	ldr	r1, [pc, #308]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047d4:	4b48      	ldr	r3, [pc, #288]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	4945      	ldr	r1, [pc, #276]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047f6:	4b40      	ldr	r3, [pc, #256]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004804:	493c      	ldr	r1, [pc, #240]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004818:	4b37      	ldr	r3, [pc, #220]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004826:	4934      	ldr	r1, [pc, #208]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d011      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800483a:	4b2f      	ldr	r3, [pc, #188]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004848:	492b      	ldr	r1, [pc, #172]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004858:	d101      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800485a:	2301      	movs	r3, #1
 800485c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800486a:	2301      	movs	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800487a:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004888:	491b      	ldr	r1, [pc, #108]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ac:	4912      	ldr	r1, [pc, #72]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d0:	4909      	ldr	r1, [pc, #36]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00f      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	e002      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	4985      	ldr	r1, [pc, #532]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004910:	4b80      	ldr	r3, [pc, #512]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004916:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004920:	497c      	ldr	r1, [pc, #496]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d005      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004936:	f040 80d6 	bne.w	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800493a:	4b76      	ldr	r3, [pc, #472]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a75      	ldr	r2, [pc, #468]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004940:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004946:	f7fd fbd1 	bl	80020ec <HAL_GetTick>
 800494a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800494e:	f7fd fbcd 	bl	80020ec <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b64      	cmp	r3, #100	; 0x64
 800495a:	d901      	bls.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e194      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004960:	4b6c      	ldr	r3, [pc, #432]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1f0      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d021      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	2b00      	cmp	r3, #0
 800497e:	d11d      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004980:	4b64      	ldr	r3, [pc, #400]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004986:	0c1b      	lsrs	r3, r3, #16
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800498e:	4b61      	ldr	r3, [pc, #388]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004994:	0e1b      	lsrs	r3, r3, #24
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	019a      	lsls	r2, r3, #6
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	061b      	lsls	r3, r3, #24
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	071b      	lsls	r3, r3, #28
 80049b4:	4957      	ldr	r1, [pc, #348]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d02e      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e6:	d129      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049e8:	4b4a      	ldr	r3, [pc, #296]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ee:	0c1b      	lsrs	r3, r3, #16
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049fc:	0f1b      	lsrs	r3, r3, #28
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	019a      	lsls	r2, r3, #6
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	061b      	lsls	r3, r3, #24
 8004a16:	431a      	orrs	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	071b      	lsls	r3, r3, #28
 8004a1c:	493d      	ldr	r1, [pc, #244]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a24:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2a:	f023 021f 	bic.w	r2, r3, #31
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	3b01      	subs	r3, #1
 8004a34:	4937      	ldr	r1, [pc, #220]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01d      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a48:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4e:	0e1b      	lsrs	r3, r3, #24
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a56:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a5c:	0f1b      	lsrs	r3, r3, #28
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	019a      	lsls	r2, r3, #6
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	431a      	orrs	r2, r3
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	431a      	orrs	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	071b      	lsls	r3, r3, #28
 8004a7c:	4925      	ldr	r1, [pc, #148]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d011      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	019a      	lsls	r2, r3, #6
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	061b      	lsls	r3, r3, #24
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	071b      	lsls	r3, r3, #28
 8004aac:	4919      	ldr	r1, [pc, #100]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004aba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac0:	f7fd fb14 	bl	80020ec <HAL_GetTick>
 8004ac4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ac8:	f7fd fb10 	bl	80020ec <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0d7      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	f040 80cd 	bne.w	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004aee:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afa:	f7fd faf7 	bl	80020ec <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b02:	f7fd faf3 	bl	80020ec <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b64      	cmp	r3, #100	; 0x64
 8004b0e:	d903      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e0ba      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004b14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b18:	4b5e      	ldr	r3, [pc, #376]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b24:	d0ed      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02e      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d12a      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b4e:	4b51      	ldr	r3, [pc, #324]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b5c:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	0f1b      	lsrs	r3, r3, #28
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	019a      	lsls	r2, r3, #6
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	061b      	lsls	r3, r3, #24
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	4944      	ldr	r1, [pc, #272]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b8a:	4b42      	ldr	r3, [pc, #264]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	493d      	ldr	r1, [pc, #244]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d022      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb8:	d11d      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	0e1b      	lsrs	r3, r3, #24
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bc8:	4b32      	ldr	r3, [pc, #200]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	0f1b      	lsrs	r3, r3, #28
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	019a      	lsls	r2, r3, #6
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	431a      	orrs	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	061b      	lsls	r3, r3, #24
 8004be8:	431a      	orrs	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	071b      	lsls	r3, r3, #28
 8004bee:	4929      	ldr	r1, [pc, #164]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d028      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c08:	0e1b      	lsrs	r3, r3, #24
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c10:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	019a      	lsls	r2, r3, #6
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	071b      	lsls	r3, r3, #28
 8004c36:	4917      	ldr	r1, [pc, #92]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4911      	ldr	r1, [pc, #68]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c54:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a0e      	ldr	r2, [pc, #56]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c60:	f7fd fa44 	bl	80020ec <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c68:	f7fd fa40 	bl	80020ec <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	; 0x64
 8004c74:	d901      	bls.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e007      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c86:	d1ef      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800

08004c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e084      	b.n	8004db4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fc fe95 	bl	80019f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cea:	d902      	bls.n	8004cf2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e002      	b.n	8004cf8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d00:	d007      	beq.n	8004d12 <HAL_SPI_Init+0x7a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d0a:	d002      	beq.n	8004d12 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d22:	d903      	bls.n	8004d2c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
 8004d2a:	e002      	b.n	8004d32 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	ea42 0103 	orr.w	r1, r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0204 	and.w	r2, r3, #4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	ea42 0103 	orr.w	r1, r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d110      	bne.n	8004df8 <HAL_SPI_Receive_DMA+0x3c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dde:	d10b      	bne.n	8004df8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2204      	movs	r2, #4
 8004de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004de8:	88fb      	ldrh	r3, [r7, #6]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f900 	bl	8004ff4 <HAL_SPI_TransmitReceive_DMA>
 8004df4:	4603      	mov	r3, r0
 8004df6:	e0f3      	b.n	8004fe0 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_SPI_Receive_DMA+0x4a>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e0ec      	b.n	8004fe0 <HAL_SPI_Receive_DMA+0x224>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e1e:	e0da      	b.n	8004fd6 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_SPI_Receive_DMA+0x70>
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e30:	e0d1      	b.n	8004fd6 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2204      	movs	r2, #4
 8004e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	88fa      	ldrh	r2, [r7, #6]
 8004e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e76:	d107      	bne.n	8004e88 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e96:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ea0:	d908      	bls.n	8004eb4 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	e042      	b.n	8004f3a <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ec2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ece:	d134      	bne.n	8004f3a <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ede:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d111      	bne.n	8004f14 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004efe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f12:	e012      	b.n	8004f3a <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f22:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <HAL_SPI_Receive_DMA+0x22c>)
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	4a29      	ldr	r2, [pc, #164]	; (8004fec <HAL_SPI_Receive_DMA+0x230>)
 8004f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	4a28      	ldr	r2, [pc, #160]	; (8004ff0 <HAL_SPI_Receive_DMA+0x234>)
 8004f50:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f56:	2200      	movs	r2, #0
 8004f58:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	4619      	mov	r1, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f7fd fefe 	bl	8002d74 <HAL_DMA_Start_IT>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f82:	f043 0210 	orr.w	r2, r3, #16
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004f96:	e01e      	b.n	8004fd6 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d007      	beq.n	8004fb6 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0220 	orr.w	r2, r2, #32
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	08005475 	.word	0x08005475
 8004fec:	0800535d 	.word	0x0800535d
 8004ff0:	080054ad 	.word	0x080054ad

08004ff4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005010:	2302      	movs	r3, #2
 8005012:	e16c      	b.n	80052ee <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005022:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800502a:	7dbb      	ldrb	r3, [r7, #22]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d00d      	beq.n	800504c <HAL_SPI_TransmitReceive_DMA+0x58>
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005036:	d106      	bne.n	8005046 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005040:	7dbb      	ldrb	r3, [r7, #22]
 8005042:	2b04      	cmp	r3, #4
 8005044:	d002      	beq.n	800504c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005046:	2302      	movs	r3, #2
 8005048:	75fb      	strb	r3, [r7, #23]
    goto error;
 800504a:	e14b      	b.n	80052e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005058:	887b      	ldrh	r3, [r7, #2]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005062:	e13f      	b.n	80052e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b04      	cmp	r3, #4
 800506e:	d003      	beq.n	8005078 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2205      	movs	r2, #5
 8005074:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	887a      	ldrh	r2, [r7, #2]
 8005088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	887a      	ldrh	r2, [r7, #2]
 800508e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	887a      	ldrh	r2, [r7, #2]
 800509a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	887a      	ldrh	r2, [r7, #2]
 80050a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80050c0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ca:	d908      	bls.n	80050de <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050da:	605a      	str	r2, [r3, #4]
 80050dc:	e06f      	b.n	80051be <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ec:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f8:	d126      	bne.n	8005148 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005114:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005124:	e010      	b.n	8005148 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005134:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	b29b      	uxth	r3, r3
 8005140:	3301      	adds	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005152:	d134      	bne.n	80051be <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005162:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516a:	b29b      	uxth	r3, r3
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d111      	bne.n	8005198 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005182:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800518a:	b29b      	uxth	r3, r3
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005196:	e012      	b.n	80051be <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	3301      	adds	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d108      	bne.n	80051dc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ce:	4a4a      	ldr	r2, [pc, #296]	; (80052f8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d6:	4a49      	ldr	r2, [pc, #292]	; (80052fc <HAL_SPI_TransmitReceive_DMA+0x308>)
 80051d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80051da:	e007      	b.n	80051ec <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e0:	4a47      	ldr	r2, [pc, #284]	; (8005300 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e8:	4a46      	ldr	r2, [pc, #280]	; (8005304 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80051ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	4a45      	ldr	r2, [pc, #276]	; (8005308 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80051f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f8:	2200      	movs	r2, #0
 80051fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	4619      	mov	r1, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	461a      	mov	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005214:	b29b      	uxth	r3, r3
 8005216:	f7fd fdad 	bl	8002d74 <HAL_DMA_Start_IT>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00c      	beq.n	800523a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005224:	f043 0210 	orr.w	r2, r3, #16
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005238:	e054      	b.n	80052e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	2200      	movs	r2, #0
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	2200      	movs	r2, #0
 8005258:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	2200      	movs	r2, #0
 8005260:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	2200      	movs	r2, #0
 8005268:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	4619      	mov	r1, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	461a      	mov	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005280:	b29b      	uxth	r3, r3
 8005282:	f7fd fd77 	bl	8002d74 <HAL_DMA_Start_IT>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005290:	f043 0210 	orr.w	r2, r3, #16
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80052a4:	e01e      	b.n	80052e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d007      	beq.n	80052c4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0220 	orr.w	r2, r2, #32
 80052d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0202 	orr.w	r2, r2, #2
 80052e2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	08005475 	.word	0x08005475
 80052fc:	0800535d 	.word	0x0800535d
 8005300:	08005491 	.word	0x08005491
 8005304:	080053e3 	.word	0x080053e3
 8005308:	080054ad 	.word	0x080054ad

0800530c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800536a:	f7fc febf 	bl	80020ec <HAL_GetTick>
 800536e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537e:	d02a      	beq.n	80053d6 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0220 	bic.w	r2, r2, #32
 800538e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0203 	bic.w	r2, r2, #3
 800539e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	2164      	movs	r1, #100	; 0x64
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f978 	bl	800569a <SPI_EndRxTransaction>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff ffba 	bl	8005348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80053d4:	e002      	b.n	80053dc <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7fb ff68 	bl	80012ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053f0:	f7fc fe7c 	bl	80020ec <HAL_GetTick>
 80053f4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005404:	d030      	beq.n	8005468 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0220 	bic.w	r2, r2, #32
 8005414:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	2164      	movs	r1, #100	; 0x64
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f995 	bl	800574a <SPI_EndRxTxTransaction>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0203 	bic.w	r2, r2, #3
 8005440:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff ff71 	bl	8005348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005466:	e002      	b.n	800546e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff ff4f 	bl	800530c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff ff4c 	bl	8005320 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ff48 	bl	8005334 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0203 	bic.w	r2, r2, #3
 80054c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ce:	f043 0210 	orr.w	r2, r3, #16
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff ff32 	bl	8005348 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054fc:	e04c      	b.n	8005598 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d048      	beq.n	8005598 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005506:	f7fc fdf1 	bl	80020ec <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d902      	bls.n	800551c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d13d      	bne.n	8005598 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800552a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005534:	d111      	bne.n	800555a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553e:	d004      	beq.n	800554a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005548:	d107      	bne.n	800555a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005558:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005562:	d10f      	bne.n	8005584 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005582:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e00f      	b.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4013      	ands	r3, r2
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d1a3      	bne.n	80054fe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80055ce:	e057      	b.n	8005680 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055d6:	d106      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0x26>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ec:	d048      	beq.n	8005680 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80055ee:	f7fc fd7d 	bl	80020ec <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d902      	bls.n	8005604 <SPI_WaitFifoStateUntilTimeout+0x44>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d13d      	bne.n	8005680 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005612:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561c:	d111      	bne.n	8005642 <SPI_WaitFifoStateUntilTimeout+0x82>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005626:	d004      	beq.n	8005632 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005630:	d107      	bne.n	8005642 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005640:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564a:	d10f      	bne.n	800566c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800566a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e008      	b.n	8005692 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	d19f      	bne.n	80055d0 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b086      	sub	sp, #24
 800569e:	af02      	add	r7, sp, #8
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ae:	d111      	bne.n	80056d4 <SPI_EndRxTransaction+0x3a>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b8:	d004      	beq.n	80056c4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d107      	bne.n	80056d4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff04 	bl	80054ec <SPI_WaitFlagStateUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e023      	b.n	8005742 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005702:	d11d      	bne.n	8005740 <SPI_EndRxTransaction+0xa6>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	d004      	beq.n	8005718 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005716:	d113      	bne.n	8005740 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff ff4b 	bl	80055c0 <SPI_WaitFifoStateUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005734:	f043 0220 	orr.w	r2, r3, #32
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e000      	b.n	8005742 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af02      	add	r7, sp, #8
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff ff2c 	bl	80055c0 <SPI_WaitFifoStateUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e027      	b.n	80057ce <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2200      	movs	r2, #0
 8005786:	2180      	movs	r1, #128	; 0x80
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff feaf 	bl	80054ec <SPI_WaitFlagStateUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d007      	beq.n	80057a4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005798:	f043 0220 	orr.w	r2, r3, #32
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e014      	b.n	80057ce <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff ff05 	bl	80055c0 <SPI_WaitFifoStateUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e000      	b.n	80057ce <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e01d      	b.n	8005824 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fc f971 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fec9 	bl	80065ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	4b0c      	ldr	r3, [pc, #48]	; (800587c <HAL_TIM_Base_Start_IT+0x50>)
 800584c:	4013      	ands	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b06      	cmp	r3, #6
 8005854:	d00b      	beq.n	800586e <HAL_TIM_Base_Start_IT+0x42>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585c:	d007      	beq.n	800586e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	00010007 	.word	0x00010007

08005880 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a1a      	ldr	r2, [r3, #32]
 800589e:	f241 1311 	movw	r3, #4369	; 0x1111
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10f      	bne.n	80058c8 <HAL_TIM_Base_Stop_IT+0x48>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	f240 4344 	movw	r3, #1092	; 0x444
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <HAL_TIM_Base_Stop_IT+0x48>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e01d      	b.n	8005924 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f815 	bl	800592c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f000 fe49 	bl	80065ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d841      	bhi.n	80059d4 <HAL_TIM_PWM_Start_IT+0x94>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <HAL_TIM_PWM_Start_IT+0x18>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800598d 	.word	0x0800598d
 800595c:	080059d5 	.word	0x080059d5
 8005960:	080059d5 	.word	0x080059d5
 8005964:	080059d5 	.word	0x080059d5
 8005968:	0800599f 	.word	0x0800599f
 800596c:	080059d5 	.word	0x080059d5
 8005970:	080059d5 	.word	0x080059d5
 8005974:	080059d5 	.word	0x080059d5
 8005978:	080059b1 	.word	0x080059b1
 800597c:	080059d5 	.word	0x080059d5
 8005980:	080059d5 	.word	0x080059d5
 8005984:	080059d5 	.word	0x080059d5
 8005988:	080059c3 	.word	0x080059c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0202 	orr.w	r2, r2, #2
 800599a:	60da      	str	r2, [r3, #12]
      break;
 800599c:	e01b      	b.n	80059d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0204 	orr.w	r2, r2, #4
 80059ac:	60da      	str	r2, [r3, #12]
      break;
 80059ae:	e012      	b.n	80059d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0208 	orr.w	r2, r2, #8
 80059be:	60da      	str	r2, [r3, #12]
      break;
 80059c0:	e009      	b.n	80059d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0210 	orr.w	r2, r2, #16
 80059d0:	60da      	str	r2, [r3, #12]
      break;
 80059d2:	e000      	b.n	80059d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80059d4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2201      	movs	r2, #1
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 fb2e 	bl	8007040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <HAL_TIM_PWM_Start_IT+0x108>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d004      	beq.n	80059f8 <HAL_TIM_PWM_Start_IT+0xb8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <HAL_TIM_PWM_Start_IT+0x10c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d101      	bne.n	80059fc <HAL_TIM_PWM_Start_IT+0xbc>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <HAL_TIM_PWM_Start_IT+0xbe>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <HAL_TIM_PWM_Start_IT+0x110>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b06      	cmp	r3, #6
 8005a22:	d00b      	beq.n	8005a3c <HAL_TIM_PWM_Start_IT+0xfc>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2a:	d007      	beq.n	8005a3c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40010400 	.word	0x40010400
 8005a50:	00010007 	.word	0x00010007

08005a54 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b0c      	cmp	r3, #12
 8005a62:	d841      	bhi.n	8005ae8 <HAL_TIM_PWM_Stop_IT+0x94>
 8005a64:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <HAL_TIM_PWM_Stop_IT+0x18>)
 8005a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6a:	bf00      	nop
 8005a6c:	08005aa1 	.word	0x08005aa1
 8005a70:	08005ae9 	.word	0x08005ae9
 8005a74:	08005ae9 	.word	0x08005ae9
 8005a78:	08005ae9 	.word	0x08005ae9
 8005a7c:	08005ab3 	.word	0x08005ab3
 8005a80:	08005ae9 	.word	0x08005ae9
 8005a84:	08005ae9 	.word	0x08005ae9
 8005a88:	08005ae9 	.word	0x08005ae9
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005ae9 	.word	0x08005ae9
 8005a94:	08005ae9 	.word	0x08005ae9
 8005a98:	08005ae9 	.word	0x08005ae9
 8005a9c:	08005ad7 	.word	0x08005ad7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0202 	bic.w	r2, r2, #2
 8005aae:	60da      	str	r2, [r3, #12]
      break;
 8005ab0:	e01b      	b.n	8005aea <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0204 	bic.w	r2, r2, #4
 8005ac0:	60da      	str	r2, [r3, #12]
      break;
 8005ac2:	e012      	b.n	8005aea <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0208 	bic.w	r2, r2, #8
 8005ad2:	60da      	str	r2, [r3, #12]
      break;
 8005ad4:	e009      	b.n	8005aea <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0210 	bic.w	r2, r2, #16
 8005ae4:	60da      	str	r2, [r3, #12]
      break;
 8005ae6:	e000      	b.n	8005aea <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8005ae8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 faa4 	bl	8007040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a20      	ldr	r2, [pc, #128]	; (8005b80 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_TIM_PWM_Stop_IT+0xb8>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <HAL_TIM_PWM_Stop_IT+0x130>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIM_PWM_Stop_IT+0xbc>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e000      	b.n	8005b12 <HAL_TIM_PWM_Stop_IT+0xbe>
 8005b10:	2300      	movs	r3, #0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d017      	beq.n	8005b46 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6a1a      	ldr	r2, [r3, #32]
 8005b1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10f      	bne.n	8005b46 <HAL_TIM_PWM_Stop_IT+0xf2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	f240 4344 	movw	r3, #1092	; 0x444
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <HAL_TIM_PWM_Stop_IT+0xf2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a1a      	ldr	r2, [r3, #32]
 8005b4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <HAL_TIM_PWM_Stop_IT+0x122>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a1a      	ldr	r2, [r3, #32]
 8005b5c:	f240 4344 	movw	r3, #1092	; 0x444
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <HAL_TIM_PWM_Stop_IT+0x122>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40010400 	.word	0x40010400

08005b88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e01d      	b.n	8005bd6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fc f812 	bl	8001bd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f000 fcf0 	bl	80065ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	d841      	bhi.n	8005c74 <HAL_TIM_IC_Start_IT+0x94>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <HAL_TIM_IC_Start_IT+0x18>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c2d 	.word	0x08005c2d
 8005bfc:	08005c75 	.word	0x08005c75
 8005c00:	08005c75 	.word	0x08005c75
 8005c04:	08005c75 	.word	0x08005c75
 8005c08:	08005c3f 	.word	0x08005c3f
 8005c0c:	08005c75 	.word	0x08005c75
 8005c10:	08005c75 	.word	0x08005c75
 8005c14:	08005c75 	.word	0x08005c75
 8005c18:	08005c51 	.word	0x08005c51
 8005c1c:	08005c75 	.word	0x08005c75
 8005c20:	08005c75 	.word	0x08005c75
 8005c24:	08005c75 	.word	0x08005c75
 8005c28:	08005c63 	.word	0x08005c63
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0202 	orr.w	r2, r2, #2
 8005c3a:	60da      	str	r2, [r3, #12]
      break;
 8005c3c:	e01b      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0204 	orr.w	r2, r2, #4
 8005c4c:	60da      	str	r2, [r3, #12]
      break;
 8005c4e:	e012      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0208 	orr.w	r2, r2, #8
 8005c5e:	60da      	str	r2, [r3, #12]
      break;
 8005c60:	e009      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0210 	orr.w	r2, r2, #16
 8005c70:	60da      	str	r2, [r3, #12]
      break;
 8005c72:	e000      	b.n	8005c76 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005c74:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 f9de 	bl	8007040 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_TIM_IC_Start_IT+0xd8>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b06      	cmp	r3, #6
 8005c94:	d00b      	beq.n	8005cae <HAL_TIM_IC_Start_IT+0xce>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9c:	d007      	beq.n	8005cae <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0201 	orr.w	r2, r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	00010007 	.word	0x00010007

08005cbc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e02d      	b.n	8005d2c <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f825 	bl	8005d34 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f000 fc55 	bl	80065ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0208 	bic.w	r2, r2, #8
 8005d10:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6819      	ldr	r1, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0202 	mvn.w	r2, #2
 8005d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fb fb9c 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fbec 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fbf3 	bl	8006584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0204 	mvn.w	r2, #4
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fb fb72 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fbc2 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fbc9 	bl	8006584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0208 	mvn.w	r2, #8
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2204      	movs	r2, #4
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fb fb48 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fb98 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fb9f 	bl	8006584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0310 	and.w	r3, r3, #16
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0210 	mvn.w	r2, #16
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2208      	movs	r2, #8
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fb fb1e 	bl	80014c8 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fb6e 	bl	8006570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fb75 	bl	8006584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d10e      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0201 	mvn.w	r2, #1
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fb faf4 	bl	80014b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed6:	2b80      	cmp	r3, #128	; 0x80
 8005ed8:	d10e      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee4:	2b80      	cmp	r3, #128	; 0x80
 8005ee6:	d107      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 f9e0 	bl	80072b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f06:	d10e      	bne.n	8005f26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d107      	bne.n	8005f26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 f9d3 	bl	80072cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d10e      	bne.n	8005f52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d107      	bne.n	8005f52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fb23 	bl	8006598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d10e      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d107      	bne.n	8005f7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f06f 0220 	mvn.w	r2, #32
 8005f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 f993 	bl	80072a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e08a      	b.n	80060b6 <HAL_TIM_IC_ConfigChannel+0x130>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d11b      	bne.n	8005fee <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f000 fe77 	bl	8006cb8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699a      	ldr	r2, [r3, #24]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 020c 	bic.w	r2, r2, #12
 8005fd8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6999      	ldr	r1, [r3, #24]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	619a      	str	r2, [r3, #24]
 8005fec:	e05a      	b.n	80060a4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d11c      	bne.n	800602e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6819      	ldr	r1, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f000 fefb 	bl	8006dfe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006016:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6999      	ldr	r1, [r3, #24]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	021a      	lsls	r2, r3, #8
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	619a      	str	r2, [r3, #24]
 800602c:	e03a      	b.n	80060a4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b08      	cmp	r3, #8
 8006032:	d11b      	bne.n	800606c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	6819      	ldr	r1, [r3, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f000 ff48 	bl	8006ed8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	69da      	ldr	r2, [r3, #28]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 020c 	bic.w	r2, r2, #12
 8006056:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69d9      	ldr	r1, [r3, #28]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	61da      	str	r2, [r3, #28]
 800606a:	e01b      	b.n	80060a4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	6819      	ldr	r1, [r3, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f000 ff68 	bl	8006f50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69da      	ldr	r2, [r3, #28]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800608e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69d9      	ldr	r1, [r3, #28]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	021a      	lsls	r2, r3, #8
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e105      	b.n	80062e6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b14      	cmp	r3, #20
 80060ee:	f200 80f0 	bhi.w	80062d2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80060f2:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	080062d3 	.word	0x080062d3
 8006100:	080062d3 	.word	0x080062d3
 8006104:	080062d3 	.word	0x080062d3
 8006108:	0800618d 	.word	0x0800618d
 800610c:	080062d3 	.word	0x080062d3
 8006110:	080062d3 	.word	0x080062d3
 8006114:	080062d3 	.word	0x080062d3
 8006118:	080061cf 	.word	0x080061cf
 800611c:	080062d3 	.word	0x080062d3
 8006120:	080062d3 	.word	0x080062d3
 8006124:	080062d3 	.word	0x080062d3
 8006128:	0800620f 	.word	0x0800620f
 800612c:	080062d3 	.word	0x080062d3
 8006130:	080062d3 	.word	0x080062d3
 8006134:	080062d3 	.word	0x080062d3
 8006138:	08006251 	.word	0x08006251
 800613c:	080062d3 	.word	0x080062d3
 8006140:	080062d3 	.word	0x080062d3
 8006144:	080062d3 	.word	0x080062d3
 8006148:	08006291 	.word	0x08006291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 faca 	bl	80066ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0208 	orr.w	r2, r2, #8
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0204 	bic.w	r2, r2, #4
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	619a      	str	r2, [r3, #24]
      break;
 800618a:	e0a3      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fb1c 	bl	80067d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6999      	ldr	r1, [r3, #24]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	021a      	lsls	r2, r3, #8
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	619a      	str	r2, [r3, #24]
      break;
 80061cc:	e082      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fb73 	bl	80068c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0208 	orr.w	r2, r2, #8
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0204 	bic.w	r2, r2, #4
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	61da      	str	r2, [r3, #28]
      break;
 800620c:	e062      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fbc9 	bl	80069ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69d9      	ldr	r1, [r3, #28]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	021a      	lsls	r2, r3, #8
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	61da      	str	r2, [r3, #28]
      break;
 800624e:	e041      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fc00 	bl	8006a5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0208 	orr.w	r2, r2, #8
 800626a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0204 	bic.w	r2, r2, #4
 800627a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800628e:	e021      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fc32 	bl	8006b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	021a      	lsls	r2, r3, #8
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062d0:	e000      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80062d2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop

080062f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIM_ConfigClockSource+0x18>
 8006304:	2302      	movs	r3, #2
 8006306:	e0a6      	b.n	8006456 <HAL_TIM_ConfigClockSource+0x166>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4b4f      	ldr	r3, [pc, #316]	; (8006460 <HAL_TIM_ConfigClockSource+0x170>)
 8006324:	4013      	ands	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800632e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d067      	beq.n	8006410 <HAL_TIM_ConfigClockSource+0x120>
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d80b      	bhi.n	800635c <HAL_TIM_ConfigClockSource+0x6c>
 8006344:	2b10      	cmp	r3, #16
 8006346:	d073      	beq.n	8006430 <HAL_TIM_ConfigClockSource+0x140>
 8006348:	2b10      	cmp	r3, #16
 800634a:	d802      	bhi.n	8006352 <HAL_TIM_ConfigClockSource+0x62>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d06f      	beq.n	8006430 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006350:	e078      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006352:	2b20      	cmp	r3, #32
 8006354:	d06c      	beq.n	8006430 <HAL_TIM_ConfigClockSource+0x140>
 8006356:	2b30      	cmp	r3, #48	; 0x30
 8006358:	d06a      	beq.n	8006430 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800635a:	e073      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800635c:	2b70      	cmp	r3, #112	; 0x70
 800635e:	d00d      	beq.n	800637c <HAL_TIM_ConfigClockSource+0x8c>
 8006360:	2b70      	cmp	r3, #112	; 0x70
 8006362:	d804      	bhi.n	800636e <HAL_TIM_ConfigClockSource+0x7e>
 8006364:	2b50      	cmp	r3, #80	; 0x50
 8006366:	d033      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0xe0>
 8006368:	2b60      	cmp	r3, #96	; 0x60
 800636a:	d041      	beq.n	80063f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800636c:	e06a      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006372:	d066      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x152>
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006378:	d017      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800637a:	e063      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6899      	ldr	r1, [r3, #8]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f000 fe38 	bl	8007000 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800639e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	609a      	str	r2, [r3, #8]
      break;
 80063a8:	e04c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6899      	ldr	r1, [r3, #8]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f000 fe21 	bl	8007000 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063cc:	609a      	str	r2, [r3, #8]
      break;
 80063ce:	e039      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	6859      	ldr	r1, [r3, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	461a      	mov	r2, r3
 80063de:	f000 fcdf 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2150      	movs	r1, #80	; 0x50
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fdee 	bl	8006fca <TIM_ITRx_SetConfig>
      break;
 80063ee:	e029      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	461a      	mov	r2, r3
 80063fe:	f000 fd3b 	bl	8006e78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2160      	movs	r1, #96	; 0x60
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fdde 	bl	8006fca <TIM_ITRx_SetConfig>
      break;
 800640e:	e019      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	6859      	ldr	r1, [r3, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	461a      	mov	r2, r3
 800641e:	f000 fcbf 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2140      	movs	r1, #64	; 0x40
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fdce 	bl	8006fca <TIM_ITRx_SetConfig>
      break;
 800642e:	e009      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f000 fdc5 	bl	8006fca <TIM_ITRx_SetConfig>
      break;
 8006440:	e000      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	fffeff88 	.word	0xfffeff88

08006464 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006478:	2302      	movs	r3, #2
 800647a:	e031      	b.n	80064e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fb8a 	bl	8006ba8 <TIM_SlaveTimer_SetConfig>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e018      	b.n	80064e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064bc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064cc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b0c      	cmp	r3, #12
 80064fa:	d831      	bhi.n	8006560 <HAL_TIM_ReadCapturedValue+0x78>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <HAL_TIM_ReadCapturedValue+0x1c>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006539 	.word	0x08006539
 8006508:	08006561 	.word	0x08006561
 800650c:	08006561 	.word	0x08006561
 8006510:	08006561 	.word	0x08006561
 8006514:	08006543 	.word	0x08006543
 8006518:	08006561 	.word	0x08006561
 800651c:	08006561 	.word	0x08006561
 8006520:	08006561 	.word	0x08006561
 8006524:	0800654d 	.word	0x0800654d
 8006528:	08006561 	.word	0x08006561
 800652c:	08006561 	.word	0x08006561
 8006530:	08006561 	.word	0x08006561
 8006534:	08006557 	.word	0x08006557
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653e:	60fb      	str	r3, [r7, #12]

      break;
 8006540:	e00f      	b.n	8006562 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	60fb      	str	r3, [r7, #12]

      break;
 800654a:	e00a      	b.n	8006562 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	60fb      	str	r3, [r7, #12]

      break;
 8006554:	e005      	b.n	8006562 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	60fb      	str	r3, [r7, #12]

      break;
 800655e:	e000      	b.n	8006562 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006560:	bf00      	nop
  }

  return tmpreg;
 8006562:	68fb      	ldr	r3, [r7, #12]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a40      	ldr	r2, [pc, #256]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ca:	d00f      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a3d      	ldr	r2, [pc, #244]	; (80066c4 <TIM_Base_SetConfig+0x118>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00b      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a3c      	ldr	r2, [pc, #240]	; (80066c8 <TIM_Base_SetConfig+0x11c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3b      	ldr	r2, [pc, #236]	; (80066cc <TIM_Base_SetConfig+0x120>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3a      	ldr	r2, [pc, #232]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d108      	bne.n	80065fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2f      	ldr	r2, [pc, #188]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d02b      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d027      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2c      	ldr	r2, [pc, #176]	; (80066c4 <TIM_Base_SetConfig+0x118>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d023      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2b      	ldr	r2, [pc, #172]	; (80066c8 <TIM_Base_SetConfig+0x11c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01f      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2a      	ldr	r2, [pc, #168]	; (80066cc <TIM_Base_SetConfig+0x120>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01b      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a29      	ldr	r2, [pc, #164]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d017      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a28      	ldr	r2, [pc, #160]	; (80066d4 <TIM_Base_SetConfig+0x128>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d013      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <TIM_Base_SetConfig+0x12c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00f      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <TIM_Base_SetConfig+0x130>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00b      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a25      	ldr	r2, [pc, #148]	; (80066e0 <TIM_Base_SetConfig+0x134>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d007      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a24      	ldr	r2, [pc, #144]	; (80066e4 <TIM_Base_SetConfig+0x138>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <TIM_Base_SetConfig+0x13c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d108      	bne.n	8006670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_Base_SetConfig+0xf8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a0c      	ldr	r2, [pc, #48]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d103      	bne.n	80066ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	615a      	str	r2, [r3, #20]
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40000800 	.word	0x40000800
 80066cc:	40000c00 	.word	0x40000c00
 80066d0:	40010400 	.word	0x40010400
 80066d4:	40014000 	.word	0x40014000
 80066d8:	40014400 	.word	0x40014400
 80066dc:	40014800 	.word	0x40014800
 80066e0:	40001800 	.word	0x40001800
 80066e4:	40001c00 	.word	0x40001c00
 80066e8:	40002000 	.word	0x40002000

080066ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	f023 0201 	bic.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4b2b      	ldr	r3, [pc, #172]	; (80067c4 <TIM_OC1_SetConfig+0xd8>)
 8006718:	4013      	ands	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 0302 	bic.w	r3, r3, #2
 8006734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a21      	ldr	r2, [pc, #132]	; (80067c8 <TIM_OC1_SetConfig+0xdc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC1_SetConfig+0x64>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a20      	ldr	r2, [pc, #128]	; (80067cc <TIM_OC1_SetConfig+0xe0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10c      	bne.n	800676a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0308 	bic.w	r3, r3, #8
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <TIM_OC1_SetConfig+0xdc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_OC1_SetConfig+0x8e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a15      	ldr	r2, [pc, #84]	; (80067cc <TIM_OC1_SetConfig+0xe0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d111      	bne.n	800679e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	621a      	str	r2, [r3, #32]
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	fffeff8f 	.word	0xfffeff8f
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40010400 	.word	0x40010400

080067d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f023 0210 	bic.w	r2, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4b2e      	ldr	r3, [pc, #184]	; (80068b4 <TIM_OC2_SetConfig+0xe4>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4313      	orrs	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f023 0320 	bic.w	r3, r3, #32
 800681a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a23      	ldr	r2, [pc, #140]	; (80068b8 <TIM_OC2_SetConfig+0xe8>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_OC2_SetConfig+0x68>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a22      	ldr	r2, [pc, #136]	; (80068bc <TIM_OC2_SetConfig+0xec>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d10d      	bne.n	8006854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800683e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a18      	ldr	r2, [pc, #96]	; (80068b8 <TIM_OC2_SetConfig+0xe8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_OC2_SetConfig+0x94>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a17      	ldr	r2, [pc, #92]	; (80068bc <TIM_OC2_SetConfig+0xec>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d113      	bne.n	800688c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800686a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	feff8fff 	.word	0xfeff8fff
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40010400 	.word	0x40010400

080068c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4b2d      	ldr	r3, [pc, #180]	; (80069a0 <TIM_OC3_SetConfig+0xe0>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a22      	ldr	r2, [pc, #136]	; (80069a4 <TIM_OC3_SetConfig+0xe4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d003      	beq.n	8006926 <TIM_OC3_SetConfig+0x66>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <TIM_OC3_SetConfig+0xe8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d10d      	bne.n	8006942 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800692c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a17      	ldr	r2, [pc, #92]	; (80069a4 <TIM_OC3_SetConfig+0xe4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d003      	beq.n	8006952 <TIM_OC3_SetConfig+0x92>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a16      	ldr	r2, [pc, #88]	; (80069a8 <TIM_OC3_SetConfig+0xe8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d113      	bne.n	800697a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	fffeff8f 	.word	0xfffeff8f
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40010400 	.word	0x40010400

080069ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4b1e      	ldr	r3, [pc, #120]	; (8006a50 <TIM_OC4_SetConfig+0xa4>)
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a13      	ldr	r2, [pc, #76]	; (8006a54 <TIM_OC4_SetConfig+0xa8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC4_SetConfig+0x68>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a12      	ldr	r2, [pc, #72]	; (8006a58 <TIM_OC4_SetConfig+0xac>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d109      	bne.n	8006a28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	019b      	lsls	r3, r3, #6
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	feff8fff 	.word	0xfeff8fff
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40010400 	.word	0x40010400

08006a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <TIM_OC5_SetConfig+0x98>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	041b      	lsls	r3, r3, #16
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <TIM_OC5_SetConfig+0x9c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d003      	beq.n	8006aba <TIM_OC5_SetConfig+0x5e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a11      	ldr	r2, [pc, #68]	; (8006afc <TIM_OC5_SetConfig+0xa0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d109      	bne.n	8006ace <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	021b      	lsls	r3, r3, #8
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	621a      	str	r2, [r3, #32]
}
 8006ae8:	bf00      	nop
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	fffeff8f 	.word	0xfffeff8f
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40010400 	.word	0x40010400

08006b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <TIM_OC6_SetConfig+0x9c>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	051b      	lsls	r3, r3, #20
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a13      	ldr	r2, [pc, #76]	; (8006ba0 <TIM_OC6_SetConfig+0xa0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_OC6_SetConfig+0x60>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <TIM_OC6_SetConfig+0xa4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d109      	bne.n	8006b74 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	feff8fff 	.word	0xfeff8fff
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <TIM_SlaveTimer_SetConfig+0x10c>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	2b30      	cmp	r3, #48	; 0x30
 8006bec:	d05c      	beq.n	8006ca8 <TIM_SlaveTimer_SetConfig+0x100>
 8006bee:	2b30      	cmp	r3, #48	; 0x30
 8006bf0:	d806      	bhi.n	8006c00 <TIM_SlaveTimer_SetConfig+0x58>
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d058      	beq.n	8006ca8 <TIM_SlaveTimer_SetConfig+0x100>
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d056      	beq.n	8006ca8 <TIM_SlaveTimer_SetConfig+0x100>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d054      	beq.n	8006ca8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006bfe:	e054      	b.n	8006caa <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006c00:	2b50      	cmp	r3, #80	; 0x50
 8006c02:	d03d      	beq.n	8006c80 <TIM_SlaveTimer_SetConfig+0xd8>
 8006c04:	2b50      	cmp	r3, #80	; 0x50
 8006c06:	d802      	bhi.n	8006c0e <TIM_SlaveTimer_SetConfig+0x66>
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d010      	beq.n	8006c2e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006c0c:	e04d      	b.n	8006caa <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006c0e:	2b60      	cmp	r3, #96	; 0x60
 8006c10:	d040      	beq.n	8006c94 <TIM_SlaveTimer_SetConfig+0xec>
 8006c12:	2b70      	cmp	r3, #112	; 0x70
 8006c14:	d000      	beq.n	8006c18 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006c16:	e048      	b.n	8006caa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	68d9      	ldr	r1, [r3, #12]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f000 f9ea 	bl	8007000 <TIM_ETR_SetConfig>
      break;
 8006c2c:	e03d      	b.n	8006caa <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d101      	bne.n	8006c3a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e038      	b.n	8006cac <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6a1a      	ldr	r2, [r3, #32]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c60:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	621a      	str	r2, [r3, #32]
      break;
 8006c7e:	e014      	b.n	8006caa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	6899      	ldr	r1, [r3, #8]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f000 f887 	bl	8006da0 <TIM_TI1_ConfigInputStage>
      break;
 8006c92:	e00a      	b.n	8006caa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	6899      	ldr	r1, [r3, #8]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f000 f8e9 	bl	8006e78 <TIM_TI2_ConfigInputStage>
      break;
 8006ca6:	e000      	b.n	8006caa <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006ca8:	bf00      	nop
  }
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	fffefff8 	.word	0xfffefff8

08006cb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f023 0201 	bic.w	r2, r3, #1
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4a28      	ldr	r2, [pc, #160]	; (8006d84 <TIM_TI1_SetConfig+0xcc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d01b      	beq.n	8006d1e <TIM_TI1_SetConfig+0x66>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cec:	d017      	beq.n	8006d1e <TIM_TI1_SetConfig+0x66>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4a25      	ldr	r2, [pc, #148]	; (8006d88 <TIM_TI1_SetConfig+0xd0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <TIM_TI1_SetConfig+0x66>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a24      	ldr	r2, [pc, #144]	; (8006d8c <TIM_TI1_SetConfig+0xd4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00f      	beq.n	8006d1e <TIM_TI1_SetConfig+0x66>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a23      	ldr	r2, [pc, #140]	; (8006d90 <TIM_TI1_SetConfig+0xd8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00b      	beq.n	8006d1e <TIM_TI1_SetConfig+0x66>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <TIM_TI1_SetConfig+0xdc>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d007      	beq.n	8006d1e <TIM_TI1_SetConfig+0x66>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a21      	ldr	r2, [pc, #132]	; (8006d98 <TIM_TI1_SetConfig+0xe0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d003      	beq.n	8006d1e <TIM_TI1_SetConfig+0x66>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a20      	ldr	r2, [pc, #128]	; (8006d9c <TIM_TI1_SetConfig+0xe4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d101      	bne.n	8006d22 <TIM_TI1_SetConfig+0x6a>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <TIM_TI1_SetConfig+0x6c>
 8006d22:	2300      	movs	r3, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	e003      	b.n	8006d42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f043 0301 	orr.w	r3, r3, #1
 8006d40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f023 030a 	bic.w	r3, r3, #10
 8006d5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f003 030a 	and.w	r3, r3, #10
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40010400 	.word	0x40010400
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40001800 	.word	0x40001800

08006da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f023 0201 	bic.w	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 030a 	bic.w	r3, r3, #10
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b087      	sub	sp, #28
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f023 0210 	bic.w	r2, r3, #16
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	031b      	lsls	r3, r3, #12
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	621a      	str	r2, [r3, #32]
}
 8006e6c:	bf00      	nop
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	f023 0210 	bic.w	r2, r3, #16
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ea2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	031b      	lsls	r3, r3, #12
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f023 0303 	bic.w	r3, r3, #3
 8006f04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006f28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	621a      	str	r2, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	031b      	lsls	r3, r3, #12
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006fa2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	031b      	lsls	r3, r3, #12
 8006fa8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	621a      	str	r2, [r3, #32]
}
 8006fbe:	bf00      	nop
 8006fc0:	371c      	adds	r7, #28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f043 0307 	orr.w	r3, r3, #7
 8006fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	609a      	str	r2, [r3, #8]
}
 8006ff4:	bf00      	nop
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800701a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	021a      	lsls	r2, r3, #8
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	431a      	orrs	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4313      	orrs	r3, r2
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	609a      	str	r2, [r3, #8]
}
 8007034:	bf00      	nop
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 031f 	and.w	r3, r3, #31
 8007052:	2201      	movs	r2, #1
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1a      	ldr	r2, [r3, #32]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	43db      	mvns	r3, r3
 8007062:	401a      	ands	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1a      	ldr	r2, [r3, #32]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	fa01 f303 	lsl.w	r3, r1, r3
 8007078:	431a      	orrs	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e06d      	b.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a30      	ldr	r2, [pc, #192]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d004      	beq.n	80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a2f      	ldr	r2, [pc, #188]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d108      	bne.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a20      	ldr	r2, [pc, #128]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d022      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007116:	d01d      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d018      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1c      	ldr	r2, [pc, #112]	; (8007198 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1a      	ldr	r2, [pc, #104]	; (800719c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00e      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d009      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a16      	ldr	r2, [pc, #88]	; (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a15      	ldr	r2, [pc, #84]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d10c      	bne.n	800716e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800715a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	4313      	orrs	r3, r2
 8007164:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40010000 	.word	0x40010000
 8007190:	40010400 	.word	0x40010400
 8007194:	40000400 	.word	0x40000400
 8007198:	40000800 	.word	0x40000800
 800719c:	40000c00 	.word	0x40000c00
 80071a0:	40014000 	.word	0x40014000
 80071a4:	40001800 	.word	0x40001800

080071a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e065      	b.n	8007290 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	041b      	lsls	r3, r3, #16
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a16      	ldr	r2, [pc, #88]	; (800729c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d004      	beq.n	8007252 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a14      	ldr	r2, [pc, #80]	; (80072a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d115      	bne.n	800727e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	051b      	lsls	r3, r3, #20
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40010000 	.word	0x40010000
 80072a0:	40010400 	.word	0x40010400

080072a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e040      	b.n	8007374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fa fd10 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2224      	movs	r2, #36	; 0x24
 800730c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fac4 	bl	80078ac <UART_SetConfig>
 8007324:	4603      	mov	r3, r0
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e022      	b.n	8007374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fd62 	bl	8007e00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800734a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800735a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fde9 	bl	8007f44 <UART_CheckIdleState>
 8007372:	4603      	mov	r3, r0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af02      	add	r7, sp, #8
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	4613      	mov	r3, r2
 800738a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007390:	2b20      	cmp	r3, #32
 8007392:	d17f      	bne.n	8007494 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_UART_Transmit+0x24>
 800739a:	88fb      	ldrh	r3, [r7, #6]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e078      	b.n	8007496 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_UART_Transmit+0x36>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e071      	b.n	8007496 <HAL_UART_Transmit+0x11a>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2221      	movs	r2, #33	; 0x21
 80073c4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80073c6:	f7fa fe91 	bl	80020ec <HAL_GetTick>
 80073ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	88fa      	ldrh	r2, [r7, #6]
 80073d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e4:	d108      	bne.n	80073f8 <HAL_UART_Transmit+0x7c>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d104      	bne.n	80073f8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	e003      	b.n	8007400 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007408:	e02c      	b.n	8007464 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2200      	movs	r2, #0
 8007412:	2180      	movs	r1, #128	; 0x80
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 fdda 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e038      	b.n	8007496 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007438:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	3302      	adds	r3, #2
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	e007      	b.n	8007452 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	781a      	ldrb	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	3301      	adds	r3, #1
 8007450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1cc      	bne.n	800740a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2200      	movs	r2, #0
 8007478:	2140      	movs	r1, #64	; 0x40
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fda7 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e005      	b.n	8007496 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2220      	movs	r2, #32
 800748e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	e000      	b.n	8007496 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007494:	2302      	movs	r3, #2
  }
}
 8007496:	4618      	mov	r0, r3
 8007498:	3720      	adds	r7, #32
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	f040 808a 	bne.w	80075cc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <HAL_UART_Receive_IT+0x24>
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e082      	b.n	80075ce <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_UART_Receive_IT+0x36>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e07b      	b.n	80075ce <HAL_UART_Receive_IT+0x12e>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007502:	d10e      	bne.n	8007522 <HAL_UART_Receive_IT+0x82>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <HAL_UART_Receive_IT+0x78>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007512:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007516:	e02d      	b.n	8007574 <HAL_UART_Receive_IT+0xd4>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	22ff      	movs	r2, #255	; 0xff
 800751c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007520:	e028      	b.n	8007574 <HAL_UART_Receive_IT+0xd4>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10d      	bne.n	8007546 <HAL_UART_Receive_IT+0xa6>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <HAL_UART_Receive_IT+0x9c>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	22ff      	movs	r2, #255	; 0xff
 8007536:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800753a:	e01b      	b.n	8007574 <HAL_UART_Receive_IT+0xd4>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	227f      	movs	r2, #127	; 0x7f
 8007540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007544:	e016      	b.n	8007574 <HAL_UART_Receive_IT+0xd4>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800754e:	d10d      	bne.n	800756c <HAL_UART_Receive_IT+0xcc>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <HAL_UART_Receive_IT+0xc2>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	227f      	movs	r2, #127	; 0x7f
 800755c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007560:	e008      	b.n	8007574 <HAL_UART_Receive_IT+0xd4>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	223f      	movs	r2, #63	; 0x3f
 8007566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800756a:	e003      	b.n	8007574 <HAL_UART_Receive_IT+0xd4>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2222      	movs	r2, #34	; 0x22
 800757e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007598:	d107      	bne.n	80075aa <HAL_UART_Receive_IT+0x10a>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <HAL_UART_Receive_IT+0x13c>)
 80075a6:	661a      	str	r2, [r3, #96]	; 0x60
 80075a8:	e002      	b.n	80075b0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <HAL_UART_Receive_IT+0x140>)
 80075ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80075c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	e000      	b.n	80075ce <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	08008209 	.word	0x08008209
 80075e0:	08008163 	.word	0x08008163

080075e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	f640 030f 	movw	r3, #2063	; 0x80f
 800760a:	4013      	ands	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d113      	bne.n	800763c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d009      	beq.n	800763c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8114 	beq.w	800785a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
      }
      return;
 800763a:	e10e      	b.n	800785a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 80d6 	beq.w	80077f0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d105      	bne.n	800765a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 80cb 	beq.w	80077f0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00e      	beq.n	8007682 <HAL_UART_IRQHandler+0x9e>
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766a:	2b00      	cmp	r3, #0
 800766c:	d009      	beq.n	8007682 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2201      	movs	r2, #1
 8007674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800767a:	f043 0201 	orr.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00e      	beq.n	80076aa <HAL_UART_IRQHandler+0xc6>
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2202      	movs	r2, #2
 800769c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a2:	f043 0204 	orr.w	r2, r3, #4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <HAL_UART_IRQHandler+0xee>
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2204      	movs	r2, #4
 80076c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ca:	f043 0202 	orr.w	r2, r3, #2
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d013      	beq.n	8007704 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d104      	bne.n	80076f0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d009      	beq.n	8007704 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2208      	movs	r2, #8
 80076f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076fc:	f043 0208 	orr.w	r2, r3, #8
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00f      	beq.n	800772e <HAL_UART_IRQHandler+0x14a>
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007726:	f043 0220 	orr.w	r2, r3, #32
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8093 	beq.w	800785e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00c      	beq.n	800775c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f003 0320 	and.w	r3, r3, #32
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007760:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d004      	beq.n	800777a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007776:	2b00      	cmp	r3, #0
 8007778:	d031      	beq.n	80077de <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fca2 	bl	80080c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d123      	bne.n	80077d6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d013      	beq.n	80077ce <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077aa:	4a30      	ldr	r2, [pc, #192]	; (800786c <HAL_UART_IRQHandler+0x288>)
 80077ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fb fbae 	bl	8002f14 <HAL_DMA_Abort_IT>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d016      	beq.n	80077ec <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	e00e      	b.n	80077ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f858 	bl	8007884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d4:	e00a      	b.n	80077ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f854 	bl	8007884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077dc:	e006      	b.n	80077ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f850 	bl	8007884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80077ea:	e038      	b.n	800785e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	bf00      	nop
    return;
 80077ee:	e036      	b.n	800785e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00d      	beq.n	8007816 <HAL_UART_IRQHandler+0x232>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d008      	beq.n	8007816 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800780c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f842 	bl	8007898 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007814:	e026      	b.n	8007864 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00d      	beq.n	800783c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007826:	2b00      	cmp	r3, #0
 8007828:	d008      	beq.n	800783c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800782e:	2b00      	cmp	r3, #0
 8007830:	d017      	beq.n	8007862 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
    }
    return;
 800783a:	e012      	b.n	8007862 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00e      	beq.n	8007864 <HAL_UART_IRQHandler+0x280>
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d009      	beq.n	8007864 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc6d 	bl	8008130 <UART_EndTransmit_IT>
    return;
 8007856:	bf00      	nop
 8007858:	e004      	b.n	8007864 <HAL_UART_IRQHandler+0x280>
      return;
 800785a:	bf00      	nop
 800785c:	e002      	b.n	8007864 <HAL_UART_IRQHandler+0x280>
    return;
 800785e:	bf00      	nop
 8007860:	e000      	b.n	8007864 <HAL_UART_IRQHandler+0x280>
    return;
 8007862:	bf00      	nop
  }

}
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	08008105 	.word	0x08008105

08007870 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	4bb1      	ldr	r3, [pc, #708]	; (8007ba0 <UART_SetConfig+0x2f4>)
 80078dc:	4013      	ands	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6812      	ldr	r2, [r2, #0]
 80078e2:	6939      	ldr	r1, [r7, #16]
 80078e4:	430b      	orrs	r3, r1
 80078e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	430a      	orrs	r2, r1
 8007920:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a9f      	ldr	r2, [pc, #636]	; (8007ba4 <UART_SetConfig+0x2f8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d121      	bne.n	8007970 <UART_SetConfig+0xc4>
 800792c:	4b9e      	ldr	r3, [pc, #632]	; (8007ba8 <UART_SetConfig+0x2fc>)
 800792e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	2b03      	cmp	r3, #3
 8007938:	d816      	bhi.n	8007968 <UART_SetConfig+0xbc>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0x94>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007951 	.word	0x08007951
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007957 	.word	0x08007957
 800794c:	08007963 	.word	0x08007963
 8007950:	2301      	movs	r3, #1
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e151      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007956:	2302      	movs	r3, #2
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e14e      	b.n	8007bfa <UART_SetConfig+0x34e>
 800795c:	2304      	movs	r3, #4
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e14b      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007962:	2308      	movs	r3, #8
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e148      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007968:	2310      	movs	r3, #16
 800796a:	77fb      	strb	r3, [r7, #31]
 800796c:	bf00      	nop
 800796e:	e144      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a8d      	ldr	r2, [pc, #564]	; (8007bac <UART_SetConfig+0x300>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d134      	bne.n	80079e4 <UART_SetConfig+0x138>
 800797a:	4b8b      	ldr	r3, [pc, #556]	; (8007ba8 <UART_SetConfig+0x2fc>)
 800797c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007980:	f003 030c 	and.w	r3, r3, #12
 8007984:	2b0c      	cmp	r3, #12
 8007986:	d829      	bhi.n	80079dc <UART_SetConfig+0x130>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0xe4>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079c5 	.word	0x080079c5
 8007994:	080079dd 	.word	0x080079dd
 8007998:	080079dd 	.word	0x080079dd
 800799c:	080079dd 	.word	0x080079dd
 80079a0:	080079d1 	.word	0x080079d1
 80079a4:	080079dd 	.word	0x080079dd
 80079a8:	080079dd 	.word	0x080079dd
 80079ac:	080079dd 	.word	0x080079dd
 80079b0:	080079cb 	.word	0x080079cb
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079dd 	.word	0x080079dd
 80079c0:	080079d7 	.word	0x080079d7
 80079c4:	2300      	movs	r3, #0
 80079c6:	77fb      	strb	r3, [r7, #31]
 80079c8:	e117      	b.n	8007bfa <UART_SetConfig+0x34e>
 80079ca:	2302      	movs	r3, #2
 80079cc:	77fb      	strb	r3, [r7, #31]
 80079ce:	e114      	b.n	8007bfa <UART_SetConfig+0x34e>
 80079d0:	2304      	movs	r3, #4
 80079d2:	77fb      	strb	r3, [r7, #31]
 80079d4:	e111      	b.n	8007bfa <UART_SetConfig+0x34e>
 80079d6:	2308      	movs	r3, #8
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e10e      	b.n	8007bfa <UART_SetConfig+0x34e>
 80079dc:	2310      	movs	r3, #16
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	bf00      	nop
 80079e2:	e10a      	b.n	8007bfa <UART_SetConfig+0x34e>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a71      	ldr	r2, [pc, #452]	; (8007bb0 <UART_SetConfig+0x304>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d120      	bne.n	8007a30 <UART_SetConfig+0x184>
 80079ee:	4b6e      	ldr	r3, [pc, #440]	; (8007ba8 <UART_SetConfig+0x2fc>)
 80079f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079f8:	2b10      	cmp	r3, #16
 80079fa:	d00f      	beq.n	8007a1c <UART_SetConfig+0x170>
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d802      	bhi.n	8007a06 <UART_SetConfig+0x15a>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <UART_SetConfig+0x164>
 8007a04:	e010      	b.n	8007a28 <UART_SetConfig+0x17c>
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d005      	beq.n	8007a16 <UART_SetConfig+0x16a>
 8007a0a:	2b30      	cmp	r3, #48	; 0x30
 8007a0c:	d009      	beq.n	8007a22 <UART_SetConfig+0x176>
 8007a0e:	e00b      	b.n	8007a28 <UART_SetConfig+0x17c>
 8007a10:	2300      	movs	r3, #0
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e0f1      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a16:	2302      	movs	r3, #2
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e0ee      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e0eb      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a22:	2308      	movs	r3, #8
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e0e8      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a28:	2310      	movs	r3, #16
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	bf00      	nop
 8007a2e:	e0e4      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a5f      	ldr	r2, [pc, #380]	; (8007bb4 <UART_SetConfig+0x308>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d120      	bne.n	8007a7c <UART_SetConfig+0x1d0>
 8007a3a:	4b5b      	ldr	r3, [pc, #364]	; (8007ba8 <UART_SetConfig+0x2fc>)
 8007a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d00f      	beq.n	8007a68 <UART_SetConfig+0x1bc>
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d802      	bhi.n	8007a52 <UART_SetConfig+0x1a6>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <UART_SetConfig+0x1b0>
 8007a50:	e010      	b.n	8007a74 <UART_SetConfig+0x1c8>
 8007a52:	2b80      	cmp	r3, #128	; 0x80
 8007a54:	d005      	beq.n	8007a62 <UART_SetConfig+0x1b6>
 8007a56:	2bc0      	cmp	r3, #192	; 0xc0
 8007a58:	d009      	beq.n	8007a6e <UART_SetConfig+0x1c2>
 8007a5a:	e00b      	b.n	8007a74 <UART_SetConfig+0x1c8>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e0cb      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a62:	2302      	movs	r3, #2
 8007a64:	77fb      	strb	r3, [r7, #31]
 8007a66:	e0c8      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a68:	2304      	movs	r3, #4
 8007a6a:	77fb      	strb	r3, [r7, #31]
 8007a6c:	e0c5      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a6e:	2308      	movs	r3, #8
 8007a70:	77fb      	strb	r3, [r7, #31]
 8007a72:	e0c2      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a74:	2310      	movs	r3, #16
 8007a76:	77fb      	strb	r3, [r7, #31]
 8007a78:	bf00      	nop
 8007a7a:	e0be      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a4d      	ldr	r2, [pc, #308]	; (8007bb8 <UART_SetConfig+0x30c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d124      	bne.n	8007ad0 <UART_SetConfig+0x224>
 8007a86:	4b48      	ldr	r3, [pc, #288]	; (8007ba8 <UART_SetConfig+0x2fc>)
 8007a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a94:	d012      	beq.n	8007abc <UART_SetConfig+0x210>
 8007a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9a:	d802      	bhi.n	8007aa2 <UART_SetConfig+0x1f6>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <UART_SetConfig+0x204>
 8007aa0:	e012      	b.n	8007ac8 <UART_SetConfig+0x21c>
 8007aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa6:	d006      	beq.n	8007ab6 <UART_SetConfig+0x20a>
 8007aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aac:	d009      	beq.n	8007ac2 <UART_SetConfig+0x216>
 8007aae:	e00b      	b.n	8007ac8 <UART_SetConfig+0x21c>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	77fb      	strb	r3, [r7, #31]
 8007ab4:	e0a1      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	e09e      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007abc:	2304      	movs	r3, #4
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e09b      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	77fb      	strb	r3, [r7, #31]
 8007ac6:	e098      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	77fb      	strb	r3, [r7, #31]
 8007acc:	bf00      	nop
 8007ace:	e094      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a39      	ldr	r2, [pc, #228]	; (8007bbc <UART_SetConfig+0x310>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d124      	bne.n	8007b24 <UART_SetConfig+0x278>
 8007ada:	4b33      	ldr	r3, [pc, #204]	; (8007ba8 <UART_SetConfig+0x2fc>)
 8007adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae8:	d012      	beq.n	8007b10 <UART_SetConfig+0x264>
 8007aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aee:	d802      	bhi.n	8007af6 <UART_SetConfig+0x24a>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <UART_SetConfig+0x258>
 8007af4:	e012      	b.n	8007b1c <UART_SetConfig+0x270>
 8007af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007afa:	d006      	beq.n	8007b0a <UART_SetConfig+0x25e>
 8007afc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b00:	d009      	beq.n	8007b16 <UART_SetConfig+0x26a>
 8007b02:	e00b      	b.n	8007b1c <UART_SetConfig+0x270>
 8007b04:	2301      	movs	r3, #1
 8007b06:	77fb      	strb	r3, [r7, #31]
 8007b08:	e077      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	77fb      	strb	r3, [r7, #31]
 8007b0e:	e074      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b10:	2304      	movs	r3, #4
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e071      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b16:	2308      	movs	r3, #8
 8007b18:	77fb      	strb	r3, [r7, #31]
 8007b1a:	e06e      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b1c:	2310      	movs	r3, #16
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	bf00      	nop
 8007b22:	e06a      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a25      	ldr	r2, [pc, #148]	; (8007bc0 <UART_SetConfig+0x314>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d124      	bne.n	8007b78 <UART_SetConfig+0x2cc>
 8007b2e:	4b1e      	ldr	r3, [pc, #120]	; (8007ba8 <UART_SetConfig+0x2fc>)
 8007b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b34:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3c:	d012      	beq.n	8007b64 <UART_SetConfig+0x2b8>
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	d802      	bhi.n	8007b4a <UART_SetConfig+0x29e>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <UART_SetConfig+0x2ac>
 8007b48:	e012      	b.n	8007b70 <UART_SetConfig+0x2c4>
 8007b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b4e:	d006      	beq.n	8007b5e <UART_SetConfig+0x2b2>
 8007b50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b54:	d009      	beq.n	8007b6a <UART_SetConfig+0x2be>
 8007b56:	e00b      	b.n	8007b70 <UART_SetConfig+0x2c4>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	77fb      	strb	r3, [r7, #31]
 8007b5c:	e04d      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	77fb      	strb	r3, [r7, #31]
 8007b62:	e04a      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b64:	2304      	movs	r3, #4
 8007b66:	77fb      	strb	r3, [r7, #31]
 8007b68:	e047      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b6a:	2308      	movs	r3, #8
 8007b6c:	77fb      	strb	r3, [r7, #31]
 8007b6e:	e044      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b70:	2310      	movs	r3, #16
 8007b72:	77fb      	strb	r3, [r7, #31]
 8007b74:	bf00      	nop
 8007b76:	e040      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a11      	ldr	r2, [pc, #68]	; (8007bc4 <UART_SetConfig+0x318>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d139      	bne.n	8007bf6 <UART_SetConfig+0x34a>
 8007b82:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <UART_SetConfig+0x2fc>)
 8007b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b90:	d027      	beq.n	8007be2 <UART_SetConfig+0x336>
 8007b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b96:	d817      	bhi.n	8007bc8 <UART_SetConfig+0x31c>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01c      	beq.n	8007bd6 <UART_SetConfig+0x32a>
 8007b9c:	e027      	b.n	8007bee <UART_SetConfig+0x342>
 8007b9e:	bf00      	nop
 8007ba0:	efff69f3 	.word	0xefff69f3
 8007ba4:	40011000 	.word	0x40011000
 8007ba8:	40023800 	.word	0x40023800
 8007bac:	40004400 	.word	0x40004400
 8007bb0:	40004800 	.word	0x40004800
 8007bb4:	40004c00 	.word	0x40004c00
 8007bb8:	40005000 	.word	0x40005000
 8007bbc:	40011400 	.word	0x40011400
 8007bc0:	40007800 	.word	0x40007800
 8007bc4:	40007c00 	.word	0x40007c00
 8007bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bcc:	d006      	beq.n	8007bdc <UART_SetConfig+0x330>
 8007bce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bd2:	d009      	beq.n	8007be8 <UART_SetConfig+0x33c>
 8007bd4:	e00b      	b.n	8007bee <UART_SetConfig+0x342>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	77fb      	strb	r3, [r7, #31]
 8007bda:	e00e      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e00b      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007be2:	2304      	movs	r3, #4
 8007be4:	77fb      	strb	r3, [r7, #31]
 8007be6:	e008      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007be8:	2308      	movs	r3, #8
 8007bea:	77fb      	strb	r3, [r7, #31]
 8007bec:	e005      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007bee:	2310      	movs	r3, #16
 8007bf0:	77fb      	strb	r3, [r7, #31]
 8007bf2:	bf00      	nop
 8007bf4:	e001      	b.n	8007bfa <UART_SetConfig+0x34e>
 8007bf6:	2310      	movs	r3, #16
 8007bf8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c02:	d17f      	bne.n	8007d04 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007c04:	7ffb      	ldrb	r3, [r7, #31]
 8007c06:	2b08      	cmp	r3, #8
 8007c08:	d85c      	bhi.n	8007cc4 <UART_SetConfig+0x418>
 8007c0a:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <UART_SetConfig+0x364>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c35 	.word	0x08007c35
 8007c14:	08007c55 	.word	0x08007c55
 8007c18:	08007c75 	.word	0x08007c75
 8007c1c:	08007cc5 	.word	0x08007cc5
 8007c20:	08007c8d 	.word	0x08007c8d
 8007c24:	08007cc5 	.word	0x08007cc5
 8007c28:	08007cc5 	.word	0x08007cc5
 8007c2c:	08007cc5 	.word	0x08007cc5
 8007c30:	08007cad 	.word	0x08007cad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c34:	f7fc fbe2 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8007c38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	005a      	lsls	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	61bb      	str	r3, [r7, #24]
        break;
 8007c52:	e03a      	b.n	8007cca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c54:	f7fc fbe6 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8007c58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	005a      	lsls	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	441a      	add	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	61bb      	str	r3, [r7, #24]
        break;
 8007c72:	e02a      	b.n	8007cca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	085a      	lsrs	r2, r3, #1
 8007c7a:	4b5f      	ldr	r3, [pc, #380]	; (8007df8 <UART_SetConfig+0x54c>)
 8007c7c:	4413      	add	r3, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6852      	ldr	r2, [r2, #4]
 8007c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	61bb      	str	r3, [r7, #24]
        break;
 8007c8a:	e01e      	b.n	8007cca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8c:	f7fc fad2 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 8007c90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	005a      	lsls	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	441a      	add	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	61bb      	str	r3, [r7, #24]
        break;
 8007caa:	e00e      	b.n	8007cca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	61bb      	str	r3, [r7, #24]
        break;
 8007cc2:	e002      	b.n	8007cca <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	75fb      	strb	r3, [r7, #23]
        break;
 8007cc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	2b0f      	cmp	r3, #15
 8007cce:	d916      	bls.n	8007cfe <UART_SetConfig+0x452>
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd6:	d212      	bcs.n	8007cfe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f023 030f 	bic.w	r3, r3, #15
 8007ce0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	897b      	ldrh	r3, [r7, #10]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	897a      	ldrh	r2, [r7, #10]
 8007cfa:	60da      	str	r2, [r3, #12]
 8007cfc:	e070      	b.n	8007de0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	75fb      	strb	r3, [r7, #23]
 8007d02:	e06d      	b.n	8007de0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007d04:	7ffb      	ldrb	r3, [r7, #31]
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d859      	bhi.n	8007dbe <UART_SetConfig+0x512>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <UART_SetConfig+0x464>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d35 	.word	0x08007d35
 8007d14:	08007d53 	.word	0x08007d53
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007dbf 	.word	0x08007dbf
 8007d20:	08007d89 	.word	0x08007d89
 8007d24:	08007dbf 	.word	0x08007dbf
 8007d28:	08007dbf 	.word	0x08007dbf
 8007d2c:	08007dbf 	.word	0x08007dbf
 8007d30:	08007da7 	.word	0x08007da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d34:	f7fc fb62 	bl	80043fc <HAL_RCC_GetPCLK1Freq>
 8007d38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	085a      	lsrs	r2, r3, #1
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	441a      	add	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	61bb      	str	r3, [r7, #24]
        break;
 8007d50:	e038      	b.n	8007dc4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d52:	f7fc fb67 	bl	8004424 <HAL_RCC_GetPCLK2Freq>
 8007d56:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	085a      	lsrs	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	441a      	add	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	61bb      	str	r3, [r7, #24]
        break;
 8007d6e:	e029      	b.n	8007dc4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	085a      	lsrs	r2, r3, #1
 8007d76:	4b21      	ldr	r3, [pc, #132]	; (8007dfc <UART_SetConfig+0x550>)
 8007d78:	4413      	add	r3, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	6852      	ldr	r2, [r2, #4]
 8007d7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	61bb      	str	r3, [r7, #24]
        break;
 8007d86:	e01d      	b.n	8007dc4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d88:	f7fc fa54 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 8007d8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	085a      	lsrs	r2, r3, #1
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	441a      	add	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	61bb      	str	r3, [r7, #24]
        break;
 8007da4:	e00e      	b.n	8007dc4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	085b      	lsrs	r3, r3, #1
 8007dac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	61bb      	str	r3, [r7, #24]
        break;
 8007dbc:	e002      	b.n	8007dc4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
        break;
 8007dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d908      	bls.n	8007ddc <UART_SetConfig+0x530>
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd0:	d204      	bcs.n	8007ddc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	e001      	b.n	8007de0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	01e84800 	.word	0x01e84800
 8007dfc:	00f42400 	.word	0x00f42400

08007e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	f003 0308 	and.w	r3, r3, #8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	f003 0310 	and.w	r3, r3, #16
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01a      	beq.n	8007f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007efe:	d10a      	bne.n	8007f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	605a      	str	r2, [r3, #4]
  }
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af02      	add	r7, sp, #8
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f52:	f7fa f8cb 	bl	80020ec <HAL_GetTick>
 8007f56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d10e      	bne.n	8007f84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f82a 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e020      	b.n	8007fc6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d10e      	bne.n	8007fb0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f814 	bl	8007fce <UART_WaitOnFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e00a      	b.n	8007fc6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	603b      	str	r3, [r7, #0]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fde:	e05d      	b.n	800809c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d059      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe8:	f7fa f880 	bl	80020ec <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d302      	bcc.n	8007ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d11b      	bne.n	8008036 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800800c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0201 	bic.w	r2, r2, #1
 800801c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2220      	movs	r2, #32
 8008022:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e042      	b.n	80080bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d02b      	beq.n	800809c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800804e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008052:	d123      	bne.n	800809c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800805c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800806c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0201 	bic.w	r2, r2, #1
 800807c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2220      	movs	r2, #32
 8008082:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2220      	movs	r2, #32
 8008088:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2220      	movs	r2, #32
 800808e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e00f      	b.n	80080bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69da      	ldr	r2, [r3, #28]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4013      	ands	r3, r2
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d092      	beq.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0201 	bic.w	r2, r2, #1
 80080ea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff fbae 	bl	8007884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008146:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff fb8b 	bl	8007870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008170:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008176:	2b22      	cmp	r3, #34	; 0x22
 8008178:	d13a      	bne.n	80081f0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008182:	89bb      	ldrh	r3, [r7, #12]
 8008184:	b2d9      	uxtb	r1, r3
 8008186:	89fb      	ldrh	r3, [r7, #14]
 8008188:	b2da      	uxtb	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818e:	400a      	ands	r2, r1
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d121      	bne.n	8008200 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081ca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0201 	bic.w	r2, r2, #1
 80081da:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7f8 ffa7 	bl	800113c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081ee:	e007      	b.n	8008200 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0208 	orr.w	r2, r2, #8
 80081fe:	619a      	str	r2, [r3, #24]
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008216:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800821c:	2b22      	cmp	r3, #34	; 0x22
 800821e:	d13a      	bne.n	8008296 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800822e:	89ba      	ldrh	r2, [r7, #12]
 8008230:	89fb      	ldrh	r3, [r7, #14]
 8008232:	4013      	ands	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800824a:	b29b      	uxth	r3, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	b29a      	uxth	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800825c:	b29b      	uxth	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d121      	bne.n	80082a6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008270:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0201 	bic.w	r2, r2, #1
 8008280:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2220      	movs	r2, #32
 8008286:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7f8 ff54 	bl	800113c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008294:	e007      	b.n	80082a6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0208 	orr.w	r2, r2, #8
 80082a4:	619a      	str	r2, [r3, #24]
}
 80082a6:	bf00      	nop
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082b0:	b084      	sub	sp, #16
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	f107 001c 	add.w	r0, r7, #28
 80082be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d120      	bne.n	800830a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	4b20      	ldr	r3, [pc, #128]	; (800835c <USB_CoreInit+0xac>)
 80082da:	4013      	ands	r3, r2
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d105      	bne.n	80082fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa52 	bl	80087a8 <USB_CoreReset>
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]
 8008308:	e010      	b.n	800832c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa46 	bl	80087a8 <USB_CoreReset>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	2b01      	cmp	r3, #1
 8008330:	d10b      	bne.n	800834a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f043 0206 	orr.w	r2, r3, #6
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f043 0220 	orr.w	r2, r3, #32
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800834a:	7bfb      	ldrb	r3, [r7, #15]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008356:	b004      	add	sp, #16
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	ffbdffbf 	.word	0xffbdffbf

08008360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f023 0201 	bic.w	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d106      	bne.n	80083ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	60da      	str	r2, [r3, #12]
 80083ac:	e00b      	b.n	80083c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60da      	str	r2, [r3, #12]
 80083c0:	e001      	b.n	80083c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e003      	b.n	80083ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80083c6:	2032      	movs	r0, #50	; 0x32
 80083c8:	f7f9 fe9c 	bl	8002104 <HAL_Delay>

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083d8:	b084      	sub	sp, #16
 80083da:	b580      	push	{r7, lr}
 80083dc:	b086      	sub	sp, #24
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80083e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083f2:	2300      	movs	r3, #0
 80083f4:	613b      	str	r3, [r7, #16]
 80083f6:	e009      	b.n	800840c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	3340      	adds	r3, #64	; 0x40
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	2200      	movs	r2, #0
 8008404:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	3301      	adds	r3, #1
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b0e      	cmp	r3, #14
 8008410:	d9f2      	bls.n	80083f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11c      	bne.n	8008452 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008426:	f043 0302 	orr.w	r3, r3, #2
 800842a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e005      	b.n	800845e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008464:	461a      	mov	r2, r3
 8008466:	2300      	movs	r3, #0
 8008468:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008470:	4619      	mov	r1, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008478:	461a      	mov	r2, r3
 800847a:	680b      	ldr	r3, [r1, #0]
 800847c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800847e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008480:	2b01      	cmp	r3, #1
 8008482:	d10c      	bne.n	800849e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800848a:	2100      	movs	r1, #0
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f959 	bl	8008744 <USB_SetDevSpeed>
 8008492:	e018      	b.n	80084c6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008494:	2101      	movs	r1, #1
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f954 	bl	8008744 <USB_SetDevSpeed>
 800849c:	e013      	b.n	80084c6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d10c      	bne.n	80084be <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d104      	bne.n	80084b4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80084aa:	2100      	movs	r1, #0
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f949 	bl	8008744 <USB_SetDevSpeed>
 80084b2:	e008      	b.n	80084c6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80084b4:	2101      	movs	r1, #1
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f944 	bl	8008744 <USB_SetDevSpeed>
 80084bc:	e003      	b.n	80084c6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80084be:	2103      	movs	r1, #3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f93f 	bl	8008744 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80084c6:	2110      	movs	r1, #16
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f8f3 	bl	80086b4 <USB_FlushTxFifo>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f911 	bl	8008700 <USB_FlushRxFifo>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ee:	461a      	mov	r2, r3
 80084f0:	2300      	movs	r3, #0
 80084f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fa:	461a      	mov	r2, r3
 80084fc:	2300      	movs	r3, #0
 80084fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008506:	461a      	mov	r2, r3
 8008508:	2300      	movs	r3, #0
 800850a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800850c:	2300      	movs	r3, #0
 800850e:	613b      	str	r3, [r7, #16]
 8008510:	e043      	b.n	800859a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008528:	d118      	bne.n	800855c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853c:	461a      	mov	r2, r3
 800853e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	e013      	b.n	800856e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008552:	461a      	mov	r2, r3
 8008554:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	e008      	b.n	800856e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	461a      	mov	r2, r3
 800856a:	2300      	movs	r3, #0
 800856c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857a:	461a      	mov	r2, r3
 800857c:	2300      	movs	r3, #0
 800857e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858c:	461a      	mov	r2, r3
 800858e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008592:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	3301      	adds	r3, #1
 8008598:	613b      	str	r3, [r7, #16]
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d3b7      	bcc.n	8008512 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085a2:	2300      	movs	r3, #0
 80085a4:	613b      	str	r3, [r7, #16]
 80085a6:	e043      	b.n	8008630 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085be:	d118      	bne.n	80085f2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085d2:	461a      	mov	r2, r3
 80085d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	e013      	b.n	8008604 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e8:	461a      	mov	r2, r3
 80085ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	e008      	b.n	8008604 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085fe:	461a      	mov	r2, r3
 8008600:	2300      	movs	r3, #0
 8008602:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4413      	add	r3, r2
 800860c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008610:	461a      	mov	r2, r3
 8008612:	2300      	movs	r3, #0
 8008614:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008622:	461a      	mov	r2, r3
 8008624:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008628:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	3301      	adds	r3, #1
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d3b7      	bcc.n	80085a8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008646:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800864a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008658:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	2b00      	cmp	r3, #0
 800865e:	d105      	bne.n	800866c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f043 0210 	orr.w	r2, r3, #16
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <USB_DevInit+0x2d4>)
 8008672:	4313      	orrs	r3, r2
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f043 0208 	orr.w	r2, r3, #8
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800868a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d105      	bne.n	800869c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	699a      	ldr	r2, [r3, #24]
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <USB_DevInit+0x2d8>)
 8008696:	4313      	orrs	r3, r2
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086a8:	b004      	add	sp, #16
 80086aa:	4770      	bx	lr
 80086ac:	803c3800 	.word	0x803c3800
 80086b0:	40000004 	.word	0x40000004

080086b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	019b      	lsls	r3, r3, #6
 80086c6:	f043 0220 	orr.w	r2, r3, #32
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4a09      	ldr	r2, [pc, #36]	; (80086fc <USB_FlushTxFifo+0x48>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d901      	bls.n	80086e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e006      	b.n	80086ee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d0f0      	beq.n	80086ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	00030d40 	.word	0x00030d40

08008700 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2210      	movs	r2, #16
 8008710:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a09      	ldr	r2, [pc, #36]	; (8008740 <USB_FlushRxFifo+0x40>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d901      	bls.n	8008724 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e006      	b.n	8008732 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b10      	cmp	r3, #16
 800872e:	d0f0      	beq.n	8008712 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	00030d40 	.word	0x00030d40

08008744 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	68f9      	ldr	r1, [r7, #12]
 8008760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008764:	4313      	orrs	r3, r2
 8008766:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008790:	f043 0302 	orr.w	r3, r3, #2
 8008794:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008796:	2003      	movs	r0, #3
 8008798:	f7f9 fcb4 	bl	8002104 <HAL_Delay>

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
	...

080087a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4a13      	ldr	r2, [pc, #76]	; (800880c <USB_CoreReset+0x64>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d901      	bls.n	80087c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e01b      	b.n	80087fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	daf2      	bge.n	80087b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f043 0201 	orr.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3301      	adds	r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4a09      	ldr	r2, [pc, #36]	; (800880c <USB_CoreReset+0x64>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d901      	bls.n	80087f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e006      	b.n	80087fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d0f0      	beq.n	80087de <USB_CoreReset+0x36>

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	00030d40 	.word	0x00030d40

08008810 <__errno>:
 8008810:	4b01      	ldr	r3, [pc, #4]	; (8008818 <__errno+0x8>)
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20000010 	.word	0x20000010

0800881c <__libc_init_array>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4e0d      	ldr	r6, [pc, #52]	; (8008854 <__libc_init_array+0x38>)
 8008820:	4c0d      	ldr	r4, [pc, #52]	; (8008858 <__libc_init_array+0x3c>)
 8008822:	1ba4      	subs	r4, r4, r6
 8008824:	10a4      	asrs	r4, r4, #2
 8008826:	2500      	movs	r5, #0
 8008828:	42a5      	cmp	r5, r4
 800882a:	d109      	bne.n	8008840 <__libc_init_array+0x24>
 800882c:	4e0b      	ldr	r6, [pc, #44]	; (800885c <__libc_init_array+0x40>)
 800882e:	4c0c      	ldr	r4, [pc, #48]	; (8008860 <__libc_init_array+0x44>)
 8008830:	f000 fc26 	bl	8009080 <_init>
 8008834:	1ba4      	subs	r4, r4, r6
 8008836:	10a4      	asrs	r4, r4, #2
 8008838:	2500      	movs	r5, #0
 800883a:	42a5      	cmp	r5, r4
 800883c:	d105      	bne.n	800884a <__libc_init_array+0x2e>
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008844:	4798      	blx	r3
 8008846:	3501      	adds	r5, #1
 8008848:	e7ee      	b.n	8008828 <__libc_init_array+0xc>
 800884a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800884e:	4798      	blx	r3
 8008850:	3501      	adds	r5, #1
 8008852:	e7f2      	b.n	800883a <__libc_init_array+0x1e>
 8008854:	0800911c 	.word	0x0800911c
 8008858:	0800911c 	.word	0x0800911c
 800885c:	0800911c 	.word	0x0800911c
 8008860:	08009120 	.word	0x08009120

08008864 <memset>:
 8008864:	4402      	add	r2, r0
 8008866:	4603      	mov	r3, r0
 8008868:	4293      	cmp	r3, r2
 800886a:	d100      	bne.n	800886e <memset+0xa>
 800886c:	4770      	bx	lr
 800886e:	f803 1b01 	strb.w	r1, [r3], #1
 8008872:	e7f9      	b.n	8008868 <memset+0x4>

08008874 <siprintf>:
 8008874:	b40e      	push	{r1, r2, r3}
 8008876:	b500      	push	{lr}
 8008878:	b09c      	sub	sp, #112	; 0x70
 800887a:	ab1d      	add	r3, sp, #116	; 0x74
 800887c:	9002      	str	r0, [sp, #8]
 800887e:	9006      	str	r0, [sp, #24]
 8008880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008884:	4809      	ldr	r0, [pc, #36]	; (80088ac <siprintf+0x38>)
 8008886:	9107      	str	r1, [sp, #28]
 8008888:	9104      	str	r1, [sp, #16]
 800888a:	4909      	ldr	r1, [pc, #36]	; (80088b0 <siprintf+0x3c>)
 800888c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008890:	9105      	str	r1, [sp, #20]
 8008892:	6800      	ldr	r0, [r0, #0]
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	a902      	add	r1, sp, #8
 8008898:	f000 f866 	bl	8008968 <_svfiprintf_r>
 800889c:	9b02      	ldr	r3, [sp, #8]
 800889e:	2200      	movs	r2, #0
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	b01c      	add	sp, #112	; 0x70
 80088a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80088a8:	b003      	add	sp, #12
 80088aa:	4770      	bx	lr
 80088ac:	20000010 	.word	0x20000010
 80088b0:	ffff0208 	.word	0xffff0208

080088b4 <__ssputs_r>:
 80088b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b8:	688e      	ldr	r6, [r1, #8]
 80088ba:	429e      	cmp	r6, r3
 80088bc:	4682      	mov	sl, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	4690      	mov	r8, r2
 80088c2:	4699      	mov	r9, r3
 80088c4:	d837      	bhi.n	8008936 <__ssputs_r+0x82>
 80088c6:	898a      	ldrh	r2, [r1, #12]
 80088c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088cc:	d031      	beq.n	8008932 <__ssputs_r+0x7e>
 80088ce:	6825      	ldr	r5, [r4, #0]
 80088d0:	6909      	ldr	r1, [r1, #16]
 80088d2:	1a6f      	subs	r7, r5, r1
 80088d4:	6965      	ldr	r5, [r4, #20]
 80088d6:	2302      	movs	r3, #2
 80088d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80088e0:	f109 0301 	add.w	r3, r9, #1
 80088e4:	443b      	add	r3, r7
 80088e6:	429d      	cmp	r5, r3
 80088e8:	bf38      	it	cc
 80088ea:	461d      	movcc	r5, r3
 80088ec:	0553      	lsls	r3, r2, #21
 80088ee:	d530      	bpl.n	8008952 <__ssputs_r+0x9e>
 80088f0:	4629      	mov	r1, r5
 80088f2:	f000 fb2b 	bl	8008f4c <_malloc_r>
 80088f6:	4606      	mov	r6, r0
 80088f8:	b950      	cbnz	r0, 8008910 <__ssputs_r+0x5c>
 80088fa:	230c      	movs	r3, #12
 80088fc:	f8ca 3000 	str.w	r3, [sl]
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008910:	463a      	mov	r2, r7
 8008912:	6921      	ldr	r1, [r4, #16]
 8008914:	f000 faa8 	bl	8008e68 <memcpy>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800891e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	6126      	str	r6, [r4, #16]
 8008926:	6165      	str	r5, [r4, #20]
 8008928:	443e      	add	r6, r7
 800892a:	1bed      	subs	r5, r5, r7
 800892c:	6026      	str	r6, [r4, #0]
 800892e:	60a5      	str	r5, [r4, #8]
 8008930:	464e      	mov	r6, r9
 8008932:	454e      	cmp	r6, r9
 8008934:	d900      	bls.n	8008938 <__ssputs_r+0x84>
 8008936:	464e      	mov	r6, r9
 8008938:	4632      	mov	r2, r6
 800893a:	4641      	mov	r1, r8
 800893c:	6820      	ldr	r0, [r4, #0]
 800893e:	f000 fa9e 	bl	8008e7e <memmove>
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	1b9b      	subs	r3, r3, r6
 8008946:	60a3      	str	r3, [r4, #8]
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	441e      	add	r6, r3
 800894c:	6026      	str	r6, [r4, #0]
 800894e:	2000      	movs	r0, #0
 8008950:	e7dc      	b.n	800890c <__ssputs_r+0x58>
 8008952:	462a      	mov	r2, r5
 8008954:	f000 fb54 	bl	8009000 <_realloc_r>
 8008958:	4606      	mov	r6, r0
 800895a:	2800      	cmp	r0, #0
 800895c:	d1e2      	bne.n	8008924 <__ssputs_r+0x70>
 800895e:	6921      	ldr	r1, [r4, #16]
 8008960:	4650      	mov	r0, sl
 8008962:	f000 faa5 	bl	8008eb0 <_free_r>
 8008966:	e7c8      	b.n	80088fa <__ssputs_r+0x46>

08008968 <_svfiprintf_r>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	461d      	mov	r5, r3
 800896e:	898b      	ldrh	r3, [r1, #12]
 8008970:	061f      	lsls	r7, r3, #24
 8008972:	b09d      	sub	sp, #116	; 0x74
 8008974:	4680      	mov	r8, r0
 8008976:	460c      	mov	r4, r1
 8008978:	4616      	mov	r6, r2
 800897a:	d50f      	bpl.n	800899c <_svfiprintf_r+0x34>
 800897c:	690b      	ldr	r3, [r1, #16]
 800897e:	b96b      	cbnz	r3, 800899c <_svfiprintf_r+0x34>
 8008980:	2140      	movs	r1, #64	; 0x40
 8008982:	f000 fae3 	bl	8008f4c <_malloc_r>
 8008986:	6020      	str	r0, [r4, #0]
 8008988:	6120      	str	r0, [r4, #16]
 800898a:	b928      	cbnz	r0, 8008998 <_svfiprintf_r+0x30>
 800898c:	230c      	movs	r3, #12
 800898e:	f8c8 3000 	str.w	r3, [r8]
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	e0c8      	b.n	8008b2a <_svfiprintf_r+0x1c2>
 8008998:	2340      	movs	r3, #64	; 0x40
 800899a:	6163      	str	r3, [r4, #20]
 800899c:	2300      	movs	r3, #0
 800899e:	9309      	str	r3, [sp, #36]	; 0x24
 80089a0:	2320      	movs	r3, #32
 80089a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089a6:	2330      	movs	r3, #48	; 0x30
 80089a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089ac:	9503      	str	r5, [sp, #12]
 80089ae:	f04f 0b01 	mov.w	fp, #1
 80089b2:	4637      	mov	r7, r6
 80089b4:	463d      	mov	r5, r7
 80089b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80089ba:	b10b      	cbz	r3, 80089c0 <_svfiprintf_r+0x58>
 80089bc:	2b25      	cmp	r3, #37	; 0x25
 80089be:	d13e      	bne.n	8008a3e <_svfiprintf_r+0xd6>
 80089c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80089c4:	d00b      	beq.n	80089de <_svfiprintf_r+0x76>
 80089c6:	4653      	mov	r3, sl
 80089c8:	4632      	mov	r2, r6
 80089ca:	4621      	mov	r1, r4
 80089cc:	4640      	mov	r0, r8
 80089ce:	f7ff ff71 	bl	80088b4 <__ssputs_r>
 80089d2:	3001      	adds	r0, #1
 80089d4:	f000 80a4 	beq.w	8008b20 <_svfiprintf_r+0x1b8>
 80089d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089da:	4453      	add	r3, sl
 80089dc:	9309      	str	r3, [sp, #36]	; 0x24
 80089de:	783b      	ldrb	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 809d 	beq.w	8008b20 <_svfiprintf_r+0x1b8>
 80089e6:	2300      	movs	r3, #0
 80089e8:	f04f 32ff 	mov.w	r2, #4294967295
 80089ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	9307      	str	r3, [sp, #28]
 80089f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089f8:	931a      	str	r3, [sp, #104]	; 0x68
 80089fa:	462f      	mov	r7, r5
 80089fc:	2205      	movs	r2, #5
 80089fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008a02:	4850      	ldr	r0, [pc, #320]	; (8008b44 <_svfiprintf_r+0x1dc>)
 8008a04:	f7f7 fc24 	bl	8000250 <memchr>
 8008a08:	9b04      	ldr	r3, [sp, #16]
 8008a0a:	b9d0      	cbnz	r0, 8008a42 <_svfiprintf_r+0xda>
 8008a0c:	06d9      	lsls	r1, r3, #27
 8008a0e:	bf44      	itt	mi
 8008a10:	2220      	movmi	r2, #32
 8008a12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a16:	071a      	lsls	r2, r3, #28
 8008a18:	bf44      	itt	mi
 8008a1a:	222b      	movmi	r2, #43	; 0x2b
 8008a1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a20:	782a      	ldrb	r2, [r5, #0]
 8008a22:	2a2a      	cmp	r2, #42	; 0x2a
 8008a24:	d015      	beq.n	8008a52 <_svfiprintf_r+0xea>
 8008a26:	9a07      	ldr	r2, [sp, #28]
 8008a28:	462f      	mov	r7, r5
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	250a      	movs	r5, #10
 8008a2e:	4639      	mov	r1, r7
 8008a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a34:	3b30      	subs	r3, #48	; 0x30
 8008a36:	2b09      	cmp	r3, #9
 8008a38:	d94d      	bls.n	8008ad6 <_svfiprintf_r+0x16e>
 8008a3a:	b1b8      	cbz	r0, 8008a6c <_svfiprintf_r+0x104>
 8008a3c:	e00f      	b.n	8008a5e <_svfiprintf_r+0xf6>
 8008a3e:	462f      	mov	r7, r5
 8008a40:	e7b8      	b.n	80089b4 <_svfiprintf_r+0x4c>
 8008a42:	4a40      	ldr	r2, [pc, #256]	; (8008b44 <_svfiprintf_r+0x1dc>)
 8008a44:	1a80      	subs	r0, r0, r2
 8008a46:	fa0b f000 	lsl.w	r0, fp, r0
 8008a4a:	4318      	orrs	r0, r3
 8008a4c:	9004      	str	r0, [sp, #16]
 8008a4e:	463d      	mov	r5, r7
 8008a50:	e7d3      	b.n	80089fa <_svfiprintf_r+0x92>
 8008a52:	9a03      	ldr	r2, [sp, #12]
 8008a54:	1d11      	adds	r1, r2, #4
 8008a56:	6812      	ldr	r2, [r2, #0]
 8008a58:	9103      	str	r1, [sp, #12]
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	db01      	blt.n	8008a62 <_svfiprintf_r+0xfa>
 8008a5e:	9207      	str	r2, [sp, #28]
 8008a60:	e004      	b.n	8008a6c <_svfiprintf_r+0x104>
 8008a62:	4252      	negs	r2, r2
 8008a64:	f043 0302 	orr.w	r3, r3, #2
 8008a68:	9207      	str	r2, [sp, #28]
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	783b      	ldrb	r3, [r7, #0]
 8008a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a70:	d10c      	bne.n	8008a8c <_svfiprintf_r+0x124>
 8008a72:	787b      	ldrb	r3, [r7, #1]
 8008a74:	2b2a      	cmp	r3, #42	; 0x2a
 8008a76:	d133      	bne.n	8008ae0 <_svfiprintf_r+0x178>
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	1d1a      	adds	r2, r3, #4
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	9203      	str	r2, [sp, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	bfb8      	it	lt
 8008a84:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a88:	3702      	adds	r7, #2
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	4d2e      	ldr	r5, [pc, #184]	; (8008b48 <_svfiprintf_r+0x1e0>)
 8008a8e:	7839      	ldrb	r1, [r7, #0]
 8008a90:	2203      	movs	r2, #3
 8008a92:	4628      	mov	r0, r5
 8008a94:	f7f7 fbdc 	bl	8000250 <memchr>
 8008a98:	b138      	cbz	r0, 8008aaa <_svfiprintf_r+0x142>
 8008a9a:	2340      	movs	r3, #64	; 0x40
 8008a9c:	1b40      	subs	r0, r0, r5
 8008a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8008aa2:	9b04      	ldr	r3, [sp, #16]
 8008aa4:	4303      	orrs	r3, r0
 8008aa6:	3701      	adds	r7, #1
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	7839      	ldrb	r1, [r7, #0]
 8008aac:	4827      	ldr	r0, [pc, #156]	; (8008b4c <_svfiprintf_r+0x1e4>)
 8008aae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ab2:	2206      	movs	r2, #6
 8008ab4:	1c7e      	adds	r6, r7, #1
 8008ab6:	f7f7 fbcb 	bl	8000250 <memchr>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d038      	beq.n	8008b30 <_svfiprintf_r+0x1c8>
 8008abe:	4b24      	ldr	r3, [pc, #144]	; (8008b50 <_svfiprintf_r+0x1e8>)
 8008ac0:	bb13      	cbnz	r3, 8008b08 <_svfiprintf_r+0x1a0>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	3307      	adds	r3, #7
 8008ac6:	f023 0307 	bic.w	r3, r3, #7
 8008aca:	3308      	adds	r3, #8
 8008acc:	9303      	str	r3, [sp, #12]
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	444b      	add	r3, r9
 8008ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad4:	e76d      	b.n	80089b2 <_svfiprintf_r+0x4a>
 8008ad6:	fb05 3202 	mla	r2, r5, r2, r3
 8008ada:	2001      	movs	r0, #1
 8008adc:	460f      	mov	r7, r1
 8008ade:	e7a6      	b.n	8008a2e <_svfiprintf_r+0xc6>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	3701      	adds	r7, #1
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	250a      	movs	r5, #10
 8008aea:	4638      	mov	r0, r7
 8008aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af0:	3a30      	subs	r2, #48	; 0x30
 8008af2:	2a09      	cmp	r2, #9
 8008af4:	d903      	bls.n	8008afe <_svfiprintf_r+0x196>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0c8      	beq.n	8008a8c <_svfiprintf_r+0x124>
 8008afa:	9105      	str	r1, [sp, #20]
 8008afc:	e7c6      	b.n	8008a8c <_svfiprintf_r+0x124>
 8008afe:	fb05 2101 	mla	r1, r5, r1, r2
 8008b02:	2301      	movs	r3, #1
 8008b04:	4607      	mov	r7, r0
 8008b06:	e7f0      	b.n	8008aea <_svfiprintf_r+0x182>
 8008b08:	ab03      	add	r3, sp, #12
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <_svfiprintf_r+0x1ec>)
 8008b10:	a904      	add	r1, sp, #16
 8008b12:	4640      	mov	r0, r8
 8008b14:	f3af 8000 	nop.w
 8008b18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b1c:	4681      	mov	r9, r0
 8008b1e:	d1d6      	bne.n	8008ace <_svfiprintf_r+0x166>
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	065b      	lsls	r3, r3, #25
 8008b24:	f53f af35 	bmi.w	8008992 <_svfiprintf_r+0x2a>
 8008b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b2a:	b01d      	add	sp, #116	; 0x74
 8008b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b30:	ab03      	add	r3, sp, #12
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	4622      	mov	r2, r4
 8008b36:	4b07      	ldr	r3, [pc, #28]	; (8008b54 <_svfiprintf_r+0x1ec>)
 8008b38:	a904      	add	r1, sp, #16
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	f000 f882 	bl	8008c44 <_printf_i>
 8008b40:	e7ea      	b.n	8008b18 <_svfiprintf_r+0x1b0>
 8008b42:	bf00      	nop
 8008b44:	080090e0 	.word	0x080090e0
 8008b48:	080090e6 	.word	0x080090e6
 8008b4c:	080090ea 	.word	0x080090ea
 8008b50:	00000000 	.word	0x00000000
 8008b54:	080088b5 	.word	0x080088b5

08008b58 <_printf_common>:
 8008b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5c:	4691      	mov	r9, r2
 8008b5e:	461f      	mov	r7, r3
 8008b60:	688a      	ldr	r2, [r1, #8]
 8008b62:	690b      	ldr	r3, [r1, #16]
 8008b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	bfb8      	it	lt
 8008b6c:	4613      	movlt	r3, r2
 8008b6e:	f8c9 3000 	str.w	r3, [r9]
 8008b72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b76:	4606      	mov	r6, r0
 8008b78:	460c      	mov	r4, r1
 8008b7a:	b112      	cbz	r2, 8008b82 <_printf_common+0x2a>
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	f8c9 3000 	str.w	r3, [r9]
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	0699      	lsls	r1, r3, #26
 8008b86:	bf42      	ittt	mi
 8008b88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b8c:	3302      	addmi	r3, #2
 8008b8e:	f8c9 3000 	strmi.w	r3, [r9]
 8008b92:	6825      	ldr	r5, [r4, #0]
 8008b94:	f015 0506 	ands.w	r5, r5, #6
 8008b98:	d107      	bne.n	8008baa <_printf_common+0x52>
 8008b9a:	f104 0a19 	add.w	sl, r4, #25
 8008b9e:	68e3      	ldr	r3, [r4, #12]
 8008ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	42ab      	cmp	r3, r5
 8008ba8:	dc28      	bgt.n	8008bfc <_printf_common+0xa4>
 8008baa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	3300      	adds	r3, #0
 8008bb2:	bf18      	it	ne
 8008bb4:	2301      	movne	r3, #1
 8008bb6:	0692      	lsls	r2, r2, #26
 8008bb8:	d42d      	bmi.n	8008c16 <_printf_common+0xbe>
 8008bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	47c0      	blx	r8
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d020      	beq.n	8008c0a <_printf_common+0xb2>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	68e5      	ldr	r5, [r4, #12]
 8008bcc:	f8d9 2000 	ldr.w	r2, [r9]
 8008bd0:	f003 0306 	and.w	r3, r3, #6
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	bf08      	it	eq
 8008bd8:	1aad      	subeq	r5, r5, r2
 8008bda:	68a3      	ldr	r3, [r4, #8]
 8008bdc:	6922      	ldr	r2, [r4, #16]
 8008bde:	bf0c      	ite	eq
 8008be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be4:	2500      	movne	r5, #0
 8008be6:	4293      	cmp	r3, r2
 8008be8:	bfc4      	itt	gt
 8008bea:	1a9b      	subgt	r3, r3, r2
 8008bec:	18ed      	addgt	r5, r5, r3
 8008bee:	f04f 0900 	mov.w	r9, #0
 8008bf2:	341a      	adds	r4, #26
 8008bf4:	454d      	cmp	r5, r9
 8008bf6:	d11a      	bne.n	8008c2e <_printf_common+0xd6>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	e008      	b.n	8008c0e <_printf_common+0xb6>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4652      	mov	r2, sl
 8008c00:	4639      	mov	r1, r7
 8008c02:	4630      	mov	r0, r6
 8008c04:	47c0      	blx	r8
 8008c06:	3001      	adds	r0, #1
 8008c08:	d103      	bne.n	8008c12 <_printf_common+0xba>
 8008c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c12:	3501      	adds	r5, #1
 8008c14:	e7c3      	b.n	8008b9e <_printf_common+0x46>
 8008c16:	18e1      	adds	r1, r4, r3
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	2030      	movs	r0, #48	; 0x30
 8008c1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c20:	4422      	add	r2, r4
 8008c22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c2a:	3302      	adds	r3, #2
 8008c2c:	e7c5      	b.n	8008bba <_printf_common+0x62>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4622      	mov	r2, r4
 8008c32:	4639      	mov	r1, r7
 8008c34:	4630      	mov	r0, r6
 8008c36:	47c0      	blx	r8
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d0e6      	beq.n	8008c0a <_printf_common+0xb2>
 8008c3c:	f109 0901 	add.w	r9, r9, #1
 8008c40:	e7d8      	b.n	8008bf4 <_printf_common+0x9c>
	...

08008c44 <_printf_i>:
 8008c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	7e09      	ldrb	r1, [r1, #24]
 8008c50:	b085      	sub	sp, #20
 8008c52:	296e      	cmp	r1, #110	; 0x6e
 8008c54:	4617      	mov	r7, r2
 8008c56:	4606      	mov	r6, r0
 8008c58:	4698      	mov	r8, r3
 8008c5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c5c:	f000 80b3 	beq.w	8008dc6 <_printf_i+0x182>
 8008c60:	d822      	bhi.n	8008ca8 <_printf_i+0x64>
 8008c62:	2963      	cmp	r1, #99	; 0x63
 8008c64:	d036      	beq.n	8008cd4 <_printf_i+0x90>
 8008c66:	d80a      	bhi.n	8008c7e <_printf_i+0x3a>
 8008c68:	2900      	cmp	r1, #0
 8008c6a:	f000 80b9 	beq.w	8008de0 <_printf_i+0x19c>
 8008c6e:	2958      	cmp	r1, #88	; 0x58
 8008c70:	f000 8083 	beq.w	8008d7a <_printf_i+0x136>
 8008c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c7c:	e032      	b.n	8008ce4 <_printf_i+0xa0>
 8008c7e:	2964      	cmp	r1, #100	; 0x64
 8008c80:	d001      	beq.n	8008c86 <_printf_i+0x42>
 8008c82:	2969      	cmp	r1, #105	; 0x69
 8008c84:	d1f6      	bne.n	8008c74 <_printf_i+0x30>
 8008c86:	6820      	ldr	r0, [r4, #0]
 8008c88:	6813      	ldr	r3, [r2, #0]
 8008c8a:	0605      	lsls	r5, r0, #24
 8008c8c:	f103 0104 	add.w	r1, r3, #4
 8008c90:	d52a      	bpl.n	8008ce8 <_printf_i+0xa4>
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6011      	str	r1, [r2, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	da03      	bge.n	8008ca2 <_printf_i+0x5e>
 8008c9a:	222d      	movs	r2, #45	; 0x2d
 8008c9c:	425b      	negs	r3, r3
 8008c9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008ca2:	486f      	ldr	r0, [pc, #444]	; (8008e60 <_printf_i+0x21c>)
 8008ca4:	220a      	movs	r2, #10
 8008ca6:	e039      	b.n	8008d1c <_printf_i+0xd8>
 8008ca8:	2973      	cmp	r1, #115	; 0x73
 8008caa:	f000 809d 	beq.w	8008de8 <_printf_i+0x1a4>
 8008cae:	d808      	bhi.n	8008cc2 <_printf_i+0x7e>
 8008cb0:	296f      	cmp	r1, #111	; 0x6f
 8008cb2:	d020      	beq.n	8008cf6 <_printf_i+0xb2>
 8008cb4:	2970      	cmp	r1, #112	; 0x70
 8008cb6:	d1dd      	bne.n	8008c74 <_printf_i+0x30>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	f043 0320 	orr.w	r3, r3, #32
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	e003      	b.n	8008cca <_printf_i+0x86>
 8008cc2:	2975      	cmp	r1, #117	; 0x75
 8008cc4:	d017      	beq.n	8008cf6 <_printf_i+0xb2>
 8008cc6:	2978      	cmp	r1, #120	; 0x78
 8008cc8:	d1d4      	bne.n	8008c74 <_printf_i+0x30>
 8008cca:	2378      	movs	r3, #120	; 0x78
 8008ccc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cd0:	4864      	ldr	r0, [pc, #400]	; (8008e64 <_printf_i+0x220>)
 8008cd2:	e055      	b.n	8008d80 <_printf_i+0x13c>
 8008cd4:	6813      	ldr	r3, [r2, #0]
 8008cd6:	1d19      	adds	r1, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6011      	str	r1, [r2, #0]
 8008cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e08c      	b.n	8008e02 <_printf_i+0x1be>
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6011      	str	r1, [r2, #0]
 8008cec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cf0:	bf18      	it	ne
 8008cf2:	b21b      	sxthne	r3, r3
 8008cf4:	e7cf      	b.n	8008c96 <_printf_i+0x52>
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	6825      	ldr	r5, [r4, #0]
 8008cfa:	1d18      	adds	r0, r3, #4
 8008cfc:	6010      	str	r0, [r2, #0]
 8008cfe:	0628      	lsls	r0, r5, #24
 8008d00:	d501      	bpl.n	8008d06 <_printf_i+0xc2>
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	e002      	b.n	8008d0c <_printf_i+0xc8>
 8008d06:	0668      	lsls	r0, r5, #25
 8008d08:	d5fb      	bpl.n	8008d02 <_printf_i+0xbe>
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	4854      	ldr	r0, [pc, #336]	; (8008e60 <_printf_i+0x21c>)
 8008d0e:	296f      	cmp	r1, #111	; 0x6f
 8008d10:	bf14      	ite	ne
 8008d12:	220a      	movne	r2, #10
 8008d14:	2208      	moveq	r2, #8
 8008d16:	2100      	movs	r1, #0
 8008d18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d1c:	6865      	ldr	r5, [r4, #4]
 8008d1e:	60a5      	str	r5, [r4, #8]
 8008d20:	2d00      	cmp	r5, #0
 8008d22:	f2c0 8095 	blt.w	8008e50 <_printf_i+0x20c>
 8008d26:	6821      	ldr	r1, [r4, #0]
 8008d28:	f021 0104 	bic.w	r1, r1, #4
 8008d2c:	6021      	str	r1, [r4, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d13d      	bne.n	8008dae <_printf_i+0x16a>
 8008d32:	2d00      	cmp	r5, #0
 8008d34:	f040 808e 	bne.w	8008e54 <_printf_i+0x210>
 8008d38:	4665      	mov	r5, ip
 8008d3a:	2a08      	cmp	r2, #8
 8008d3c:	d10b      	bne.n	8008d56 <_printf_i+0x112>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	07db      	lsls	r3, r3, #31
 8008d42:	d508      	bpl.n	8008d56 <_printf_i+0x112>
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	6862      	ldr	r2, [r4, #4]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	bfde      	ittt	le
 8008d4c:	2330      	movle	r3, #48	; 0x30
 8008d4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d56:	ebac 0305 	sub.w	r3, ip, r5
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	f8cd 8000 	str.w	r8, [sp]
 8008d60:	463b      	mov	r3, r7
 8008d62:	aa03      	add	r2, sp, #12
 8008d64:	4621      	mov	r1, r4
 8008d66:	4630      	mov	r0, r6
 8008d68:	f7ff fef6 	bl	8008b58 <_printf_common>
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d14d      	bne.n	8008e0c <_printf_i+0x1c8>
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	b005      	add	sp, #20
 8008d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	4839      	ldr	r0, [pc, #228]	; (8008e60 <_printf_i+0x21c>)
 8008d7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d80:	6813      	ldr	r3, [r2, #0]
 8008d82:	6821      	ldr	r1, [r4, #0]
 8008d84:	1d1d      	adds	r5, r3, #4
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6015      	str	r5, [r2, #0]
 8008d8a:	060a      	lsls	r2, r1, #24
 8008d8c:	d50b      	bpl.n	8008da6 <_printf_i+0x162>
 8008d8e:	07ca      	lsls	r2, r1, #31
 8008d90:	bf44      	itt	mi
 8008d92:	f041 0120 	orrmi.w	r1, r1, #32
 8008d96:	6021      	strmi	r1, [r4, #0]
 8008d98:	b91b      	cbnz	r3, 8008da2 <_printf_i+0x15e>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	f022 0220 	bic.w	r2, r2, #32
 8008da0:	6022      	str	r2, [r4, #0]
 8008da2:	2210      	movs	r2, #16
 8008da4:	e7b7      	b.n	8008d16 <_printf_i+0xd2>
 8008da6:	064d      	lsls	r5, r1, #25
 8008da8:	bf48      	it	mi
 8008daa:	b29b      	uxthmi	r3, r3
 8008dac:	e7ef      	b.n	8008d8e <_printf_i+0x14a>
 8008dae:	4665      	mov	r5, ip
 8008db0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008db4:	fb02 3311 	mls	r3, r2, r1, r3
 8008db8:	5cc3      	ldrb	r3, [r0, r3]
 8008dba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	d1f5      	bne.n	8008db0 <_printf_i+0x16c>
 8008dc4:	e7b9      	b.n	8008d3a <_printf_i+0xf6>
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	6825      	ldr	r5, [r4, #0]
 8008dca:	6961      	ldr	r1, [r4, #20]
 8008dcc:	1d18      	adds	r0, r3, #4
 8008dce:	6010      	str	r0, [r2, #0]
 8008dd0:	0628      	lsls	r0, r5, #24
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	d501      	bpl.n	8008dda <_printf_i+0x196>
 8008dd6:	6019      	str	r1, [r3, #0]
 8008dd8:	e002      	b.n	8008de0 <_printf_i+0x19c>
 8008dda:	066a      	lsls	r2, r5, #25
 8008ddc:	d5fb      	bpl.n	8008dd6 <_printf_i+0x192>
 8008dde:	8019      	strh	r1, [r3, #0]
 8008de0:	2300      	movs	r3, #0
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	4665      	mov	r5, ip
 8008de6:	e7b9      	b.n	8008d5c <_printf_i+0x118>
 8008de8:	6813      	ldr	r3, [r2, #0]
 8008dea:	1d19      	adds	r1, r3, #4
 8008dec:	6011      	str	r1, [r2, #0]
 8008dee:	681d      	ldr	r5, [r3, #0]
 8008df0:	6862      	ldr	r2, [r4, #4]
 8008df2:	2100      	movs	r1, #0
 8008df4:	4628      	mov	r0, r5
 8008df6:	f7f7 fa2b 	bl	8000250 <memchr>
 8008dfa:	b108      	cbz	r0, 8008e00 <_printf_i+0x1bc>
 8008dfc:	1b40      	subs	r0, r0, r5
 8008dfe:	6060      	str	r0, [r4, #4]
 8008e00:	6863      	ldr	r3, [r4, #4]
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	2300      	movs	r3, #0
 8008e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e0a:	e7a7      	b.n	8008d5c <_printf_i+0x118>
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4639      	mov	r1, r7
 8008e12:	4630      	mov	r0, r6
 8008e14:	47c0      	blx	r8
 8008e16:	3001      	adds	r0, #1
 8008e18:	d0aa      	beq.n	8008d70 <_printf_i+0x12c>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	079b      	lsls	r3, r3, #30
 8008e1e:	d413      	bmi.n	8008e48 <_printf_i+0x204>
 8008e20:	68e0      	ldr	r0, [r4, #12]
 8008e22:	9b03      	ldr	r3, [sp, #12]
 8008e24:	4298      	cmp	r0, r3
 8008e26:	bfb8      	it	lt
 8008e28:	4618      	movlt	r0, r3
 8008e2a:	e7a3      	b.n	8008d74 <_printf_i+0x130>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	464a      	mov	r2, r9
 8008e30:	4639      	mov	r1, r7
 8008e32:	4630      	mov	r0, r6
 8008e34:	47c0      	blx	r8
 8008e36:	3001      	adds	r0, #1
 8008e38:	d09a      	beq.n	8008d70 <_printf_i+0x12c>
 8008e3a:	3501      	adds	r5, #1
 8008e3c:	68e3      	ldr	r3, [r4, #12]
 8008e3e:	9a03      	ldr	r2, [sp, #12]
 8008e40:	1a9b      	subs	r3, r3, r2
 8008e42:	42ab      	cmp	r3, r5
 8008e44:	dcf2      	bgt.n	8008e2c <_printf_i+0x1e8>
 8008e46:	e7eb      	b.n	8008e20 <_printf_i+0x1dc>
 8008e48:	2500      	movs	r5, #0
 8008e4a:	f104 0919 	add.w	r9, r4, #25
 8008e4e:	e7f5      	b.n	8008e3c <_printf_i+0x1f8>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1ac      	bne.n	8008dae <_printf_i+0x16a>
 8008e54:	7803      	ldrb	r3, [r0, #0]
 8008e56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e5e:	e76c      	b.n	8008d3a <_printf_i+0xf6>
 8008e60:	080090f1 	.word	0x080090f1
 8008e64:	08009102 	.word	0x08009102

08008e68 <memcpy>:
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	1e43      	subs	r3, r0, #1
 8008e6c:	440a      	add	r2, r1
 8008e6e:	4291      	cmp	r1, r2
 8008e70:	d100      	bne.n	8008e74 <memcpy+0xc>
 8008e72:	bd10      	pop	{r4, pc}
 8008e74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e7c:	e7f7      	b.n	8008e6e <memcpy+0x6>

08008e7e <memmove>:
 8008e7e:	4288      	cmp	r0, r1
 8008e80:	b510      	push	{r4, lr}
 8008e82:	eb01 0302 	add.w	r3, r1, r2
 8008e86:	d807      	bhi.n	8008e98 <memmove+0x1a>
 8008e88:	1e42      	subs	r2, r0, #1
 8008e8a:	4299      	cmp	r1, r3
 8008e8c:	d00a      	beq.n	8008ea4 <memmove+0x26>
 8008e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008e96:	e7f8      	b.n	8008e8a <memmove+0xc>
 8008e98:	4283      	cmp	r3, r0
 8008e9a:	d9f5      	bls.n	8008e88 <memmove+0xa>
 8008e9c:	1881      	adds	r1, r0, r2
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	42d3      	cmn	r3, r2
 8008ea2:	d100      	bne.n	8008ea6 <memmove+0x28>
 8008ea4:	bd10      	pop	{r4, pc}
 8008ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eaa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008eae:	e7f7      	b.n	8008ea0 <memmove+0x22>

08008eb0 <_free_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	d045      	beq.n	8008f44 <_free_r+0x94>
 8008eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ebc:	1f0c      	subs	r4, r1, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfb8      	it	lt
 8008ec2:	18e4      	addlt	r4, r4, r3
 8008ec4:	f000 f8d2 	bl	800906c <__malloc_lock>
 8008ec8:	4a1f      	ldr	r2, [pc, #124]	; (8008f48 <_free_r+0x98>)
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	4610      	mov	r0, r2
 8008ece:	b933      	cbnz	r3, 8008ede <_free_r+0x2e>
 8008ed0:	6063      	str	r3, [r4, #4]
 8008ed2:	6014      	str	r4, [r2, #0]
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eda:	f000 b8c8 	b.w	800906e <__malloc_unlock>
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	d90c      	bls.n	8008efc <_free_r+0x4c>
 8008ee2:	6821      	ldr	r1, [r4, #0]
 8008ee4:	1862      	adds	r2, r4, r1
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	bf04      	itt	eq
 8008eea:	681a      	ldreq	r2, [r3, #0]
 8008eec:	685b      	ldreq	r3, [r3, #4]
 8008eee:	6063      	str	r3, [r4, #4]
 8008ef0:	bf04      	itt	eq
 8008ef2:	1852      	addeq	r2, r2, r1
 8008ef4:	6022      	streq	r2, [r4, #0]
 8008ef6:	6004      	str	r4, [r0, #0]
 8008ef8:	e7ec      	b.n	8008ed4 <_free_r+0x24>
 8008efa:	4613      	mov	r3, r2
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	b10a      	cbz	r2, 8008f04 <_free_r+0x54>
 8008f00:	42a2      	cmp	r2, r4
 8008f02:	d9fa      	bls.n	8008efa <_free_r+0x4a>
 8008f04:	6819      	ldr	r1, [r3, #0]
 8008f06:	1858      	adds	r0, r3, r1
 8008f08:	42a0      	cmp	r0, r4
 8008f0a:	d10b      	bne.n	8008f24 <_free_r+0x74>
 8008f0c:	6820      	ldr	r0, [r4, #0]
 8008f0e:	4401      	add	r1, r0
 8008f10:	1858      	adds	r0, r3, r1
 8008f12:	4282      	cmp	r2, r0
 8008f14:	6019      	str	r1, [r3, #0]
 8008f16:	d1dd      	bne.n	8008ed4 <_free_r+0x24>
 8008f18:	6810      	ldr	r0, [r2, #0]
 8008f1a:	6852      	ldr	r2, [r2, #4]
 8008f1c:	605a      	str	r2, [r3, #4]
 8008f1e:	4401      	add	r1, r0
 8008f20:	6019      	str	r1, [r3, #0]
 8008f22:	e7d7      	b.n	8008ed4 <_free_r+0x24>
 8008f24:	d902      	bls.n	8008f2c <_free_r+0x7c>
 8008f26:	230c      	movs	r3, #12
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	e7d3      	b.n	8008ed4 <_free_r+0x24>
 8008f2c:	6820      	ldr	r0, [r4, #0]
 8008f2e:	1821      	adds	r1, r4, r0
 8008f30:	428a      	cmp	r2, r1
 8008f32:	bf04      	itt	eq
 8008f34:	6811      	ldreq	r1, [r2, #0]
 8008f36:	6852      	ldreq	r2, [r2, #4]
 8008f38:	6062      	str	r2, [r4, #4]
 8008f3a:	bf04      	itt	eq
 8008f3c:	1809      	addeq	r1, r1, r0
 8008f3e:	6021      	streq	r1, [r4, #0]
 8008f40:	605c      	str	r4, [r3, #4]
 8008f42:	e7c7      	b.n	8008ed4 <_free_r+0x24>
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	bf00      	nop
 8008f48:	200000ac 	.word	0x200000ac

08008f4c <_malloc_r>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	1ccd      	adds	r5, r1, #3
 8008f50:	f025 0503 	bic.w	r5, r5, #3
 8008f54:	3508      	adds	r5, #8
 8008f56:	2d0c      	cmp	r5, #12
 8008f58:	bf38      	it	cc
 8008f5a:	250c      	movcc	r5, #12
 8008f5c:	2d00      	cmp	r5, #0
 8008f5e:	4606      	mov	r6, r0
 8008f60:	db01      	blt.n	8008f66 <_malloc_r+0x1a>
 8008f62:	42a9      	cmp	r1, r5
 8008f64:	d903      	bls.n	8008f6e <_malloc_r+0x22>
 8008f66:	230c      	movs	r3, #12
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
 8008f6e:	f000 f87d 	bl	800906c <__malloc_lock>
 8008f72:	4a21      	ldr	r2, [pc, #132]	; (8008ff8 <_malloc_r+0xac>)
 8008f74:	6814      	ldr	r4, [r2, #0]
 8008f76:	4621      	mov	r1, r4
 8008f78:	b991      	cbnz	r1, 8008fa0 <_malloc_r+0x54>
 8008f7a:	4c20      	ldr	r4, [pc, #128]	; (8008ffc <_malloc_r+0xb0>)
 8008f7c:	6823      	ldr	r3, [r4, #0]
 8008f7e:	b91b      	cbnz	r3, 8008f88 <_malloc_r+0x3c>
 8008f80:	4630      	mov	r0, r6
 8008f82:	f000 f863 	bl	800904c <_sbrk_r>
 8008f86:	6020      	str	r0, [r4, #0]
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f000 f85e 	bl	800904c <_sbrk_r>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d124      	bne.n	8008fde <_malloc_r+0x92>
 8008f94:	230c      	movs	r3, #12
 8008f96:	6033      	str	r3, [r6, #0]
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f000 f868 	bl	800906e <__malloc_unlock>
 8008f9e:	e7e4      	b.n	8008f6a <_malloc_r+0x1e>
 8008fa0:	680b      	ldr	r3, [r1, #0]
 8008fa2:	1b5b      	subs	r3, r3, r5
 8008fa4:	d418      	bmi.n	8008fd8 <_malloc_r+0x8c>
 8008fa6:	2b0b      	cmp	r3, #11
 8008fa8:	d90f      	bls.n	8008fca <_malloc_r+0x7e>
 8008faa:	600b      	str	r3, [r1, #0]
 8008fac:	50cd      	str	r5, [r1, r3]
 8008fae:	18cc      	adds	r4, r1, r3
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f000 f85c 	bl	800906e <__malloc_unlock>
 8008fb6:	f104 000b 	add.w	r0, r4, #11
 8008fba:	1d23      	adds	r3, r4, #4
 8008fbc:	f020 0007 	bic.w	r0, r0, #7
 8008fc0:	1ac3      	subs	r3, r0, r3
 8008fc2:	d0d3      	beq.n	8008f6c <_malloc_r+0x20>
 8008fc4:	425a      	negs	r2, r3
 8008fc6:	50e2      	str	r2, [r4, r3]
 8008fc8:	e7d0      	b.n	8008f6c <_malloc_r+0x20>
 8008fca:	428c      	cmp	r4, r1
 8008fcc:	684b      	ldr	r3, [r1, #4]
 8008fce:	bf16      	itet	ne
 8008fd0:	6063      	strne	r3, [r4, #4]
 8008fd2:	6013      	streq	r3, [r2, #0]
 8008fd4:	460c      	movne	r4, r1
 8008fd6:	e7eb      	b.n	8008fb0 <_malloc_r+0x64>
 8008fd8:	460c      	mov	r4, r1
 8008fda:	6849      	ldr	r1, [r1, #4]
 8008fdc:	e7cc      	b.n	8008f78 <_malloc_r+0x2c>
 8008fde:	1cc4      	adds	r4, r0, #3
 8008fe0:	f024 0403 	bic.w	r4, r4, #3
 8008fe4:	42a0      	cmp	r0, r4
 8008fe6:	d005      	beq.n	8008ff4 <_malloc_r+0xa8>
 8008fe8:	1a21      	subs	r1, r4, r0
 8008fea:	4630      	mov	r0, r6
 8008fec:	f000 f82e 	bl	800904c <_sbrk_r>
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d0cf      	beq.n	8008f94 <_malloc_r+0x48>
 8008ff4:	6025      	str	r5, [r4, #0]
 8008ff6:	e7db      	b.n	8008fb0 <_malloc_r+0x64>
 8008ff8:	200000ac 	.word	0x200000ac
 8008ffc:	200000b0 	.word	0x200000b0

08009000 <_realloc_r>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	4607      	mov	r7, r0
 8009004:	4614      	mov	r4, r2
 8009006:	460e      	mov	r6, r1
 8009008:	b921      	cbnz	r1, 8009014 <_realloc_r+0x14>
 800900a:	4611      	mov	r1, r2
 800900c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009010:	f7ff bf9c 	b.w	8008f4c <_malloc_r>
 8009014:	b922      	cbnz	r2, 8009020 <_realloc_r+0x20>
 8009016:	f7ff ff4b 	bl	8008eb0 <_free_r>
 800901a:	4625      	mov	r5, r4
 800901c:	4628      	mov	r0, r5
 800901e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009020:	f000 f826 	bl	8009070 <_malloc_usable_size_r>
 8009024:	42a0      	cmp	r0, r4
 8009026:	d20f      	bcs.n	8009048 <_realloc_r+0x48>
 8009028:	4621      	mov	r1, r4
 800902a:	4638      	mov	r0, r7
 800902c:	f7ff ff8e 	bl	8008f4c <_malloc_r>
 8009030:	4605      	mov	r5, r0
 8009032:	2800      	cmp	r0, #0
 8009034:	d0f2      	beq.n	800901c <_realloc_r+0x1c>
 8009036:	4631      	mov	r1, r6
 8009038:	4622      	mov	r2, r4
 800903a:	f7ff ff15 	bl	8008e68 <memcpy>
 800903e:	4631      	mov	r1, r6
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff ff35 	bl	8008eb0 <_free_r>
 8009046:	e7e9      	b.n	800901c <_realloc_r+0x1c>
 8009048:	4635      	mov	r5, r6
 800904a:	e7e7      	b.n	800901c <_realloc_r+0x1c>

0800904c <_sbrk_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4c06      	ldr	r4, [pc, #24]	; (8009068 <_sbrk_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4605      	mov	r5, r0
 8009054:	4608      	mov	r0, r1
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	f7f8 ff8c 	bl	8001f74 <_sbrk>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_sbrk_r+0x1a>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	b103      	cbz	r3, 8009066 <_sbrk_r+0x1a>
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	2002b908 	.word	0x2002b908

0800906c <__malloc_lock>:
 800906c:	4770      	bx	lr

0800906e <__malloc_unlock>:
 800906e:	4770      	bx	lr

08009070 <_malloc_usable_size_r>:
 8009070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009074:	1f18      	subs	r0, r3, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfbc      	itt	lt
 800907a:	580b      	ldrlt	r3, [r1, r0]
 800907c:	18c0      	addlt	r0, r0, r3
 800907e:	4770      	bx	lr

08009080 <_init>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr

0800908c <_fini>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr
