
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00007638  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a0  080078a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a8  080078a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080078b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b760  20000074  08007924  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002b7d4  08007924  0002b7d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cc9  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000295c  00000000  00000000  00034d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  000376c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  00038a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ad45  00000000  00000000  00039cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec8d  00000000  00000000  00064a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c261  00000000  00000000  00073692  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017f8f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  0017f970  2**2
=======
  1 .text         00008db8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009034  08009034  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800903c  0800903c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800903c  0800903c  0001903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b890  20000074  080090b8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002b904  080090b8  0002b904  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016506  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bb3  00000000  00000000  000365a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001500  00000000  00000000  00039160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  0003a660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b845  00000000  00000000  0003ba38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe59  00000000  00000000  0006727d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111a5a  00000000  00000000  000770d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00188b30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc4  00000000  00000000  00188bac  2**2
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 8000220:	08007820 	.word	0x08007820
=======
 8000220:	08008fa0 	.word	0x08008fa0
>>>>>>> Stashed changes

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
<<<<<<< Updated upstream
 800023c:	08007820 	.word	0x08007820
=======
 800023c:	08008fa0 	.word	0x08008fa0
>>>>>>> Stashed changes

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< Updated upstream
 8000624:	f001 f865 	bl	80016f2 <HAL_Init>
=======
 8000624:	f001 fc87 	bl	8001f36 <HAL_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< Updated upstream
 8000628:	f000 f836 	bl	8000698 <SystemClock_Config>
=======
 8000628:	f000 f834 	bl	8000694 <SystemClock_Config>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< Updated upstream
 800062c:	f000 fb54 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000630:	f000 fb42 	bl	8000cb8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000634:	f000 fae2 	bl	8000bfc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000638:	f000 fb10 	bl	8000c5c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800063c:	f000 f8c4 	bl	80007c8 <MX_SPI1_Init>
  MX_TIM8_Init();
 8000640:	f000 fa10 	bl	8000a64 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000644:	f000 f8fa 	bl	800083c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000648:	f000 f9b8 	bl	80009bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

=======
 800062c:	f000 fc4a 	bl	8000ec4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000630:	f000 fc30 	bl	8000e94 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000634:	f000 fbd0 	bl	8000dd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000638:	f000 fbfe 	bl	8000e38 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800063c:	f000 f914 	bl	8000868 <MX_SPI1_Init>
  MX_TIM8_Init();
 8000640:	f000 fafe 	bl	8000c40 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000644:	f000 f94a 	bl	80008dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000648:	f000 fa08 	bl	8000a5c <MX_TIM2_Init>
  MX_ADC1_Init();
 800064c:	f000 f8ba 	bl	80007c4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000650:	f000 faa8 	bl	8000ba4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000654:	f000 fa56 	bl	8000b04 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
>>>>>>> Stashed changes
	// Start timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800064c:	2100      	movs	r1, #0
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <main+0x60>)
 8000650:	f003 ffd2 	bl	80045f8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000654:	2104      	movs	r1, #4
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <main+0x60>)
 8000658:	f003 ffce 	bl	80045f8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
<<<<<<< Updated upstream
 800065c:	2100      	movs	r1, #0
 800065e:	4809      	ldr	r0, [pc, #36]	; (8000684 <main+0x64>)
 8000660:	f003 ffca 	bl	80045f8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000664:	2100      	movs	r1, #0
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <main+0x68>)
 8000668:	f004 f916 	bl	8004898 <HAL_TIM_IC_Start_IT>

	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1, samplesPerPeriod);
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <main+0x6c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	4906      	ldr	r1, [pc, #24]	; (8000690 <main+0x70>)
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <main+0x74>)
 8000678:	f003 fa26 	bl	8003ac8 <HAL_SPI_Receive_DMA>
=======
 8000658:	2100      	movs	r1, #0
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <main+0x68>)
 800065c:	f005 f900 	bl	8005860 <HAL_TIM_PWM_Start_IT>
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8000660:	2203      	movs	r2, #3
 8000662:	490a      	ldr	r1, [pc, #40]	; (800068c <main+0x6c>)
 8000664:	480a      	ldr	r0, [pc, #40]	; (8000690 <main+0x70>)
 8000666:	f006 feab 	bl	80073c0 <HAL_UART_Receive_IT>
	switchingCircuitIdle();
 800066a:	f001 f871 	bl	8001750 <switchingCircuitIdle>
	HAL_Delay(100);
 800066e:	2064      	movs	r0, #100	; 0x64
 8000670:	f001 fcbe 	bl	8001ff0 <HAL_Delay>
	runPolarizationSequence();
 8000674:	f000 ffc2 	bl	80015fc <runPolarizationSequence>
	HAL_Delay(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f001 fcb8 	bl	8001ff0 <HAL_Delay>
	switchingCircuitIdle();
 8000680:	f001 f866 	bl	8001750 <switchingCircuitIdle>
>>>>>>> Stashed changes
	//LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
<<<<<<< Updated upstream
 800067c:	e7fe      	b.n	800067c <main+0x5c>
 800067e:	bf00      	nop
 8000680:	2002b688 	.word	0x2002b688
 8000684:	200000b4 	.word	0x200000b4
 8000688:	2002b72c 	.word	0x2002b72c
 800068c:	20000000 	.word	0x20000000
 8000690:	20015e00 	.word	0x20015e00
 8000694:	2002b6c8 	.word	0x2002b6c8

08000698 <SystemClock_Config>:
=======
 8000684:	e7fe      	b.n	8000684 <main+0x64>
 8000686:	bf00      	nop
 8000688:	200000b4 	.word	0x200000b4
 800068c:	200005b8 	.word	0x200005b8
 8000690:	20000134 	.word	0x20000134

08000694 <SystemClock_Config>:
>>>>>>> Stashed changes
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< Updated upstream
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b8      	sub	sp, #224	; 0xe0
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006a2:	2234      	movs	r2, #52	; 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fcac 	bl	8007004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2290      	movs	r2, #144	; 0x90
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fc9d 	bl	8007004 <memset>
=======
 8000694:	b580      	push	{r7, lr}
 8000696:	b0b8      	sub	sp, #224	; 0xe0
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800069e:	2234      	movs	r2, #52	; 0x34
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f008 f86e 	bl	8008784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2290      	movs	r2, #144	; 0x90
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f008 f85f 	bl	8008784 <memset>
>>>>>>> Stashed changes

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
<<<<<<< Updated upstream
 80006ca:	f002 f83f 	bl	800274c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <SystemClock_Config+0x124>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <SystemClock_Config+0x124>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <SystemClock_Config+0x124>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <SystemClock_Config+0x128>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a35      	ldr	r2, [pc, #212]	; (80007c0 <SystemClock_Config+0x128>)
 80006ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <SystemClock_Config+0x128>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fe:	2301      	movs	r3, #1
 8000700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000720:	23d8      	movs	r3, #216	; 0xd8
 8000722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800072c:	2309      	movs	r3, #9
 800072e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000736:	4618      	mov	r0, r3
 8000738:	f002 f868 	bl	800280c <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000742:	f000 fce7 	bl	8001114 <Error_Handler>
=======
 80006c6:	f003 f94b 	bl	8003960 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b3b      	ldr	r3, [pc, #236]	; (80007b8 <SystemClock_Config+0x124>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <SystemClock_Config+0x124>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <SystemClock_Config+0x124>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e2:	4b36      	ldr	r3, [pc, #216]	; (80007bc <SystemClock_Config+0x128>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a35      	ldr	r2, [pc, #212]	; (80007bc <SystemClock_Config+0x128>)
 80006e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <SystemClock_Config+0x128>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fa:	2301      	movs	r3, #1
 80006fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000700:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000716:	2304      	movs	r3, #4
 8000718:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800071c:	23d8      	movs	r3, #216	; 0xd8
 800071e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000728:	2309      	movs	r3, #9
 800072a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f974 	bl	8003a20 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800073e:	f001 f831 	bl	80017a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< Updated upstream
 8000746:	f002 f811 	bl	800276c <HAL_PWREx_EnableOverDrive>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000750:	f000 fce0 	bl	8001114 <Error_Handler>
=======
 8000742:	f003 f91d 	bl	8003980 <HAL_PWREx_EnableOverDrive>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800074c:	f001 f82a 	bl	80017a4 <Error_Handler>
>>>>>>> Stashed changes
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 8000754:	230f      	movs	r3, #15
 8000756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000776:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800077a:	2107      	movs	r1, #7
 800077c:	4618      	mov	r0, r3
 800077e:	f002 faf3 	bl	8002d68 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000788:	f000 fcc4 	bl	8001114 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART3
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <SystemClock_Config+0x12c>)
 800078e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000790:	2300      	movs	r3, #0
 8000792:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800079a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800079e:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fcd7 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80007b0:	f000 fcb0 	bl	8001114 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	37e0      	adds	r7, #224	; 0xe0
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000
 80007c4:	00200110 	.word	0x00200110

080007c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_SPI1_Init+0x6c>)
 80007ce:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <MX_SPI1_Init+0x70>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_SPI1_Init+0x6c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_SPI1_Init+0x6c>)
 80007da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_SPI1_Init+0x6c>)
 80007e2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80007e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_SPI1_Init+0x6c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_SPI1_Init+0x6c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_SPI1_Init+0x6c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_SPI1_Init+0x6c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_SPI1_Init+0x6c>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_SPI1_Init+0x6c>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_SPI1_Init+0x6c>)
 800080e:	2207      	movs	r2, #7
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_SPI1_Init+0x6c>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_SPI1_Init+0x6c>)
 800081a:	2200      	movs	r2, #0
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_SPI1_Init+0x6c>)
 8000820:	f003 f8c0 	bl	80039a4 <HAL_SPI_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800082a:	f000 fc73 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2002b6c8 	.word	0x2002b6c8
 8000838:	40013000 	.word	0x40013000

0800083c <MX_TIM1_Init>:
=======
 8000750:	230f      	movs	r3, #15
 8000752:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000772:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000776:	2107      	movs	r1, #7
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fbff 	bl	8003f7c <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000784:	f001 f80e 	bl	80017a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART3
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <SystemClock_Config+0x12c>)
 800078a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8000796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800079a:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 fde3 	bl	800436c <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80007ac:	f000 fffa 	bl	80017a4 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	37e0      	adds	r7, #224	; 0xe0
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000
 80007c0:	00200110 	.word	0x00200110

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <MX_ADC1_Init+0xa0>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_ADC1_Init+0x9c>)
 8000800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_TRGO;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_ADC1_Init+0x9c>)
 8000808:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ADC1_Init+0x9c>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_ADC1_Init+0x9c>)
 8000816:	2201      	movs	r2, #1
 8000818:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ADC1_Init+0x9c>)
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_ADC1_Init+0x9c>)
 8000824:	2201      	movs	r2, #1
 8000826:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_ADC1_Init+0x9c>)
 800082a:	f001 fc03 	bl	8002034 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000834:	f000 ffb6 	bl	80017a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000840:	2301      	movs	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_ADC1_Init+0x9c>)
 800084a:	f001 fd83 	bl	8002354 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000854:	f000 ffa6 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20015e88 	.word	0x20015e88
 8000864:	40012000 	.word	0x40012000

08000868 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_SPI1_Init+0x6c>)
 800086e:	4a1a      	ldr	r2, [pc, #104]	; (80008d8 <MX_SPI1_Init+0x70>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x6c>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI1_Init+0x6c>)
 800087a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI1_Init+0x6c>)
 8000882:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000886:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI1_Init+0x6c>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI1_Init+0x6c>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI1_Init+0x6c>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI1_Init+0x6c>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI1_Init+0x6c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SPI1_Init+0x6c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI1_Init+0x6c>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SPI1_Init+0x6c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI1_Init+0x6c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_SPI1_Init+0x6c>)
 80008c0:	f004 f97a 	bl	8004bb8 <HAL_SPI_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80008ca:	f000 ff6b 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2002b7f8 	.word	0x2002b7f8
 80008d8:	40013000 	.word	0x40013000

080008dc <MX_TIM1_Init>:
>>>>>>> Stashed changes
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< Updated upstream
 800083c:	b580      	push	{r7, lr}
 800083e:	b09a      	sub	sp, #104	; 0x68
 8000840:	af00      	add	r7, sp, #0
=======
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09a      	sub	sp, #104	; 0x68
 80008e0:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< Updated upstream
 8000842:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
 800086e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	222c      	movs	r2, #44	; 0x2c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f006 fbc4 	bl	8007004 <memset>
=======
 80008e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	222c      	movs	r2, #44	; 0x2c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 ff34 	bl	8008784 <memset>
>>>>>>> Stashed changes

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< Updated upstream
 800087c:	4b4d      	ldr	r3, [pc, #308]	; (80009b4 <MX_TIM1_Init+0x178>)
 800087e:	4a4e      	ldr	r2, [pc, #312]	; (80009b8 <MX_TIM1_Init+0x17c>)
 8000880:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000882:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <MX_TIM1_Init+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b4a      	ldr	r3, [pc, #296]	; (80009b4 <MX_TIM1_Init+0x178>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 800088e:	4b49      	ldr	r3, [pc, #292]	; (80009b4 <MX_TIM1_Init+0x178>)
 8000890:	f241 3221 	movw	r2, #4897	; 0x1321
 8000894:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <MX_TIM1_Init+0x178>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800089c:	4b45      	ldr	r3, [pc, #276]	; (80009b4 <MX_TIM1_Init+0x178>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b44      	ldr	r3, [pc, #272]	; (80009b4 <MX_TIM1_Init+0x178>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008a8:	4842      	ldr	r0, [pc, #264]	; (80009b4 <MX_TIM1_Init+0x178>)
 80008aa:	f003 fe1a 	bl	80044e2 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008b4:	f000 fc2e 	bl	8001114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c2:	4619      	mov	r1, r3
 80008c4:	483b      	ldr	r0, [pc, #236]	; (80009b4 <MX_TIM1_Init+0x178>)
 80008c6:	f004 fbdf 	bl	8005088 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008d0:	f000 fc20 	bl	8001114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008d4:	4837      	ldr	r0, [pc, #220]	; (80009b4 <MX_TIM1_Init+0x178>)
 80008d6:	f003 fe5a 	bl	800458e <HAL_TIM_PWM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008e0:	f000 fc18 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008e4:	2320      	movs	r3, #32
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008f4:	4619      	mov	r1, r3
 80008f6:	482f      	ldr	r0, [pc, #188]	; (80009b4 <MX_TIM1_Init+0x178>)
 80008f8:	f005 fa94 	bl	8005e24 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000902:	f000 fc07 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000906:	2370      	movs	r3, #112	; 0x70
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 800090a:	f240 336a 	movw	r3, #874	; 0x36a
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000910:	2302      	movs	r3, #2
 8000912:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800091c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	4821      	ldr	r0, [pc, #132]	; (80009b4 <MX_TIM1_Init+0x178>)
 8000930:	f004 fa92 	bl	8004e58 <HAL_TIM_PWM_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800093a:	f000 fbeb 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093e:	2360      	movs	r3, #96	; 0x60
 8000940:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000942:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800094c:	2204      	movs	r2, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <MX_TIM1_Init+0x178>)
 8000952:	f004 fa81 	bl	8004e58 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 800095c:	f000 fbda 	bl	8001114 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_TIM1_Init+0x178>)
 8000996:	f005 fad3 	bl	8005f40 <HAL_TIMEx_ConfigBreakDeadTime>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80009a0:	f000 fbb8 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <MX_TIM1_Init+0x178>)
 80009a6:	f000 fce5 	bl	8001374 <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3768      	adds	r7, #104	; 0x68
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2002b688 	.word	0x2002b688
 80009b8:	40010000 	.word	0x40010000

080009bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <MX_TIM2_Init+0xa4>)
 80009dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_TIM2_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM2_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_TIM2_Init+0xa4>)
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_TIM2_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_TIM2_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a02:	4817      	ldr	r0, [pc, #92]	; (8000a60 <MX_TIM2_Init+0xa4>)
 8000a04:	f003 ff1c 	bl	8004840 <HAL_TIM_IC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a0e:	f000 fb81 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480f      	ldr	r0, [pc, #60]	; (8000a60 <MX_TIM2_Init+0xa4>)
 8000a22:	f005 f9ff 	bl	8005e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a2c:	f000 fb72 	bl	8001114 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_TIM2_Init+0xa4>)
 8000a48:	f004 f969 	bl	8004d1e <HAL_TIM_IC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a52:	f000 fb5f 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2002b72c 	.word	0x2002b72c

08000a64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09e      	sub	sp, #120	; 0x78
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	615a      	str	r2, [r3, #20]
 8000aa6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	222c      	movs	r2, #44	; 0x2c
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 faa8 	bl	8007004 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ab4:	4b4f      	ldr	r3, [pc, #316]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000ab6:	4a50      	ldr	r2, [pc, #320]	; (8000bf8 <MX_TIM8_Init+0x194>)
 8000ab8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000aba:	4b4e      	ldr	r3, [pc, #312]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000ac6:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000ac8:	226b      	movs	r2, #107	; 0x6b
 8000aca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b49      	ldr	r3, [pc, #292]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8000ad2:	4b48      	ldr	r3, [pc, #288]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000ad4:	2218      	movs	r2, #24
 8000ad6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b46      	ldr	r3, [pc, #280]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ade:	4845      	ldr	r0, [pc, #276]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000ae0:	f003 fcff 	bl	80044e2 <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000aea:	f000 fb13 	bl	8001114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000af4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000af8:	4619      	mov	r1, r3
 8000afa:	483e      	ldr	r0, [pc, #248]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000afc:	f004 fac4 	bl	8005088 <HAL_TIM_ConfigClockSource>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000b06:	f000 fb05 	bl	8001114 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b0a:	483a      	ldr	r0, [pc, #232]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000b0c:	f003 fd3f 	bl	800458e <HAL_TIM_PWM_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000b16:	f000 fafd 	bl	8001114 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	4835      	ldr	r0, [pc, #212]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000b1e:	f003 ff99 	bl	8004a54 <HAL_TIM_OnePulse_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000b28:	f000 faf4 	bl	8001114 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000b34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b38:	4619      	mov	r1, r3
 8000b3a:	482e      	ldr	r0, [pc, #184]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000b3c:	f004 fb5e 	bl	80051fc <HAL_TIM_SlaveConfigSynchro>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000b46:	f000 fae5 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4825      	ldr	r0, [pc, #148]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000b5e:	f005 f961 	bl	8005e24 <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000b68:	f000 fad4 	bl	8001114 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b6c:	2370      	movs	r3, #112	; 0x70
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 8000b70:	2336      	movs	r3, #54	; 0x36
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b74:	2300      	movs	r3, #0
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000b92:	f004 f961 	bl	8004e58 <HAL_TIM_PWM_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8000b9c:	f000 faba 	bl	8001114 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bc6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000bd6:	f005 f9b3 	bl	8005f40 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8000be0:	f000 fa98 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <MX_TIM8_Init+0x190>)
 8000be6:	f000 fbc5 	bl	8001374 <HAL_TIM_MspPostInit>

}
 8000bea:	bf00      	nop
 8000bec:	3778      	adds	r7, #120	; 0x78
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000b4 	.word	0x200000b4
 8000bf8:	40010400 	.word	0x40010400

08000bfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <MX_USART3_UART_Init+0x58>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <MX_USART3_UART_Init+0x5c>)
 8000c0a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c20:	220c      	movs	r2, #12
 8000c22:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_USART3_UART_Init+0x54>)
 8000c3e:	f005 fa1b 	bl	8006078 <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8000c48:	f000 fa64 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000f4 	.word	0x200000f4
 8000c54:	40004800 	.word	0x40004800
 8000c58:	001e8480 	.word	0x001e8480

08000c5c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	f001 fc0b 	bl	80024ba <HAL_PCD_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000caa:	f000 fa33 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000174 	.word	0x20000174

08000cb8 <MX_DMA_Init>:
=======
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MX_TIM1_Init+0x178>)
 800091e:	4a4e      	ldr	r2, [pc, #312]	; (8000a58 <MX_TIM1_Init+0x17c>)
 8000920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000922:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <MX_TIM1_Init+0x178>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 800092e:	4b49      	ldr	r3, [pc, #292]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000930:	f241 3221 	movw	r2, #4897	; 0x1321
 8000934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093c:	4b45      	ldr	r3, [pc, #276]	; (8000a54 <MX_TIM1_Init+0x178>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000948:	4842      	ldr	r0, [pc, #264]	; (8000a54 <MX_TIM1_Init+0x178>)
 800094a:	f004 fed4 	bl	80056f6 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000954:	f000 ff26 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800095e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000962:	4619      	mov	r1, r3
 8000964:	483b      	ldr	r0, [pc, #236]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000966:	f005 fc53 	bl	8006210 <HAL_TIM_ConfigClockSource>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000970:	f000 ff18 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000974:	4837      	ldr	r0, [pc, #220]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000976:	f004 ff3e 	bl	80057f6 <HAL_TIM_PWM_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000980:	f000 ff10 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000984:	2320      	movs	r3, #32
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000994:	4619      	mov	r1, r3
 8000996:	482f      	ldr	r0, [pc, #188]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000998:	f006 fb08 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009a2:	f000 feff 	bl	80017a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009a6:	2370      	movs	r3, #112	; 0x70
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 80009aa:	f240 336a 	movw	r3, #874	; 0x36a
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80009bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4821      	ldr	r0, [pc, #132]	; (8000a54 <MX_TIM1_Init+0x178>)
 80009d0:	f005 fb06 	bl	8005fe0 <HAL_TIM_PWM_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80009da:	f000 fee3 	bl	80017a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009de:	2360      	movs	r3, #96	; 0x60
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 80009e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ec:	2204      	movs	r2, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_TIM1_Init+0x178>)
 80009f2:	f005 faf5 	bl	8005fe0 <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80009fc:	f000 fed2 	bl	80017a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000a36:	f006 fb47 	bl	80070c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000a40:	f000 feb0 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <MX_TIM1_Init+0x178>)
 8000a46:	f001 f887 	bl	8001b58 <HAL_TIM_MspPostInit>

}
 8000a4a:	bf00      	nop
 8000a4c:	3768      	adds	r7, #104	; 0x68
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2002b7b8 	.word	0x2002b7b8
 8000a58:	40010000 	.word	0x40010000

08000a5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000a7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000aa2:	4817      	ldr	r0, [pc, #92]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000aa4:	f005 f800 	bl	8005aa8 <HAL_TIM_IC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000aae:	f000 fe79 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000ac2:	f006 fa73 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000acc:	f000 fe6a 	bl	80017a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <MX_TIM2_Init+0xa4>)
 8000ae8:	f005 f9dd 	bl	8005ea6 <HAL_TIM_IC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000af2:	f000 fe57 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2002b85c 	.word	0x2002b85c

08000b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b24:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <MX_TIM3_Init+0x9c>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50000;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 43200-1;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b38:	f64a 02bf 	movw	r2, #43199	; 0xa8bf
 8000b3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b4a:	4814      	ldr	r0, [pc, #80]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b4c:	f004 fdd3 	bl	80056f6 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000b56:	f000 fe25 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b68:	f005 fb52 	bl	8006210 <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b72:	f000 fe17 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_TIM3_Init+0x98>)
 8000b84:	f006 fa12 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b8e:	f000 fe09 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20015e44 	.word	0x20015e44
 8000ba0:	40000400 	.word	0x40000400

08000ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <MX_TIM4_Init+0x98>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4898-1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bd6:	f241 3221 	movw	r2, #4897	; 0x1321
 8000bda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000be8:	4813      	ldr	r0, [pc, #76]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bea:	f004 fd84 	bl	80056f6 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000bf4:	f000 fdd6 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000c06:	f005 fb03 	bl	8006210 <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c10:	f000 fdc8 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c14:	2320      	movs	r3, #32
 8000c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000c22:	f006 f9c3 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c2c:	f000 fdba 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200000f4 	.word	0x200000f4
 8000c3c:	40000800 	.word	0x40000800

08000c40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b09e      	sub	sp, #120	; 0x78
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	222c      	movs	r2, #44	; 0x2c
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fd7a 	bl	8008784 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c90:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000c92:	4a50      	ldr	r2, [pc, #320]	; (8000dd4 <MX_TIM8_Init+0x194>)
 8000c94:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c96:	4b4e      	ldr	r3, [pc, #312]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b4c      	ldr	r3, [pc, #304]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000ca4:	226b      	movs	r2, #107	; 0x6b
 8000ca6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b49      	ldr	r3, [pc, #292]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8000cae:	4b48      	ldr	r3, [pc, #288]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000cb0:	2218      	movs	r2, #24
 8000cb2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b46      	ldr	r3, [pc, #280]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000cba:	4845      	ldr	r0, [pc, #276]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000cbc:	f004 fd1b 	bl	80056f6 <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000cc6:	f000 fd6d 	bl	80017a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	483e      	ldr	r0, [pc, #248]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000cd8:	f005 fa9a 	bl	8006210 <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000ce2:	f000 fd5f 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ce6:	483a      	ldr	r0, [pc, #232]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000ce8:	f004 fd85 	bl	80057f6 <HAL_TIM_PWM_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000cf2:	f000 fd57 	bl	80017a4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4835      	ldr	r0, [pc, #212]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000cfa:	f004 ff6f 	bl	8005bdc <HAL_TIM_OnePulse_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000d04:	f000 fd4e 	bl	80017a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d08:	2306      	movs	r3, #6
 8000d0a:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000d10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d14:	4619      	mov	r1, r3
 8000d16:	482e      	ldr	r0, [pc, #184]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000d18:	f005 fb34 	bl	8006384 <HAL_TIM_SlaveConfigSynchro>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000d22:	f000 fd3f 	bl	80017a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d36:	4619      	mov	r1, r3
 8000d38:	4825      	ldr	r0, [pc, #148]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000d3a:	f006 f937 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000d44:	f000 fd2e 	bl	80017a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d48:	2370      	movs	r3, #112	; 0x70
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 8000d4c:	2336      	movs	r3, #54	; 0x36
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d50:	2300      	movs	r3, #0
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d54:	2300      	movs	r3, #0
 8000d56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000d6e:	f005 f937 	bl	8005fe0 <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8000d78:	f000 fd14 	bl	80017a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000da2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000db2:	f006 f989 	bl	80070c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8000dbc:	f000 fcf2 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM8_Init+0x190>)
 8000dc2:	f000 fec9 	bl	8001b58 <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3778      	adds	r7, #120	; 0x78
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000b4 	.word	0x200000b4
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000dde:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <MX_USART3_UART_Init+0x58>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <MX_USART3_UART_Init+0x5c>)
 8000de6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_USART3_UART_Init+0x54>)
 8000e1a:	f006 f9f1 	bl	8007200 <HAL_UART_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8000e24:	f000 fcbe 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000134 	.word	0x20000134
 8000e30:	40004800 	.word	0x40004800
 8000e34:	001e8480 	.word	0x001e8480

08000e38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	2206      	movs	r2, #6
 8000e48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7c:	f002 fc27 	bl	80036ce <HAL_PCD_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e86:	f000 fc8d 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001b4 	.word	0x200001b4

08000e94 <MX_DMA_Init>:
>>>>>>> Stashed changes

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
<<<<<<< Updated upstream
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
=======
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
<<<<<<< Updated upstream
 8000cbc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000cc0:	f7ff fc96 	bl	80005f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2038      	movs	r0, #56	; 0x38
 8000cca:	f000 fe6c 	bl	80019a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cce:	2038      	movs	r0, #56	; 0x38
 8000cd0:	f000 fe85 	bl	80019de <HAL_NVIC_EnableIRQ>

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <MX_GPIO_Init>:
=======
 8000e98:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e9c:	f7ff fba8 	bl	80005f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2038      	movs	r0, #56	; 0x38
 8000ea6:	f001 fdf6 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eaa:	2038      	movs	r0, #56	; 0x38
 8000eac:	f001 fe0f 	bl	8002ace <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 1, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	203c      	movs	r0, #60	; 0x3c
 8000eb6:	f001 fdee 	bl	8002a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000eba:	203c      	movs	r0, #60	; 0x3c
 8000ebc:	f001 fe07 	bl	8002ace <HAL_NVIC_EnableIRQ>

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <MX_GPIO_Init>:
>>>>>>> Stashed changes
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< Updated upstream
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a6c      	ldr	r2, [pc, #432]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b6a      	ldr	r3, [pc, #424]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a66      	ldr	r2, [pc, #408]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b64      	ldr	r3, [pc, #400]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a60      	ldr	r2, [pc, #384]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a5a      	ldr	r2, [pc, #360]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4e:	4b55      	ldr	r3, [pc, #340]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a54      	ldr	r2, [pc, #336]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b4f      	ldr	r3, [pc, #316]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <MX_GPIO_Init+0x1cc>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d9c:	4842      	ldr	r0, [pc, #264]	; (8000ea8 <MX_GPIO_Init+0x1d0>)
 8000d9e:	f001 fb59 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	4841      	ldr	r0, [pc, #260]	; (8000eac <MX_GPIO_Init+0x1d4>)
 8000da8:	f001 fb54 	bl	8002454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <MX_GPIO_Init+0x1d8>)
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	483c      	ldr	r0, [pc, #240]	; (8000eb4 <MX_GPIO_Init+0x1dc>)
 8000dc2:	f001 f99d 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc6:	2332      	movs	r3, #50	; 0x32
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd6:	230b      	movs	r3, #11
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	4834      	ldr	r0, [pc, #208]	; (8000eb4 <MX_GPIO_Init+0x1dc>)
 8000de2:	f001 f98d 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000de6:	2306      	movs	r3, #6
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df6:	230b      	movs	r3, #11
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482d      	ldr	r0, [pc, #180]	; (8000eb8 <MX_GPIO_Init+0x1e0>)
 8000e02:	f001 f97d 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e06:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4822      	ldr	r0, [pc, #136]	; (8000ea8 <MX_GPIO_Init+0x1d0>)
 8000e20:	f001 f96e 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e36:	230b      	movs	r3, #11
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4819      	ldr	r0, [pc, #100]	; (8000ea8 <MX_GPIO_Init+0x1d0>)
 8000e42:	f001 f95d 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e46:	2340      	movs	r3, #64	; 0x40
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <MX_GPIO_Init+0x1d4>)
 8000e5e:	f001 f94f 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_GPIO_Init+0x1d4>)
 8000e76:	f001 f943 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8c:	230b      	movs	r3, #11
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_GPIO_Init+0x1d4>)
 8000e98:	f001 f932 	bl	8002100 <HAL_GPIO_Init>

}
 8000e9c:	bf00      	nop
 8000e9e:	3730      	adds	r7, #48	; 0x30
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40021800 	.word	0x40021800
 8000eb0:	10110000 	.word	0x10110000
 8000eb4:	40020800 	.word	0x40020800
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	filledBuffers++;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_SPI_RxCpltCallback+0x70>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_SPI_RxCpltCallback+0x70>)
 8000ece:	701a      	strb	r2, [r3, #0]

	// observe interval of SPI receiving
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4817      	ldr	r0, [pc, #92]	; (8000f30 <HAL_SPI_RxCpltCallback+0x74>)
 8000ed4:	f001 fad7 	bl	8002486 <HAL_GPIO_TogglePin>
	// Run the measurement again

	//first buffer is filled
	if (filledBuffers == 1) {
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_SPI_RxCpltCallback+0x70>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_SPI_RxCpltCallback+0x36>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2, samplesPerPeriod);
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_SPI_RxCpltCallback+0x78>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4913      	ldr	r1, [pc, #76]	; (8000f38 <HAL_SPI_RxCpltCallback+0x7c>)
 8000eea:	4814      	ldr	r0, [pc, #80]	; (8000f3c <HAL_SPI_RxCpltCallback+0x80>)
 8000eec:	f002 fdec 	bl	8003ac8 <HAL_SPI_Receive_DMA>
=======
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	; 0x30
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	4b6f      	ldr	r3, [pc, #444]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a6e      	ldr	r2, [pc, #440]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b6c      	ldr	r3, [pc, #432]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef2:	4b69      	ldr	r3, [pc, #420]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a68      	ldr	r2, [pc, #416]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b66      	ldr	r3, [pc, #408]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a62      	ldr	r2, [pc, #392]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b60      	ldr	r3, [pc, #384]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a5c      	ldr	r2, [pc, #368]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3a:	4b57      	ldr	r3, [pc, #348]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a56      	ldr	r2, [pc, #344]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b54      	ldr	r3, [pc, #336]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0310 	and.w	r3, r3, #16
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	4b51      	ldr	r3, [pc, #324]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a50      	ldr	r2, [pc, #320]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f58:	f043 0308 	orr.w	r3, r3, #8
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6a:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b48      	ldr	r3, [pc, #288]	; (8001098 <MX_GPIO_Init+0x1d4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f88:	4844      	ldr	r0, [pc, #272]	; (800109c <MX_GPIO_Init+0x1d8>)
 8000f8a:	f002 fb6d 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	4843      	ldr	r0, [pc, #268]	; (80010a0 <MX_GPIO_Init+0x1dc>)
 8000f94:	f002 fb68 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Switches_driver_enable_Pin|S1_Pin|S2_Pin|S3_Pin 
 8000f98:	2200      	movs	r2, #0
 8000f9a:	217f      	movs	r1, #127	; 0x7f
 8000f9c:	4841      	ldr	r0, [pc, #260]	; (80010a4 <MX_GPIO_Init+0x1e0>)
 8000f9e:	f002 fb63 	bl	8003668 <HAL_GPIO_WritePin>
                          |S4_Pin|S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_GPIO_Init+0x1e4>)
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	483d      	ldr	r0, [pc, #244]	; (80010ac <MX_GPIO_Init+0x1e8>)
 8000fb8:	f002 f9ac 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fbc:	2332      	movs	r3, #50	; 0x32
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4835      	ldr	r0, [pc, #212]	; (80010ac <MX_GPIO_Init+0x1e8>)
 8000fd8:	f002 f99c 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fdc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4829      	ldr	r0, [pc, #164]	; (800109c <MX_GPIO_Init+0x1d8>)
 8000ff6:	f002 f98d 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100c:	230b      	movs	r3, #11
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4821      	ldr	r0, [pc, #132]	; (800109c <MX_GPIO_Init+0x1d8>)
 8001018:	f002 f97c 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800101c:	2340      	movs	r3, #64	; 0x40
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	481b      	ldr	r0, [pc, #108]	; (80010a0 <MX_GPIO_Init+0x1dc>)
 8001034:	f002 f96e 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <MX_GPIO_Init+0x1dc>)
 800104c:	f002 f962 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switches_driver_enable_Pin S1_Pin S2_Pin S3_Pin 
                           S4_Pin S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = Switches_driver_enable_Pin|S1_Pin|S2_Pin|S3_Pin 
 8001050:	237f      	movs	r3, #127	; 0x7f
 8001052:	61fb      	str	r3, [r7, #28]
                          |S4_Pin|S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	480f      	ldr	r0, [pc, #60]	; (80010a4 <MX_GPIO_Init+0x1e0>)
 8001068:	f002 f954 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800106c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107e:	230b      	movs	r3, #11
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_GPIO_Init+0x1dc>)
 800108a:	f002 f943 	bl	8003314 <HAL_GPIO_Init>

}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020400 	.word	0x40020400
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	10110000 	.word	0x10110000
 80010ac:	40020800 	.word	0x40020800

080010b0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 80010b8:	481d      	ldr	r0, [pc, #116]	; (8001130 <HAL_ADC_ConvCpltCallback+0x80>)
 80010ba:	f001 f8ed 	bl	8002298 <HAL_ADC_Stop_DMA>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80010be:	2101      	movs	r1, #1
 80010c0:	481c      	ldr	r0, [pc, #112]	; (8001134 <HAL_ADC_ConvCpltCallback+0x84>)
 80010c2:	f002 faea 	bl	800369a <HAL_GPIO_TogglePin>
	if (measureTechnique == 2) {
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_ADC_ConvCpltCallback+0x88>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d12c      	bne.n	8001128 <HAL_ADC_ConvCpltCallback+0x78>
		filledBuffers++;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_ADC_ConvCpltCallback+0x8c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_ADC_ConvCpltCallback+0x8c>)
 80010d8:	701a      	strb	r2, [r3, #0]
		// observe interval of SPI receiving
		// Run the measurement again

		//first buffer is filled
		if (filledBuffers == 1) {
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_ADC_ConvCpltCallback+0x8c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_ADC_ConvCpltCallback+0x42>

			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx2.uint16,
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_ADC_ConvCpltCallback+0x90>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4916      	ldr	r1, [pc, #88]	; (8001144 <HAL_ADC_ConvCpltCallback+0x94>)
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <HAL_ADC_ConvCpltCallback+0x80>)
 80010ec:	f000 ffe6 	bl	80020bc <HAL_ADC_Start_DMA>
						samplesPerPeriod);

			}
		}
	}
}
 80010f0:	e01a      	b.n	8001128 <HAL_ADC_ConvCpltCallback+0x78>
		else if (filledBuffers == 2) {
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_ADC_ConvCpltCallback+0x8c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d116      	bne.n	8001128 <HAL_ADC_ConvCpltCallback+0x78>
			filledBuffers = 0;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_ADC_ConvCpltCallback+0x8c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
			sendDataOverUART();
 8001100:	f000 f95a 	bl	80013b8 <sendDataOverUART>
			if (measureCount == 1) {
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_ADC_ConvCpltCallback+0x98>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d106      	bne.n	800111a <HAL_ADC_ConvCpltCallback+0x6a>
				measureTechnique = 0;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_ADC_ConvCpltCallback+0x88>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim4);
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <HAL_ADC_ConvCpltCallback+0x9c>)
 8001114:	f004 fb44 	bl	80057a0 <HAL_TIM_Base_Stop_IT>
}
 8001118:	e006      	b.n	8001128 <HAL_ADC_ConvCpltCallback+0x78>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_ADC_ConvCpltCallback+0x90>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	490b      	ldr	r1, [pc, #44]	; (8001150 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001122:	4803      	ldr	r0, [pc, #12]	; (8001130 <HAL_ADC_ConvCpltCallback+0x80>)
 8001124:	f000 ffca 	bl	80020bc <HAL_ADC_Start_DMA>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20015e88 	.word	0x20015e88
 8001134:	40020400 	.word	0x40020400
 8001138:	20000091 	.word	0x20000091
 800113c:	20000090 	.word	0x20000090
 8001140:	20000000 	.word	0x20000000
 8001144:	200005bc 	.word	0x200005bc
 8001148:	20000092 	.word	0x20000092
 800114c:	200000f4 	.word	0x200000f4
 8001150:	20015ed0 	.word	0x20015ed0

08001154 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a5b      	ldr	r2, [pc, #364]	; (80012d0 <HAL_UART_RxCpltCallback+0x17c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	f040 80b0 	bne.w	80012c8 <HAL_UART_RxCpltCallback+0x174>
		switch (buffer_uart_rx[0]) {
 8001168:	4b5a      	ldr	r3, [pc, #360]	; (80012d4 <HAL_UART_RxCpltCallback+0x180>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	3b30      	subs	r3, #48	; 0x30
 800116e:	2b03      	cmp	r3, #3
 8001170:	d878      	bhi.n	8001264 <HAL_UART_RxCpltCallback+0x110>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <HAL_UART_RxCpltCallback+0x24>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	08001189 	.word	0x08001189
 800117c:	080011b1 	.word	0x080011b1
 8001180:	080011f9 	.word	0x080011f9
 8001184:	08001235 	.word	0x08001235
		case '0':
			measureTechnique = 0;
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_UART_RxCpltCallback+0x184>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2101      	movs	r1, #1
 8001192:	4852      	ldr	r0, [pc, #328]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 8001194:	f002 fa68 	bl	8003668 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	484f      	ldr	r0, [pc, #316]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 800119e:	f002 fa63 	bl	8003668 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a8:	484c      	ldr	r0, [pc, #304]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 80011aa:	f002 fa5d 	bl	8003668 <HAL_GPIO_WritePin>
			break;
 80011ae:	e05d      	b.n	800126c <HAL_UART_RxCpltCallback+0x118>
		case '1':
			measureTechnique = 1;
 80011b0:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <HAL_UART_RxCpltCallback+0x184>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
			// Start SPI communication over DMA
			HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 80011b6:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <HAL_UART_RxCpltCallback+0x18c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	4949      	ldr	r1, [pc, #292]	; (80012e4 <HAL_UART_RxCpltCallback+0x190>)
 80011c0:	4849      	ldr	r0, [pc, #292]	; (80012e8 <HAL_UART_RxCpltCallback+0x194>)
 80011c2:	f003 fd8b 	bl	8004cdc <HAL_SPI_Receive_DMA>
			//turn on timers
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80011c6:	2100      	movs	r1, #0
 80011c8:	4848      	ldr	r0, [pc, #288]	; (80012ec <HAL_UART_RxCpltCallback+0x198>)
 80011ca:	f004 fb49 	bl	8005860 <HAL_TIM_PWM_Start_IT>
			HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80011ce:	2104      	movs	r1, #4
 80011d0:	4846      	ldr	r0, [pc, #280]	; (80012ec <HAL_UART_RxCpltCallback+0x198>)
 80011d2:	f004 fb45 	bl	8005860 <HAL_TIM_PWM_Start_IT>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2101      	movs	r1, #1
 80011da:	4840      	ldr	r0, [pc, #256]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 80011dc:	f002 fa44 	bl	8003668 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	483d      	ldr	r0, [pc, #244]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 80011e6:	f002 fa3f 	bl	8003668 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f0:	483a      	ldr	r0, [pc, #232]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 80011f2:	f002 fa39 	bl	8003668 <HAL_GPIO_WritePin>
			break;
 80011f6:	e039      	b.n	800126c <HAL_UART_RxCpltCallback+0x118>
		case '2':
			//start ADC
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
 80011f8:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <HAL_UART_RxCpltCallback+0x18c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4939      	ldr	r1, [pc, #228]	; (80012e4 <HAL_UART_RxCpltCallback+0x190>)
 8001200:	483b      	ldr	r0, [pc, #236]	; (80012f0 <HAL_UART_RxCpltCallback+0x19c>)
 8001202:	f000 ff5b 	bl	80020bc <HAL_ADC_Start_DMA>
					samplesPerPeriod);

			HAL_TIM_Base_Start_IT(&htim4);
 8001206:	483b      	ldr	r0, [pc, #236]	; (80012f4 <HAL_UART_RxCpltCallback+0x1a0>)
 8001208:	f004 faa0 	bl	800574c <HAL_TIM_Base_Start_IT>
			measureTechnique = 2;
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <HAL_UART_RxCpltCallback+0x184>)
 800120e:	2202      	movs	r2, #2
 8001210:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2101      	movs	r1, #1
 8001216:	4831      	ldr	r0, [pc, #196]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 8001218:	f002 fa26 	bl	8003668 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	482e      	ldr	r0, [pc, #184]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 8001222:	f002 fa21 	bl	8003668 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122c:	482b      	ldr	r0, [pc, #172]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 800122e:	f002 fa1b 	bl	8003668 <HAL_GPIO_WritePin>
			break;
 8001232:	e01b      	b.n	800126c <HAL_UART_RxCpltCallback+0x118>
		case '3':
			measureTechnique = 3;
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <HAL_UART_RxCpltCallback+0x184>)
 8001236:	2203      	movs	r2, #3
 8001238:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800123a:	2100      	movs	r1, #0
 800123c:	482e      	ldr	r0, [pc, #184]	; (80012f8 <HAL_UART_RxCpltCallback+0x1a4>)
 800123e:	f004 fc5f 	bl	8005b00 <HAL_TIM_IC_Start_IT>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2101      	movs	r1, #1
 8001246:	4825      	ldr	r0, [pc, #148]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 8001248:	f002 fa0e 	bl	8003668 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	4822      	ldr	r0, [pc, #136]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 8001252:	f002 fa09 	bl	8003668 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001256:	2201      	movs	r2, #1
 8001258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125c:	481f      	ldr	r0, [pc, #124]	; (80012dc <HAL_UART_RxCpltCallback+0x188>)
 800125e:	f002 fa03 	bl	8003668 <HAL_GPIO_WritePin>
			break;
 8001262:	e003      	b.n	800126c <HAL_UART_RxCpltCallback+0x118>
		default:
			measureTechnique = 0;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_UART_RxCpltCallback+0x184>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
			break;
 800126a:	bf00      	nop
		}
		switch (buffer_uart_rx[1]) {
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_UART_RxCpltCallback+0x180>)
 800126e:	785b      	ldrb	r3, [r3, #1]
 8001270:	2b30      	cmp	r3, #48	; 0x30
 8001272:	d002      	beq.n	800127a <HAL_UART_RxCpltCallback+0x126>
 8001274:	2b31      	cmp	r3, #49	; 0x31
 8001276:	d004      	beq.n	8001282 <HAL_UART_RxCpltCallback+0x12e>
 8001278:	e007      	b.n	800128a <HAL_UART_RxCpltCallback+0x136>
		case '0':
			measureCount = 0;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_UART_RxCpltCallback+0x1a8>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
			break;
 8001280:	e007      	b.n	8001292 <HAL_UART_RxCpltCallback+0x13e>
		case '1':
			measureCount = 1;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_UART_RxCpltCallback+0x1a8>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
			break;
 8001288:	e003      	b.n	8001292 <HAL_UART_RxCpltCallback+0x13e>
		default:
			measureCount = 1;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_UART_RxCpltCallback+0x1a8>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
			break;
 8001290:	bf00      	nop
		}
		char msg_buffer[18];
		sprintf(msg_buffer, "Mode %u selected\n\r", measureTechnique);
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_UART_RxCpltCallback+0x184>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4918      	ldr	r1, [pc, #96]	; (8001300 <HAL_UART_RxCpltCallback+0x1ac>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f007 fa78 	bl	8008794 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffer, strlen(msg_buffer),
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7fe ffc9 	bl	8000240 <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	f107 010c 	add.w	r1, r7, #12
 80012b6:	230a      	movs	r3, #10
 80012b8:	4812      	ldr	r0, [pc, #72]	; (8001304 <HAL_UART_RxCpltCallback+0x1b0>)
 80012ba:	f005 ffef 	bl	800729c <HAL_UART_Transmit>
				10);
		//wait for next incomming data
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 80012be:	2203      	movs	r2, #3
 80012c0:	4904      	ldr	r1, [pc, #16]	; (80012d4 <HAL_UART_RxCpltCallback+0x180>)
 80012c2:	4810      	ldr	r0, [pc, #64]	; (8001304 <HAL_UART_RxCpltCallback+0x1b0>)
 80012c4:	f006 f87c 	bl	80073c0 <HAL_UART_Receive_IT>
	}
}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40004800 	.word	0x40004800
 80012d4:	200005b8 	.word	0x200005b8
 80012d8:	20000091 	.word	0x20000091
 80012dc:	40020400 	.word	0x40020400
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20015ed0 	.word	0x20015ed0
 80012e8:	2002b7f8 	.word	0x2002b7f8
 80012ec:	2002b7b8 	.word	0x2002b7b8
 80012f0:	20015e88 	.word	0x20015e88
 80012f4:	200000f4 	.word	0x200000f4
 80012f8:	2002b85c 	.word	0x2002b85c
 80012fc:	20000092 	.word	0x20000092
 8001300:	08008fb8 	.word	0x08008fb8
 8001304:	20000134 	.word	0x20000134

08001308 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if (measureTechnique == 1) {
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_SPI_RxCpltCallback+0x90>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d13b      	bne.n	8001390 <HAL_SPI_RxCpltCallback+0x88>
		filledBuffers++;
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_SPI_RxCpltCallback+0x94>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_SPI_RxCpltCallback+0x94>)
 8001322:	701a      	strb	r2, [r3, #0]
		// observe interval of SPI receiving
		// Run the measurement again

		//first buffer is filled
		if (filledBuffers == 1) {
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_SPI_RxCpltCallback+0x94>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d108      	bne.n	800133e <HAL_SPI_RxCpltCallback+0x36>
			HAL_SPI_Receive_DMA(&hspi1, buffer_rx2.uint8, samplesPerPeriod);
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_SPI_RxCpltCallback+0x98>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	491b      	ldr	r1, [pc, #108]	; (80013a4 <HAL_SPI_RxCpltCallback+0x9c>)
 8001336:	481c      	ldr	r0, [pc, #112]	; (80013a8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001338:	f003 fcd0 	bl	8004cdc <HAL_SPI_Receive_DMA>
>>>>>>> Stashed changes
	 samplesPerPeriod++;
	 sprintf(msg_buffers, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);

	 }*/
}
<<<<<<< Updated upstream
 8000ef0:	e017      	b.n	8000f22 <HAL_SPI_RxCpltCallback+0x66>
	else if (filledBuffers == 2) {
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_SPI_RxCpltCallback+0x70>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d113      	bne.n	8000f22 <HAL_SPI_RxCpltCallback+0x66>
		HAL_TIM_Base_Stop(&htim1);
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <HAL_SPI_RxCpltCallback+0x84>)
 8000efc:	f003 fb1c 	bl	8004538 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f00:	2100      	movs	r1, #0
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <HAL_SPI_RxCpltCallback+0x84>)
 8000f04:	f003 fc02 	bl	800470c <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8000f08:	2104      	movs	r1, #4
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <HAL_SPI_RxCpltCallback+0x84>)
 8000f0c:	f003 fbfe 	bl	800470c <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000f10:	2100      	movs	r1, #0
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <HAL_SPI_RxCpltCallback+0x88>)
 8000f14:	f003 fd2e 	bl	8004974 <HAL_TIM_IC_Stop_IT>
		filledBuffers = 0;
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_SPI_RxCpltCallback+0x70>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8000f1e:	f000 f813 	bl	8000f48 <sendDataOverUART>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000090 	.word	0x20000090
 8000f30:	40020400 	.word	0x40020400
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000578 	.word	0x20000578
 8000f3c:	2002b6c8 	.word	0x2002b6c8
 8000f40:	2002b688 	.word	0x2002b688
 8000f44:	2002b72c 	.word	0x2002b72c

08000f48 <sendDataOverUART>:

void sendDataOverUART() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	847b      	strh	r3, [r7, #34]	; 0x22
	int i = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
	//send frequency
	sprintf(msg_freq, "%d\n", frequency);
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <sendDataOverUART+0x104>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	493c      	ldr	r1, [pc, #240]	; (8001050 <sendDataOverUART+0x108>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f006 f857 	bl	8007014 <siprintf>
	//HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);

	// first buffer
	for (i = 0; i < samplesPerPeriod; i++) {
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	e025      	b.n	8000fb8 <sendDataOverUART+0x70>
		adc = (uint16_t) (buffer_rx1[i]) + (uint16_t) (256*buffer_rx1[i+1]);
 8000f6c:	4a39      	ldr	r2, [pc, #228]	; (8001054 <sendDataOverUART+0x10c>)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4936      	ldr	r1, [pc, #216]	; (8001054 <sendDataOverUART+0x10c>)
 8000f7c:	5ccb      	ldrb	r3, [r1, r3]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4413      	add	r3, r2
 8000f86:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(msg_buffers, "%hu\n", adc);
 8000f88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4932      	ldr	r1, [pc, #200]	; (8001058 <sendDataOverUART+0x110>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 f840 	bl	8007014 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000f94:	463b      	mov	r3, r7
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f952 	bl	8000240 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4639      	mov	r1, r7
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	482d      	ldr	r0, [pc, #180]	; (800105c <sendDataOverUART+0x114>)
 8000fa8:	f005 f8b4 	bl	8006114 <HAL_UART_Transmit>
		i++;
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	3301      	adds	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < samplesPerPeriod; i++) {
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fba:	4b29      	ldr	r3, [pc, #164]	; (8001060 <sendDataOverUART+0x118>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3d4      	bcc.n	8000f6c <sendDataOverUART+0x24>
	}
	//second buffer
	for (i = 0; i < samplesPerPeriod; i++) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc6:	e025      	b.n	8001014 <sendDataOverUART+0xcc>
		adc = (uint16_t) (buffer_rx2[i]) + (uint16_t) (256*buffer_rx2[i+1]);
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <sendDataOverUART+0x11c>)
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4923      	ldr	r1, [pc, #140]	; (8001064 <sendDataOverUART+0x11c>)
 8000fd8:	5ccb      	ldrb	r3, [r1, r3]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(msg_buffers, "%hu\n", adc);
 8000fe4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	491b      	ldr	r1, [pc, #108]	; (8001058 <sendDataOverUART+0x110>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 f812 	bl	8007014 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f924 	bl	8000240 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4639      	mov	r1, r7
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	4816      	ldr	r0, [pc, #88]	; (800105c <sendDataOverUART+0x114>)
 8001004:	f005 f886 	bl	8006114 <HAL_UART_Transmit>
		i++;
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	3301      	adds	r3, #1
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < samplesPerPeriod; i++) {
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3301      	adds	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
 8001014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <sendDataOverUART+0x118>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d3d4      	bcc.n	8000fc8 <sendDataOverUART+0x80>
=======
 800133c:	e028      	b.n	8001390 <HAL_SPI_RxCpltCallback+0x88>
		else if (filledBuffers == 2) {
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_SPI_RxCpltCallback+0x94>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d124      	bne.n	8001390 <HAL_SPI_RxCpltCallback+0x88>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001346:	2100      	movs	r1, #0
 8001348:	4818      	ldr	r0, [pc, #96]	; (80013ac <HAL_SPI_RxCpltCallback+0xa4>)
 800134a:	f004 fb13 	bl	8005974 <HAL_TIM_PWM_Stop_IT>
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 800134e:	2104      	movs	r1, #4
 8001350:	4816      	ldr	r0, [pc, #88]	; (80013ac <HAL_SPI_RxCpltCallback+0xa4>)
 8001352:	f004 fb0f 	bl	8005974 <HAL_TIM_PWM_Stop_IT>
			filledBuffers = 0;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_SPI_RxCpltCallback+0x94>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
			sendDataOverUART();
 800135c:	f000 f82c 	bl	80013b8 <sendDataOverUART>
			if (measureCount == 1) {
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d103      	bne.n	8001370 <HAL_SPI_RxCpltCallback+0x68>
				measureTechnique = 0;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_SPI_RxCpltCallback+0x90>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
}
 800136e:	e00f      	b.n	8001390 <HAL_SPI_RxCpltCallback+0x88>
				HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_SPI_RxCpltCallback+0x98>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	490e      	ldr	r1, [pc, #56]	; (80013b4 <HAL_SPI_RxCpltCallback+0xac>)
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_SPI_RxCpltCallback+0xa0>)
 800137c:	f003 fcae 	bl	8004cdc <HAL_SPI_Receive_DMA>
				HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001380:	2100      	movs	r1, #0
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <HAL_SPI_RxCpltCallback+0xa4>)
 8001384:	f004 fa6c 	bl	8005860 <HAL_TIM_PWM_Start_IT>
				HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8001388:	2104      	movs	r1, #4
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <HAL_SPI_RxCpltCallback+0xa4>)
 800138c:	f004 fa68 	bl	8005860 <HAL_TIM_PWM_Start_IT>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000091 	.word	0x20000091
 800139c:	20000090 	.word	0x20000090
 80013a0:	20000000 	.word	0x20000000
 80013a4:	200005bc 	.word	0x200005bc
 80013a8:	2002b7f8 	.word	0x2002b7f8
 80013ac:	2002b7b8 	.word	0x2002b7b8
 80013b0:	20000092 	.word	0x20000092
 80013b4:	20015ed0 	.word	0x20015ed0

080013b8 <sendDataOverUART>:

void sendDataOverUART() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	847b      	strh	r3, [r7, #34]	; 0x22
	int i = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
	if (measureTechnique == 1 || measureTechnique == 2) {
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <sendDataOverUART+0x138>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d003      	beq.n	80013d6 <sendDataOverUART+0x1e>
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <sendDataOverUART+0x138>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d16e      	bne.n	80014b4 <sendDataOverUART+0xfc>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
 80013da:	e025      	b.n	8001428 <sendDataOverUART+0x70>
			adc = (uint16_t) (buffer_rx1.uint8[i])
 80013dc:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <sendDataOverUART+0x13c>)
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx1.uint8[i + 1]);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	4942      	ldr	r1, [pc, #264]	; (80014f4 <sendDataOverUART+0x13c>)
 80013ec:	5ccb      	ldrb	r3, [r1, r3]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx1.uint8[i])
 80013f4:	4413      	add	r3, r2
 80013f6:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 80013f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013fa:	463b      	mov	r3, r7
 80013fc:	493e      	ldr	r1, [pc, #248]	; (80014f8 <sendDataOverUART+0x140>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 f9c8 	bl	8008794 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001404:	463b      	mov	r3, r7
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff1a 	bl	8000240 <strlen>
 800140c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800140e:	b29a      	uxth	r2, r3
 8001410:	4639      	mov	r1, r7
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	4839      	ldr	r0, [pc, #228]	; (80014fc <sendDataOverUART+0x144>)
 8001418:	f005 ff40 	bl	800729c <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3301      	adds	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	3301      	adds	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
 8001428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142a:	4b35      	ldr	r3, [pc, #212]	; (8001500 <sendDataOverUART+0x148>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d3d4      	bcc.n	80013dc <sendDataOverUART+0x24>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	e025      	b.n	8001484 <sendDataOverUART+0xcc>
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001438:	4a32      	ldr	r2, [pc, #200]	; (8001504 <sendDataOverUART+0x14c>)
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx2.uint8[i + 1]);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	492f      	ldr	r1, [pc, #188]	; (8001504 <sendDataOverUART+0x14c>)
 8001448:	5ccb      	ldrb	r3, [r1, r3]
 800144a:	b29b      	uxth	r3, r3
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001450:	4413      	add	r3, r2
 8001452:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 8001454:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001456:	463b      	mov	r3, r7
 8001458:	4927      	ldr	r1, [pc, #156]	; (80014f8 <sendDataOverUART+0x140>)
 800145a:	4618      	mov	r0, r3
 800145c:	f007 f99a 	bl	8008794 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001460:	463b      	mov	r3, r7
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe feec 	bl	8000240 <strlen>
 8001468:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800146a:	b29a      	uxth	r2, r3
 800146c:	4639      	mov	r1, r7
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	4822      	ldr	r0, [pc, #136]	; (80014fc <sendDataOverUART+0x144>)
 8001474:	f005 ff12 	bl	800729c <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	3301      	adds	r3, #1
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <sendDataOverUART+0x148>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3d4      	bcc.n	8001438 <sendDataOverUART+0x80>
		}
		sprintf(msg_buffers, ";%hu\n", 50);
 800148e:	463b      	mov	r3, r7
 8001490:	2232      	movs	r2, #50	; 0x32
 8001492:	491d      	ldr	r1, [pc, #116]	; (8001508 <sendDataOverUART+0x150>)
 8001494:	4618      	mov	r0, r3
 8001496:	f007 f97d 	bl	8008794 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800149a:	463b      	mov	r3, r7
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe fecf 	bl	8000240 <strlen>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4639      	mov	r1, r7
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <sendDataOverUART+0x144>)
 80014ae:	f005 fef5 	bl	800729c <HAL_UART_Transmit>
		sprintf(msg_freq, "%d\n", frequency);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
		HAL_MAX_DELAY);
>>>>>>> Stashed changes
	}
	sprintf(msg_buffers, ";%hu\n", 50);
 800101e:	463b      	mov	r3, r7
 8001020:	2232      	movs	r2, #50	; 0x32
 8001022:	4911      	ldr	r1, [pc, #68]	; (8001068 <sendDataOverUART+0x120>)
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fff5 	bl	8007014 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800102a:	463b      	mov	r3, r7
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f907 	bl	8000240 <strlen>
 8001032:	4603      	mov	r3, r0
 8001034:	b29a      	uxth	r2, r3
 8001036:	4639      	mov	r1, r7
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <sendDataOverUART+0x114>)
 800103e:	f005 f869 	bl	8006114 <HAL_UART_Transmit>


}
<<<<<<< Updated upstream
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200000a0 	.word	0x200000a0
 8001050:	08007838 	.word	0x08007838
 8001054:	20015e00 	.word	0x20015e00
 8001058:	0800783c 	.word	0x0800783c
 800105c:	200000f4 	.word	0x200000f4
 8001060:	20000000 	.word	0x20000000
 8001064:	20000578 	.word	0x20000578
 8001068:	08007844 	.word	0x08007844

0800106c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_TIM_IC_CaptureCallback>:
=======
 80014b2:	e019      	b.n	80014e8 <sendDataOverUART+0x130>
	} else if (measureTechnique == 3) {
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <sendDataOverUART+0x138>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d115      	bne.n	80014e8 <sendDataOverUART+0x130>
		sprintf(msg_freq, "%d\n", frequency);
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <sendDataOverUART+0x154>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4912      	ldr	r1, [pc, #72]	; (8001510 <sendDataOverUART+0x158>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f007 f964 	bl	8008794 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe feb5 	bl	8000240 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f107 0110 	add.w	r1, r7, #16
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	4806      	ldr	r0, [pc, #24]	; (80014fc <sendDataOverUART+0x144>)
 80014e4:	f005 feda 	bl	800729c <HAL_UART_Transmit>
}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000091 	.word	0x20000091
 80014f4:	20015ed0 	.word	0x20015ed0
 80014f8:	08008fcc 	.word	0x08008fcc
 80014fc:	20000134 	.word	0x20000134
 8001500:	20000000 	.word	0x20000000
 8001504:	200005bc 	.word	0x200005bc
 8001508:	08008fd4 	.word	0x08008fd4
 800150c:	200000a0 	.word	0x200000a0
 8001510:	08008fdc 	.word	0x08008fdc

08001514 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d103      	bne.n	800152e <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001526:	2101      	movs	r1, #1
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800152a:	f002 f8b6 	bl	800369a <HAL_GPIO_TogglePin>
	}

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40000800 	.word	0x40000800
 800153c:	40020400 	.word	0x40020400

08001540 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> Stashed changes
	LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_0);
	NVIC_SetPriority(DMA2_Stream0_IRQn, 0);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
<<<<<<< Updated upstream
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001090:	d130      	bne.n	80010f4 <HAL_TIM_IC_CaptureCallback+0x74>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001092:	2101      	movs	r1, #1
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001096:	f001 f9f6 	bl	8002486 <HAL_GPIO_TogglePin>
		if (firstCapturedSample == 0) {
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x80>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10a      	bne.n	80010b8 <HAL_TIM_IC_CaptureCallback+0x38>
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010a2:	2100      	movs	r1, #0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f004 f8eb 	bl	8005280 <HAL_TIM_ReadCapturedValue>
 80010aa:	4602      	mov	r2, r0
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_TIM_IC_CaptureCallback+0x84>)
 80010ae:	601a      	str	r2, [r3, #0]
			firstCapturedSample = 1;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x80>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
			difference = IC_Value2 - IC_Value1;
			frequency = HAL_RCC_GetHCLKFreq() / difference;
			firstCapturedSample = 0;
		}
	}
}
 80010b6:	e01d      	b.n	80010f4 <HAL_TIM_IC_CaptureCallback+0x74>
		else if (firstCapturedSample) {
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x80>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d019      	beq.n	80010f4 <HAL_TIM_IC_CaptureCallback+0x74>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010c0:	2100      	movs	r1, #0
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f004 f8dc 	bl	8005280 <HAL_TIM_ReadCapturedValue>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_TIM_IC_CaptureCallback+0x88>)
 80010cc:	601a      	str	r2, [r3, #0]
			difference = IC_Value2 - IC_Value1;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_TIM_IC_CaptureCallback+0x88>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_TIM_IC_CaptureCallback+0x84>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80010da:	6013      	str	r3, [r2, #0]
			frequency = HAL_RCC_GetHCLKFreq() / difference;
 80010dc:	f002 f808 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_TIM_IC_CaptureCallback+0x8c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <HAL_TIM_IC_CaptureCallback+0x90>)
 80010ec:	6013      	str	r3, [r2, #0]
			firstCapturedSample = 0;
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_TIM_IC_CaptureCallback+0x80>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40020400 	.word	0x40020400
 8001100:	200000a4 	.word	0x200000a4
 8001104:	20000094 	.word	0x20000094
 8001108:	20000098 	.word	0x20000098
 800110c:	2000009c 	.word	0x2000009c
 8001110:	200000a0 	.word	0x200000a0

08001114 <Error_Handler>:
=======
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001550:	d106      	bne.n	8001560 <HAL_TIM_IC_CaptureCallback+0x20>
		if (measureTechnique == 3) {
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_TIM_IC_CaptureCallback+0x28>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d102      	bne.n	8001560 <HAL_TIM_IC_CaptureCallback+0x20>
			measureFrequencyWithTimer(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f806 	bl	800156c <measureFrequencyWithTimer>
	// period  100 ms
	if (htim->Instance == TIM4) {

	}

}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000091 	.word	0x20000091

0800156c <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	if (firstCapturedSample == 0) {
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <measureFrequencyWithTimer+0x74>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10a      	bne.n	8001592 <measureFrequencyWithTimer+0x26>
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800157c:	2100      	movs	r1, #0
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f004 ff42 	bl	8006408 <HAL_TIM_ReadCapturedValue>
 8001584:	4602      	mov	r2, r0
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <measureFrequencyWithTimer+0x78>)
 8001588:	601a      	str	r2, [r3, #0]
		firstCapturedSample = 1;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <measureFrequencyWithTimer+0x74>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
		//if freq should be measured only once, after the measurement, go to idle state
		if (measureCount == 1) {
			measureTechnique = 0;
		}
	}
}
 8001590:	e021      	b.n	80015d6 <measureFrequencyWithTimer+0x6a>
	else if (firstCapturedSample) {
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <measureFrequencyWithTimer+0x74>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01d      	beq.n	80015d6 <measureFrequencyWithTimer+0x6a>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800159a:	2100      	movs	r1, #0
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f004 ff33 	bl	8006408 <HAL_TIM_ReadCapturedValue>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <measureFrequencyWithTimer+0x7c>)
 80015a6:	601a      	str	r2, [r3, #0]
		difference = IC_Value2 - IC_Value1;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <measureFrequencyWithTimer+0x7c>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <measureFrequencyWithTimer+0x78>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <measureFrequencyWithTimer+0x80>)
 80015b4:	6013      	str	r3, [r2, #0]
		frequency = /*HAL_RCC_GetHCLKFreq() /*/ difference;
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <measureFrequencyWithTimer+0x80>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <measureFrequencyWithTimer+0x84>)
 80015bc:	6013      	str	r3, [r2, #0]
		firstCapturedSample = 0;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <measureFrequencyWithTimer+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 80015c4:	f7ff fef8 	bl	80013b8 <sendDataOverUART>
		if (measureCount == 1) {
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <measureFrequencyWithTimer+0x88>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d102      	bne.n	80015d6 <measureFrequencyWithTimer+0x6a>
			measureTechnique = 0;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <measureFrequencyWithTimer+0x8c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000a4 	.word	0x200000a4
 80015e4:	20000094 	.word	0x20000094
 80015e8:	20000098 	.word	0x20000098
 80015ec:	2000009c 	.word	0x2000009c
 80015f0:	200000a0 	.word	0x200000a0
 80015f4:	20000092 	.word	0x20000092
 80015f8:	20000091 	.word	0x20000091

080015fc <runPolarizationSequence>:

void runPolarizationSequence(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	2102      	movs	r1, #2
 8001604:	4851      	ldr	r0, [pc, #324]	; (800174c <runPolarizationSequence+0x150>)
 8001606:	f002 f82f 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2104      	movs	r1, #4
 800160e:	484f      	ldr	r0, [pc, #316]	; (800174c <runPolarizationSequence+0x150>)
 8001610:	f002 f82a 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001614:	2201      	movs	r2, #1
 8001616:	2108      	movs	r1, #8
 8001618:	484c      	ldr	r0, [pc, #304]	; (800174c <runPolarizationSequence+0x150>)
 800161a:	f002 f825 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2110      	movs	r1, #16
 8001622:	484a      	ldr	r0, [pc, #296]	; (800174c <runPolarizationSequence+0x150>)
 8001624:	f002 f820 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2120      	movs	r1, #32
 800162c:	4847      	ldr	r0, [pc, #284]	; (800174c <runPolarizationSequence+0x150>)
 800162e:	f002 f81b 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	4845      	ldr	r0, [pc, #276]	; (800174c <runPolarizationSequence+0x150>)
 8001638:	f002 f816 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800163c:	2005      	movs	r0, #5
 800163e:	f000 fcd7 	bl	8001ff0 <HAL_Delay>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2102      	movs	r1, #2
 8001646:	4841      	ldr	r0, [pc, #260]	; (800174c <runPolarizationSequence+0x150>)
 8001648:	f002 f80e 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2104      	movs	r1, #4
 8001650:	483e      	ldr	r0, [pc, #248]	; (800174c <runPolarizationSequence+0x150>)
 8001652:	f002 f809 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	2108      	movs	r1, #8
 800165a:	483c      	ldr	r0, [pc, #240]	; (800174c <runPolarizationSequence+0x150>)
 800165c:	f002 f804 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001660:	2201      	movs	r2, #1
 8001662:	2110      	movs	r1, #16
 8001664:	4839      	ldr	r0, [pc, #228]	; (800174c <runPolarizationSequence+0x150>)
 8001666:	f001 ffff 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2120      	movs	r1, #32
 800166e:	4837      	ldr	r0, [pc, #220]	; (800174c <runPolarizationSequence+0x150>)
 8001670:	f001 fffa 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001674:	2201      	movs	r2, #1
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	4834      	ldr	r0, [pc, #208]	; (800174c <runPolarizationSequence+0x150>)
 800167a:	f001 fff5 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800167e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001682:	f000 fcb5 	bl	8001ff0 <HAL_Delay>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2102      	movs	r1, #2
 800168a:	4830      	ldr	r0, [pc, #192]	; (800174c <runPolarizationSequence+0x150>)
 800168c:	f001 ffec 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2104      	movs	r1, #4
 8001694:	482d      	ldr	r0, [pc, #180]	; (800174c <runPolarizationSequence+0x150>)
 8001696:	f001 ffe7 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	2108      	movs	r1, #8
 800169e:	482b      	ldr	r0, [pc, #172]	; (800174c <runPolarizationSequence+0x150>)
 80016a0:	f001 ffe2 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2110      	movs	r1, #16
 80016a8:	4828      	ldr	r0, [pc, #160]	; (800174c <runPolarizationSequence+0x150>)
 80016aa:	f001 ffdd 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016ae:	2201      	movs	r2, #1
 80016b0:	2120      	movs	r1, #32
 80016b2:	4826      	ldr	r0, [pc, #152]	; (800174c <runPolarizationSequence+0x150>)
 80016b4:	f001 ffd8 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2140      	movs	r1, #64	; 0x40
 80016bc:	4823      	ldr	r0, [pc, #140]	; (800174c <runPolarizationSequence+0x150>)
 80016be:	f001 ffd3 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016c2:	200a      	movs	r0, #10
 80016c4:	f000 fc94 	bl	8001ff0 <HAL_Delay>

	//run sequnece T5 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80016c8:	2201      	movs	r2, #1
 80016ca:	2102      	movs	r1, #2
 80016cc:	481f      	ldr	r0, [pc, #124]	; (800174c <runPolarizationSequence+0x150>)
 80016ce:	f001 ffcb 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	481d      	ldr	r0, [pc, #116]	; (800174c <runPolarizationSequence+0x150>)
 80016d8:	f001 ffc6 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	2108      	movs	r1, #8
 80016e0:	481a      	ldr	r0, [pc, #104]	; (800174c <runPolarizationSequence+0x150>)
 80016e2:	f001 ffc1 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2110      	movs	r1, #16
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <runPolarizationSequence+0x150>)
 80016ec:	f001 ffbc 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2120      	movs	r1, #32
 80016f4:	4815      	ldr	r0, [pc, #84]	; (800174c <runPolarizationSequence+0x150>)
 80016f6:	f001 ffb7 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <runPolarizationSequence+0x150>)
 8001700:	f001 ffb2 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001704:	2005      	movs	r0, #5
 8001706:	f000 fc73 	bl	8001ff0 <HAL_Delay>

	//run sequnece T6 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 800170a:	2201      	movs	r2, #1
 800170c:	2102      	movs	r1, #2
 800170e:	480f      	ldr	r0, [pc, #60]	; (800174c <runPolarizationSequence+0x150>)
 8001710:	f001 ffaa 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	2104      	movs	r1, #4
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <runPolarizationSequence+0x150>)
 800171a:	f001 ffa5 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2108      	movs	r1, #8
 8001722:	480a      	ldr	r0, [pc, #40]	; (800174c <runPolarizationSequence+0x150>)
 8001724:	f001 ffa0 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	2110      	movs	r1, #16
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <runPolarizationSequence+0x150>)
 800172e:	f001 ff9b 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2120      	movs	r1, #32
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <runPolarizationSequence+0x150>)
 8001738:	f001 ff96 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800173c:	2201      	movs	r2, #1
 800173e:	2140      	movs	r1, #64	; 0x40
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <runPolarizationSequence+0x150>)
 8001742:	f001 ff91 	bl	8003668 <HAL_GPIO_WritePin>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40020c00 	.word	0x40020c00

08001750 <switchingCircuitIdle>:


void switchingCircuitIdle(){
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port, Switches_driver_enable_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2101      	movs	r1, #1
 8001758:	4811      	ldr	r0, [pc, #68]	; (80017a0 <switchingCircuitIdle+0x50>)
 800175a:	f001 ff85 	bl	8003668 <HAL_GPIO_WritePin>
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2102      	movs	r1, #2
 8001762:	480f      	ldr	r0, [pc, #60]	; (80017a0 <switchingCircuitIdle+0x50>)
 8001764:	f001 ff80 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2104      	movs	r1, #4
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <switchingCircuitIdle+0x50>)
 800176e:	f001 ff7b 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2108      	movs	r1, #8
 8001776:	480a      	ldr	r0, [pc, #40]	; (80017a0 <switchingCircuitIdle+0x50>)
 8001778:	f001 ff76 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2110      	movs	r1, #16
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <switchingCircuitIdle+0x50>)
 8001782:	f001 ff71 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2120      	movs	r1, #32
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <switchingCircuitIdle+0x50>)
 800178c:	f001 ff6c 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2140      	movs	r1, #64	; 0x40
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <switchingCircuitIdle+0x50>)
 8001796:	f001 ff67 	bl	8003668 <HAL_GPIO_WritePin>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40020c00 	.word	0x40020c00

080017a4 <Error_Handler>:
>>>>>>> Stashed changes
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< Updated upstream
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
=======
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< Updated upstream
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_MspInit>:
=======
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <HAL_MspInit>:
>>>>>>> Stashed changes
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
=======
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x44>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_MspInit+0x44>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x44>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x44>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x44>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x44>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
=======
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_MspInit+0x44>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_MspInit+0x44>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_MspInit+0x44>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_MspInit+0x44>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_MspInit+0x44>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_MspInit+0x44>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_SPI_MspInit>:
=======
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2c      	ldr	r2, [pc, #176]	; (80018cc <HAL_ADC_MspInit+0xd0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d152      	bne.n	80018c4 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_ADC_MspInit+0xd4>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a2b      	ldr	r2, [pc, #172]	; (80018d0 <HAL_ADC_MspInit+0xd4>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <HAL_ADC_MspInit+0xd4>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_ADC_MspInit+0xd4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <HAL_ADC_MspInit+0xd4>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_ADC_MspInit+0xd4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184e:	2301      	movs	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001852:	2303      	movs	r3, #3
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	481c      	ldr	r0, [pc, #112]	; (80018d4 <HAL_ADC_MspInit+0xd8>)
 8001862:	f001 fd57 	bl	8003314 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001868:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_ADC_MspInit+0xe0>)
 800186a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001872:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001884:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800188c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001894:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018a8:	480b      	ldr	r0, [pc, #44]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 80018aa:	f001 f92b 	bl	8002b04 <HAL_DMA_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80018b4:	f7ff ff76 	bl	80017a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_ADC_MspInit+0xdc>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40012000 	.word	0x40012000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	2002b758 	.word	0x2002b758
 80018dc:	40026470 	.word	0x40026470

080018e0 <HAL_SPI_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< Updated upstream
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_SPI_MspInit+0xdc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d157      	bne.n	800123e <HAL_SPI_MspInit+0xd2>
=======
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2f      	ldr	r2, [pc, #188]	; (80019bc <HAL_SPI_MspInit+0xdc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d157      	bne.n	80019b2 <HAL_SPI_MspInit+0xd2>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< Updated upstream
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_SPI_MspInit+0xe0>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a2e      	ldr	r2, [pc, #184]	; (800124c <HAL_SPI_MspInit+0xe0>)
 8001194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <HAL_SPI_MspInit+0xe0>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_SPI_MspInit+0xe0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_SPI_MspInit+0xe0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_SPI_MspInit+0xe0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
=======
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_SPI_MspInit+0xe0>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <HAL_SPI_MspInit+0xe0>)
 8001908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <HAL_SPI_MspInit+0xe0>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <HAL_SPI_MspInit+0xe0>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <HAL_SPI_MspInit+0xe0>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <HAL_SPI_MspInit+0xe0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< Updated upstream
 80011be:	23f0      	movs	r3, #240	; 0xf0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ce:	2305      	movs	r3, #5
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <HAL_SPI_MspInit+0xe4>)
 80011da:	f000 ff91 	bl	8002100 <HAL_GPIO_Init>
=======
 8001932:	23f0      	movs	r3, #240	; 0xf0
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001942:	2305      	movs	r3, #5
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	481d      	ldr	r0, [pc, #116]	; (80019c4 <HAL_SPI_MspInit+0xe4>)
 800194e:	f001 fce1 	bl	8003314 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
<<<<<<< Updated upstream
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_SPI_MspInit+0xec>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 80011e6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011ea:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 80011fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 8001202:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001206:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 800120a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 8001224:	f000 fbf6 	bl	8001a14 <HAL_DMA_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 800122e:	f7ff ff71 	bl	8001114 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 8001236:	659a      	str	r2, [r3, #88]	; 0x58
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_SPI_MspInit+0xe8>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 8001954:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <HAL_SPI_MspInit+0xec>)
 8001956:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 800195a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800195e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 800196e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001972:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 8001976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800197a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 800197e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001982:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 8001998:	f001 f8b4 	bl	8002b04 <HAL_DMA_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80019a2:	f7ff feff 	bl	80017a4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58
 80019ac:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <HAL_SPI_MspInit+0xe8>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> Stashed changes
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40013000 	.word	0x40013000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	2002b76c 	.word	0x2002b76c
 8001258:	40026410 	.word	0x40026410

0800125c <HAL_TIM_Base_MspInit>:
=======
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40013000 	.word	0x40013000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	2002b89c 	.word	0x2002b89c
 80019cc:	40026410 	.word	0x40026410

080019d0 <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< Updated upstream
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <HAL_TIM_Base_MspInit+0x78>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d114      	bne.n	8001298 <HAL_TIM_Base_MspInit+0x3c>
=======
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a34      	ldr	r2, [pc, #208]	; (8001ab0 <HAL_TIM_Base_MspInit+0xe0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d114      	bne.n	8001a0c <HAL_TIM_Base_MspInit+0x3c>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< Updated upstream
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_TIM_Base_MspInit+0x7c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_TIM_Base_MspInit+0x7c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_TIM_Base_MspInit+0x7c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	201b      	movs	r0, #27
 800128c:	f000 fb8b 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001290:	201b      	movs	r0, #27
 8001292:	f000 fba4 	bl	80019de <HAL_NVIC_EnableIRQ>
=======
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2101      	movs	r1, #1
 80019fe:	201b      	movs	r0, #27
 8001a00:	f001 f849 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a04:	201b      	movs	r0, #27
 8001a06:	f001 f862 	bl	8002ace <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8001296:	e018      	b.n	80012ca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM8)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_TIM_Base_MspInit+0x80>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d113      	bne.n	80012ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_TIM_Base_MspInit+0x7c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_TIM_Base_MspInit+0x7c>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_TIM_Base_MspInit+0x7c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	202e      	movs	r0, #46	; 0x2e
 80012c0:	f000 fb71 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80012c4:	202e      	movs	r0, #46	; 0x2e
 80012c6:	f000 fb8a 	bl	80019de <HAL_NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40010000 	.word	0x40010000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_TIM_IC_MspInit>:
=======
 8001a0a:	e04c      	b.n	8001aa6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <HAL_TIM_Base_MspInit+0xe8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d114      	bne.n	8001a40 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a16:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	201d      	movs	r0, #29
 8001a34:	f001 f82f 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a38:	201d      	movs	r0, #29
 8001a3a:	f001 f848 	bl	8002ace <HAL_NVIC_EnableIRQ>
}
 8001a3e:	e032      	b.n	8001aa6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_TIM_Base_MspInit+0xec>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d114      	bne.n	8001a74 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2101      	movs	r1, #1
 8001a66:	201e      	movs	r0, #30
 8001a68:	f001 f815 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a6c:	201e      	movs	r0, #30
 8001a6e:	f001 f82e 	bl	8002ace <HAL_NVIC_EnableIRQ>
}
 8001a72:	e018      	b.n	8001aa6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM8)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_TIM_Base_MspInit+0xf0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d113      	bne.n	8001aa6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_TIM_Base_MspInit+0xe4>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2101      	movs	r1, #1
 8001a9a:	202e      	movs	r0, #46	; 0x2e
 8001a9c:	f000 fffb 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001aa0:	202e      	movs	r0, #46	; 0x2e
 8001aa2:	f001 f814 	bl	8002ace <HAL_NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40000800 	.word	0x40000800
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_TIM_IC_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
<<<<<<< Updated upstream
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d130      	bne.n	8001364 <HAL_TIM_IC_MspInit+0x84>
=======
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d130      	bne.n	8001b48 <HAL_TIM_IC_MspInit+0x84>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< Updated upstream
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_TIM_IC_MspInit+0x8c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_TIM_IC_MspInit+0x8c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_TIM_IC_MspInit+0x8c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_TIM_IC_MspInit+0x8c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_TIM_IC_MspInit+0x8c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_TIM_IC_MspInit+0x8c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001344:	2301      	movs	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4808      	ldr	r0, [pc, #32]	; (8001370 <HAL_TIM_IC_MspInit+0x90>)
 8001350:	f000 fed6 	bl	8002100 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	201c      	movs	r0, #28
 800135a:	f000 fb24 	bl	80019a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800135e:	201c      	movs	r0, #28
 8001360:	f000 fb3d 	bl	80019de <HAL_NVIC_EnableIRQ>
=======
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_TIM_IC_MspInit+0x8c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_TIM_IC_MspInit+0x8c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_TIM_IC_MspInit+0x8c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_TIM_IC_MspInit+0x8c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <HAL_TIM_IC_MspInit+0x8c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_TIM_IC_MspInit+0x8c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8001b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4808      	ldr	r0, [pc, #32]	; (8001b54 <HAL_TIM_IC_MspInit+0x90>)
 8001b34:	f001 fbee 	bl	8003314 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	201c      	movs	r0, #28
 8001b3e:	f000 ffaa 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b42:	201c      	movs	r0, #28
 8001b44:	f000 ffc3 	bl	8002ace <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000

08001374 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <HAL_TIM_MspPostInit+0xa8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d11d      	bne.n	80013d2 <HAL_TIM_MspPostInit+0x5e>
=======
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000

08001b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a22      	ldr	r2, [pc, #136]	; (8001c00 <HAL_TIM_MspPostInit+0xa8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d11d      	bne.n	8001bb6 <HAL_TIM_MspPostInit+0x5e>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
<<<<<<< Updated upstream
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_TIM_MspPostInit+0xac>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a21      	ldr	r2, [pc, #132]	; (8001420 <HAL_TIM_MspPostInit+0xac>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <HAL_TIM_MspPostInit+0xac>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
=======
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <HAL_TIM_MspPostInit+0xac>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_TIM_MspPostInit+0xac>)
 8001b80:	f043 0310 	orr.w	r3, r3, #16
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_TIM_MspPostInit+0xac>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
<<<<<<< Updated upstream
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80013ae:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4816      	ldr	r0, [pc, #88]	; (8001424 <HAL_TIM_MspPostInit+0xb0>)
 80013cc:	f000 fe98 	bl	8002100 <HAL_GPIO_Init>
=======
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8001b92:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4816      	ldr	r0, [pc, #88]	; (8001c08 <HAL_TIM_MspPostInit+0xb0>)
 8001bb0:	f001 fbb0 	bl	8003314 <HAL_GPIO_Init>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 80013d0:	e020      	b.n	8001414 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <HAL_TIM_MspPostInit+0xb4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d11b      	bne.n	8001414 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_TIM_MspPostInit+0xac>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_TIM_MspPostInit+0xac>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_TIM_MspPostInit+0xac>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001404:	2303      	movs	r3, #3
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <HAL_TIM_MspPostInit+0xb8>)
 8001410:	f000 fe76 	bl	8002100 <HAL_GPIO_Init>
}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	; 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40010000 	.word	0x40010000
 8001420:	40023800 	.word	0x40023800
 8001424:	40021000 	.word	0x40021000
 8001428:	40010400 	.word	0x40010400
 800142c:	40020800 	.word	0x40020800

08001430 <HAL_UART_MspInit>:
=======
 8001bb4:	e020      	b.n	8001bf8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <HAL_TIM_MspPostInit+0xb4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d11b      	bne.n	8001bf8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_TIM_MspPostInit+0xac>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_TIM_MspPostInit+0xac>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_TIM_MspPostInit+0xac>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001be8:	2303      	movs	r3, #3
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <HAL_TIM_MspPostInit+0xb8>)
 8001bf4:	f001 fb8e 	bl	8003314 <HAL_GPIO_Init>
}
 8001bf8:	bf00      	nop
 8001bfa:	3728      	adds	r7, #40	; 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	40020800 	.word	0x40020800

08001c14 <HAL_UART_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< Updated upstream
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_UART_MspInit+0x7c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d128      	bne.n	80014a4 <HAL_UART_MspInit+0x74>
=======
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <HAL_UART_MspInit+0x8c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d130      	bne.n	8001c98 <HAL_UART_MspInit+0x84>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
<<<<<<< Updated upstream
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_UART_MspInit+0x80>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_UART_MspInit+0x80>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
=======
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_UART_MspInit+0x90>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ca4 <HAL_UART_MspInit+0x90>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_UART_MspInit+0x90>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_UART_MspInit+0x90>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_UART_MspInit+0x90>)
 8001c54:	f043 0308 	orr.w	r3, r3, #8
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_UART_MspInit+0x90>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
<<<<<<< Updated upstream
 8001482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001494:	2307      	movs	r3, #7
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_UART_MspInit+0x84>)
 80014a0:	f000 fe2e 	bl	8002100 <HAL_GPIO_Init>
=======
 8001c66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c78:	2307      	movs	r3, #7
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <HAL_UART_MspInit+0x94>)
 8001c84:	f001 fb46 	bl	8003314 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2027      	movs	r0, #39	; 0x27
 8001c8e:	f000 ff02 	bl	8002a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c92:	2027      	movs	r0, #39	; 0x27
 8001c94:	f000 ff1b 	bl	8002ace <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40004800 	.word	0x40004800
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020c00 	.word	0x40020c00

080014b8 <HAL_PCD_MspInit>:
=======
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40004800 	.word	0x40004800
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020c00 	.word	0x40020c00

08001cac <HAL_PCD_MspInit>:
>>>>>>> Stashed changes
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
<<<<<<< Updated upstream
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d8:	d141      	bne.n	800155e <HAL_PCD_MspInit+0xa6>
=======
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ccc:	d141      	bne.n	8001d52 <HAL_PCD_MspInit+0xa6>
>>>>>>> Stashed changes
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< Updated upstream
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a22      	ldr	r2, [pc, #136]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
=======
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a22      	ldr	r2, [pc, #136]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
>>>>>>> Stashed changes
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
<<<<<<< Updated upstream
 80014f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001504:	230a      	movs	r3, #10
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4817      	ldr	r0, [pc, #92]	; (800156c <HAL_PCD_MspInit+0xb4>)
 8001510:	f000 fdf6 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4810      	ldr	r0, [pc, #64]	; (800156c <HAL_PCD_MspInit+0xb4>)
 800152a:	f000 fde9 	bl	8002100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 8001534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001538:	6353      	str	r3, [r2, #52]	; 0x34
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 800153c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_PCD_MspInit+0xb0>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
=======
 8001ce6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4817      	ldr	r0, [pc, #92]	; (8001d60 <HAL_PCD_MspInit+0xb4>)
 8001d04:	f001 fb06 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4810      	ldr	r0, [pc, #64]	; (8001d60 <HAL_PCD_MspInit+0xb4>)
 8001d1e:	f001 faf9 	bl	8003314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	4a0d      	ldr	r2, [pc, #52]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2c:	6353      	str	r3, [r2, #52]	; 0x34
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_PCD_MspInit+0xb0>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
<<<<<<< Updated upstream
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000

08001570 <NMI_Handler>:
=======
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000

08001d64 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
=======
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< Updated upstream
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <HardFault_Handler>:
=======
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
=======
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:
=======
 8001d76:	e7fe      	b.n	8001d76 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
=======
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:
=======
 8001d7c:	e7fe      	b.n	8001d7c <MemManage_Handler+0x4>

08001d7e <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
=======
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:
=======
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
=======
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:
=======
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8a <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
=======
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:
=======
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
=======
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:
=======
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
=======
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:
=======
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
=======
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 80015c4:	f000 f8d2 	bl	800176c <HAL_IncTick>
=======
 8001db8:	f000 f8fa 	bl	8001fb0 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <TIM1_CC_IRQHandler>:
=======
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <TIM1_CC_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
<<<<<<< Updated upstream
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
=======
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< Updated upstream
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM1_CC_IRQHandler+0x10>)
 80015d2:	f003 fa85 	bl	8004ae0 <HAL_TIM_IRQHandler>
=======
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <TIM1_CC_IRQHandler+0x10>)
 8001dc6:	f003 ff4f 	bl	8005c68 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
<<<<<<< Updated upstream
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2002b688 	.word	0x2002b688

080015e0 <TIM2_IRQHandler>:
=======
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2002b7b8 	.word	0x2002b7b8

08001dd4 <TIM2_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< Updated upstream
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
=======
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< Updated upstream
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM2_IRQHandler+0x10>)
 80015e6:	f003 fa7b 	bl	8004ae0 <HAL_TIM_IRQHandler>
=======
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <TIM2_IRQHandler+0x10>)
 8001dda:	f003 ff45 	bl	8005c68 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< Updated upstream
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2002b72c 	.word	0x2002b72c

080015f4 <TIM8_CC_IRQHandler>:
=======
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2002b85c 	.word	0x2002b85c

08001de8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <TIM3_IRQHandler+0x10>)
 8001dee:	f003 ff3b 	bl	8005c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20015e44 	.word	0x20015e44

08001dfc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TIM4_IRQHandler+0x10>)
 8001e02:	f003 ff31 	bl	8005c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200000f4 	.word	0x200000f4

08001e10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <USART3_IRQHandler+0x10>)
 8001e16:	f005 fb75 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000134 	.word	0x20000134

08001e24 <TIM8_CC_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
<<<<<<< Updated upstream
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
=======
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
<<<<<<< Updated upstream
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM8_CC_IRQHandler+0x10>)
 80015fa:	f003 fa71 	bl	8004ae0 <HAL_TIM_IRQHandler>
=======
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <TIM8_CC_IRQHandler+0x10>)
 8001e2a:	f003 ff1d 	bl	8005c68 <HAL_TIM_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
<<<<<<< Updated upstream
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200000b4 	.word	0x200000b4

08001608 <DMA2_Stream0_IRQHandler>:
=======
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200000b4 	.word	0x200000b4

08001e38 <DMA2_Stream0_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< Updated upstream
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
=======
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
<<<<<<< Updated upstream
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA2_Stream0_IRQHandler+0x10>)
 800160e:	f000 fb0f 	bl	8001c30 <HAL_DMA_IRQHandler>
=======
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <DMA2_Stream0_IRQHandler+0x10>)
 8001e3e:	f001 f801 	bl	8002e44 <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< Updated upstream
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2002b76c 	.word	0x2002b76c

0800161c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x50>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x16>
		heap_end = &end;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <_sbrk+0x50>)
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <_sbrk+0x54>)
 8001630:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <_sbrk+0x50>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <_sbrk+0x50>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	466a      	mov	r2, sp
 8001642:	4293      	cmp	r3, r2
 8001644:	d907      	bls.n	8001656 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001646:	f005 fcb3 	bl	8006fb0 <__errno>
 800164a:	4602      	mov	r2, r0
 800164c:	230c      	movs	r3, #12
 800164e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	e006      	b.n	8001664 <_sbrk+0x48>
	}

	heap_end += incr;
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <_sbrk+0x50>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a03      	ldr	r2, [pc, #12]	; (800166c <_sbrk+0x50>)
 8001660:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200000a8 	.word	0x200000a8
 8001670:	2002b7d8 	.word	0x2002b7d8

08001674 <SystemInit>:
=======
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2002b89c 	.word	0x2002b89c

08001e4c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <DMA2_Stream4_IRQHandler+0x10>)
 8001e52:	f000 fff7 	bl	8002e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2002b758 	.word	0x2002b758

08001e60 <_sbrk>:
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <_sbrk+0x50>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x16>
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <_sbrk+0x50>)
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <_sbrk+0x54>)
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <_sbrk+0x50>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <_sbrk+0x50>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	466a      	mov	r2, sp
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d907      	bls.n	8001e9a <_sbrk+0x3a>
 8001e8a:	f006 fc51 	bl	8008730 <__errno>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	230c      	movs	r3, #12
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
 8001e98:	e006      	b.n	8001ea8 <_sbrk+0x48>
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <_sbrk+0x50>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <_sbrk+0x50>)
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200000a8 	.word	0x200000a8
 8001eb4:	2002b908 	.word	0x2002b908

08001eb8 <SystemInit>:
>>>>>>> Stashed changes
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <SystemInit+0x28>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <SystemInit+0x28>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <SystemInit+0x28>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <SystemInit+0x28>)
 8001ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< Updated upstream
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <SystemInit+0x28>)
 800168a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800168e:	609a      	str	r2, [r3, #8]
#endif
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <Reset_Handler>:
=======
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SystemInit+0x28>)
 8001ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ed2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< Updated upstream
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016a6:	e003      	b.n	80016b0 <LoopCopyDataInit>

080016a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016ae:	3104      	adds	r1, #4

080016b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016b0:	480b      	ldr	r0, [pc, #44]	; (80016e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016b8:	d3f6      	bcc.n	80016a8 <CopyDataInit>
  ldr  r2, =_sbss
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016bc:	e002      	b.n	80016c4 <LoopFillZerobss>

080016be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016c0:	f842 3b04 	str.w	r3, [r2], #4

080016c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016c8:	d3f9      	bcc.n	80016be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ca:	f7ff ffd3 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ce:	f005 fc75 	bl	8006fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d2:	f7fe ffa5 	bl	8000620 <main>
  bx  lr    
 80016d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80016dc:	080078b0 	.word	0x080078b0
  ldr  r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016e4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80016e8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80016ec:	2002b7d4 	.word	0x2002b7d4

080016f0 <ADC_IRQHandler>:
=======
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eea:	e003      	b.n	8001ef4 <LoopCopyDataInit>

08001eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ef2:	3104      	adds	r1, #4

08001ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001efc:	d3f6      	bcc.n	8001eec <CopyDataInit>
  ldr  r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f00:	e002      	b.n	8001f08 <LoopFillZerobss>

08001f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f04:	f842 3b04 	str.w	r3, [r2], #4

08001f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f0c:	d3f9      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff ffd3 	bl	8001eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f006 fc13 	bl	800873c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7fe fb83 	bl	8000620 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001f20:	08009044 	.word	0x08009044
  ldr  r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f28:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001f2c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001f30:	2002b904 	.word	0x2002b904

08001f34 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 80016f0:	e7fe      	b.n	80016f0 <ADC_IRQHandler>

080016f2 <HAL_Init>:
=======
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>

08001f36 <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
=======
 8001f36:	b580      	push	{r7, lr}
 8001f38:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 80016f6:	2003      	movs	r0, #3
 80016f8:	f000 f94a 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f000 f805 	bl	800170c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001702:	f7ff fd0f 	bl	8001124 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_InitTick>:
=======
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f000 fda0 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f000 f805 	bl	8001f50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f46:	f7ff fc35 	bl	80017b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x54>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x58>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f965 	bl	80019fa <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x4c>
=======
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x54>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_InitTick+0x58>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fdbb 	bl	8002aea <HAL_SYSTICK_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00e      	b.n	8001f9c <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f000 f92d 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
=======
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d80a      	bhi.n	8001f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f000 fd83 	bl	8002a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <HAL_InitTick+0x5c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000004 	.word	0x20000004
 8001764:	2000000c 	.word	0x2000000c
 8001768:	20000008 	.word	0x20000008

0800176c <HAL_IncTick>:
=======
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000004 	.word	0x20000004
 8001fa8:	2000000c 	.word	0x2000000c
 8001fac:	20000008 	.word	0x20000008

08001fb0 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000000c 	.word	0x2000000c
 8001790:	2002b7cc 	.word	0x2002b7cc

08001794 <HAL_GetTick>:
=======
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_IncTick+0x24>)
 8001fc2:	6013      	str	r3, [r2, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	2000000c 	.word	0x2000000c
 8001fd4:	2002b8fc 	.word	0x2002b8fc

08001fd8 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2002b7cc 	.word	0x2002b7cc

080017ac <HAL_Delay>:
=======
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return uwTick;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_GetTick+0x14>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	2002b8fc 	.word	0x2002b8fc

08001ff0 <HAL_Delay>:
>>>>>>> Stashed changes
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< Updated upstream
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff ffee 	bl	8001794 <HAL_GetTick>
 80017b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d005      	beq.n	80017d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_Delay+0x40>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d2:	bf00      	nop
 80017d4:	f7ff ffde 	bl	8001794 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8f7      	bhi.n	80017d4 <HAL_Delay+0x28>
  {
  }
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000000c 	.word	0x2000000c

080017f0 <__NVIC_SetPriorityGrouping>:
=======
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff ffee 	bl	8001fd8 <HAL_GetTick>
 8001ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d005      	beq.n	8002016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_Delay+0x40>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002016:	bf00      	nop
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d8f7      	bhi.n	8002018 <HAL_Delay+0x28>
  {
  }
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	2000000c 	.word	0x2000000c

08002034 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e031      	b.n	80020ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fbd2 	bl	80017fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d116      	bne.n	80020a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_ADC_Init+0x84>)
 8002078:	4013      	ands	r3, r2
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fab0 	bl	80025e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
 800209e:	e001      	b.n	80020a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	ffffeefd 	.word	0xffffeefd

080020bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Start_DMA+0x1e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0c7      	b.n	800226a <HAL_ADC_Start_DMA+0x1ae>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d018      	beq.n	8002122 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002100:	4b5c      	ldr	r3, [pc, #368]	; (8002274 <HAL_ADC_Start_DMA+0x1b8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5c      	ldr	r2, [pc, #368]	; (8002278 <HAL_ADC_Start_DMA+0x1bc>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9a      	lsrs	r2, r3, #18
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002114:	e002      	b.n	800211c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3b01      	subs	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f9      	bne.n	8002116 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	f040 809b 	bne.w	8002268 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002136:	4b51      	ldr	r3, [pc, #324]	; (800227c <HAL_ADC_Start_DMA+0x1c0>)
 8002138:	4013      	ands	r3, r2
 800213a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002158:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216c:	d106      	bne.n	800217c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f023 0206 	bic.w	r2, r3, #6
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
 800217a:	e002      	b.n	8002182 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	4a3c      	ldr	r2, [pc, #240]	; (8002280 <HAL_ADC_Start_DMA+0x1c4>)
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	4a3b      	ldr	r2, [pc, #236]	; (8002284 <HAL_ADC_Start_DMA+0x1c8>)
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <HAL_ADC_Start_DMA+0x1cc>)
 80021a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	334c      	adds	r3, #76	; 0x4c
 80021d6:	4619      	mov	r1, r3
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f000 fd40 	bl	8002c60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_ADC_Start_DMA+0x1d0>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10f      	bne.n	800220c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d136      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	e02d      	b.n	8002268 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_ADC_Start_DMA+0x1d4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d10e      	bne.n	8002234 <HAL_ADC_Start_DMA+0x178>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002232:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_ADC_Start_DMA+0x1d0>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d113      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_ADC_Start_DMA+0x1d8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10e      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1ac>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002266:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000004 	.word	0x20000004
 8002278:	431bde83 	.word	0x431bde83
 800227c:	fffff8fe 	.word	0xfffff8fe
 8002280:	080027dd 	.word	0x080027dd
 8002284:	08002897 	.word	0x08002897
 8002288:	080028b3 	.word	0x080028b3
 800228c:	40012300 	.word	0x40012300
 8002290:	40012000 	.word	0x40012000
 8002294:	40012200 	.word	0x40012200

08002298 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_Stop_DMA+0x1a>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e036      	b.n	8002320 <HAL_ADC_Stop_DMA+0x88>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11e      	bne.n	8002316 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fd17 	bl	8002d20 <HAL_DMA_Abort>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002304:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <HAL_ADC_Stop_DMA+0x90>)
 800230c:	4013      	ands	r3, r2
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	ffffeefe 	.word	0xffffeefe

0800232c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1c>
 800236c:	2302      	movs	r3, #2
 800236e:	e12a      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x272>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b09      	cmp	r3, #9
 800237e:	d93a      	bls.n	80023f6 <HAL_ADC_ConfigChannel+0xa2>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002388:	d035      	beq.n	80023f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68d9      	ldr	r1, [r3, #12]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	3b1e      	subs	r3, #30
 80023a0:	2207      	movs	r2, #7
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	400a      	ands	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a87      	ldr	r2, [pc, #540]	; (80025d4 <HAL_ADC_ConfigChannel+0x280>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10a      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68d9      	ldr	r1, [r3, #12]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	061a      	lsls	r2, r3, #24
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ce:	e035      	b.n	800243c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68d9      	ldr	r1, [r3, #12]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4403      	add	r3, r0
 80023e8:	3b1e      	subs	r3, #30
 80023ea:	409a      	lsls	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f4:	e022      	b.n	800243c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6919      	ldr	r1, [r3, #16]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	2207      	movs	r2, #7
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43da      	mvns	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	400a      	ands	r2, r1
 8002418:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4618      	mov	r0, r3
 800242c:	4603      	mov	r3, r0
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4403      	add	r3, r0
 8002432:	409a      	lsls	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b06      	cmp	r3, #6
 8002442:	d824      	bhi.n	800248e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	3b05      	subs	r3, #5
 8002456:	221f      	movs	r2, #31
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43da      	mvns	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	400a      	ands	r2, r1
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b05      	subs	r3, #5
 8002480:	fa00 f203 	lsl.w	r2, r0, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	635a      	str	r2, [r3, #52]	; 0x34
 800248c:	e04c      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d824      	bhi.n	80024e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	3b23      	subs	r3, #35	; 0x23
 80024a8:	221f      	movs	r2, #31
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	400a      	ands	r2, r1
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4618      	mov	r0, r3
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b23      	subs	r3, #35	; 0x23
 80024d2:	fa00 f203 	lsl.w	r2, r0, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
 80024de:	e023      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b41      	subs	r3, #65	; 0x41
 80024f2:	221f      	movs	r2, #31
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43da      	mvns	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	400a      	ands	r2, r1
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	4618      	mov	r0, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3b41      	subs	r3, #65	; 0x41
 800251c:	fa00 f203 	lsl.w	r2, r0, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <HAL_ADC_ConfigChannel+0x284>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1f4>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800253a:	d105      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800253c:	4b27      	ldr	r3, [pc, #156]	; (80025dc <HAL_ADC_ConfigChannel+0x288>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a26      	ldr	r2, [pc, #152]	; (80025dc <HAL_ADC_ConfigChannel+0x288>)
 8002542:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002546:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a22      	ldr	r2, [pc, #136]	; (80025d8 <HAL_ADC_ConfigChannel+0x284>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d109      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x212>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b12      	cmp	r3, #18
 8002558:	d105      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_ADC_ConfigChannel+0x288>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4a1f      	ldr	r2, [pc, #124]	; (80025dc <HAL_ADC_ConfigChannel+0x288>)
 8002560:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002564:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_ADC_ConfigChannel+0x284>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d125      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x268>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_ADC_ConfigChannel+0x280>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x22e>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b11      	cmp	r3, #17
 8002580:	d11c      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <HAL_ADC_ConfigChannel+0x288>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a15      	ldr	r2, [pc, #84]	; (80025dc <HAL_ADC_ConfigChannel+0x288>)
 8002588:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800258c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_ADC_ConfigChannel+0x280>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d111      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_ADC_ConfigChannel+0x28c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a11      	ldr	r2, [pc, #68]	; (80025e4 <HAL_ADC_ConfigChannel+0x290>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0c9a      	lsrs	r2, r3, #18
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	10000012 	.word	0x10000012
 80025d8:	40012000 	.word	0x40012000
 80025dc:	40012300 	.word	0x40012300
 80025e0:	20000004 	.word	0x20000004
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80025f0:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <ADC_Init+0x1ec>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a77      	ldr	r2, [pc, #476]	; (80027d4 <ADC_Init+0x1ec>)
 80025f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80025fc:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <ADC_Init+0x1ec>)
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4973      	ldr	r1, [pc, #460]	; (80027d4 <ADC_Init+0x1ec>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	021a      	lsls	r2, r3, #8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800263c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6899      	ldr	r1, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <ADC_Init+0x1f0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800268a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e00f      	b.n	80026e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0202 	bic.w	r2, r2, #2
 80026f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	005a      	lsls	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800272e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	3b01      	subs	r3, #1
 800273c:	035a      	lsls	r2, r3, #13
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	e007      	b.n	8002758 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002756:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	3b01      	subs	r3, #1
 8002774:	051a      	lsls	r2, r3, #20
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800278c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6899      	ldr	r1, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800279a:	025a      	lsls	r2, r3, #9
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	029a      	lsls	r2, r3, #10
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40012300 	.word	0x40012300
 80027d8:	0f000001 	.word	0x0f000001

080027dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d13c      	bne.n	8002870 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d12b      	bne.n	8002868 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d127      	bne.n	8002868 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002830:	2b00      	cmp	r3, #0
 8002832:	d119      	bne.n	8002868 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0220 	bic.w	r2, r2, #32
 8002842:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7fe fc21 	bl	80010b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800286e:	e00e      	b.n	800288e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fd5f 	bl	8002340 <HAL_ADC_ErrorCallback>
}
 8002882:	e004      	b.n	800288e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fd41 	bl	800232c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f043 0204 	orr.w	r2, r3, #4
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff fd34 	bl	8002340 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x40>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	05fa0000 	.word	0x05fa0000

08001838 <__NVIC_GetPriorityGrouping>:
=======
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <__NVIC_SetPriorityGrouping+0x40>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	4313      	orrs	r3, r2
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <__NVIC_SetPriorityGrouping+0x40>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	05fa0000 	.word	0x05fa0000

08002928 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
=======
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <__NVIC_GetPriorityGrouping+0x18>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 0307 	and.w	r3, r3, #7
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
=======
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	2b00      	cmp	r3, #0
 8002954:	db0b      	blt.n	800296e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4907      	ldr	r1, [pc, #28]	; (800297c <__NVIC_EnableIRQ+0x38>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2001      	movs	r0, #1
 8002966:	fa00 f202 	lsl.w	r2, r0, r2
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
=======
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	; (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
=======
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Config>:
=======
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff8e 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
=======
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a4c:	d301      	bcc.n	8002a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <SysTick_Config+0x40>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f7ff ff8e 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <SysTick_Config+0x40>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <SysTick_Config+0x40>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
=======
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
=======
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff29 	bl	80028e0 <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
=======
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 80019b8:	f7ff ff3e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff8e 	bl	80018e4 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
=======
 8002aa8:	f7ff ff3e 	bl	8002928 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff8e 	bl	80029d4 <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff5d 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
=======
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff31 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
=======
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff31 	bl	8002944 <__NVIC_EnableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_DMA_Init>:
=======
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ffa2 	bl	8002a3c <SysTick_Config>
 8002af8:	4603      	mov	r3, r0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff feb8 	bl	8001794 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]
=======
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7ff fa62 	bl	8001fd8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e099      	b.n	8001b64 <HAL_DMA_Init+0x150>
=======
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e099      	b.n	8002c54 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< Updated upstream
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0201 	bic.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a50:	e00f      	b.n	8001a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a52:	f7ff fe9f 	bl	8001794 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d908      	bls.n	8001a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2220      	movs	r2, #32
 8001a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e078      	b.n	8001b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e8      	bne.n	8001a52 <HAL_DMA_Init+0x3e>
=======
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b40:	e00f      	b.n	8002b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b42:	f7ff fa49 	bl	8001fd8 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d908      	bls.n	8002b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e078      	b.n	8002c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e8      	bne.n	8002b42 <HAL_DMA_Init+0x3e>
>>>>>>> Stashed changes
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< Updated upstream
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_DMA_Init+0x158>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
=======
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <HAL_DMA_Init+0x158>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< Updated upstream
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d107      	bne.n	8001adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
=======
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d107      	bne.n	8002bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< Updated upstream
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f023 0307 	bic.w	r3, r3, #7
 8001af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d117      	bne.n	8001b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
=======
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0307 	bic.w	r3, r3, #7
 8002be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d117      	bne.n	8002c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< Updated upstream
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00e      	beq.n	8001b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fa77 	bl	800200c <DMA_CheckFifoParam>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b32:	2301      	movs	r3, #1
 8001b34:	e016      	b.n	8001b64 <HAL_DMA_Init+0x150>
=======
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fb09 	bl	8003220 <DMA_CheckFifoParam>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c22:	2301      	movs	r3, #1
 8002c24:	e016      	b.n	8002c54 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< Updated upstream
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	615a      	str	r2, [r3, #20]
=======
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fa2e 	bl	8001fa0 <DMA_CalcBaseAndBitshift>
 8001b44:	4603      	mov	r3, r0
 8001b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4c:	223f      	movs	r2, #63	; 0x3f
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	e010803f 	.word	0xe010803f

08001b70 <HAL_DMA_Start_IT>:
=======
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fac0 	bl	80031b4 <DMA_CalcBaseAndBitshift>
 8002c34:	4603      	mov	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	223f      	movs	r2, #63	; 0x3f
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	e010803f 	.word	0xe010803f

08002c60 <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	613b      	str	r3, [r7, #16]
=======
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_DMA_Start_IT+0x26>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e048      	b.n	8001c28 <HAL_DMA_Start_IT+0xb8>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d137      	bne.n	8001c1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f9c0 	bl	8001f44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc8:	223f      	movs	r2, #63	; 0x3f
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0216 	orr.w	r2, r2, #22
 8001bde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0208 	orr.w	r2, r2, #8
 8001c06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e005      	b.n	8001c26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
 8001c24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_DMA_IRQHandler>:
=======
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA_Start_IT+0x26>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e048      	b.n	8002d18 <HAL_DMA_Start_IT+0xb8>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d137      	bne.n	8002d0a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fa52 	bl	8003158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	223f      	movs	r2, #63	; 0x3f
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0216 	orr.w	r2, r2, #22
 8002cce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cde:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0208 	orr.w	r2, r2, #8
 8002cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	e005      	b.n	8002d16 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
 8002d14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d2e:	f7ff f953 	bl	8001fd8 <HAL_GetTick>
 8002d32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e052      	b.n	8002df8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0216 	bic.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_DMA_Abort+0x62>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0208 	bic.w	r2, r2, #8
 8002d90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da2:	e013      	b.n	8002dcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da4:	f7ff f918 	bl	8001fd8 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d90c      	bls.n	8002dcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e015      	b.n	8002df8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e4      	bne.n	8002da4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	223f      	movs	r2, #63	; 0x3f
 8002de0:	409a      	lsls	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d004      	beq.n	8002e1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00c      	b.n	8002e38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2205      	movs	r2, #5
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c3c:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_DMA_IRQHandler+0x258>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a92      	ldr	r2, [pc, #584]	; (8001e8c <HAL_DMA_IRQHandler+0x25c>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01a      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d013      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0204 	bic.w	r2, r2, #4
 8001c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	2208      	movs	r2, #8
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002e50:	4b92      	ldr	r3, [pc, #584]	; (800309c <HAL_DMA_IRQHandler+0x258>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a92      	ldr	r2, [pc, #584]	; (80030a0 <HAL_DMA_IRQHandler+0x25c>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0a9b      	lsrs	r3, r3, #10
 8002e5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	2208      	movs	r2, #8
 8002e70:	409a      	lsls	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01a      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0204 	bic.w	r2, r2, #4
 8002e96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d012      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f043 0202 	orr.w	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f043 0202 	orr.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d012      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f043 0204 	orr.w	r2, r3, #4
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	2204      	movs	r2, #4
 8002eec:	409a      	lsls	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	2204      	movs	r2, #4
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f14:	f043 0204 	orr.w	r2, r3, #4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> Stashed changes
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d043      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d03c      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d108      	bne.n	8001d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d024      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
 8001d5e:	e01f      	b.n	8001da0 <HAL_DMA_IRQHandler+0x170>
=======
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	2210      	movs	r2, #16
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d043      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d03c      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2210      	movs	r2, #16
 8002f40:	409a      	lsls	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d018      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d108      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d024      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
 8002f72:	e01f      	b.n	8002fb4 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< Updated upstream
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01b      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
 8001d70:	e016      	b.n	8001da0 <HAL_DMA_IRQHandler+0x170>
=======
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
 8002f84:	e016      	b.n	8002fb4 <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0208 	bic.w	r2, r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	4798      	blx	r3
=======
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0208 	bic.w	r2, r2, #8
 8002fa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2220      	movs	r2, #32
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 808e 	beq.w	8001ece <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8086 	beq.w	8001ece <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d136      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0216 	bic.w	r2, r2, #22
 8001de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <HAL_DMA_IRQHandler+0x1da>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0208 	bic.w	r2, r2, #8
 8001e18:	601a      	str	r2, [r3, #0]
=======
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	2220      	movs	r2, #32
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 808e 	beq.w	80030e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8086 	beq.w	80030e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	2220      	movs	r2, #32
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d136      	bne.n	800305c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0216 	bic.w	r2, r2, #22
 8002ffc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <HAL_DMA_IRQHandler+0x1da>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0208 	bic.w	r2, r2, #8
 800302c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	223f      	movs	r2, #63	; 0x3f
 8001e20:	409a      	lsls	r2, r3
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d07d      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
        }
        return;
 8001e46:	e078      	b.n	8001f3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d01c      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d108      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d030      	beq.n	8001ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
 8001e74:	e02b      	b.n	8001ece <HAL_DMA_IRQHandler+0x29e>
=======
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	223f      	movs	r2, #63	; 0x3f
 8003034:	409a      	lsls	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304e:	2b00      	cmp	r3, #0
 8003050:	d07d      	beq.n	800314e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4798      	blx	r3
        }
        return;
 800305a:	e078      	b.n	800314e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01c      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d108      	bne.n	800308a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	2b00      	cmp	r3, #0
 800307e:	d030      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
 8003088:	e02b      	b.n	80030e2 <HAL_DMA_IRQHandler+0x29e>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< Updated upstream
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d027      	beq.n	8001ece <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
 8001e86:	e022      	b.n	8001ece <HAL_DMA_IRQHandler+0x29e>
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	1b4e81b5 	.word	0x1b4e81b5
=======
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d027      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
 800309a:	e022      	b.n	80030e2 <HAL_DMA_IRQHandler+0x29e>
 800309c:	20000004 	.word	0x20000004
 80030a0:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> Stashed changes
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10f      	bne.n	8001ebe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0210 	bic.w	r2, r2, #16
 8001eac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	4798      	blx	r3
=======
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0210 	bic.w	r2, r2, #16
 80030c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
>>>>>>> Stashed changes
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< Updated upstream
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d032      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d022      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2205      	movs	r2, #5
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
=======
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d032      	beq.n	8003150 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d022      	beq.n	800313c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2205      	movs	r2, #5
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      do
      {
        if (++count > timeout)
<<<<<<< Updated upstream
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3301      	adds	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d307      	bcc.n	8001f16 <HAL_DMA_IRQHandler+0x2e6>
=======
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	429a      	cmp	r2, r3
 8003118:	d307      	bcc.n	800312a <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> Stashed changes
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< Updated upstream
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f2      	bne.n	8001efa <HAL_DMA_IRQHandler+0x2ca>
 8001f14:	e000      	b.n	8001f18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e000      	b.n	8001f3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f3a:	bf00      	nop
    }
  }
}
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop

08001f44 <DMA_SetConfig>:
=======
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f2      	bne.n	800310e <HAL_DMA_IRQHandler+0x2ca>
 8003128:	e000      	b.n	800312c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800312a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	4798      	blx	r3
 800314c:	e000      	b.n	8003150 <HAL_DMA_IRQHandler+0x30c>
        return;
 800314e:	bf00      	nop
    }
  }
}
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop

08003158 <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d108      	bne.n	8001f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	60da      	str	r2, [r3, #12]
=======
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d108      	bne.n	8003198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< Updated upstream
 8001f82:	e007      	b.n	8001f94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <DMA_CalcBaseAndBitshift>:
=======
 8003196:	e007      	b.n	80031a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3b10      	subs	r3, #16
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <DMA_CalcBaseAndBitshift+0x60>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	60fb      	str	r3, [r7, #12]
=======
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	3b10      	subs	r3, #16
 80031c4:	4a13      	ldr	r2, [pc, #76]	; (8003214 <DMA_CalcBaseAndBitshift+0x60>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< Updated upstream
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <DMA_CalcBaseAndBitshift+0x64>)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d908      	bls.n	8001fe0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <DMA_CalcBaseAndBitshift+0x68>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	1d1a      	adds	r2, r3, #4
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58
 8001fde:	e006      	b.n	8001fee <DMA_CalcBaseAndBitshift+0x4e>
=======
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <DMA_CalcBaseAndBitshift+0x64>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d908      	bls.n	80031f4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <DMA_CalcBaseAndBitshift+0x68>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	659a      	str	r2, [r3, #88]	; 0x58
 80031f2:	e006      	b.n	8003202 <DMA_CalcBaseAndBitshift+0x4e>
>>>>>>> Stashed changes
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< Updated upstream
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <DMA_CalcBaseAndBitshift+0x68>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	aaaaaaab 	.word	0xaaaaaaab
 8002004:	08007864 	.word	0x08007864
 8002008:	fffffc00 	.word	0xfffffc00

0800200c <DMA_CheckFifoParam>:
=======
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b08      	ldr	r3, [pc, #32]	; (800321c <DMA_CalcBaseAndBitshift+0x68>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	aaaaaaab 	.word	0xaaaaaaab
 8003218:	08008ff8 	.word	0x08008ff8
 800321c:	fffffc00 	.word	0xfffffc00

08003220 <DMA_CheckFifoParam>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d11f      	bne.n	8002066 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d855      	bhi.n	80020d8 <DMA_CheckFifoParam+0xcc>
 800202c:	a201      	add	r2, pc, #4	; (adr r2, 8002034 <DMA_CheckFifoParam+0x28>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	08002045 	.word	0x08002045
 8002038:	08002057 	.word	0x08002057
 800203c:	08002045 	.word	0x08002045
 8002040:	080020d9 	.word	0x080020d9
=======
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11f      	bne.n	800327a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d855      	bhi.n	80032ec <DMA_CheckFifoParam+0xcc>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <DMA_CheckFifoParam+0x28>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003259 	.word	0x08003259
 800324c:	0800326b 	.word	0x0800326b
 8003250:	08003259 	.word	0x08003259
 8003254:	080032ed 	.word	0x080032ed
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< Updated upstream
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d045      	beq.n	80020dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002054:	e042      	b.n	80020dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800205e:	d13f      	bne.n	80020e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002064:	e03c      	b.n	80020e0 <DMA_CheckFifoParam+0xd4>
=======
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d045      	beq.n	80032f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003268:	e042      	b.n	80032f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003272:	d13f      	bne.n	80032f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003278:	e03c      	b.n	80032f4 <DMA_CheckFifoParam+0xd4>
>>>>>>> Stashed changes
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206e:	d121      	bne.n	80020b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d836      	bhi.n	80020e4 <DMA_CheckFifoParam+0xd8>
 8002076:	a201      	add	r2, pc, #4	; (adr r2, 800207c <DMA_CheckFifoParam+0x70>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	0800208d 	.word	0x0800208d
 8002080:	08002093 	.word	0x08002093
 8002084:	0800208d 	.word	0x0800208d
 8002088:	080020a5 	.word	0x080020a5
=======
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003282:	d121      	bne.n	80032c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d836      	bhi.n	80032f8 <DMA_CheckFifoParam+0xd8>
 800328a:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <DMA_CheckFifoParam+0x70>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032a1 	.word	0x080032a1
 8003294:	080032a7 	.word	0x080032a7
 8003298:	080032a1 	.word	0x080032a1
 800329c:	080032b9 	.word	0x080032b9
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      break;
 8002090:	e02f      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d024      	beq.n	80020e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a2:	e021      	b.n	80020e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ac:	d11e      	bne.n	80020ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020b2:	e01b      	b.n	80020ec <DMA_CheckFifoParam+0xe0>
=======
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      break;
 80032a4:	e02f      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d024      	beq.n	80032fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b6:	e021      	b.n	80032fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c0:	d11e      	bne.n	8003300 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032c6:	e01b      	b.n	8003300 <DMA_CheckFifoParam+0xe0>
>>>>>>> Stashed changes
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< Updated upstream
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d902      	bls.n	80020c0 <DMA_CheckFifoParam+0xb4>
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d003      	beq.n	80020c6 <DMA_CheckFifoParam+0xba>
=======
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d902      	bls.n	80032d4 <DMA_CheckFifoParam+0xb4>
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d003      	beq.n	80032da <DMA_CheckFifoParam+0xba>
>>>>>>> Stashed changes
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< Updated upstream
 80020be:	e018      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      break;
 80020c4:	e015      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00e      	beq.n	80020f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
      break;
 80020d6:	e00b      	b.n	80020f0 <DMA_CheckFifoParam+0xe4>
      break;
 80020d8:	bf00      	nop
 80020da:	e00a      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      break;
 80020dc:	bf00      	nop
 80020de:	e008      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      break;
 80020e0:	bf00      	nop
 80020e2:	e006      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      break;
 80020e4:	bf00      	nop
 80020e6:	e004      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      break;
 80020e8:	bf00      	nop
 80020ea:	e002      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80020ec:	bf00      	nop
 80020ee:	e000      	b.n	80020f2 <DMA_CheckFifoParam+0xe6>
      break;
 80020f0:	bf00      	nop
=======
 80032d2:	e018      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e015      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ea:	e00b      	b.n	8003304 <DMA_CheckFifoParam+0xe4>
      break;
 80032ec:	bf00      	nop
 80032ee:	e00a      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 80032f0:	bf00      	nop
 80032f2:	e008      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 80032f4:	bf00      	nop
 80032f6:	e006      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 80032f8:	bf00      	nop
 80032fa:	e004      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 80032fc:	bf00      	nop
 80032fe:	e002      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;   
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 8003304:	bf00      	nop
>>>>>>> Stashed changes
    }
  } 
  
  return status; 
<<<<<<< Updated upstream
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_GPIO_Init>:
=======
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
=======
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e175      	b.n	800240c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002120:	2201      	movs	r2, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	f040 8164 	bne.w	8002406 <HAL_GPIO_Init+0x306>
=======
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	e175      	b.n	8003620 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003334:	2201      	movs	r2, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	429a      	cmp	r2, r3
 800334e:	f040 8164 	bne.w	800361a <HAL_GPIO_Init+0x306>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< Updated upstream
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d00b      	beq.n	800215e <HAL_GPIO_Init+0x5e>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d007      	beq.n	800215e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002152:	2b11      	cmp	r3, #17
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b12      	cmp	r3, #18
 800215c:	d130      	bne.n	80021c0 <HAL_GPIO_Init+0xc0>
=======
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d00b      	beq.n	8003372 <HAL_GPIO_Init+0x5e>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003366:	2b11      	cmp	r3, #17
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b12      	cmp	r3, #18
 8003370:	d130      	bne.n	80033d4 <HAL_GPIO_Init+0xc0>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 0201 	and.w	r2, r3, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	605a      	str	r2, [r3, #4]
=======
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 0201 	and.w	r2, r3, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x100>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b12      	cmp	r3, #18
 80021fe:	d123      	bne.n	8002248 <HAL_GPIO_Init+0x148>
=======
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x100>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b12      	cmp	r3, #18
 8003412:	d123      	bne.n	800345c <HAL_GPIO_Init+0x148>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
<<<<<<< Updated upstream
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	08da      	lsrs	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3208      	adds	r2, #8
 8002208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	69b9      	ldr	r1, [r7, #24]
 8002244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	08da      	lsrs	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3208      	adds	r2, #8
 800341c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	220f      	movs	r2, #15
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	69b9      	ldr	r1, [r7, #24]
 8003458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0203 	and.w	r2, r3, #3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	601a      	str	r2, [r3, #0]
=======
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0203 	and.w	r2, r3, #3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< Updated upstream
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80be 	beq.w	8002406 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	4b65      	ldr	r3, [pc, #404]	; (8002420 <HAL_GPIO_Init+0x320>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a64      	ldr	r2, [pc, #400]	; (8002420 <HAL_GPIO_Init+0x320>)
 8002290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b62      	ldr	r3, [pc, #392]	; (8002420 <HAL_GPIO_Init+0x320>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022a2:	4a60      	ldr	r2, [pc, #384]	; (8002424 <HAL_GPIO_Init+0x324>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a57      	ldr	r2, [pc, #348]	; (8002428 <HAL_GPIO_Init+0x328>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d037      	beq.n	800233e <HAL_GPIO_Init+0x23e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a56      	ldr	r2, [pc, #344]	; (800242c <HAL_GPIO_Init+0x32c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d031      	beq.n	800233a <HAL_GPIO_Init+0x23a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a55      	ldr	r2, [pc, #340]	; (8002430 <HAL_GPIO_Init+0x330>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <HAL_GPIO_Init+0x236>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a54      	ldr	r2, [pc, #336]	; (8002434 <HAL_GPIO_Init+0x334>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x232>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a53      	ldr	r2, [pc, #332]	; (8002438 <HAL_GPIO_Init+0x338>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x22e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_GPIO_Init+0x33c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x22a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a51      	ldr	r2, [pc, #324]	; (8002440 <HAL_GPIO_Init+0x340>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x226>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a50      	ldr	r2, [pc, #320]	; (8002444 <HAL_GPIO_Init+0x344>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x222>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4f      	ldr	r2, [pc, #316]	; (8002448 <HAL_GPIO_Init+0x348>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x21e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4e      	ldr	r2, [pc, #312]	; (800244c <HAL_GPIO_Init+0x34c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x21a>
 8002316:	2309      	movs	r3, #9
 8002318:	e012      	b.n	8002340 <HAL_GPIO_Init+0x240>
 800231a:	230a      	movs	r3, #10
 800231c:	e010      	b.n	8002340 <HAL_GPIO_Init+0x240>
 800231e:	2308      	movs	r3, #8
 8002320:	e00e      	b.n	8002340 <HAL_GPIO_Init+0x240>
 8002322:	2307      	movs	r3, #7
 8002324:	e00c      	b.n	8002340 <HAL_GPIO_Init+0x240>
 8002326:	2306      	movs	r3, #6
 8002328:	e00a      	b.n	8002340 <HAL_GPIO_Init+0x240>
 800232a:	2305      	movs	r3, #5
 800232c:	e008      	b.n	8002340 <HAL_GPIO_Init+0x240>
 800232e:	2304      	movs	r3, #4
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x240>
 8002332:	2303      	movs	r3, #3
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x240>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x240>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x240>
 800233e:	2300      	movs	r3, #0
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002350:	4934      	ldr	r1, [pc, #208]	; (8002424 <HAL_GPIO_Init+0x324>)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <HAL_GPIO_Init+0x350>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002382:	4a33      	ldr	r2, [pc, #204]	; (8002450 <HAL_GPIO_Init+0x350>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_GPIO_Init+0x350>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ac:	4a28      	ldr	r2, [pc, #160]	; (8002450 <HAL_GPIO_Init+0x350>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b2:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_GPIO_Init+0x350>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <HAL_GPIO_Init+0x350>)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <HAL_GPIO_Init+0x350>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002400:	4a13      	ldr	r2, [pc, #76]	; (8002450 <HAL_GPIO_Init+0x350>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b0f      	cmp	r3, #15
 8002410:	f67f ae86 	bls.w	8002120 <HAL_GPIO_Init+0x20>
=======
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80be 	beq.w	800361a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_GPIO_Init+0x320>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a64      	ldr	r2, [pc, #400]	; (8003634 <HAL_GPIO_Init+0x320>)
 80034a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b62      	ldr	r3, [pc, #392]	; (8003634 <HAL_GPIO_Init+0x320>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034b6:	4a60      	ldr	r2, [pc, #384]	; (8003638 <HAL_GPIO_Init+0x324>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	220f      	movs	r2, #15
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_GPIO_Init+0x328>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d037      	beq.n	8003552 <HAL_GPIO_Init+0x23e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a56      	ldr	r2, [pc, #344]	; (8003640 <HAL_GPIO_Init+0x32c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_GPIO_Init+0x23a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a55      	ldr	r2, [pc, #340]	; (8003644 <HAL_GPIO_Init+0x330>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02b      	beq.n	800354a <HAL_GPIO_Init+0x236>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a54      	ldr	r2, [pc, #336]	; (8003648 <HAL_GPIO_Init+0x334>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d025      	beq.n	8003546 <HAL_GPIO_Init+0x232>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a53      	ldr	r2, [pc, #332]	; (800364c <HAL_GPIO_Init+0x338>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01f      	beq.n	8003542 <HAL_GPIO_Init+0x22e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_GPIO_Init+0x33c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d019      	beq.n	800353e <HAL_GPIO_Init+0x22a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a51      	ldr	r2, [pc, #324]	; (8003654 <HAL_GPIO_Init+0x340>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_GPIO_Init+0x226>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a50      	ldr	r2, [pc, #320]	; (8003658 <HAL_GPIO_Init+0x344>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00d      	beq.n	8003536 <HAL_GPIO_Init+0x222>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4f      	ldr	r2, [pc, #316]	; (800365c <HAL_GPIO_Init+0x348>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <HAL_GPIO_Init+0x21e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4e      	ldr	r2, [pc, #312]	; (8003660 <HAL_GPIO_Init+0x34c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_GPIO_Init+0x21a>
 800352a:	2309      	movs	r3, #9
 800352c:	e012      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800352e:	230a      	movs	r3, #10
 8003530:	e010      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003532:	2308      	movs	r3, #8
 8003534:	e00e      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003536:	2307      	movs	r3, #7
 8003538:	e00c      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800353a:	2306      	movs	r3, #6
 800353c:	e00a      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800353e:	2305      	movs	r3, #5
 8003540:	e008      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003542:	2304      	movs	r3, #4
 8003544:	e006      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003546:	2303      	movs	r3, #3
 8003548:	e004      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800354a:	2302      	movs	r3, #2
 800354c:	e002      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003552:	2300      	movs	r3, #0
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	f002 0203 	and.w	r2, r2, #3
 800355a:	0092      	lsls	r2, r2, #2
 800355c:	4093      	lsls	r3, r2
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003564:	4934      	ldr	r1, [pc, #208]	; (8003638 <HAL_GPIO_Init+0x324>)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003572:	4b3c      	ldr	r3, [pc, #240]	; (8003664 <HAL_GPIO_Init+0x350>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003596:	4a33      	ldr	r2, [pc, #204]	; (8003664 <HAL_GPIO_Init+0x350>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800359c:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HAL_GPIO_Init+0x350>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035c0:	4a28      	ldr	r2, [pc, #160]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035c6:	4b27      	ldr	r3, [pc, #156]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ea:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f0:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <HAL_GPIO_Init+0x350>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_GPIO_Init+0x350>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	f67f ae86 	bls.w	8003334 <HAL_GPIO_Init+0x20>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 8002414:	bf00      	nop
 8002416:	3724      	adds	r7, #36	; 0x24
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40021400 	.word	0x40021400
 8002440:	40021800 	.word	0x40021800
 8002444:	40021c00 	.word	0x40021c00
 8002448:	40022000 	.word	0x40022000
 800244c:	40022400 	.word	0x40022400
 8002450:	40013c00 	.word	0x40013c00

08002454 <HAL_GPIO_WritePin>:
=======
 8003628:	bf00      	nop
 800362a:	3724      	adds	r7, #36	; 0x24
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40023800 	.word	0x40023800
 8003638:	40013800 	.word	0x40013800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020400 	.word	0x40020400
 8003644:	40020800 	.word	0x40020800
 8003648:	40020c00 	.word	0x40020c00
 800364c:	40021000 	.word	0x40021000
 8003650:	40021400 	.word	0x40021400
 8003654:	40021800 	.word	0x40021800
 8003658:	40021c00 	.word	0x40021c00
 800365c:	40022000 	.word	0x40022000
 8003660:	40022400 	.word	0x40022400
 8003664:	40013c00 	.word	0x40013c00

08003668 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
=======
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
=======
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
<<<<<<< Updated upstream
 8002470:	e003      	b.n	800247a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	041a      	lsls	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_GPIO_TogglePin>:
=======
 8003684:	e003      	b.n	800368e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	041a      	lsls	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	619a      	str	r2, [r3, #24]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_GPIO_TogglePin>:
>>>>>>> Stashed changes
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	807b      	strh	r3, [r7, #2]
=======
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
<<<<<<< Updated upstream
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	041a      	lsls	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	619a      	str	r2, [r3, #24]
=======
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	887b      	ldrh	r3, [r7, #2]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036b2:	887b      	ldrh	r3, [r7, #2]
 80036b4:	041a      	lsls	r2, r3, #16
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< Updated upstream
 80024a6:	e002      	b.n	80024ae <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_PCD_Init>:
=======
 80036ba:	e002      	b.n	80036c2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036bc:	887a      	ldrh	r2, [r7, #2]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	619a      	str	r2, [r3, #24]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_PCD_Init>:
>>>>>>> Stashed changes
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 80024ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024bc:	b08f      	sub	sp, #60	; 0x3c
 80024be:	af0a      	add	r7, sp, #40	; 0x28
 80024c0:	6078      	str	r0, [r7, #4]
=======
 80036ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036d0:	b08f      	sub	sp, #60	; 0x3c
 80036d2:	af0a      	add	r7, sp, #40	; 0x28
 80036d4:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< Updated upstream
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e116      	b.n	80026fa <HAL_PCD_Init+0x240>
=======
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e116      	b.n	800390e <HAL_PCD_Init+0x240>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
<<<<<<< Updated upstream
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
=======
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< Updated upstream
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe ffe6 	bl	80014b8 <HAL_PCD_MspInit>
=======
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe fad6 	bl	8001cac <HAL_PCD_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< Updated upstream
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2203      	movs	r2, #3
 80024f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
=======
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2203      	movs	r2, #3
 8003704:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
<<<<<<< Updated upstream
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f004 faf8 	bl	8006b00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	687e      	ldr	r6, [r7, #4]
 8002518:	466d      	mov	r5, sp
 800251a:	f106 0410 	add.w	r4, r6, #16
 800251e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800252a:	e885 0003 	stmia.w	r5, {r0, r1}
 800252e:	1d33      	adds	r3, r6, #4
 8002530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002532:	6838      	ldr	r0, [r7, #0]
 8002534:	f004 fa8c 	bl	8006a50 <USB_CoreInit>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0d7      	b.n	80026fa <HAL_PCD_Init+0x240>
=======
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f004 fdae 	bl	8008280 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	687e      	ldr	r6, [r7, #4]
 800372c:	466d      	mov	r5, sp
 800372e:	f106 0410 	add.w	r4, r6, #16
 8003732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800373e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003742:	1d33      	adds	r3, r6, #4
 8003744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003746:	6838      	ldr	r0, [r7, #0]
 8003748:	f004 fd42 	bl	80081d0 <USB_CoreInit>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0d7      	b.n	800390e <HAL_PCD_Init+0x240>
>>>>>>> Stashed changes
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
<<<<<<< Updated upstream
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2100      	movs	r1, #0
 8002550:	4618      	mov	r0, r3
 8002552:	f004 fae6 	bl	8006b22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e04a      	b.n	80025f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	333d      	adds	r3, #61	; 0x3d
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	333c      	adds	r3, #60	; 0x3c
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	b298      	uxth	r0, r3
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3342      	adds	r3, #66	; 0x42
 8002598:	4602      	mov	r2, r0
 800259a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	333f      	adds	r3, #63	; 0x3f
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	3344      	adds	r3, #68	; 0x44
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3348      	adds	r3, #72	; 0x48
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3350      	adds	r3, #80	; 0x50
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3af      	bcc.n	800255c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e044      	b.n	800268c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800262e:	7bfa      	ldrb	r2, [r7, #15]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800265a:	7bfa      	ldrb	r2, [r7, #15]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	3301      	adds	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	d3b5      	bcc.n	8002602 <HAL_PCD_Init+0x148>
=======
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f004 fd9c 	bl	80082a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e04a      	b.n	8003806 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	333d      	adds	r3, #61	; 0x3d
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	333c      	adds	r3, #60	; 0x3c
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	b298      	uxth	r0, r3
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	3342      	adds	r3, #66	; 0x42
 80037ac:	4602      	mov	r2, r0
 80037ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	333f      	adds	r3, #63	; 0x3f
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	3344      	adds	r3, #68	; 0x44
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3348      	adds	r3, #72	; 0x48
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3350      	adds	r3, #80	; 0x50
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	3301      	adds	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	d3af      	bcc.n	8003770 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
 8003814:	e044      	b.n	80038a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800383e:	7bfa      	ldrb	r2, [r7, #15]
 8003840:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	3301      	adds	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d3b5      	bcc.n	8003816 <HAL_PCD_Init+0x148>
>>>>>>> Stashed changes
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< Updated upstream
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	687e      	ldr	r6, [r7, #4]
 800269e:	466d      	mov	r5, sp
 80026a0:	f106 0410 	add.w	r4, r6, #16
 80026a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b4:	1d33      	adds	r3, r6, #4
 80026b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	f004 fa5d 	bl	8006b78 <USB_DevInit>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e014      	b.n	80026fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f80b 	bl	8002704 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 fc0f 	bl	8006f16 <USB_DevDisconnect>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002704 <HAL_PCDEx_ActivateLPM>:
=======
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	687e      	ldr	r6, [r7, #4]
 80038b2:	466d      	mov	r5, sp
 80038b4:	f106 0410 	add.w	r4, r6, #16
 80038b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80038c8:	1d33      	adds	r3, r6, #4
 80038ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038cc:	6838      	ldr	r0, [r7, #0]
 80038ce:	f004 fd13 	bl	80082f8 <USB_DevInit>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e014      	b.n	800390e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d102      	bne.n	8003902 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f80b 	bl	8003918 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fec5 	bl	8008696 <USB_DevDisconnect>

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003918 <HAL_PCDEx_ActivateLPM>:
>>>>>>> Stashed changes
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< Updated upstream
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_PCDEx_ActivateLPM+0x44>)
 8002734:	4313      	orrs	r3, r2
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	10000003 	.word	0x10000003

0800274c <HAL_PWR_EnableBkUpAccess>:
=======
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_PCDEx_ActivateLPM+0x44>)
 8003948:	4313      	orrs	r3, r2
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	10000003 	.word	0x10000003

08003960 <HAL_PWR_EnableBkUpAccess>:
>>>>>>> Stashed changes
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
<<<<<<< Updated upstream
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40007000 	.word	0x40007000

0800276c <HAL_PWREx_EnableOverDrive>:
=======
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a04      	ldr	r2, [pc, #16]	; (800397c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40007000 	.word	0x40007000

08003980 <HAL_PWREx_EnableOverDrive>:
>>>>>>> Stashed changes
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< Updated upstream
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_PWREx_EnableOverDrive+0x98>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a22      	ldr	r2, [pc, #136]	; (8002804 <HAL_PWREx_EnableOverDrive+0x98>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_PWREx_EnableOverDrive+0x98>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800279a:	f7fe fffb 	bl	8001794 <HAL_GetTick>
 800279e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027a0:	e009      	b.n	80027b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027a2:	f7fe fff7 	bl	8001794 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b0:	d901      	bls.n	80027b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e022      	b.n	80027fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c2:	d1ee      	bne.n	80027a2 <HAL_PWREx_EnableOverDrive+0x36>
=======
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x98>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x98>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x98>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ae:	f7fe fb13 	bl	8001fd8 <HAL_GetTick>
 80039b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039b4:	e009      	b.n	80039ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b6:	f7fe fb0f 	bl	8001fd8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c4:	d901      	bls.n	80039ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e022      	b.n	8003a10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ca:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d6:	d1ee      	bne.n	80039b6 <HAL_PWREx_EnableOverDrive+0x36>
>>>>>>> Stashed changes
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< Updated upstream
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d0:	f7fe ffe0 	bl	8001794 <HAL_GetTick>
 80027d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027d6:	e009      	b.n	80027ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027d8:	f7fe ffdc 	bl	8001794 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e6:	d901      	bls.n	80027ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e007      	b.n	80027fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027f8:	d1ee      	bne.n	80027d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000

0800280c <HAL_RCC_OscConfig>:
=======
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e4:	f7fe faf8 	bl	8001fd8 <HAL_GetTick>
 80039e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ea:	e009      	b.n	8003a00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ec:	f7fe faf4 	bl	8001fd8 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fa:	d901      	bls.n	8003a00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e007      	b.n	8003a10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a0c:	d1ee      	bne.n	80039ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000

08003a20 <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e29b      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
=======
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e29b      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8087 	beq.w	800293e <HAL_RCC_OscConfig+0x132>
=======
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8087 	beq.w	8003b52 <HAL_RCC_OscConfig+0x132>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< Updated upstream
 8002830:	4b96      	ldr	r3, [pc, #600]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b04      	cmp	r3, #4
 800283a:	d00c      	beq.n	8002856 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283c:	4b93      	ldr	r3, [pc, #588]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d112      	bne.n	800286e <HAL_RCC_OscConfig+0x62>
 8002848:	4b90      	ldr	r3, [pc, #576]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002854:	d10b      	bne.n	800286e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	4b8d      	ldr	r3, [pc, #564]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d06c      	beq.n	800293c <HAL_RCC_OscConfig+0x130>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d168      	bne.n	800293c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e275      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
=======
 8003a44:	4b96      	ldr	r3, [pc, #600]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d00c      	beq.n	8003a6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a50:	4b93      	ldr	r3, [pc, #588]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d112      	bne.n	8003a82 <HAL_RCC_OscConfig+0x62>
 8003a5c:	4b90      	ldr	r3, [pc, #576]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a68:	d10b      	bne.n	8003a82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6a:	4b8d      	ldr	r3, [pc, #564]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d06c      	beq.n	8003b50 <HAL_RCC_OscConfig+0x130>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d168      	bne.n	8003b50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e275      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x7a>
 8002878:	4b84      	ldr	r3, [pc, #528]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a83      	ldr	r2, [pc, #524]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e02e      	b.n	80028e4 <HAL_RCC_OscConfig+0xd8>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x9c>
 800288e:	4b7f      	ldr	r3, [pc, #508]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7e      	ldr	r2, [pc, #504]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b7c      	ldr	r3, [pc, #496]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7b      	ldr	r2, [pc, #492]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e01d      	b.n	80028e4 <HAL_RCC_OscConfig+0xd8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028b2:	4b76      	ldr	r3, [pc, #472]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a75      	ldr	r2, [pc, #468]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b73      	ldr	r3, [pc, #460]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a72      	ldr	r2, [pc, #456]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0xd8>
 80028cc:	4b6f      	ldr	r3, [pc, #444]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6e      	ldr	r2, [pc, #440]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b6c      	ldr	r3, [pc, #432]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6b      	ldr	r2, [pc, #428]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe ff52 	bl	8001794 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe ff4e 	bl	8001794 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e229      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e014      	b.n	800293e <HAL_RCC_OscConfig+0x132>
=======
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x7a>
 8003a8c:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a83      	ldr	r2, [pc, #524]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e02e      	b.n	8003af8 <HAL_RCC_OscConfig+0xd8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x9c>
 8003aa2:	4b7f      	ldr	r3, [pc, #508]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7e      	ldr	r2, [pc, #504]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b7c      	ldr	r3, [pc, #496]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7b      	ldr	r2, [pc, #492]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e01d      	b.n	8003af8 <HAL_RCC_OscConfig+0xd8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xc0>
 8003ac6:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a75      	ldr	r2, [pc, #468]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b73      	ldr	r3, [pc, #460]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a72      	ldr	r2, [pc, #456]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0xd8>
 8003ae0:	4b6f      	ldr	r3, [pc, #444]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6e      	ldr	r2, [pc, #440]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a6b      	ldr	r2, [pc, #428]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe fa6a 	bl	8001fd8 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fe fa66 	bl	8001fd8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e229      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b61      	ldr	r3, [pc, #388]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0xe8>
 8003b26:	e014      	b.n	8003b52 <HAL_RCC_OscConfig+0x132>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8002914:	f7fe ff3e 	bl	8001794 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe ff3a 	bl	8001794 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e215      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	4b57      	ldr	r3, [pc, #348]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x110>
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
=======
 8003b28:	f7fe fa56 	bl	8001fd8 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe fa52 	bl	8001fd8 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e215      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	4b57      	ldr	r3, [pc, #348]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x110>
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d069      	beq.n	8002a1e <HAL_RCC_OscConfig+0x212>
=======
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d069      	beq.n	8003c32 <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< Updated upstream
 800294a:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002956:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	d11c      	bne.n	800299c <HAL_RCC_OscConfig+0x190>
 8002962:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d116      	bne.n	800299c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x17a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e1e9      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
=======
 8003b5e:	4b50      	ldr	r3, [pc, #320]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d11c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x190>
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d116      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_RCC_OscConfig+0x17a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e1e9      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 8002986:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	493d      	ldr	r1, [pc, #244]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	e040      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
=======
 8003b9a:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	493d      	ldr	r1, [pc, #244]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	e040      	b.n	8003c32 <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< Updated upstream
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d023      	beq.n	80029ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fef0 	bl	8001794 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7fe feec 	bl	8001794 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1c7      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x1ac>
=======
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d023      	beq.n	8003c00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb8:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a38      	ldr	r2, [pc, #224]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fa08 	bl	8001fd8 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bcc:	f7fe fa04 	bl	8001fd8 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e1c7      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x1ac>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4929      	ldr	r1, [pc, #164]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
 80029ea:	e018      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
=======
 8003bea:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4929      	ldr	r1, [pc, #164]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
 8003bfe:	e018      	b.n	8003c32 <HAL_RCC_OscConfig+0x212>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fecc 	bl	8001794 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fec8 	bl	8001794 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1a3      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x1f4>
=======
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a26      	ldr	r2, [pc, #152]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f9e4 	bl	8001fd8 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fe f9e0 	bl	8001fd8 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1a3      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d038      	beq.n	8002a9c <HAL_RCC_OscConfig+0x290>
=======
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d038      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x290>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< Updated upstream
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d019      	beq.n	8002a66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fea9 	bl	8001794 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a46:	f7fe fea5 	bl	8001794 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e180      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x23a>
 8002a64:	e01a      	b.n	8002a9c <HAL_RCC_OscConfig+0x290>
=======
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d019      	beq.n	8003c7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c46:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fe f9c1 	bl	8001fd8 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fe f9bd 	bl	8001fd8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e180      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x23a>
 8003c78:	e01a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x290>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <HAL_RCC_OscConfig+0x280>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe fe8f 	bl	8001794 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fe8b 	bl	8001794 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d903      	bls.n	8002a90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e166      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
 8002a8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ee      	bne.n	8002a7a <HAL_RCC_OscConfig+0x26e>
=======
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fe f9a7 	bl	8001fd8 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fe f9a3 	bl	8001fd8 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d903      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e166      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
 8003ca0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ee      	bne.n	8003c8e <HAL_RCC_OscConfig+0x26e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a4 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x3e6>
=======
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a4 	beq.w	8003e06 <HAL_RCC_OscConfig+0x3e6>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 8002aaa:	4b8c      	ldr	r3, [pc, #560]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b89      	ldr	r3, [pc, #548]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a88      	ldr	r2, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b86      	ldr	r3, [pc, #536]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ad2:	4b83      	ldr	r3, [pc, #524]	; (8002ce0 <HAL_RCC_OscConfig+0x4d4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ade:	4b80      	ldr	r3, [pc, #512]	; (8002ce0 <HAL_RCC_OscConfig+0x4d4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7f      	ldr	r2, [pc, #508]	; (8002ce0 <HAL_RCC_OscConfig+0x4d4>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fe53 	bl	8001794 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fe fe4f 	bl	8001794 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	; 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e12a      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b04:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_RCC_OscConfig+0x4d4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2e6>
=======
 8003cbe:	4b8c      	ldr	r3, [pc, #560]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cca:	4b89      	ldr	r3, [pc, #548]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4a88      	ldr	r2, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	4b86      	ldr	r3, [pc, #536]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce6:	4b83      	ldr	r3, [pc, #524]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d118      	bne.n	8003d24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cf2:	4b80      	ldr	r3, [pc, #512]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7f      	ldr	r2, [pc, #508]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfe:	f7fe f96b 	bl	8001fd8 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d06:	f7fe f967 	bl	8001fd8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b64      	cmp	r3, #100	; 0x64
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e12a      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d18:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x2e6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x31a>
 8002b18:	4b70      	ldr	r3, [pc, #448]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a6f      	ldr	r2, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	e02d      	b.n	8002b82 <HAL_RCC_OscConfig+0x376>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x33c>
 8002b2e:	4b6b      	ldr	r3, [pc, #428]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	e01c      	b.n	8002b82 <HAL_RCC_OscConfig+0x376>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0x35e>
 8002b50:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a61      	ldr	r2, [pc, #388]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	4b5f      	ldr	r3, [pc, #380]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	4a5e      	ldr	r2, [pc, #376]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6713      	str	r3, [r2, #112]	; 0x70
 8002b68:	e00b      	b.n	8002b82 <HAL_RCC_OscConfig+0x376>
 8002b6a:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a5b      	ldr	r2, [pc, #364]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
 8002b76:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d015      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fe03 	bl	8001794 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7fe fdff 	bl	8001794 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0d8      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ee      	beq.n	8002b92 <HAL_RCC_OscConfig+0x386>
 8002bb4:	e014      	b.n	8002be0 <HAL_RCC_OscConfig+0x3d4>
=======
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x31a>
 8003d2c:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a6f      	ldr	r2, [pc, #444]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	e02d      	b.n	8003d96 <HAL_RCC_OscConfig+0x376>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x33c>
 8003d42:	4b6b      	ldr	r3, [pc, #428]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a6a      	ldr	r2, [pc, #424]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a67      	ldr	r2, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	e01c      	b.n	8003d96 <HAL_RCC_OscConfig+0x376>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b05      	cmp	r3, #5
 8003d62:	d10c      	bne.n	8003d7e <HAL_RCC_OscConfig+0x35e>
 8003d64:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a61      	ldr	r2, [pc, #388]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d6a:	f043 0304 	orr.w	r3, r3, #4
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a5e      	ldr	r2, [pc, #376]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7c:	e00b      	b.n	8003d96 <HAL_RCC_OscConfig+0x376>
 8003d7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a5b      	ldr	r2, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d015      	beq.n	8003dca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fe f91b 	bl	8001fd8 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fe f917 	bl	8001fd8 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0d8      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ee      	beq.n	8003da6 <HAL_RCC_OscConfig+0x386>
 8003dc8:	e014      	b.n	8003df4 <HAL_RCC_OscConfig+0x3d4>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8002bb6:	f7fe fded 	bl	8001794 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fde9 	bl	8001794 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e0c2      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ee      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3b2>
=======
 8003dca:	f7fe f905 	bl	8001fd8 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fe f901 	bl	8001fd8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0c2      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de8:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ee      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3b2>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a3c      	ldr	r2, [pc, #240]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80ae 	beq.w	8002d58 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bfc:	4b37      	ldr	r3, [pc, #220]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d06d      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d14b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x49c>
=======
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80ae 	beq.w	8003f6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e10:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d06d      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d14b      	bne.n	8003ebc <HAL_RCC_OscConfig+0x49c>
>>>>>>> Stashed changes
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8002c10:	4b32      	ldr	r3, [pc, #200]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a31      	ldr	r2, [pc, #196]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fdba 	bl	8001794 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe fdb6 	bl	8001794 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e091      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x418>
=======
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a31      	ldr	r2, [pc, #196]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fe f8d2 	bl	8001fd8 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fe f8ce 	bl	8001fd8 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e091      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x418>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< Updated upstream
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	061b      	lsls	r3, r3, #24
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	071b      	lsls	r3, r3, #28
 8002c6e:	491b      	ldr	r1, [pc, #108]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
=======
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	071b      	lsls	r3, r3, #28
 8003e82:	491b      	ldr	r1, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fd88 	bl	8001794 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fd84 	bl	8001794 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e05f      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x47c>
 8002ca6:	e057      	b.n	8002d58 <HAL_RCC_OscConfig+0x54c>
=======
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe f8a0 	bl	8001fd8 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe f89c 	bl	8001fd8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e05f      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x47c>
 8003eba:	e057      	b.n	8003f6c <HAL_RCC_OscConfig+0x54c>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0b      	ldr	r2, [pc, #44]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fd6e 	bl	8001794 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fd6a 	bl	8001794 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e045      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_OscConfig+0x4d0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4b0>
 8002cda:	e03d      	b.n	8002d58 <HAL_RCC_OscConfig+0x54c>
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40007000 	.word	0x40007000
=======
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe f886 	bl	8001fd8 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe f882 	bl	8001fd8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e045      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4b0>
 8003eee:	e03d      	b.n	8003f6c <HAL_RCC_OscConfig+0x54c>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <HAL_RCC_OscConfig+0x558>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d030      	beq.n	8002d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d129      	bne.n	8002d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d122      	bne.n	8002d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d119      	bne.n	8002d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d10f      	bne.n	8002d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x54c>
=======
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <HAL_RCC_OscConfig+0x558>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d030      	beq.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d129      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d122      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d119      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	3b01      	subs	r3, #1
 8003f42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d10f      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_OscConfig+0x54c>
>>>>>>> Stashed changes
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
<<<<<<< Updated upstream
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x54e>
=======
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_RCC_ClockConfig>:
=======
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800

08003f7c <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0d0      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>
=======
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0d0      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8002d80:	4b6a      	ldr	r3, [pc, #424]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d910      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b67      	ldr	r3, [pc, #412]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 020f 	bic.w	r2, r3, #15
 8002d96:	4965      	ldr	r1, [pc, #404]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
=======
 8003f94:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d910      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b67      	ldr	r3, [pc, #412]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	4965      	ldr	r1, [pc, #404]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8002d9e:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0b8      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>
=======
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d020      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x96>
=======
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_ClockConfig+0x96>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	4a58      	ldr	r2, [pc, #352]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de0:	4b53      	ldr	r3, [pc, #332]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dea:	6093      	str	r3, [r2, #8]
=======
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fdc:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff4:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffe:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8002dec:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	494d      	ldr	r1, [pc, #308]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
=======
 8004000:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	494d      	ldr	r1, [pc, #308]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d040      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x124>
=======
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d040      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x124>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d115      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e07f      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>
=======
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d115      	bne.n	800405e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< Updated upstream
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e073      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>
=======
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e073      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06b      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>
=======
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06b      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4936      	ldr	r1, [pc, #216]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fc9a 	bl	8001794 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7fe fc96 	bl	8001794 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e053      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xfc>
=======
 800405e:	4b39      	ldr	r3, [pc, #228]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 0203 	bic.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4936      	ldr	r1, [pc, #216]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	4313      	orrs	r3, r2
 800406e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004070:	f7fd ffb2 	bl	8001fd8 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	e00a      	b.n	800408e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004078:	f7fd ffae 	bl	8001fd8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e053      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 020c 	and.w	r2, r3, #12
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	429a      	cmp	r2, r3
 800409e:	d1eb      	bne.n	8004078 <HAL_RCC_ClockConfig+0xfc>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d210      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	4922      	ldr	r1, [pc, #136]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
=======
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d210      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 020f 	bic.w	r2, r3, #15
 80040b6:	4922      	ldr	r1, [pc, #136]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e032      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1ba>
=======
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4916      	ldr	r1, [pc, #88]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
=======
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4916      	ldr	r1, [pc, #88]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	490e      	ldr	r1, [pc, #56]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
=======
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	490e      	ldr	r1, [pc, #56]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8002efa:	f000 f821 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002efe:	4601      	mov	r1, r0
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <HAL_RCC_ClockConfig+0x1cc>)
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <HAL_RCC_ClockConfig+0x1d0>)
 8002f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_ClockConfig+0x1d4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fbf6 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023c00 	.word	0x40023c00
 8002f30:	40023800 	.word	0x40023800
 8002f34:	0800784c 	.word	0x0800784c
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	20000008 	.word	0x20000008

08002f40 <HAL_RCC_GetSysClockFreq>:
=======
 800410e:	f000 f821 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004112:	4601      	mov	r1, r0
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <HAL_RCC_ClockConfig+0x1cc>)
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	fa21 f303 	lsr.w	r3, r1, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1d0>)
 8004128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1d4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd ff0e 	bl	8001f50 <HAL_InitTick>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00
 8004144:	40023800 	.word	0x40023800
 8004148:	08008fe0 	.word	0x08008fe0
 800414c:	20000004 	.word	0x20000004
 8004150:	20000008 	.word	0x20000008

08004154 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8002f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d007      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x32>
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d008      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x38>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 80b4 	bne.w	80030d4 <HAL_RCC_GetSysClockFreq+0x194>
=======
 8004154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	2300      	movs	r3, #0
 8004164:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416a:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b04      	cmp	r3, #4
 8004174:	d007      	beq.n	8004186 <HAL_RCC_GetSysClockFreq+0x32>
 8004176:	2b08      	cmp	r3, #8
 8004178:	d008      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x38>
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 80b4 	bne.w	80042e8 <HAL_RCC_GetSysClockFreq+0x194>
>>>>>>> Stashed changes
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8002f6c:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f6e:	60bb      	str	r3, [r7, #8]
      break;
 8002f70:	e0b3      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8004180:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004182:	60bb      	str	r3, [r7, #8]
      break;
 8004184:	e0b3      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> Stashed changes
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8002f72:	4b5e      	ldr	r3, [pc, #376]	; (80030ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002f74:	60bb      	str	r3, [r7, #8]
      break;
 8002f76:	e0b0      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8004186:	4b5e      	ldr	r3, [pc, #376]	; (8004300 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004188:	60bb      	str	r3, [r7, #8]
      break;
 800418a:	e0b0      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> Stashed changes
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8002f78:	4b5a      	ldr	r3, [pc, #360]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f82:	4b58      	ldr	r3, [pc, #352]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d04a      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b55      	ldr	r3, [pc, #340]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	f04f 0400 	mov.w	r4, #0
 8002f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	ea03 0501 	and.w	r5, r3, r1
 8002fa4:	ea04 0602 	and.w	r6, r4, r2
 8002fa8:	4629      	mov	r1, r5
 8002faa:	4632      	mov	r2, r6
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	f04f 0400 	mov.w	r4, #0
 8002fb4:	0154      	lsls	r4, r2, #5
 8002fb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fba:	014b      	lsls	r3, r1, #5
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	1b49      	subs	r1, r1, r5
 8002fc2:	eb62 0206 	sbc.w	r2, r2, r6
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	f04f 0400 	mov.w	r4, #0
 8002fce:	0194      	lsls	r4, r2, #6
 8002fd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fd4:	018b      	lsls	r3, r1, #6
 8002fd6:	1a5b      	subs	r3, r3, r1
 8002fd8:	eb64 0402 	sbc.w	r4, r4, r2
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	00e2      	lsls	r2, r4, #3
 8002fe6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002fea:	00d9      	lsls	r1, r3, #3
 8002fec:	460b      	mov	r3, r1
 8002fee:	4614      	mov	r4, r2
 8002ff0:	195b      	adds	r3, r3, r5
 8002ff2:	eb44 0406 	adc.w	r4, r4, r6
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	0262      	lsls	r2, r4, #9
 8003000:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003004:	0259      	lsls	r1, r3, #9
 8003006:	460b      	mov	r3, r1
 8003008:	4614      	mov	r4, r2
 800300a:	4618      	mov	r0, r3
 800300c:	4621      	mov	r1, r4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f04f 0400 	mov.w	r4, #0
 8003014:	461a      	mov	r2, r3
 8003016:	4623      	mov	r3, r4
 8003018:	f7fd f96a 	bl	80002f0 <__aeabi_uldivmod>
 800301c:	4603      	mov	r3, r0
 800301e:	460c      	mov	r4, r1
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e049      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x178>
=======
 800418c:	4b5a      	ldr	r3, [pc, #360]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004194:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004196:	4b58      	ldr	r3, [pc, #352]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d04a      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a2:	4b55      	ldr	r3, [pc, #340]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	f04f 0400 	mov.w	r4, #0
 80041ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	ea03 0501 	and.w	r5, r3, r1
 80041b8:	ea04 0602 	and.w	r6, r4, r2
 80041bc:	4629      	mov	r1, r5
 80041be:	4632      	mov	r2, r6
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	f04f 0400 	mov.w	r4, #0
 80041c8:	0154      	lsls	r4, r2, #5
 80041ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041ce:	014b      	lsls	r3, r1, #5
 80041d0:	4619      	mov	r1, r3
 80041d2:	4622      	mov	r2, r4
 80041d4:	1b49      	subs	r1, r1, r5
 80041d6:	eb62 0206 	sbc.w	r2, r2, r6
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	f04f 0400 	mov.w	r4, #0
 80041e2:	0194      	lsls	r4, r2, #6
 80041e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041e8:	018b      	lsls	r3, r1, #6
 80041ea:	1a5b      	subs	r3, r3, r1
 80041ec:	eb64 0402 	sbc.w	r4, r4, r2
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	00e2      	lsls	r2, r4, #3
 80041fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041fe:	00d9      	lsls	r1, r3, #3
 8004200:	460b      	mov	r3, r1
 8004202:	4614      	mov	r4, r2
 8004204:	195b      	adds	r3, r3, r5
 8004206:	eb44 0406 	adc.w	r4, r4, r6
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	0262      	lsls	r2, r4, #9
 8004214:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004218:	0259      	lsls	r1, r3, #9
 800421a:	460b      	mov	r3, r1
 800421c:	4614      	mov	r4, r2
 800421e:	4618      	mov	r0, r3
 8004220:	4621      	mov	r1, r4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f04f 0400 	mov.w	r4, #0
 8004228:	461a      	mov	r2, r3
 800422a:	4623      	mov	r3, r4
 800422c:	f7fc f860 	bl	80002f0 <__aeabi_uldivmod>
 8004230:	4603      	mov	r3, r0
 8004232:	460c      	mov	r4, r1
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	e049      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x178>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 8003024:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	f04f 0400 	mov.w	r4, #0
 800302e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	ea03 0501 	and.w	r5, r3, r1
 800303a:	ea04 0602 	and.w	r6, r4, r2
 800303e:	4629      	mov	r1, r5
 8003040:	4632      	mov	r2, r6
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	f04f 0400 	mov.w	r4, #0
 800304a:	0154      	lsls	r4, r2, #5
 800304c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003050:	014b      	lsls	r3, r1, #5
 8003052:	4619      	mov	r1, r3
 8003054:	4622      	mov	r2, r4
 8003056:	1b49      	subs	r1, r1, r5
 8003058:	eb62 0206 	sbc.w	r2, r2, r6
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	f04f 0400 	mov.w	r4, #0
 8003064:	0194      	lsls	r4, r2, #6
 8003066:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800306a:	018b      	lsls	r3, r1, #6
 800306c:	1a5b      	subs	r3, r3, r1
 800306e:	eb64 0402 	sbc.w	r4, r4, r2
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	00e2      	lsls	r2, r4, #3
 800307c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003080:	00d9      	lsls	r1, r3, #3
 8003082:	460b      	mov	r3, r1
 8003084:	4614      	mov	r4, r2
 8003086:	195b      	adds	r3, r3, r5
 8003088:	eb44 0406 	adc.w	r4, r4, r6
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	02a2      	lsls	r2, r4, #10
 8003096:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800309a:	0299      	lsls	r1, r3, #10
 800309c:	460b      	mov	r3, r1
 800309e:	4614      	mov	r4, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	4621      	mov	r1, r4
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f04f 0400 	mov.w	r4, #0
 80030aa:	461a      	mov	r2, r3
 80030ac:	4623      	mov	r3, r4
 80030ae:	f7fd f91f 	bl	80002f0 <__aeabi_uldivmod>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030b8:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	3301      	adds	r3, #1
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	60bb      	str	r3, [r7, #8]
      break;
 80030d2:	e002      	b.n	80030da <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8004238:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	f04f 0400 	mov.w	r4, #0
 8004242:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	ea03 0501 	and.w	r5, r3, r1
 800424e:	ea04 0602 	and.w	r6, r4, r2
 8004252:	4629      	mov	r1, r5
 8004254:	4632      	mov	r2, r6
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	f04f 0400 	mov.w	r4, #0
 800425e:	0154      	lsls	r4, r2, #5
 8004260:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004264:	014b      	lsls	r3, r1, #5
 8004266:	4619      	mov	r1, r3
 8004268:	4622      	mov	r2, r4
 800426a:	1b49      	subs	r1, r1, r5
 800426c:	eb62 0206 	sbc.w	r2, r2, r6
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	f04f 0400 	mov.w	r4, #0
 8004278:	0194      	lsls	r4, r2, #6
 800427a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800427e:	018b      	lsls	r3, r1, #6
 8004280:	1a5b      	subs	r3, r3, r1
 8004282:	eb64 0402 	sbc.w	r4, r4, r2
 8004286:	f04f 0100 	mov.w	r1, #0
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	00e2      	lsls	r2, r4, #3
 8004290:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004294:	00d9      	lsls	r1, r3, #3
 8004296:	460b      	mov	r3, r1
 8004298:	4614      	mov	r4, r2
 800429a:	195b      	adds	r3, r3, r5
 800429c:	eb44 0406 	adc.w	r4, r4, r6
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	02a2      	lsls	r2, r4, #10
 80042aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042ae:	0299      	lsls	r1, r3, #10
 80042b0:	460b      	mov	r3, r1
 80042b2:	4614      	mov	r4, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	4621      	mov	r1, r4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f04f 0400 	mov.w	r4, #0
 80042be:	461a      	mov	r2, r3
 80042c0:	4623      	mov	r3, r4
 80042c2:	f7fc f815 	bl	80002f0 <__aeabi_uldivmod>
 80042c6:	4603      	mov	r3, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	3301      	adds	r3, #1
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	60bb      	str	r3, [r7, #8]
      break;
 80042e6:	e002      	b.n	80042ee <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80030d6:	60bb      	str	r3, [r7, #8]
      break;
 80030d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030da:	68bb      	ldr	r3, [r7, #8]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	007a1200 	.word	0x007a1200

080030f0 <HAL_RCC_GetHCLKFreq>:
=======
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042ea:	60bb      	str	r3, [r7, #8]
      break;
 80042ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ee:	68bb      	ldr	r3, [r7, #8]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f8:	40023800 	.word	0x40023800
 80042fc:	00f42400 	.word	0x00f42400
 8004300:	007a1200 	.word	0x007a1200

08004304 <HAL_RCC_GetHCLKFreq>:
>>>>>>> Stashed changes
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< Updated upstream
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetPCLK1Freq>:
=======
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <HAL_RCC_GetHCLKFreq+0x14>)
 800430a:	681b      	ldr	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000004 	.word	0x20000004

0800431c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< Updated upstream
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800310c:	f7ff fff0 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003110:	4601      	mov	r1, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0a9b      	lsrs	r3, r3, #10
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4a03      	ldr	r2, [pc, #12]	; (800312c <HAL_RCC_GetPCLK1Freq+0x24>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	0800785c 	.word	0x0800785c

08003130 <HAL_RCC_GetPCLK2Freq>:
=======
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004320:	f7ff fff0 	bl	8004304 <HAL_RCC_GetHCLKFreq>
 8004324:	4601      	mov	r1, r0
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0a9b      	lsrs	r3, r3, #10
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4a03      	ldr	r2, [pc, #12]	; (8004340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40023800 	.word	0x40023800
 8004340:	08008ff0 	.word	0x08008ff0

08004344 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> Stashed changes
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< Updated upstream
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003134:	f7ff ffdc 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003138:	4601      	mov	r1, r0
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0b5b      	lsrs	r3, r3, #13
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4a03      	ldr	r2, [pc, #12]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	0800785c 	.word	0x0800785c

08003158 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004348:	f7ff ffdc 	bl	8004304 <HAL_RCC_GetHCLKFreq>
 800434c:	4601      	mov	r1, r0
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	0b5b      	lsrs	r3, r3, #13
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	4a03      	ldr	r2, [pc, #12]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435a:	5cd3      	ldrb	r3, [r2, r3]
 800435c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40023800 	.word	0x40023800
 8004368:	08008ff0 	.word	0x08008ff0

0800436c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> Stashed changes
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< Updated upstream
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
=======
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
<<<<<<< Updated upstream
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d012      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
=======
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d012      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< Updated upstream
 8003180:	4b69      	ldr	r3, [pc, #420]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a68      	ldr	r2, [pc, #416]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800318a:	6093      	str	r3, [r2, #8]
 800318c:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003194:	4964      	ldr	r1, [pc, #400]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031a2:	2301      	movs	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
=======
 8004394:	4b69      	ldr	r3, [pc, #420]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a68      	ldr	r2, [pc, #416]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800439e:	6093      	str	r3, [r2, #8]
 80043a0:	4b66      	ldr	r3, [pc, #408]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a8:	4964      	ldr	r1, [pc, #400]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
<<<<<<< Updated upstream
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d017      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
=======
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d017      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< Updated upstream
 80031b2:	4b5d      	ldr	r3, [pc, #372]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	4959      	ldr	r1, [pc, #356]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d0:	d101      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031d2:	2301      	movs	r3, #1
 80031d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	61bb      	str	r3, [r7, #24]
=======
 80043c6:	4b5d      	ldr	r3, [pc, #372]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	4959      	ldr	r1, [pc, #356]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e4:	d101      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043f2:	2301      	movs	r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
<<<<<<< Updated upstream
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d017      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xc6>
=======
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d017      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xc6>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
<<<<<<< Updated upstream
 80031ee:	4b4e      	ldr	r3, [pc, #312]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	494a      	ldr	r1, [pc, #296]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320c:	d101      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800320e:	2301      	movs	r3, #1
 8003210:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	61bb      	str	r3, [r7, #24]
=======
 8004402:	4b4e      	ldr	r3, [pc, #312]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004408:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	494a      	ldr	r1, [pc, #296]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004420:	d101      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800442e:	2301      	movs	r3, #1
 8004430:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< Updated upstream
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	61fb      	str	r3, [r7, #28]
=======
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< Updated upstream
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 808b 	beq.w	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
=======
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 808b 	beq.w	8004566 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
>>>>>>> Stashed changes
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 800323c:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	4a39      	ldr	r2, [pc, #228]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003246:	6413      	str	r3, [r2, #64]	; 0x40
 8003248:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a34      	ldr	r2, [pc, #208]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fe fa98 	bl	8001794 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fe fa94 	bl	8001794 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e38d      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 8004450:	4b3a      	ldr	r3, [pc, #232]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4a39      	ldr	r2, [pc, #228]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	6413      	str	r3, [r2, #64]	; 0x40
 800445c:	4b37      	ldr	r3, [pc, #220]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004468:	4b35      	ldr	r3, [pc, #212]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a34      	ldr	r2, [pc, #208]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800446e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004474:	f7fd fdb0 	bl	8001fd8 <HAL_GetTick>
 8004478:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800447a:	e008      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447c:	f7fd fdac 	bl	8001fd8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e38d      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800448e:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f0      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> Stashed changes
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< Updated upstream
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d035      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d02e      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a4:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d114      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fa5c 	bl	8001794 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7fe fa58 	bl	8001794 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e34f      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ee      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 800449a:	4b28      	ldr	r3, [pc, #160]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d035      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d02e      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044b8:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a1d      	ldr	r2, [pc, #116]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044ce:	4b1b      	ldr	r3, [pc, #108]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4a1a      	ldr	r2, [pc, #104]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044da:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044e0:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d114      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fd74 	bl	8001fd8 <HAL_GetTick>
 80044f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	e00a      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fd fd70 	bl	8001fd8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e34f      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ee      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> Stashed changes
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< Updated upstream
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330e:	d111      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800331e:	400b      	ands	r3, r1
 8003320:	4901      	ldr	r1, [pc, #4]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
 8003326:	e00b      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003328:	40023800 	.word	0x40023800
 800332c:	40007000 	.word	0x40007000
 8003330:	0ffffcff 	.word	0x0ffffcff
 8003334:	4bb3      	ldr	r3, [pc, #716]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4ab2      	ldr	r2, [pc, #712]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800333e:	6093      	str	r3, [r2, #8]
 8003340:	4bb0      	ldr	r3, [pc, #704]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334c:	49ad      	ldr	r1, [pc, #692]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800334e:	4313      	orrs	r3, r2
 8003350:	670b      	str	r3, [r1, #112]	; 0x70
=======
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004522:	d111      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004532:	400b      	ands	r3, r1
 8004534:	4901      	ldr	r1, [pc, #4]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
 800453a:	e00b      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800453c:	40023800 	.word	0x40023800
 8004540:	40007000 	.word	0x40007000
 8004544:	0ffffcff 	.word	0x0ffffcff
 8004548:	4bb3      	ldr	r3, [pc, #716]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4ab2      	ldr	r2, [pc, #712]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800454e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004552:	6093      	str	r3, [r2, #8]
 8004554:	4bb0      	ldr	r3, [pc, #704]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004556:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004560:	49ad      	ldr	r1, [pc, #692]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004562:	4313      	orrs	r3, r2
 8004564:	670b      	str	r3, [r1, #112]	; 0x70
>>>>>>> Stashed changes
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
<<<<<<< Updated upstream
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x228>
=======
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x228>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< Updated upstream
 800335e:	4ba9      	ldr	r3, [pc, #676]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003364:	4aa7      	ldr	r2, [pc, #668]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800336e:	4ba5      	ldr	r3, [pc, #660]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003370:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	49a2      	ldr	r1, [pc, #648]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004572:	4ba9      	ldr	r3, [pc, #676]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004578:	4aa7      	ldr	r2, [pc, #668]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800457a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004582:	4ba5      	ldr	r3, [pc, #660]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004584:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	49a2      	ldr	r1, [pc, #648]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< Updated upstream
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< Updated upstream
 800338c:	4b9d      	ldr	r3, [pc, #628]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339a:	499a      	ldr	r1, [pc, #616]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80045a0:	4b9d      	ldr	r3, [pc, #628]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ae:	499a      	ldr	r1, [pc, #616]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< Updated upstream
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< Updated upstream
 80033ae:	4b95      	ldr	r3, [pc, #596]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033bc:	4991      	ldr	r1, [pc, #580]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80045c2:	4b95      	ldr	r3, [pc, #596]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d0:	4991      	ldr	r1, [pc, #580]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< Updated upstream
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
=======
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< Updated upstream
 80033d0:	4b8c      	ldr	r3, [pc, #560]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033de:	4989      	ldr	r1, [pc, #548]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80045e4:	4b8c      	ldr	r3, [pc, #560]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	4989      	ldr	r1, [pc, #548]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< Updated upstream
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
=======
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< Updated upstream
 80033f2:	4b84      	ldr	r3, [pc, #528]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4980      	ldr	r1, [pc, #512]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004606:	4b84      	ldr	r3, [pc, #528]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4980      	ldr	r1, [pc, #512]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< Updated upstream
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
=======
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< Updated upstream
 8003414:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341a:	f023 0203 	bic.w	r2, r3, #3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	4978      	ldr	r1, [pc, #480]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004628:	4b7b      	ldr	r3, [pc, #492]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	4978      	ldr	r1, [pc, #480]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< Updated upstream
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
=======
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< Updated upstream
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343c:	f023 020c 	bic.w	r2, r3, #12
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003444:	496f      	ldr	r1, [pc, #444]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800464a:	4b73      	ldr	r3, [pc, #460]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f023 020c 	bic.w	r2, r3, #12
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004658:	496f      	ldr	r1, [pc, #444]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< Updated upstream
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x316>
=======
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x316>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< Updated upstream
 8003458:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	4967      	ldr	r1, [pc, #412]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800466c:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	4967      	ldr	r1, [pc, #412]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< Updated upstream
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x338>
=======
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< Updated upstream
 800347a:	4b62      	ldr	r3, [pc, #392]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003488:	495e      	ldr	r1, [pc, #376]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800468e:	4b62      	ldr	r3, [pc, #392]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	495e      	ldr	r1, [pc, #376]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< Updated upstream
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
=======
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< Updated upstream
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	4956      	ldr	r1, [pc, #344]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80046b0:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	4956      	ldr	r1, [pc, #344]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
<<<<<<< Updated upstream
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
=======
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
<<<<<<< Updated upstream
 80034be:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80046d2:	4b51      	ldr	r3, [pc, #324]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	494d      	ldr	r1, [pc, #308]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
<<<<<<< Updated upstream
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
=======
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x39e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
<<<<<<< Updated upstream
 80034e0:	4b48      	ldr	r3, [pc, #288]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	4945      	ldr	r1, [pc, #276]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80046f4:	4b48      	ldr	r3, [pc, #288]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004702:	4945      	ldr	r1, [pc, #276]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
<<<<<<< Updated upstream
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
=======
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
<<<<<<< Updated upstream
 8003502:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003510:	493c      	ldr	r1, [pc, #240]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004716:	4b40      	ldr	r3, [pc, #256]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004724:	493c      	ldr	r1, [pc, #240]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< Updated upstream
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
=======
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< Updated upstream
 8003524:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003532:	4934      	ldr	r1, [pc, #208]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004738:	4b37      	ldr	r3, [pc, #220]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004746:	4934      	ldr	r1, [pc, #208]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
<<<<<<< Updated upstream
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d011      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x412>
=======
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x412>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
<<<<<<< Updated upstream
 8003546:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003554:	492b      	ldr	r1, [pc, #172]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
=======
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004768:	492b      	ldr	r1, [pc, #172]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004778:	d101      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800477a:	2301      	movs	r3, #1
 800477c:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< Updated upstream
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61bb      	str	r3, [r7, #24]
=======
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< Updated upstream
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x444>
=======
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< Updated upstream
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	491b      	ldr	r1, [pc, #108]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 800479a:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a8:	491b      	ldr	r1, [pc, #108]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
<<<<<<< Updated upstream
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
=======
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00b      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
<<<<<<< Updated upstream
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b8:	4912      	ldr	r1, [pc, #72]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80047bc:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047cc:	4912      	ldr	r1, [pc, #72]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
<<<<<<< Updated upstream
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
=======
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
<<<<<<< Updated upstream
 80035cc:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035dc:	4909      	ldr	r1, [pc, #36]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f0:	4909      	ldr	r1, [pc, #36]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> Stashed changes
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< Updated upstream
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00f      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
=======
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00f      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< Updated upstream
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	e002      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	4985      	ldr	r1, [pc, #532]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	e002      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800
 800481c:	4985      	ldr	r1, [pc, #532]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
<<<<<<< Updated upstream
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00b      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
=======
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
<<<<<<< Updated upstream
 800361c:	4b80      	ldr	r3, [pc, #512]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800361e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003622:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362c:	497c      	ldr	r1, [pc, #496]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004830:	4b80      	ldr	r3, [pc, #512]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004836:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004840:	497c      	ldr	r1, [pc, #496]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
<<<<<<< Updated upstream
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d005      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003642:	f040 80d6 	bne.w	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003646:	4b76      	ldr	r3, [pc, #472]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a75      	ldr	r2, [pc, #468]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800364c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003652:	f7fe f89f 	bl	8001794 <HAL_GetTick>
 8003656:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003658:	e008      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800365a:	f7fe f89b 	bl	8001794 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b64      	cmp	r3, #100	; 0x64
 8003666:	d901      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e194      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800366c:	4b6c      	ldr	r3, [pc, #432]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x502>
=======
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d005      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004856:	f040 80d6 	bne.w	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a75      	ldr	r2, [pc, #468]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004860:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004866:	f7fd fbb7 	bl	8001fd8 <HAL_GetTick>
 800486a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800486e:	f7fd fbb3 	bl	8001fd8 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b64      	cmp	r3, #100	; 0x64
 800487a:	d901      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e194      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004880:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x502>
>>>>>>> Stashed changes

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
<<<<<<< Updated upstream
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d021      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11d      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
=======
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d021      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11d      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x570>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< Updated upstream
 800368c:	4b64      	ldr	r3, [pc, #400]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800369a:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800369c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a0:	0e1b      	lsrs	r3, r3, #24
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	60fb      	str	r3, [r7, #12]
=======
 80048a0:	4b64      	ldr	r3, [pc, #400]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ae:	4b61      	ldr	r3, [pc, #388]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b4:	0e1b      	lsrs	r3, r3, #24
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< Updated upstream
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	019a      	lsls	r2, r3, #6
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	431a      	orrs	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	061b      	lsls	r3, r3, #24
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	071b      	lsls	r3, r3, #28
 80036c0:	4957      	ldr	r1, [pc, #348]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	019a      	lsls	r2, r3, #6
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	431a      	orrs	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	071b      	lsls	r3, r3, #28
 80048d4:	4957      	ldr	r1, [pc, #348]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
<<<<<<< Updated upstream
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x586>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d02e      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f2:	d129      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
=======
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d02e      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004906:	d129      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< Updated upstream
 80036f4:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	0c1b      	lsrs	r3, r3, #16
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003702:	4b47      	ldr	r3, [pc, #284]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003708:	0f1b      	lsrs	r3, r3, #28
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
=======
 8004908:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800490a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	0f1b      	lsrs	r3, r3, #28
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
<<<<<<< Updated upstream
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	019a      	lsls	r2, r3, #6
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	431a      	orrs	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	071b      	lsls	r3, r3, #28
 8003728:	493d      	ldr	r1, [pc, #244]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003736:	f023 021f 	bic.w	r2, r3, #31
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	3b01      	subs	r3, #1
 8003740:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	019a      	lsls	r2, r3, #6
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	061b      	lsls	r3, r3, #24
 8004936:	431a      	orrs	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	071b      	lsls	r3, r3, #28
 800493c:	493d      	ldr	r1, [pc, #244]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004944:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494a:	f023 021f 	bic.w	r2, r3, #31
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	3b01      	subs	r3, #1
 8004954:	4937      	ldr	r1, [pc, #220]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< Updated upstream
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01d      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x638>
=======
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01d      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x638>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
<<<<<<< Updated upstream
 8003754:	4b32      	ldr	r3, [pc, #200]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375a:	0e1b      	lsrs	r3, r3, #24
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003762:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003768:	0f1b      	lsrs	r3, r3, #28
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	60fb      	str	r3, [r7, #12]
=======
 8004968:	4b32      	ldr	r3, [pc, #200]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800496e:	0e1b      	lsrs	r3, r3, #24
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004976:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497c:	0f1b      	lsrs	r3, r3, #28
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
<<<<<<< Updated upstream
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	019a      	lsls	r2, r3, #6
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	431a      	orrs	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	071b      	lsls	r3, r3, #28
 8003788:	4925      	ldr	r1, [pc, #148]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	019a      	lsls	r2, r3, #6
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	431a      	orrs	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	431a      	orrs	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	071b      	lsls	r3, r3, #28
 800499c:	4925      	ldr	r1, [pc, #148]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
<<<<<<< Updated upstream
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d011      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x668>
=======
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d011      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x668>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< Updated upstream
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	019a      	lsls	r2, r3, #6
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	061b      	lsls	r3, r3, #24
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	071b      	lsls	r3, r3, #28
 80037b8:	4919      	ldr	r1, [pc, #100]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	019a      	lsls	r2, r3, #6
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	071b      	lsls	r3, r3, #28
 80049cc:	4919      	ldr	r1, [pc, #100]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> Stashed changes
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< Updated upstream
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037cc:	f7fd ffe2 	bl	8001794 <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037d4:	f7fd ffde 	bl	8001794 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0d7      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
=======
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e0:	f7fd fafa 	bl	8001fd8 <HAL_GetTick>
 80049e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049e8:	f7fd faf6 	bl	8001fd8 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e0d7      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049fa:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
<<<<<<< Updated upstream
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 80cd 	bne.w	8003994 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003806:	f7fd ffc5 	bl	8001794 <HAL_GetTick>
 800380a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800380e:	f7fd ffc1 	bl	8001794 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	d903      	bls.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0ba      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003820:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003824:	4b5e      	ldr	r3, [pc, #376]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800382c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003830:	d0ed      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
=======
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	f040 80cd 	bne.w	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a0e:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1a:	f7fd fadd 	bl	8001fd8 <HAL_GetTick>
 8004a1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a22:	f7fd fad9 	bl	8001fd8 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b64      	cmp	r3, #100	; 0x64
 8004a2e:	d903      	bls.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e0ba      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004a34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a38:	4b5e      	ldr	r3, [pc, #376]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a44:	d0ed      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
>>>>>>> Stashed changes

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
<<<<<<< Updated upstream
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02e      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d12a      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x758>
=======
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d02e      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d12a      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x758>
>>>>>>> Stashed changes
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
<<<<<<< Updated upstream
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003868:	4b4d      	ldr	r3, [pc, #308]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	0f1b      	lsrs	r3, r3, #28
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
=======
 8004a6e:	4b51      	ldr	r3, [pc, #324]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a7c:	4b4d      	ldr	r3, [pc, #308]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	0f1b      	lsrs	r3, r3, #28
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
<<<<<<< Updated upstream
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	019a      	lsls	r2, r3, #6
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	061b      	lsls	r3, r3, #24
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	4944      	ldr	r1, [pc, #272]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003896:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	3b01      	subs	r3, #1
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	493d      	ldr	r1, [pc, #244]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	019a      	lsls	r2, r3, #6
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	071b      	lsls	r3, r3, #28
 8004aa2:	4944      	ldr	r1, [pc, #272]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004aaa:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	493d      	ldr	r1, [pc, #244]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
<<<<<<< Updated upstream
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d022      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c4:	d11d      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
=======
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d022      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad8:	d11d      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
>>>>>>> Stashed changes
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< Updated upstream
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	0e1b      	lsrs	r3, r3, #24
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038d4:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	0f1b      	lsrs	r3, r3, #28
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	60fb      	str	r3, [r7, #12]
=======
 8004ada:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ae8:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	0f1b      	lsrs	r3, r3, #28
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
<<<<<<< Updated upstream
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	019a      	lsls	r2, r3, #6
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	061b      	lsls	r3, r3, #24
 80038f4:	431a      	orrs	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	071b      	lsls	r3, r3, #28
 80038fa:	4929      	ldr	r1, [pc, #164]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	019a      	lsls	r2, r3, #6
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	431a      	orrs	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	071b      	lsls	r3, r3, #28
 8004b0e:	4929      	ldr	r1, [pc, #164]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> Stashed changes
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
<<<<<<< Updated upstream
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d028      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x808>
=======
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d028      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x808>
>>>>>>> Stashed changes
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< Updated upstream
 800390e:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	0e1b      	lsrs	r3, r3, #24
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800391c:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	60fb      	str	r3, [r7, #12]
=======
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
<<<<<<< Updated upstream
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	019a      	lsls	r2, r3, #6
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	041b      	lsls	r3, r3, #16
 8003934:	431a      	orrs	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	061b      	lsls	r3, r3, #24
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	071b      	lsls	r3, r3, #28
 8003942:	4917      	ldr	r1, [pc, #92]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800394c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4911      	ldr	r1, [pc, #68]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	019a      	lsls	r2, r3, #6
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	071b      	lsls	r3, r3, #28
 8004b56:	4917      	ldr	r1, [pc, #92]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4911      	ldr	r1, [pc, #68]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> Stashed changes
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
<<<<<<< Updated upstream
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fd ff12 	bl	8001794 <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003974:	f7fd ff0e 	bl	8001794 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e007      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800398e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003992:	d1ef      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x81c>
=======
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fd fa2a 	bl	8001fd8 <HAL_GetTick>
 8004b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b88:	f7fd fa26 	bl	8001fd8 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e007      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba6:	d1ef      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x81c>
>>>>>>> Stashed changes
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800

080039a4 <HAL_SPI_Init>:
=======
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <HAL_SPI_Init>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
=======
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< Updated upstream
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e084      	b.n	8003ac0 <HAL_SPI_Init+0x11c>
=======
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e084      	b.n	8004cd4 <HAL_SPI_Init+0x11c>
>>>>>>> Stashed changes
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< Updated upstream
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
=======
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
>>>>>>> Stashed changes

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< Updated upstream
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7fd fbcb 	bl	800116c <HAL_SPI_MspInit>
=======
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fc fe7b 	bl	80018e0 <HAL_SPI_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< Updated upstream
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039f6:	d902      	bls.n	80039fe <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e002      	b.n	8003a04 <HAL_SPI_Init+0x60>
=======
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c00:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0a:	d902      	bls.n	8004c12 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e002      	b.n	8004c18 <HAL_SPI_Init+0x60>
>>>>>>> Stashed changes
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< Updated upstream
 80039fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a02:	60fb      	str	r3, [r7, #12]
=======
 8004c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c16:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< Updated upstream
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a0c:	d007      	beq.n	8003a1e <HAL_SPI_Init+0x7a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a16:	d002      	beq.n	8003a1e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c20:	d007      	beq.n	8004c32 <HAL_SPI_Init+0x7a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c2a:	d002      	beq.n	8004c32 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> Stashed changes
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
<<<<<<< Updated upstream
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a2e:	d903      	bls.n	8003a38 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
 8003a36:	e002      	b.n	8003a3e <HAL_SPI_Init+0x9a>
=======
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c42:	d903      	bls.n	8004c4c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
 8004c4a:	e002      	b.n	8004c52 <HAL_SPI_Init+0x9a>
>>>>>>> Stashed changes
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
<<<<<<< Updated upstream
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
<<<<<<< Updated upstream
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	ea42 0103 	orr.w	r1, r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]
=======
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	ea42 0103 	orr.w	r1, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
<<<<<<< Updated upstream
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	f003 0204 	and.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	ea42 0103 	orr.w	r1, r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	605a      	str	r2, [r3, #4]
=======
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	f003 0204 	and.w	r2, r3, #4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	ea42 0103 	orr.w	r1, r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< Updated upstream
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_SPI_Receive_DMA>:
=======
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_SPI_Receive_DMA>:
>>>>>>> Stashed changes
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
<<<<<<< Updated upstream
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]
=======
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
<<<<<<< Updated upstream
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d110      	bne.n	8003b04 <HAL_SPI_Receive_DMA+0x3c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aea:	d10b      	bne.n	8003b04 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2204      	movs	r2, #4
 8003af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
=======
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d110      	bne.n	8004d18 <HAL_SPI_Receive_DMA+0x3c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d10b      	bne.n	8004d18 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2204      	movs	r2, #4
 8004d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
>>>>>>> Stashed changes

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
<<<<<<< Updated upstream
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f900 	bl	8003d00 <HAL_SPI_TransmitReceive_DMA>
 8003b00:	4603      	mov	r3, r0
 8003b02:	e0f3      	b.n	8003cec <HAL_SPI_Receive_DMA+0x224>
=======
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f900 	bl	8004f14 <HAL_SPI_TransmitReceive_DMA>
 8004d14:	4603      	mov	r3, r0
 8004d16:	e0f3      	b.n	8004f00 <HAL_SPI_Receive_DMA+0x224>
>>>>>>> Stashed changes
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Receive_DMA+0x4a>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e0ec      	b.n	8003cec <HAL_SPI_Receive_DMA+0x224>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d002      	beq.n	8003b2c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
 8003b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b2a:	e0da      	b.n	8003ce2 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_Receive_DMA+0x70>
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b3c:	e0d1      	b.n	8003ce2 <HAL_SPI_Receive_DMA+0x21a>
=======
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_SPI_Receive_DMA+0x4a>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0ec      	b.n	8004f00 <HAL_SPI_Receive_DMA+0x224>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d3e:	e0da      	b.n	8004ef6 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_SPI_Receive_DMA+0x70>
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d102      	bne.n	8004d52 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d50:	e0d1      	b.n	8004ef6 <HAL_SPI_Receive_DMA+0x21a>
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< Updated upstream
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2204      	movs	r2, #4
 8003b42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d107      	bne.n	8003b94 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b92:	601a      	str	r2, [r3, #0]
=======
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2204      	movs	r2, #4
 8004d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	88fa      	ldrh	r2, [r7, #6]
 8004d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d96:	d107      	bne.n	8004da8 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004da6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
<<<<<<< Updated upstream
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bac:	d908      	bls.n	8003bc0 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	e042      	b.n	8003c46 <HAL_SPI_Receive_DMA+0x17e>
=======
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dc0:	d908      	bls.n	8004dd4 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	e042      	b.n	8004e5a <HAL_SPI_Receive_DMA+0x17e>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
<<<<<<< Updated upstream
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bce:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bda:	d134      	bne.n	8003c46 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bea:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d111      	bne.n	8003c20 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c0a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c1e:	e012      	b.n	8003c46 <HAL_SPI_Receive_DMA+0x17e>
=======
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004de2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	d134      	bne.n	8004e5a <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dfe:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d111      	bne.n	8004e34 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e1e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004e32:	e012      	b.n	8004e5a <HAL_SPI_Receive_DMA+0x17e>
>>>>>>> Stashed changes
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
<<<<<<< Updated upstream
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c2e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
=======
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e42:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
<<<<<<< Updated upstream
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4a:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <HAL_SPI_Receive_DMA+0x22c>)
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <HAL_SPI_Receive_DMA+0x230>)
 8003c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	4a28      	ldr	r2, [pc, #160]	; (8003cfc <HAL_SPI_Receive_DMA+0x234>)
 8003c5c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	2200      	movs	r2, #0
 8003c64:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	330c      	adds	r3, #12
 8003c70:	4619      	mov	r1, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	461a      	mov	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f7fd ff76 	bl	8001b70 <HAL_DMA_Start_IT>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	f043 0210 	orr.w	r2, r3, #16
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003ca2:	e01e      	b.n	8003ce2 <HAL_SPI_Receive_DMA+0x21a>
=======
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <HAL_SPI_Receive_DMA+0x22c>)
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	4a29      	ldr	r2, [pc, #164]	; (8004f0c <HAL_SPI_Receive_DMA+0x230>)
 8004e68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	4a28      	ldr	r2, [pc, #160]	; (8004f10 <HAL_SPI_Receive_DMA+0x234>)
 8004e70:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	2200      	movs	r2, #0
 8004e78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	4619      	mov	r1, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f7fd fee4 	bl	8002c60 <HAL_DMA_Start_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea2:	f043 0210 	orr.w	r2, r3, #16
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004eb6:	e01e      	b.n	8004ef6 <HAL_SPI_Receive_DMA+0x21a>
>>>>>>> Stashed changes
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d007      	beq.n	8003cc2 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc0:	601a      	str	r2, [r3, #0]
=======
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d007      	beq.n	8004ed6 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed4:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
<<<<<<< Updated upstream
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	605a      	str	r2, [r3, #4]
=======
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0220 	orr.w	r2, r2, #32
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0201 	orr.w	r2, r2, #1
 8004ef4:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
<<<<<<< Updated upstream
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	08004181 	.word	0x08004181
 8003cf8:	08004069 	.word	0x08004069
 8003cfc:	080041b9 	.word	0x080041b9

08003d00 <HAL_SPI_TransmitReceive_DMA>:
=======
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	08005395 	.word	0x08005395
 8004f0c:	0800527d 	.word	0x0800527d
 8004f10:	080053cd 	.word	0x080053cd

08004f14 <HAL_SPI_TransmitReceive_DMA>:
>>>>>>> Stashed changes
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
<<<<<<< Updated upstream
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
=======
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
<<<<<<< Updated upstream
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e16c      	b.n	8003ffa <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d2e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003d36:	7dbb      	ldrb	r3, [r7, #22]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d00d      	beq.n	8003d58 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d42:	d106      	bne.n	8003d52 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003d4c:	7dbb      	ldrb	r3, [r7, #22]
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d002      	beq.n	8003d58 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
 8003d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d56:	e14b      	b.n	8003ff0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003d64:	887b      	ldrh	r3, [r7, #2]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d6e:	e13f      	b.n	8003ff0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
=======
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e16c      	b.n	800520e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f42:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004f4a:	7dbb      	ldrb	r3, [r7, #22]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d00d      	beq.n	8004f6c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f56:	d106      	bne.n	8004f66 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004f60:	7dbb      	ldrb	r3, [r7, #22]
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
 8004f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f6a:	e14b      	b.n	8005204 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004f78:	887b      	ldrh	r3, [r7, #2]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f82:	e13f      	b.n	8005204 <HAL_SPI_TransmitReceive_DMA+0x2f0>
>>>>>>> Stashed changes
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d003      	beq.n	8003d84 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
=======
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d003      	beq.n	8004f98 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2205      	movs	r2, #5
 8004f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
>>>>>>> Stashed changes
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< Updated upstream
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	887a      	ldrh	r2, [r7, #2]
 8003d94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	887a      	ldrh	r2, [r7, #2]
 8003d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	887a      	ldrh	r2, [r7, #2]
 8003da6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	887a      	ldrh	r2, [r7, #2]
 8003dae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	887a      	ldrh	r2, [r7, #2]
 8004fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	887a      	ldrh	r2, [r7, #2]
 8004fae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	887a      	ldrh	r2, [r7, #2]
 8004fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	887a      	ldrh	r2, [r7, #2]
 8004fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> Stashed changes
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
<<<<<<< Updated upstream
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003dcc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dd6:	d908      	bls.n	8003dea <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	e06f      	b.n	8003eca <HAL_SPI_TransmitReceive_DMA+0x1ca>
=======
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004fe0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fea:	d908      	bls.n	8004ffe <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	e06f      	b.n	80050de <HAL_SPI_TransmitReceive_DMA+0x1ca>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
<<<<<<< Updated upstream
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003df8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d126      	bne.n	8003e54 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e20:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e30:	e010      	b.n	8003e54 <HAL_SPI_TransmitReceive_DMA+0x154>
=======
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800500c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005018:	d126      	bne.n	8005068 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10f      	bne.n	8005046 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005034:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503a:	b29b      	uxth	r3, r3
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005044:	e010      	b.n	8005068 <HAL_SPI_TransmitReceive_DMA+0x154>
>>>>>>> Stashed changes
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
<<<<<<< Updated upstream
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e40:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	87da      	strh	r2, [r3, #62]	; 0x3e
=======
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005054:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	b29b      	uxth	r3, r3
 8005060:	3301      	adds	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	87da      	strh	r2, [r3, #62]	; 0x3e
>>>>>>> Stashed changes
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	d134      	bne.n	8003eca <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e6e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d111      	bne.n	8003ea4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e8e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ea2:	e012      	b.n	8003eca <HAL_SPI_TransmitReceive_DMA+0x1ca>
=======
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005072:	d134      	bne.n	80050de <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005082:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800508a:	b29b      	uxth	r3, r3
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d111      	bne.n	80050b8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80050b6:	e012      	b.n	80050de <HAL_SPI_TransmitReceive_DMA+0x1ca>
>>>>>>> Stashed changes
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
<<<<<<< Updated upstream
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	085b      	lsrs	r3, r3, #1
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
=======
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050c6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3301      	adds	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
>>>>>>> Stashed changes
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
<<<<<<< Updated upstream
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d108      	bne.n	8003ee8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	4a4a      	ldr	r2, [pc, #296]	; (8004004 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	4a49      	ldr	r2, [pc, #292]	; (8004008 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003ee4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ee6:	e007      	b.n	8003ef8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
=======
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d108      	bne.n	80050fc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	4a4a      	ldr	r2, [pc, #296]	; (8005218 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a49      	ldr	r2, [pc, #292]	; (800521c <HAL_SPI_TransmitReceive_DMA+0x308>)
 80050f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80050fa:	e007      	b.n	800510c <HAL_SPI_TransmitReceive_DMA+0x1f8>
>>>>>>> Stashed changes
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
<<<<<<< Updated upstream
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	4a47      	ldr	r2, [pc, #284]	; (800400c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	4a46      	ldr	r2, [pc, #280]	; (8004010 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	4a47      	ldr	r2, [pc, #284]	; (8005220 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8005102:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005108:	4a46      	ldr	r2, [pc, #280]	; (8005224 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800510a:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
<<<<<<< Updated upstream
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	4a45      	ldr	r2, [pc, #276]	; (8004014 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8003efe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	2200      	movs	r2, #0
 8003f06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	4619      	mov	r1, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f7fd fe25 	bl	8001b70 <HAL_DMA_Start_IT>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f30:	f043 0210 	orr.w	r2, r3, #16
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003f44:	e054      	b.n	8003ff0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
=======
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	4a45      	ldr	r2, [pc, #276]	; (8005228 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8005112:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	2200      	movs	r2, #0
 800511a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	4619      	mov	r1, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	461a      	mov	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005134:	b29b      	uxth	r3, r3
 8005136:	f7fd fd93 	bl	8002c60 <HAL_DMA_Start_IT>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005144:	f043 0210 	orr.w	r2, r3, #16
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005158:	e054      	b.n	8005204 <HAL_SPI_TransmitReceive_DMA+0x2f0>
>>>>>>> Stashed changes
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
<<<<<<< Updated upstream
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	605a      	str	r2, [r3, #4]
=======
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
<<<<<<< Updated upstream
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	2200      	movs	r2, #0
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	2200      	movs	r2, #0
 8003f74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4619      	mov	r1, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f7fd fdef 	bl	8001b70 <HAL_DMA_Start_IT>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	f043 0210 	orr.w	r2, r3, #16
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003fb0:	e01e      	b.n	8003ff0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
=======
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	2200      	movs	r2, #0
 8005170:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	2200      	movs	r2, #0
 8005178:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	2200      	movs	r2, #0
 8005180:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	2200      	movs	r2, #0
 8005188:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	4619      	mov	r1, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	461a      	mov	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f7fd fd5d 	bl	8002c60 <HAL_DMA_Start_IT>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b0:	f043 0210 	orr.w	r2, r3, #16
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80051c4:	e01e      	b.n	8005204 <HAL_SPI_TransmitReceive_DMA+0x2f0>
>>>>>>> Stashed changes
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< Updated upstream
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d007      	beq.n	8003fd0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fce:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0220 	orr.w	r2, r2, #32
 8003fde:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0202 	orr.w	r2, r2, #2
 8003fee:	605a      	str	r2, [r3, #4]
=======
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	d007      	beq.n	80051e4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0220 	orr.w	r2, r2, #32
 80051f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0202 	orr.w	r2, r2, #2
 8005202:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
<<<<<<< Updated upstream
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	08004181 	.word	0x08004181
 8004008:	08004069 	.word	0x08004069
 800400c:	0800419d 	.word	0x0800419d
 8004010:	080040ef 	.word	0x080040ef
 8004014:	080041b9 	.word	0x080041b9

08004018 <HAL_SPI_TxRxCpltCallback>:
=======
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	08005395 	.word	0x08005395
 800521c:	0800527d 	.word	0x0800527d
 8005220:	080053b1 	.word	0x080053b1
 8005224:	08005303 	.word	0x08005303
 8005228:	080053cd 	.word	0x080053cd

0800522c <HAL_SPI_TxRxCpltCallback>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
=======
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_SPI_RxHalfCpltCallback>:
=======
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_SPI_RxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
=======
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_SPI_TxRxHalfCpltCallback>:
=======
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_SPI_TxRxHalfCpltCallback>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
=======
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_SPI_ErrorCallback>:
=======
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_SPI_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< Updated upstream
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
=======
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< Updated upstream
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <SPI_DMAReceiveCplt>:
=======
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <SPI_DMAReceiveCplt>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	60fb      	str	r3, [r7, #12]
=======
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 8004076:	f7fd fb8d 	bl	8001794 <HAL_GetTick>
 800407a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d02a      	beq.n	80040e2 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0220 	bic.w	r2, r2, #32
 800409a:	605a      	str	r2, [r3, #4]
=======
 800528a:	f7fc fea5 	bl	8001fd8 <HAL_GetTick>
 800528e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529e:	d02a      	beq.n	80052f6 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0220 	bic.w	r2, r2, #32
 80052ae:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
<<<<<<< Updated upstream
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0203 	bic.w	r2, r2, #3
 80040aa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	2164      	movs	r1, #100	; 0x64
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f978 	bl	80043a6 <SPI_EndRxTransaction>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
=======
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0203 	bic.w	r2, r2, #3
 80052be:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	2164      	movs	r1, #100	; 0x64
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f978 	bl	80055ba <SPI_EndRxTransaction>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2220      	movs	r2, #32
 80052d4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
>>>>>>> Stashed changes
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< Updated upstream
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <SPI_DMAReceiveCplt+0x7a>
=======
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <SPI_DMAReceiveCplt+0x7a>
>>>>>>> Stashed changes
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
<<<<<<< Updated upstream
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff ffba 	bl	8004054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80040e0:	e002      	b.n	80040e8 <SPI_DMAReceiveCplt+0x80>
=======
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff ffba 	bl	8005268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80052f4:	e002      	b.n	80052fc <SPI_DMAReceiveCplt+0x80>
>>>>>>> Stashed changes
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
<<<<<<< Updated upstream
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7fc feea 	bl	8000ebc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <SPI_DMATransmitReceiveCplt>:
=======
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7fc f806 	bl	8001308 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <SPI_DMATransmitReceiveCplt>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	60fb      	str	r3, [r7, #12]
=======
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80040fc:	f7fd fb4a 	bl	8001794 <HAL_GetTick>
 8004100:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004110:	d030      	beq.n	8004174 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0220 	bic.w	r2, r2, #32
 8004120:	605a      	str	r2, [r3, #4]
=======
 8005310:	f7fc fe62 	bl	8001fd8 <HAL_GetTick>
 8005314:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d030      	beq.n	8005388 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0220 	bic.w	r2, r2, #32
 8005334:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
<<<<<<< Updated upstream
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	2164      	movs	r1, #100	; 0x64
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f995 	bl	8004456 <SPI_EndRxTxTransaction>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	f043 0220 	orr.w	r2, r3, #32
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	661a      	str	r2, [r3, #96]	; 0x60
=======
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	2164      	movs	r1, #100	; 0x64
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f995 	bl	800566a <SPI_EndRxTxTransaction>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> Stashed changes
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
<<<<<<< Updated upstream
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0203 	bic.w	r2, r2, #3
 800414c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
=======
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0203 	bic.w	r2, r2, #3
 8005360:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
>>>>>>> Stashed changes
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< Updated upstream
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <SPI_DMATransmitReceiveCplt+0x86>
=======
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <SPI_DMATransmitReceiveCplt+0x86>
>>>>>>> Stashed changes
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
<<<<<<< Updated upstream
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff ff71 	bl	8004054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004172:	e002      	b.n	800417a <SPI_DMATransmitReceiveCplt+0x8c>
=======
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ff71 	bl	8005268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005386:	e002      	b.n	800538e <SPI_DMATransmitReceiveCplt+0x8c>
>>>>>>> Stashed changes
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
<<<<<<< Updated upstream
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff ff4f 	bl	8004018 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <SPI_DMAHalfReceiveCplt>:
=======
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff ff4f 	bl	800522c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SPI_DMAHalfReceiveCplt>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	60fb      	str	r3, [r7, #12]
=======
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
<<<<<<< Updated upstream
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff ff4c 	bl	800402c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <SPI_DMAHalfTransmitReceiveCplt>:
=======
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff ff4c 	bl	8005240 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <SPI_DMAHalfTransmitReceiveCplt>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	60fb      	str	r3, [r7, #12]
=======
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
<<<<<<< Updated upstream
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff ff48 	bl	8004040 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <SPI_DMAError>:
=======
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7ff ff48 	bl	8005254 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <SPI_DMAError>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0203 	bic.w	r2, r2, #3
 80041d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041da:	f043 0210 	orr.w	r2, r3, #16
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
=======
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0203 	bic.w	r2, r2, #3
 80053e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ee:	f043 0210 	orr.w	r2, r3, #16
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
>>>>>>> Stashed changes
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
<<<<<<< Updated upstream
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff ff32 	bl	8004054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <SPI_WaitFlagStateUntilTimeout>:
=======
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff ff32 	bl	8005268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004208:	e04c      	b.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004210:	d048      	beq.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004212:	f7fd fabf 	bl	8001794 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d902      	bls.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d13d      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0xac>
=======
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541c:	e04c      	b.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d048      	beq.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005426:	f7fc fdd7 	bl	8001fd8 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d902      	bls.n	800543c <SPI_WaitFlagStateUntilTimeout+0x30>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d13d      	bne.n	80054b8 <SPI_WaitFlagStateUntilTimeout+0xac>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004236:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004240:	d111      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424a:	d004      	beq.n	8004256 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004254:	d107      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004264:	601a      	str	r2, [r3, #0]
=======
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800544a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005454:	d111      	bne.n	800547a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800545e:	d004      	beq.n	800546a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005468:	d107      	bne.n	800547a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005478:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426e:	d10f      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800428e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e00f      	b.n	80042c4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d1a3      	bne.n	800420a <SPI_WaitFlagStateUntilTimeout+0x12>
=======
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005482:	d10f      	bne.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e00f      	b.n	80054d8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d1a3      	bne.n	800541e <SPI_WaitFlagStateUntilTimeout+0x12>
>>>>>>> Stashed changes
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <SPI_WaitFifoStateUntilTimeout>:
=======
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <SPI_WaitFifoStateUntilTimeout>:
>>>>>>> Stashed changes
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80042da:	e057      	b.n	800438c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042e2:	d106      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0x26>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d048      	beq.n	800438c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80042fa:	f7fd fa4b 	bl	8001794 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d902      	bls.n	8004310 <SPI_WaitFifoStateUntilTimeout+0x44>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d13d      	bne.n	800438c <SPI_WaitFifoStateUntilTimeout+0xc0>
=======
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80054ee:	e057      	b.n	80055a0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054f6:	d106      	bne.n	8005506 <SPI_WaitFifoStateUntilTimeout+0x26>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d048      	beq.n	80055a0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800550e:	f7fc fd63 	bl	8001fd8 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d902      	bls.n	8005524 <SPI_WaitFifoStateUntilTimeout+0x44>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d13d      	bne.n	80055a0 <SPI_WaitFifoStateUntilTimeout+0xc0>
>>>>>>> Stashed changes
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< Updated upstream
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800431e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004328:	d111      	bne.n	800434e <SPI_WaitFifoStateUntilTimeout+0x82>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004332:	d004      	beq.n	800433e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433c:	d107      	bne.n	800434e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	601a      	str	r2, [r3, #0]
=======
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005532:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800553c:	d111      	bne.n	8005562 <SPI_WaitFifoStateUntilTimeout+0x82>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005546:	d004      	beq.n	8005552 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005550:	d107      	bne.n	8005562 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005560:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< Updated upstream
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004356:	d10f      	bne.n	8004378 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004376:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e008      	b.n	800439e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4013      	ands	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d19f      	bne.n	80042dc <SPI_WaitFifoStateUntilTimeout+0x10>
=======
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556a:	d10f      	bne.n	800558c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800558a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e008      	b.n	80055b2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4013      	ands	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d19f      	bne.n	80054f0 <SPI_WaitFifoStateUntilTimeout+0x10>
>>>>>>> Stashed changes
      }
    }
  }

  return HAL_OK;
<<<<<<< Updated upstream
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <SPI_EndRxTransaction>:
=======
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <SPI_EndRxTransaction>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af02      	add	r7, sp, #8
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ba:	d111      	bne.n	80043e0 <SPI_EndRxTransaction+0x3a>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c4:	d004      	beq.n	80043d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ce:	d107      	bne.n	80043e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043de:	601a      	str	r2, [r3, #0]
=======
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af02      	add	r7, sp, #8
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ce:	d111      	bne.n	80055f4 <SPI_EndRxTransaction+0x3a>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d8:	d004      	beq.n	80055e4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e2:	d107      	bne.n	80055f4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f2:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7ff ff04 	bl	80041f8 <SPI_WaitFlagStateUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e023      	b.n	800444e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d11d      	bne.n	800444c <SPI_EndRxTransaction+0xa6>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004418:	d004      	beq.n	8004424 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d113      	bne.n	800444c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff ff4b 	bl	80042cc <SPI_WaitFifoStateUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e000      	b.n	800444e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <SPI_EndRxTxTransaction>:
=======
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	2180      	movs	r1, #128	; 0x80
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff ff04 	bl	800540c <SPI_WaitFlagStateUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e023      	b.n	8005662 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005622:	d11d      	bne.n	8005660 <SPI_EndRxTransaction+0xa6>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562c:	d004      	beq.n	8005638 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005636:	d113      	bne.n	8005660 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff4b 	bl	80054e0 <SPI_WaitFifoStateUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	f043 0220 	orr.w	r2, r3, #32
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e000      	b.n	8005662 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <SPI_EndRxTxTransaction>:
>>>>>>> Stashed changes
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< Updated upstream
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af02      	add	r7, sp, #8
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2200      	movs	r2, #0
 800446a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff ff2c 	bl	80042cc <SPI_WaitFifoStateUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447e:	f043 0220 	orr.w	r2, r3, #32
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e027      	b.n	80044da <SPI_EndRxTxTransaction+0x84>
=======
 800566a:	b580      	push	{r7, lr}
 800566c:	b086      	sub	sp, #24
 800566e:	af02      	add	r7, sp, #8
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff ff2c 	bl	80054e0 <SPI_WaitFifoStateUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	f043 0220 	orr.w	r2, r3, #32
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e027      	b.n	80056ee <SPI_EndRxTxTransaction+0x84>
>>>>>>> Stashed changes
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2200      	movs	r2, #0
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff feaf 	bl	80041f8 <SPI_WaitFlagStateUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e014      	b.n	80044da <SPI_EndRxTxTransaction+0x84>
=======
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2180      	movs	r1, #128	; 0x80
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff feaf 	bl	800540c <SPI_WaitFlagStateUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e014      	b.n	80056ee <SPI_EndRxTxTransaction+0x84>
>>>>>>> Stashed changes
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
<<<<<<< Updated upstream
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff ff05 	bl	80042cc <SPI_WaitFifoStateUntilTimeout>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e000      	b.n	80044da <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_TIM_Base_Init>:
=======
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff ff05 	bl	80054e0 <SPI_WaitFifoStateUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e0:	f043 0220 	orr.w	r2, r3, #32
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e000      	b.n	80056ee <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e01d      	b.n	8004530 <HAL_TIM_Base_Init+0x4e>
=======
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e01d      	b.n	8005744 <HAL_TIM_Base_Init+0x4e>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d106      	bne.n	800450e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d106      	bne.n	8005722 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7fc fea7 	bl	800125c <HAL_TIM_Base_MspInit>
=======
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fc f957 	bl	80019d0 <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f000 ff0f 	bl	8005344 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
=======
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f000 fec9 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
>>>>>>> Stashed changes
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10f      	bne.n	8004578 <HAL_TIM_Base_Stop+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6a1a      	ldr	r2, [r3, #32]
 800455e:	f240 4344 	movw	r3, #1092	; 0x444
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d107      	bne.n	8004578 <HAL_TIM_Base_Stop+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_TIM_PWM_Init>:
=======
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	4b0c      	ldr	r3, [pc, #48]	; (800579c <HAL_TIM_Base_Start_IT+0x50>)
 800576c:	4013      	ands	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b06      	cmp	r3, #6
 8005774:	d00b      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x42>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577c:	d007      	beq.n	800578e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0201 	orr.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	00010007 	.word	0x00010007

080057a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a1a      	ldr	r2, [r3, #32]
 80057be:	f241 1311 	movw	r3, #4369	; 0x1111
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10f      	bne.n	80057e8 <HAL_TIM_Base_Stop_IT+0x48>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6a1a      	ldr	r2, [r3, #32]
 80057ce:	f240 4344 	movw	r3, #1092	; 0x444
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_Base_Stop_IT+0x48>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e01d      	b.n	80045dc <HAL_TIM_PWM_Init+0x4e>
=======
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e01d      	b.n	8005844 <HAL_TIM_PWM_Init+0x4e>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< Updated upstream
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f815 	bl	80045e4 <HAL_TIM_PWM_MspInit>
=======
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f815 	bl	800584c <HAL_TIM_PWM_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3304      	adds	r3, #4
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f000 feb9 	bl	8005344 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_PWM_MspInit>:
=======
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	3304      	adds	r3, #4
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f000 fe49 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_TIM_PWM_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
=======
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIM_PWM_Start_IT>:
=======
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIM_PWM_Start_IT>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
=======
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< Updated upstream
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b0c      	cmp	r3, #12
 8004606:	d841      	bhi.n	800468c <HAL_TIM_PWM_Start_IT+0x94>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <HAL_TIM_PWM_Start_IT+0x18>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004645 	.word	0x08004645
 8004614:	0800468d 	.word	0x0800468d
 8004618:	0800468d 	.word	0x0800468d
 800461c:	0800468d 	.word	0x0800468d
 8004620:	08004657 	.word	0x08004657
 8004624:	0800468d 	.word	0x0800468d
 8004628:	0800468d 	.word	0x0800468d
 800462c:	0800468d 	.word	0x0800468d
 8004630:	08004669 	.word	0x08004669
 8004634:	0800468d 	.word	0x0800468d
 8004638:	0800468d 	.word	0x0800468d
 800463c:	0800468d 	.word	0x0800468d
 8004640:	0800467b 	.word	0x0800467b
=======
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b0c      	cmp	r3, #12
 800586e:	d841      	bhi.n	80058f4 <HAL_TIM_PWM_Start_IT+0x94>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <HAL_TIM_PWM_Start_IT+0x18>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058ad 	.word	0x080058ad
 800587c:	080058f5 	.word	0x080058f5
 8005880:	080058f5 	.word	0x080058f5
 8005884:	080058f5 	.word	0x080058f5
 8005888:	080058bf 	.word	0x080058bf
 800588c:	080058f5 	.word	0x080058f5
 8005890:	080058f5 	.word	0x080058f5
 8005894:	080058f5 	.word	0x080058f5
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058e3 	.word	0x080058e3
>>>>>>> Stashed changes
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< Updated upstream
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0202 	orr.w	r2, r2, #2
 8004652:	60da      	str	r2, [r3, #12]
      break;
 8004654:	e01b      	b.n	800468e <HAL_TIM_PWM_Start_IT+0x96>
=======
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0202 	orr.w	r2, r2, #2
 80058ba:	60da      	str	r2, [r3, #12]
      break;
 80058bc:	e01b      	b.n	80058f6 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< Updated upstream
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0204 	orr.w	r2, r2, #4
 8004664:	60da      	str	r2, [r3, #12]
      break;
 8004666:	e012      	b.n	800468e <HAL_TIM_PWM_Start_IT+0x96>
=======
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0204 	orr.w	r2, r2, #4
 80058cc:	60da      	str	r2, [r3, #12]
      break;
 80058ce:	e012      	b.n	80058f6 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< Updated upstream
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0208 	orr.w	r2, r2, #8
 8004676:	60da      	str	r2, [r3, #12]
      break;
 8004678:	e009      	b.n	800468e <HAL_TIM_PWM_Start_IT+0x96>
=======
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0208 	orr.w	r2, r2, #8
 80058de:	60da      	str	r2, [r3, #12]
      break;
 80058e0:	e009      	b.n	80058f6 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< Updated upstream
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0210 	orr.w	r2, r2, #16
 8004688:	60da      	str	r2, [r3, #12]
      break;
 800468a:	e000      	b.n	800468e <HAL_TIM_PWM_Start_IT+0x96>
=======
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0210 	orr.w	r2, r2, #16
 80058f0:	60da      	str	r2, [r3, #12]
      break;
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_PWM_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    default:
      break;
<<<<<<< Updated upstream
 800468c:	bf00      	nop
=======
 80058f4:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< Updated upstream
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2201      	movs	r2, #1
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f001 fb9e 	bl	8005dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a17      	ldr	r2, [pc, #92]	; (8004700 <HAL_TIM_PWM_Start_IT+0x108>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_TIM_PWM_Start_IT+0xb8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a16      	ldr	r2, [pc, #88]	; (8004704 <HAL_TIM_PWM_Start_IT+0x10c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_TIM_PWM_Start_IT+0xbc>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_TIM_PWM_Start_IT+0xbe>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2201      	movs	r2, #1
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 fb2e 	bl	8006f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a17      	ldr	r2, [pc, #92]	; (8005968 <HAL_TIM_PWM_Start_IT+0x108>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_TIM_PWM_Start_IT+0xb8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a16      	ldr	r2, [pc, #88]	; (800596c <HAL_TIM_PWM_Start_IT+0x10c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d101      	bne.n	800591c <HAL_TIM_PWM_Start_IT+0xbc>
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <HAL_TIM_PWM_Start_IT+0xbe>
 800591c:	2300      	movs	r3, #0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< Updated upstream
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <HAL_TIM_PWM_Start_IT+0x110>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d00b      	beq.n	80046f4 <HAL_TIM_PWM_Start_IT+0xfc>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e2:	d007      	beq.n	80046f4 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
=======
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <HAL_TIM_PWM_Start_IT+0x110>)
 800593a:	4013      	ands	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b06      	cmp	r3, #6
 8005942:	d00b      	beq.n	800595c <HAL_TIM_PWM_Start_IT+0xfc>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594a:	d007      	beq.n	800595c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40010400 	.word	0x40010400
 8004708:	00010007 	.word	0x00010007

0800470c <HAL_TIM_PWM_Stop_IT>:
=======
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000
 800596c:	40010400 	.word	0x40010400
 8005970:	00010007 	.word	0x00010007

08005974 <HAL_TIM_PWM_Stop_IT>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
=======
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< Updated upstream
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b0c      	cmp	r3, #12
 800471a:	d841      	bhi.n	80047a0 <HAL_TIM_PWM_Stop_IT+0x94>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <HAL_TIM_PWM_Stop_IT+0x18>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004759 	.word	0x08004759
 8004728:	080047a1 	.word	0x080047a1
 800472c:	080047a1 	.word	0x080047a1
 8004730:	080047a1 	.word	0x080047a1
 8004734:	0800476b 	.word	0x0800476b
 8004738:	080047a1 	.word	0x080047a1
 800473c:	080047a1 	.word	0x080047a1
 8004740:	080047a1 	.word	0x080047a1
 8004744:	0800477d 	.word	0x0800477d
 8004748:	080047a1 	.word	0x080047a1
 800474c:	080047a1 	.word	0x080047a1
 8004750:	080047a1 	.word	0x080047a1
 8004754:	0800478f 	.word	0x0800478f
=======
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b0c      	cmp	r3, #12
 8005982:	d841      	bhi.n	8005a08 <HAL_TIM_PWM_Stop_IT+0x94>
 8005984:	a201      	add	r2, pc, #4	; (adr r2, 800598c <HAL_TIM_PWM_Stop_IT+0x18>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059c1 	.word	0x080059c1
 8005990:	08005a09 	.word	0x08005a09
 8005994:	08005a09 	.word	0x08005a09
 8005998:	08005a09 	.word	0x08005a09
 800599c:	080059d3 	.word	0x080059d3
 80059a0:	08005a09 	.word	0x08005a09
 80059a4:	08005a09 	.word	0x08005a09
 80059a8:	08005a09 	.word	0x08005a09
 80059ac:	080059e5 	.word	0x080059e5
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a09 	.word	0x08005a09
 80059b8:	08005a09 	.word	0x08005a09
 80059bc:	080059f7 	.word	0x080059f7
>>>>>>> Stashed changes
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
<<<<<<< Updated upstream
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0202 	bic.w	r2, r2, #2
 8004766:	60da      	str	r2, [r3, #12]
      break;
 8004768:	e01b      	b.n	80047a2 <HAL_TIM_PWM_Stop_IT+0x96>
=======
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0202 	bic.w	r2, r2, #2
 80059ce:	60da      	str	r2, [r3, #12]
      break;
 80059d0:	e01b      	b.n	8005a0a <HAL_TIM_PWM_Stop_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
<<<<<<< Updated upstream
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0204 	bic.w	r2, r2, #4
 8004778:	60da      	str	r2, [r3, #12]
      break;
 800477a:	e012      	b.n	80047a2 <HAL_TIM_PWM_Stop_IT+0x96>
=======
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0204 	bic.w	r2, r2, #4
 80059e0:	60da      	str	r2, [r3, #12]
      break;
 80059e2:	e012      	b.n	8005a0a <HAL_TIM_PWM_Stop_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
<<<<<<< Updated upstream
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0208 	bic.w	r2, r2, #8
 800478a:	60da      	str	r2, [r3, #12]
      break;
 800478c:	e009      	b.n	80047a2 <HAL_TIM_PWM_Stop_IT+0x96>
=======
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0208 	bic.w	r2, r2, #8
 80059f2:	60da      	str	r2, [r3, #12]
      break;
 80059f4:	e009      	b.n	8005a0a <HAL_TIM_PWM_Stop_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
<<<<<<< Updated upstream
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0210 	bic.w	r2, r2, #16
 800479c:	60da      	str	r2, [r3, #12]
      break;
 800479e:	e000      	b.n	80047a2 <HAL_TIM_PWM_Stop_IT+0x96>
=======
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0210 	bic.w	r2, r2, #16
 8005a04:	60da      	str	r2, [r3, #12]
      break;
 8005a06:	e000      	b.n	8005a0a <HAL_TIM_PWM_Stop_IT+0x96>
>>>>>>> Stashed changes
    }

    default:
      break;
<<<<<<< Updated upstream
 80047a0:	bf00      	nop
=======
 8005a08:	bf00      	nop
>>>>>>> Stashed changes
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
<<<<<<< Updated upstream
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	6839      	ldr	r1, [r7, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fb14 	bl	8005dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_TIM_PWM_Stop_IT+0x12c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_TIM_PWM_Stop_IT+0xb8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_TIM_PWM_Stop_IT+0x130>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <HAL_TIM_PWM_Stop_IT+0xbc>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_TIM_PWM_Stop_IT+0xbe>
 80047c8:	2300      	movs	r3, #0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d017      	beq.n	80047fe <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10f      	bne.n	80047fe <HAL_TIM_PWM_Stop_IT+0xf2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	f240 4344 	movw	r3, #1092	; 0x444
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d107      	bne.n	80047fe <HAL_TIM_PWM_Stop_IT+0xf2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 faa4 	bl	8006f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_TIM_PWM_Stop_IT+0xb8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <HAL_TIM_PWM_Stop_IT+0x130>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIM_PWM_Stop_IT+0xbc>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <HAL_TIM_PWM_Stop_IT+0xbe>
 8005a30:	2300      	movs	r3, #0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d017      	beq.n	8005a66 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10f      	bne.n	8005a66 <HAL_TIM_PWM_Stop_IT+0xf2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	f240 4344 	movw	r3, #1092	; 0x444
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d107      	bne.n	8005a66 <HAL_TIM_PWM_Stop_IT+0xf2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> Stashed changes
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< Updated upstream
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	f241 1311 	movw	r3, #4369	; 0x1111
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <HAL_TIM_PWM_Stop_IT+0x122>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	f240 4344 	movw	r3, #1092	; 0x444
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d107      	bne.n	800482e <HAL_TIM_PWM_Stop_IT+0x122>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40010000 	.word	0x40010000
 800483c:	40010400 	.word	0x40010400

08004840 <HAL_TIM_IC_Init>:
=======
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a1a      	ldr	r2, [r3, #32]
 8005a6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <HAL_TIM_PWM_Stop_IT+0x122>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a1a      	ldr	r2, [r3, #32]
 8005a7c:	f240 4344 	movw	r3, #1092	; 0x444
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d107      	bne.n	8005a96 <HAL_TIM_PWM_Stop_IT+0x122>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40010400 	.word	0x40010400

08005aa8 <HAL_TIM_IC_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e01d      	b.n	800488e <HAL_TIM_IC_Init+0x4e>
=======
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e01d      	b.n	8005af6 <HAL_TIM_IC_Init+0x4e>
>>>>>>> Stashed changes
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
<<<<<<< Updated upstream
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fd3a 	bl	80012e0 <HAL_TIM_IC_MspInit>
=======
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fb fff8 	bl	8001ac4 <HAL_TIM_IC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 fd60 	bl	8005344 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_TIM_IC_Start_IT>:
=======
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	f000 fcf0 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <HAL_TIM_IC_Start_IT>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
=======
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
<<<<<<< Updated upstream
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d841      	bhi.n	800492c <HAL_TIM_IC_Start_IT+0x94>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <HAL_TIM_IC_Start_IT+0x18>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	0800492d 	.word	0x0800492d
 80048b8:	0800492d 	.word	0x0800492d
 80048bc:	0800492d 	.word	0x0800492d
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	0800492d 	.word	0x0800492d
 80048c8:	0800492d 	.word	0x0800492d
 80048cc:	0800492d 	.word	0x0800492d
 80048d0:	08004909 	.word	0x08004909
 80048d4:	0800492d 	.word	0x0800492d
 80048d8:	0800492d 	.word	0x0800492d
 80048dc:	0800492d 	.word	0x0800492d
 80048e0:	0800491b 	.word	0x0800491b
=======
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b0c      	cmp	r3, #12
 8005b0e:	d841      	bhi.n	8005b94 <HAL_TIM_IC_Start_IT+0x94>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <HAL_TIM_IC_Start_IT+0x18>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b4d 	.word	0x08005b4d
 8005b1c:	08005b95 	.word	0x08005b95
 8005b20:	08005b95 	.word	0x08005b95
 8005b24:	08005b95 	.word	0x08005b95
 8005b28:	08005b5f 	.word	0x08005b5f
 8005b2c:	08005b95 	.word	0x08005b95
 8005b30:	08005b95 	.word	0x08005b95
 8005b34:	08005b95 	.word	0x08005b95
 8005b38:	08005b71 	.word	0x08005b71
 8005b3c:	08005b95 	.word	0x08005b95
 8005b40:	08005b95 	.word	0x08005b95
 8005b44:	08005b95 	.word	0x08005b95
 8005b48:	08005b83 	.word	0x08005b83
>>>>>>> Stashed changes
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< Updated upstream
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0202 	orr.w	r2, r2, #2
 80048f2:	60da      	str	r2, [r3, #12]
      break;
 80048f4:	e01b      	b.n	800492e <HAL_TIM_IC_Start_IT+0x96>
=======
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0202 	orr.w	r2, r2, #2
 8005b5a:	60da      	str	r2, [r3, #12]
      break;
 8005b5c:	e01b      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< Updated upstream
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0204 	orr.w	r2, r2, #4
 8004904:	60da      	str	r2, [r3, #12]
      break;
 8004906:	e012      	b.n	800492e <HAL_TIM_IC_Start_IT+0x96>
=======
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0204 	orr.w	r2, r2, #4
 8005b6c:	60da      	str	r2, [r3, #12]
      break;
 8005b6e:	e012      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< Updated upstream
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0208 	orr.w	r2, r2, #8
 8004916:	60da      	str	r2, [r3, #12]
      break;
 8004918:	e009      	b.n	800492e <HAL_TIM_IC_Start_IT+0x96>
=======
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	60da      	str	r2, [r3, #12]
      break;
 8005b80:	e009      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< Updated upstream
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0210 	orr.w	r2, r2, #16
 8004928:	60da      	str	r2, [r3, #12]
      break;
 800492a:	e000      	b.n	800492e <HAL_TIM_IC_Start_IT+0x96>
=======
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0210 	orr.w	r2, r2, #16
 8005b90:	60da      	str	r2, [r3, #12]
      break;
 8005b92:	e000      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x96>
>>>>>>> Stashed changes
    }

    default:
      break;
<<<<<<< Updated upstream
 800492c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2201      	movs	r2, #1
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f001 fa4e 	bl	8005dd8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_TIM_IC_Start_IT+0xd8>)
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b06      	cmp	r3, #6
 800494c:	d00b      	beq.n	8004966 <HAL_TIM_IC_Start_IT+0xce>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d007      	beq.n	8004966 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	00010007 	.word	0x00010007

08004974 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d841      	bhi.n	8004a08 <HAL_TIM_IC_Stop_IT+0x94>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <HAL_TIM_IC_Stop_IT+0x18>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049c1 	.word	0x080049c1
 8004990:	08004a09 	.word	0x08004a09
 8004994:	08004a09 	.word	0x08004a09
 8004998:	08004a09 	.word	0x08004a09
 800499c:	080049d3 	.word	0x080049d3
 80049a0:	08004a09 	.word	0x08004a09
 80049a4:	08004a09 	.word	0x08004a09
 80049a8:	08004a09 	.word	0x08004a09
 80049ac:	080049e5 	.word	0x080049e5
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004a09 	.word	0x08004a09
 80049bc:	080049f7 	.word	0x080049f7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0202 	bic.w	r2, r2, #2
 80049ce:	60da      	str	r2, [r3, #12]
      break;
 80049d0:	e01b      	b.n	8004a0a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0204 	bic.w	r2, r2, #4
 80049e0:	60da      	str	r2, [r3, #12]
      break;
 80049e2:	e012      	b.n	8004a0a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0208 	bic.w	r2, r2, #8
 80049f2:	60da      	str	r2, [r3, #12]
      break;
 80049f4:	e009      	b.n	8004a0a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0210 	bic.w	r2, r2, #16
 8004a04:	60da      	str	r2, [r3, #12]
      break;
 8004a06:	e000      	b.n	8004a0a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8004a08:	bf00      	nop
=======
 8005b94:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 f9de 	bl	8006f60 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_TIM_IC_Start_IT+0xd8>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b06      	cmp	r3, #6
 8005bb4:	d00b      	beq.n	8005bce <HAL_TIM_IC_Start_IT+0xce>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbc:	d007      	beq.n	8005bce <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0201 	orr.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 f9e0 	bl	8005dd8 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6a1a      	ldr	r2, [r3, #32]
 8004a1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10f      	bne.n	8004a48 <HAL_TIM_IC_Stop_IT+0xd4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a1a      	ldr	r2, [r3, #32]
 8004a2e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d107      	bne.n	8004a48 <HAL_TIM_IC_Stop_IT+0xd4>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop

08004a54 <HAL_TIM_OnePulse_Init>:
=======
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	00010007 	.word	0x00010007

08005bdc <HAL_TIM_OnePulse_Init>:
>>>>>>> Stashed changes
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
<<<<<<< Updated upstream
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e02d      	b.n	8004ac4 <HAL_TIM_OnePulse_Init+0x70>
=======
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e02d      	b.n	8005c4c <HAL_TIM_OnePulse_Init+0x70>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
<<<<<<< Updated upstream
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f825 	bl	8004acc <HAL_TIM_OnePulse_MspInit>
=======
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f825 	bl	8005c54 <HAL_TIM_OnePulse_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f000 fc55 	bl	8005344 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0208 	bic.w	r2, r2, #8
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_OnePulse_MspInit>:
=======
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f000 fc55 	bl	80064cc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0208 	bic.w	r2, r2, #8
 8005c30:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6819      	ldr	r1, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_TIM_OnePulse_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
=======
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIM_IRQHandler>:
=======
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIM_IRQHandler>:
>>>>>>> Stashed changes
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d122      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d11b      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0202 	mvn.w	r2, #2
 8004b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x4a>
=======
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0202 	mvn.w	r2, #2
 8005c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fc faac 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0x56>
=======
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb fc48 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0x56>
>>>>>>> Stashed changes
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fbec 	bl	8005308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fbf3 	bl	800531c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
=======
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fbec 	bl	8006490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fbf3 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< Updated upstream
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0204 	mvn.w	r2, #4
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x9e>
=======
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d122      	bne.n	8005d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d11b      	bne.n	8005d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0204 	mvn.w	r2, #4
 8005ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc fa82 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0xaa>
=======
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb fc1e 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fbc2 	bl	8005308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fbc9 	bl	800531c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
=======
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fbc2 	bl	8006490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fbc9 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< Updated upstream
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0208 	mvn.w	r2, #8
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0xf2>
=======
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0208 	mvn.w	r2, #8
 8005d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2204      	movs	r2, #4
 8005d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0xf2>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc fa58 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xfe>
=======
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fb fbf4 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fb98 	bl	8005308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fb9f 	bl	800531c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
=======
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fb98 	bl	8006490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fb9f 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< Updated upstream
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0210 	mvn.w	r2, #16
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x146>
=======
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d122      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d11b      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0210 	mvn.w	r2, #16
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2208      	movs	r2, #8
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x146>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< Updated upstream
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fc fa2e 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0x152>
=======
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fb fbca 	bl	8001540 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0x152>
>>>>>>> Stashed changes
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< Updated upstream
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb6e 	bl	8005308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb75 	bl	800531c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
=======
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb6e 	bl	8006490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fb75 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
>>>>>>> Stashed changes
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< Updated upstream
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10e      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d107      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0201 	mvn.w	r2, #1
 8004c5c:	611a      	str	r2, [r3, #16]
=======
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0201 	mvn.w	r2, #1
 8005de4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< Updated upstream
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fa04 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
=======
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fb fb94 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< Updated upstream
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d10e      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b80      	cmp	r3, #128	; 0x80
 8004c7e:	d107      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c88:	611a      	str	r2, [r3, #16]
=======
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e10:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< Updated upstream
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f001 f9e0 	bl	8006050 <HAL_TIMEx_BreakCallback>
=======
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f001 f9e0 	bl	80071d8 <HAL_TIMEx_BreakCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< Updated upstream
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c9e:	d10e      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004caa:	2b80      	cmp	r3, #128	; 0x80
 8004cac:	d107      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cb6:	611a      	str	r2, [r3, #16]
=======
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e26:	d10e      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	d107      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e3e:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< Updated upstream
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f001 f9d3 	bl	8006064 <HAL_TIMEx_Break2Callback>
=======
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 f9d3 	bl	80071ec <HAL_TIMEx_Break2Callback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< Updated upstream
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d10e      	bne.n	8004cea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d107      	bne.n	8004cea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ce2:	611a      	str	r2, [r3, #16]
=======
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d10e      	bne.n	8005e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d107      	bne.n	8005e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e6a:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< Updated upstream
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fb23 	bl	8005330 <HAL_TIM_TriggerCallback>
=======
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fb23 	bl	80064b8 <HAL_TIM_TriggerCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< Updated upstream
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d10e      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d107      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0220 	mvn.w	r2, #32
 8004d0e:	611a      	str	r2, [r3, #16]
=======
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d10e      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d107      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f06f 0220 	mvn.w	r2, #32
 8005e96:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< Updated upstream
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 f993 	bl	800603c <HAL_TIMEx_CommutCallback>
=======
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 f993 	bl	80071c4 <HAL_TIMEx_CommutCallback>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< Updated upstream
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_IC_ConfigChannel>:
=======
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_IC_ConfigChannel>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< Updated upstream
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
=======
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e08a      	b.n	8004e4e <HAL_TIM_IC_ConfigChannel+0x130>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d11b      	bne.n	8004d86 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6819      	ldr	r1, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f000 fe77 	bl	8005a50 <TIM_TI1_SetConfig>
=======
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e08a      	b.n	8005fd6 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11b      	bne.n	8005f0e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6818      	ldr	r0, [r3, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6819      	ldr	r1, [r3, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f000 fe77 	bl	8006bd8 <TIM_TI1_SetConfig>
>>>>>>> Stashed changes
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
<<<<<<< Updated upstream
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699a      	ldr	r2, [r3, #24]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 020c 	bic.w	r2, r2, #12
 8004d70:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6999      	ldr	r1, [r3, #24]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	619a      	str	r2, [r3, #24]
 8004d84:	e05a      	b.n	8004e3c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d11c      	bne.n	8004dc6 <HAL_TIM_IC_ConfigChannel+0xa8>
=======
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 020c 	bic.w	r2, r2, #12
 8005ef8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6999      	ldr	r1, [r3, #24]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	619a      	str	r2, [r3, #24]
 8005f0c:	e05a      	b.n	8005fc4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d11c      	bne.n	8005f4e <HAL_TIM_IC_ConfigChannel+0xa8>
>>>>>>> Stashed changes
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f000 fefb 	bl	8005b96 <TIM_TI2_SetConfig>
=======
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f000 fefb 	bl	8006d1e <TIM_TI2_SetConfig>
>>>>>>> Stashed changes
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
<<<<<<< Updated upstream
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6999      	ldr	r1, [r3, #24]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	619a      	str	r2, [r3, #24]
 8004dc4:	e03a      	b.n	8004e3c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d11b      	bne.n	8004e04 <HAL_TIM_IC_ConfigChannel+0xe6>
=======
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f36:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	021a      	lsls	r2, r3, #8
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	619a      	str	r2, [r3, #24]
 8005f4c:	e03a      	b.n	8005fc4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d11b      	bne.n	8005f8c <HAL_TIM_IC_ConfigChannel+0xe6>
>>>>>>> Stashed changes
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f000 ff48 	bl	8005c70 <TIM_TI3_SetConfig>
=======
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6818      	ldr	r0, [r3, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f000 ff48 	bl	8006df8 <TIM_TI3_SetConfig>
>>>>>>> Stashed changes
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
<<<<<<< Updated upstream
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 020c 	bic.w	r2, r2, #12
 8004dee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69d9      	ldr	r1, [r3, #28]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	61da      	str	r2, [r3, #28]
 8004e02:	e01b      	b.n	8004e3c <HAL_TIM_IC_ConfigChannel+0x11e>
=======
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69da      	ldr	r2, [r3, #28]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 020c 	bic.w	r2, r2, #12
 8005f76:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69d9      	ldr	r1, [r3, #28]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	61da      	str	r2, [r3, #28]
 8005f8a:	e01b      	b.n	8005fc4 <HAL_TIM_IC_ConfigChannel+0x11e>
>>>>>>> Stashed changes
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6819      	ldr	r1, [r3, #0]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f000 ff68 	bl	8005ce8 <TIM_TI4_SetConfig>
=======
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f000 ff68 	bl	8006e70 <TIM_TI4_SetConfig>
>>>>>>> Stashed changes
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
<<<<<<< Updated upstream
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e26:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69d9      	ldr	r1, [r3, #28]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_TIM_PWM_ConfigChannel>:
=======
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69d9      	ldr	r1, [r3, #28]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	021a      	lsls	r2, r3, #8
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
=======
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e105      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x226>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b14      	cmp	r3, #20
 8004e86:	f200 80f0 	bhi.w	800506a <HAL_TIM_PWM_ConfigChannel+0x212>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004ee5 	.word	0x08004ee5
 8004e94:	0800506b 	.word	0x0800506b
 8004e98:	0800506b 	.word	0x0800506b
 8004e9c:	0800506b 	.word	0x0800506b
 8004ea0:	08004f25 	.word	0x08004f25
 8004ea4:	0800506b 	.word	0x0800506b
 8004ea8:	0800506b 	.word	0x0800506b
 8004eac:	0800506b 	.word	0x0800506b
 8004eb0:	08004f67 	.word	0x08004f67
 8004eb4:	0800506b 	.word	0x0800506b
 8004eb8:	0800506b 	.word	0x0800506b
 8004ebc:	0800506b 	.word	0x0800506b
 8004ec0:	08004fa7 	.word	0x08004fa7
 8004ec4:	0800506b 	.word	0x0800506b
 8004ec8:	0800506b 	.word	0x0800506b
 8004ecc:	0800506b 	.word	0x0800506b
 8004ed0:	08004fe9 	.word	0x08004fe9
 8004ed4:	0800506b 	.word	0x0800506b
 8004ed8:	0800506b 	.word	0x0800506b
 8004edc:	0800506b 	.word	0x0800506b
 8004ee0:	08005029 	.word	0x08005029
=======
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e105      	b.n	8006206 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b14      	cmp	r3, #20
 800600e:	f200 80f0 	bhi.w	80061f2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	0800606d 	.word	0x0800606d
 800601c:	080061f3 	.word	0x080061f3
 8006020:	080061f3 	.word	0x080061f3
 8006024:	080061f3 	.word	0x080061f3
 8006028:	080060ad 	.word	0x080060ad
 800602c:	080061f3 	.word	0x080061f3
 8006030:	080061f3 	.word	0x080061f3
 8006034:	080061f3 	.word	0x080061f3
 8006038:	080060ef 	.word	0x080060ef
 800603c:	080061f3 	.word	0x080061f3
 8006040:	080061f3 	.word	0x080061f3
 8006044:	080061f3 	.word	0x080061f3
 8006048:	0800612f 	.word	0x0800612f
 800604c:	080061f3 	.word	0x080061f3
 8006050:	080061f3 	.word	0x080061f3
 8006054:	080061f3 	.word	0x080061f3
 8006058:	08006171 	.word	0x08006171
 800605c:	080061f3 	.word	0x080061f3
 8006060:	080061f3 	.word	0x080061f3
 8006064:	080061f3 	.word	0x080061f3
 8006068:	080061b1 	.word	0x080061b1
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 faca 	bl	8005484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0208 	orr.w	r2, r2, #8
 8004efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6999      	ldr	r1, [r3, #24]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	619a      	str	r2, [r3, #24]
      break;
 8004f22:	e0a3      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 faca 	bl	800660c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0208 	orr.w	r2, r2, #8
 8006086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0204 	bic.w	r2, r2, #4
 8006096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6999      	ldr	r1, [r3, #24]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	619a      	str	r2, [r3, #24]
      break;
 80060aa:	e0a3      	b.n	80061f4 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fb1c 	bl	8005568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	021a      	lsls	r2, r3, #8
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	619a      	str	r2, [r3, #24]
      break;
 8004f64:	e082      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68b9      	ldr	r1, [r7, #8]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fb1c 	bl	80066f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6999      	ldr	r1, [r3, #24]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	021a      	lsls	r2, r3, #8
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	619a      	str	r2, [r3, #24]
      break;
 80060ec:	e082      	b.n	80061f4 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fb73 	bl	8005658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f042 0208 	orr.w	r2, r2, #8
 8004f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0204 	bic.w	r2, r2, #4
 8004f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69d9      	ldr	r1, [r3, #28]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	61da      	str	r2, [r3, #28]
      break;
 8004fa4:	e062      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fb73 	bl	80067e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0208 	orr.w	r2, r2, #8
 8006108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0204 	bic.w	r2, r2, #4
 8006118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69d9      	ldr	r1, [r3, #28]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	61da      	str	r2, [r3, #28]
      break;
 800612c:	e062      	b.n	80061f4 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fbc9 	bl	8005744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	021a      	lsls	r2, r3, #8
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	61da      	str	r2, [r3, #28]
      break;
 8004fe6:	e041      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fbc9 	bl	80068cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69d9      	ldr	r1, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	021a      	lsls	r2, r3, #8
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	61da      	str	r2, [r3, #28]
      break;
 800616e:	e041      	b.n	80061f4 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fc00 	bl	80057f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0204 	bic.w	r2, r2, #4
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005026:	e021      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fc00 	bl	800697c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0208 	orr.w	r2, r2, #8
 800618a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0204 	bic.w	r2, r2, #4
 800619a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061ae:	e021      	b.n	80061f4 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fc32 	bl	8005898 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005042:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005052:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	021a      	lsls	r2, r3, #8
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005068:	e000      	b.n	800506c <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fc32 	bl	8006a20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	021a      	lsls	r2, r3, #8
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061f0:	e000      	b.n	80061f4 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> Stashed changes
    }

    default:
      break;
<<<<<<< Updated upstream
 800506a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop

08005088 <HAL_TIM_ConfigClockSource>:
=======
 80061f2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop

08006210 <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
=======
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIM_ConfigClockSource+0x18>
 800509c:	2302      	movs	r3, #2
 800509e:	e0a6      	b.n	80051ee <HAL_TIM_ConfigClockSource+0x166>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_TIM_ConfigClockSource+0x18>
 8006224:	2302      	movs	r3, #2
 8006226:	e0a6      	b.n	8006376 <HAL_TIM_ConfigClockSource+0x166>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4b4f      	ldr	r3, [pc, #316]	; (80051f8 <HAL_TIM_ConfigClockSource+0x170>)
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d067      	beq.n	80051a8 <HAL_TIM_ConfigClockSource+0x120>
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d80b      	bhi.n	80050f4 <HAL_TIM_ConfigClockSource+0x6c>
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d073      	beq.n	80051c8 <HAL_TIM_ConfigClockSource+0x140>
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d802      	bhi.n	80050ea <HAL_TIM_ConfigClockSource+0x62>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d06f      	beq.n	80051c8 <HAL_TIM_ConfigClockSource+0x140>
=======
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4b4f      	ldr	r3, [pc, #316]	; (8006380 <HAL_TIM_ConfigClockSource+0x170>)
 8006244:	4013      	ands	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800624e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d067      	beq.n	8006330 <HAL_TIM_ConfigClockSource+0x120>
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	d80b      	bhi.n	800627c <HAL_TIM_ConfigClockSource+0x6c>
 8006264:	2b10      	cmp	r3, #16
 8006266:	d073      	beq.n	8006350 <HAL_TIM_ConfigClockSource+0x140>
 8006268:	2b10      	cmp	r3, #16
 800626a:	d802      	bhi.n	8006272 <HAL_TIM_ConfigClockSource+0x62>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d06f      	beq.n	8006350 <HAL_TIM_ConfigClockSource+0x140>
>>>>>>> Stashed changes
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
<<<<<<< Updated upstream
 80050e8:	e078      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d06c      	beq.n	80051c8 <HAL_TIM_ConfigClockSource+0x140>
 80050ee:	2b30      	cmp	r3, #48	; 0x30
 80050f0:	d06a      	beq.n	80051c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050f2:	e073      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050f4:	2b70      	cmp	r3, #112	; 0x70
 80050f6:	d00d      	beq.n	8005114 <HAL_TIM_ConfigClockSource+0x8c>
 80050f8:	2b70      	cmp	r3, #112	; 0x70
 80050fa:	d804      	bhi.n	8005106 <HAL_TIM_ConfigClockSource+0x7e>
 80050fc:	2b50      	cmp	r3, #80	; 0x50
 80050fe:	d033      	beq.n	8005168 <HAL_TIM_ConfigClockSource+0xe0>
 8005100:	2b60      	cmp	r3, #96	; 0x60
 8005102:	d041      	beq.n	8005188 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005104:	e06a      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510a:	d066      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x152>
 800510c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005110:	d017      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005112:	e063      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6899      	ldr	r1, [r3, #8]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f000 fe38 	bl	8005d98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005136:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
      break;
 8005140:	e04c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6899      	ldr	r1, [r3, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f000 fe21 	bl	8005d98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005164:	609a      	str	r2, [r3, #8]
      break;
 8005166:	e039      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	461a      	mov	r2, r3
 8005176:	f000 fcdf 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2150      	movs	r1, #80	; 0x50
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fdee 	bl	8005d62 <TIM_ITRx_SetConfig>
      break;
 8005186:	e029      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	461a      	mov	r2, r3
 8005196:	f000 fd3b 	bl	8005c10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2160      	movs	r1, #96	; 0x60
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fdde 	bl	8005d62 <TIM_ITRx_SetConfig>
      break;
 80051a6:	e019      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	461a      	mov	r2, r3
 80051b6:	f000 fcbf 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2140      	movs	r1, #64	; 0x40
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fdce 	bl	8005d62 <TIM_ITRx_SetConfig>
      break;
 80051c6:	e009      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f000 fdc5 	bl	8005d62 <TIM_ITRx_SetConfig>
      break;
 80051d8:	e000      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	fffeff88 	.word	0xfffeff88

080051fc <HAL_TIM_SlaveConfigSynchro>:
=======
 8006270:	e078      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006272:	2b20      	cmp	r3, #32
 8006274:	d06c      	beq.n	8006350 <HAL_TIM_ConfigClockSource+0x140>
 8006276:	2b30      	cmp	r3, #48	; 0x30
 8006278:	d06a      	beq.n	8006350 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800627a:	e073      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800627c:	2b70      	cmp	r3, #112	; 0x70
 800627e:	d00d      	beq.n	800629c <HAL_TIM_ConfigClockSource+0x8c>
 8006280:	2b70      	cmp	r3, #112	; 0x70
 8006282:	d804      	bhi.n	800628e <HAL_TIM_ConfigClockSource+0x7e>
 8006284:	2b50      	cmp	r3, #80	; 0x50
 8006286:	d033      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0xe0>
 8006288:	2b60      	cmp	r3, #96	; 0x60
 800628a:	d041      	beq.n	8006310 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800628c:	e06a      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800628e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006292:	d066      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0x152>
 8006294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006298:	d017      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800629a:	e063      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	6899      	ldr	r1, [r3, #8]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f000 fe38 	bl	8006f20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	609a      	str	r2, [r3, #8]
      break;
 80062c8:	e04c      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6899      	ldr	r1, [r3, #8]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f000 fe21 	bl	8006f20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ec:	609a      	str	r2, [r3, #8]
      break;
 80062ee:	e039      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	461a      	mov	r2, r3
 80062fe:	f000 fcdf 	bl	8006cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2150      	movs	r1, #80	; 0x50
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fdee 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 800630e:	e029      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6859      	ldr	r1, [r3, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	461a      	mov	r2, r3
 800631e:	f000 fd3b 	bl	8006d98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2160      	movs	r1, #96	; 0x60
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fdde 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 800632e:	e019      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	6859      	ldr	r1, [r3, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	461a      	mov	r2, r3
 800633e:	f000 fcbf 	bl	8006cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2140      	movs	r1, #64	; 0x40
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fdce 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 800634e:	e009      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f000 fdc5 	bl	8006eea <TIM_ITRx_SetConfig>
      break;
 8006360:	e000      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	fffeff88 	.word	0xfffeff88

08006384 <HAL_TIM_SlaveConfigSynchro>:
>>>>>>> Stashed changes
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
<<<<<<< Updated upstream
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
=======
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005210:	2302      	movs	r3, #2
 8005212:	e031      	b.n	8005278 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fb8a 	bl	8005940 <TIM_SlaveTimer_SetConfig>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e018      	b.n	8005278 <HAL_TIM_SlaveConfigSynchro+0x7c>
=======
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006398:	2302      	movs	r3, #2
 800639a:	e031      	b.n	8006400 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fb8a 	bl	8006ac8 <TIM_SlaveTimer_SetConfig>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e018      	b.n	8006400 <HAL_TIM_SlaveConfigSynchro+0x7c>
>>>>>>> Stashed changes
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
<<<<<<< Updated upstream
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005254:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005264:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_TIM_ReadCapturedValue>:
=======
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063dc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063ec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_ReadCapturedValue>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b0c      	cmp	r3, #12
 8005292:	d831      	bhi.n	80052f8 <HAL_TIM_ReadCapturedValue+0x78>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	080052db 	.word	0x080052db
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	080052f9 	.word	0x080052f9
 80052b8:	080052f9 	.word	0x080052f9
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052f9 	.word	0x080052f9
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	080052f9 	.word	0x080052f9
 80052cc:	080052ef 	.word	0x080052ef
=======
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b0c      	cmp	r3, #12
 800641a:	d831      	bhi.n	8006480 <HAL_TIM_ReadCapturedValue+0x78>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_TIM_ReadCapturedValue+0x1c>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006459 	.word	0x08006459
 8006428:	08006481 	.word	0x08006481
 800642c:	08006481 	.word	0x08006481
 8006430:	08006481 	.word	0x08006481
 8006434:	08006463 	.word	0x08006463
 8006438:	08006481 	.word	0x08006481
 800643c:	08006481 	.word	0x08006481
 8006440:	08006481 	.word	0x08006481
 8006444:	0800646d 	.word	0x0800646d
 8006448:	08006481 	.word	0x08006481
 800644c:	08006481 	.word	0x08006481
 8006450:	08006481 	.word	0x08006481
 8006454:	08006477 	.word	0x08006477
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
<<<<<<< Updated upstream
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d6:	60fb      	str	r3, [r7, #12]

      break;
 80052d8:	e00f      	b.n	80052fa <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645e:	60fb      	str	r3, [r7, #12]

      break;
 8006460:	e00f      	b.n	8006482 <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
<<<<<<< Updated upstream
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	60fb      	str	r3, [r7, #12]

      break;
 80052e2:	e00a      	b.n	80052fa <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	60fb      	str	r3, [r7, #12]

      break;
 800646a:	e00a      	b.n	8006482 <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
<<<<<<< Updated upstream
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	60fb      	str	r3, [r7, #12]

      break;
 80052ec:	e005      	b.n	80052fa <HAL_TIM_ReadCapturedValue+0x7a>
=======
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	60fb      	str	r3, [r7, #12]

      break;
 8006474:	e005      	b.n	8006482 <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
<<<<<<< Updated upstream
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	60fb      	str	r3, [r7, #12]

      break;
 80052f6:	e000      	b.n	80052fa <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	60fb      	str	r3, [r7, #12]

      break;
 800647e:	e000      	b.n	8006482 <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> Stashed changes
    }

    default:
      break;
<<<<<<< Updated upstream
 80052f8:	bf00      	nop
  }

  return tmpreg;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8006480:	bf00      	nop
  }

  return tmpreg;
 8006482:	68fb      	ldr	r3, [r7, #12]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> Stashed changes
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
=======
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> Stashed changes
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
=======
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_TriggerCallback>:
=======
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIM_TriggerCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
=======
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <TIM_Base_SetConfig>:
=======
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a40      	ldr	r2, [pc, #256]	; (8005458 <TIM_Base_SetConfig+0x114>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d013      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005362:	d00f      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3d      	ldr	r2, [pc, #244]	; (800545c <TIM_Base_SetConfig+0x118>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00b      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a3c      	ldr	r2, [pc, #240]	; (8005460 <TIM_Base_SetConfig+0x11c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d007      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a3b      	ldr	r2, [pc, #236]	; (8005464 <TIM_Base_SetConfig+0x120>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3a      	ldr	r2, [pc, #232]	; (8005468 <TIM_Base_SetConfig+0x124>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d108      	bne.n	8005396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2f      	ldr	r2, [pc, #188]	; (8005458 <TIM_Base_SetConfig+0x114>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02b      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a4:	d027      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2c      	ldr	r2, [pc, #176]	; (800545c <TIM_Base_SetConfig+0x118>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d023      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2b      	ldr	r2, [pc, #172]	; (8005460 <TIM_Base_SetConfig+0x11c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01f      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <TIM_Base_SetConfig+0x120>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01b      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a29      	ldr	r2, [pc, #164]	; (8005468 <TIM_Base_SetConfig+0x124>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d017      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a28      	ldr	r2, [pc, #160]	; (800546c <TIM_Base_SetConfig+0x128>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a27      	ldr	r2, [pc, #156]	; (8005470 <TIM_Base_SetConfig+0x12c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a26      	ldr	r2, [pc, #152]	; (8005474 <TIM_Base_SetConfig+0x130>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a25      	ldr	r2, [pc, #148]	; (8005478 <TIM_Base_SetConfig+0x134>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a24      	ldr	r2, [pc, #144]	; (800547c <TIM_Base_SetConfig+0x138>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a23      	ldr	r2, [pc, #140]	; (8005480 <TIM_Base_SetConfig+0x13c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d108      	bne.n	8005408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
=======
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a40      	ldr	r2, [pc, #256]	; (80065e0 <TIM_Base_SetConfig+0x114>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d013      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ea:	d00f      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3d      	ldr	r2, [pc, #244]	; (80065e4 <TIM_Base_SetConfig+0x118>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00b      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <TIM_Base_SetConfig+0x11c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d007      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a3b      	ldr	r2, [pc, #236]	; (80065ec <TIM_Base_SetConfig+0x120>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a3a      	ldr	r2, [pc, #232]	; (80065f0 <TIM_Base_SetConfig+0x124>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d108      	bne.n	800651e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2f      	ldr	r2, [pc, #188]	; (80065e0 <TIM_Base_SetConfig+0x114>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d02b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d027      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2c      	ldr	r2, [pc, #176]	; (80065e4 <TIM_Base_SetConfig+0x118>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d023      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2b      	ldr	r2, [pc, #172]	; (80065e8 <TIM_Base_SetConfig+0x11c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01f      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2a      	ldr	r2, [pc, #168]	; (80065ec <TIM_Base_SetConfig+0x120>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a29      	ldr	r2, [pc, #164]	; (80065f0 <TIM_Base_SetConfig+0x124>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d017      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a28      	ldr	r2, [pc, #160]	; (80065f4 <TIM_Base_SetConfig+0x128>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a27      	ldr	r2, [pc, #156]	; (80065f8 <TIM_Base_SetConfig+0x12c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00f      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a26      	ldr	r2, [pc, #152]	; (80065fc <TIM_Base_SetConfig+0x130>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a25      	ldr	r2, [pc, #148]	; (8006600 <TIM_Base_SetConfig+0x134>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a24      	ldr	r2, [pc, #144]	; (8006604 <TIM_Base_SetConfig+0x138>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a23      	ldr	r2, [pc, #140]	; (8006608 <TIM_Base_SetConfig+0x13c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d108      	bne.n	8006590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a0a      	ldr	r2, [pc, #40]	; (8005458 <TIM_Base_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_Base_SetConfig+0xf8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <TIM_Base_SetConfig+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d103      	bne.n	8005444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <TIM_Base_SetConfig+0x114>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0xf8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a0c      	ldr	r2, [pc, #48]	; (80065f0 <TIM_Base_SetConfig+0x124>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d103      	bne.n	80065cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> Stashed changes
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	615a      	str	r2, [r3, #20]
}
 800544a:	bf00      	nop
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40010000 	.word	0x40010000
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800
 8005464:	40000c00 	.word	0x40000c00
 8005468:	40010400 	.word	0x40010400
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800
 8005478:	40001800 	.word	0x40001800
 800547c:	40001c00 	.word	0x40001c00
 8005480:	40002000 	.word	0x40002000

08005484 <TIM_OC1_SetConfig>:
=======
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	615a      	str	r2, [r3, #20]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800
 8006600:	40001800 	.word	0x40001800
 8006604:	40001c00 	.word	0x40001c00
 8006608:	40002000 	.word	0x40002000

0800660c <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
=======
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< Updated upstream
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f023 0201 	bic.w	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4b2b      	ldr	r3, [pc, #172]	; (800555c <TIM_OC1_SetConfig+0xd8>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 0302 	bic.w	r3, r3, #2
 80054cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a21      	ldr	r2, [pc, #132]	; (8005560 <TIM_OC1_SetConfig+0xdc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_OC1_SetConfig+0x64>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a20      	ldr	r2, [pc, #128]	; (8005564 <TIM_OC1_SetConfig+0xe0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10c      	bne.n	8005502 <TIM_OC1_SetConfig+0x7e>
=======
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f023 0201 	bic.w	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <TIM_OC1_SetConfig+0xd8>)
 8006638:	4013      	ands	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f023 0302 	bic.w	r3, r3, #2
 8006654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a21      	ldr	r2, [pc, #132]	; (80066e8 <TIM_OC1_SetConfig+0xdc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_OC1_SetConfig+0x64>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a20      	ldr	r2, [pc, #128]	; (80066ec <TIM_OC1_SetConfig+0xe0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d10c      	bne.n	800668a <TIM_OC1_SetConfig+0x7e>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0308 	bic.w	r3, r3, #8
 80054ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 0304 	bic.w	r3, r3, #4
 8005500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a16      	ldr	r2, [pc, #88]	; (8005560 <TIM_OC1_SetConfig+0xdc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d003      	beq.n	8005512 <TIM_OC1_SetConfig+0x8e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a15      	ldr	r2, [pc, #84]	; (8005564 <TIM_OC1_SetConfig+0xe0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d111      	bne.n	8005536 <TIM_OC1_SetConfig+0xb2>
=======
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0308 	bic.w	r3, r3, #8
 8006676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 0304 	bic.w	r3, r3, #4
 8006688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <TIM_OC1_SetConfig+0xdc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_OC1_SetConfig+0x8e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a15      	ldr	r2, [pc, #84]	; (80066ec <TIM_OC1_SetConfig+0xe0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d111      	bne.n	80066be <TIM_OC1_SetConfig+0xb2>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
=======
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	621a      	str	r2, [r3, #32]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	fffeff8f 	.word	0xfffeff8f
 8005560:	40010000 	.word	0x40010000
 8005564:	40010400 	.word	0x40010400

08005568 <TIM_OC2_SetConfig>:
=======
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	621a      	str	r2, [r3, #32]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	fffeff8f 	.word	0xfffeff8f
 80066e8:	40010000 	.word	0x40010000
 80066ec:	40010400 	.word	0x40010400

080066f0 <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
=======
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0210 	bic.w	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4b2e      	ldr	r3, [pc, #184]	; (800564c <TIM_OC2_SetConfig+0xe4>)
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	021b      	lsls	r3, r3, #8
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 0320 	bic.w	r3, r3, #32
 80055b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a23      	ldr	r2, [pc, #140]	; (8005650 <TIM_OC2_SetConfig+0xe8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_OC2_SetConfig+0x68>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a22      	ldr	r2, [pc, #136]	; (8005654 <TIM_OC2_SetConfig+0xec>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d10d      	bne.n	80055ec <TIM_OC2_SetConfig+0x84>
=======
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0210 	bic.w	r2, r3, #16
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4b2e      	ldr	r3, [pc, #184]	; (80067d4 <TIM_OC2_SetConfig+0xe4>)
 800671c:	4013      	ands	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0320 	bic.w	r3, r3, #32
 800673a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a23      	ldr	r2, [pc, #140]	; (80067d8 <TIM_OC2_SetConfig+0xe8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC2_SetConfig+0x68>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a22      	ldr	r2, [pc, #136]	; (80067dc <TIM_OC2_SetConfig+0xec>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d10d      	bne.n	8006774 <TIM_OC2_SetConfig+0x84>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ea:	617b      	str	r3, [r7, #20]
=======
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006772:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< Updated upstream
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <TIM_OC2_SetConfig+0xe8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_OC2_SetConfig+0x94>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a17      	ldr	r2, [pc, #92]	; (8005654 <TIM_OC2_SetConfig+0xec>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d113      	bne.n	8005624 <TIM_OC2_SetConfig+0xbc>
=======
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <TIM_OC2_SetConfig+0xe8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_OC2_SetConfig+0x94>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a17      	ldr	r2, [pc, #92]	; (80067dc <TIM_OC2_SetConfig+0xec>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d113      	bne.n	80067ac <TIM_OC2_SetConfig+0xbc>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800560a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
=======
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800678a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	feff8fff 	.word	0xfeff8fff
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400

08005658 <TIM_OC3_SetConfig>:
=======
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	feff8fff 	.word	0xfeff8fff
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400

080067e0 <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
=======
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< Updated upstream
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4b2d      	ldr	r3, [pc, #180]	; (8005738 <TIM_OC3_SetConfig+0xe0>)
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0303 	bic.w	r3, r3, #3
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a22      	ldr	r2, [pc, #136]	; (800573c <TIM_OC3_SetConfig+0xe4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_OC3_SetConfig+0x66>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a21      	ldr	r2, [pc, #132]	; (8005740 <TIM_OC3_SetConfig+0xe8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d10d      	bne.n	80056da <TIM_OC3_SetConfig+0x82>
=======
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4b2d      	ldr	r3, [pc, #180]	; (80068c0 <TIM_OC3_SetConfig+0xe0>)
 800680c:	4013      	ands	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a22      	ldr	r2, [pc, #136]	; (80068c4 <TIM_OC3_SetConfig+0xe4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_OC3_SetConfig+0x66>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a21      	ldr	r2, [pc, #132]	; (80068c8 <TIM_OC3_SetConfig+0xe8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d10d      	bne.n	8006862 <TIM_OC3_SetConfig+0x82>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	021b      	lsls	r3, r3, #8
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a17      	ldr	r2, [pc, #92]	; (800573c <TIM_OC3_SetConfig+0xe4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_OC3_SetConfig+0x92>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a16      	ldr	r2, [pc, #88]	; (8005740 <TIM_OC3_SetConfig+0xe8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d113      	bne.n	8005712 <TIM_OC3_SetConfig+0xba>
=======
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800684c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <TIM_OC3_SetConfig+0xe4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d003      	beq.n	8006872 <TIM_OC3_SetConfig+0x92>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a16      	ldr	r2, [pc, #88]	; (80068c8 <TIM_OC3_SetConfig+0xe8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d113      	bne.n	800689a <TIM_OC3_SetConfig+0xba>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
=======
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	621a      	str	r2, [r3, #32]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	fffeff8f 	.word	0xfffeff8f
 800573c:	40010000 	.word	0x40010000
 8005740:	40010400 	.word	0x40010400

08005744 <TIM_OC4_SetConfig>:
=======
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	fffeff8f 	.word	0xfffeff8f
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40010400 	.word	0x40010400

080068cc <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
=======
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< Updated upstream
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <TIM_OC4_SetConfig+0xa4>)
 8005770:	4013      	ands	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800578e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	031b      	lsls	r3, r3, #12
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a13      	ldr	r2, [pc, #76]	; (80057ec <TIM_OC4_SetConfig+0xa8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_OC4_SetConfig+0x68>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <TIM_OC4_SetConfig+0xac>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d109      	bne.n	80057c0 <TIM_OC4_SetConfig+0x7c>
=======
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <TIM_OC4_SetConfig+0xa4>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	021b      	lsls	r3, r3, #8
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	031b      	lsls	r3, r3, #12
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a13      	ldr	r2, [pc, #76]	; (8006974 <TIM_OC4_SetConfig+0xa8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_OC4_SetConfig+0x68>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a12      	ldr	r2, [pc, #72]	; (8006978 <TIM_OC4_SetConfig+0xac>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d109      	bne.n	8006948 <TIM_OC4_SetConfig+0x7c>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
=======
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800693a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	019b      	lsls	r3, r3, #6
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	feff8fff 	.word	0xfeff8fff
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40010400 	.word	0x40010400

080057f4 <TIM_OC5_SetConfig>:
=======
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	feff8fff 	.word	0xfeff8fff
 8006974:	40010000 	.word	0x40010000
 8006978:	40010400 	.word	0x40010400

0800697c <TIM_OC5_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
=======
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< Updated upstream
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4b1b      	ldr	r3, [pc, #108]	; (800588c <TIM_OC5_SetConfig+0x98>)
 8005820:	4013      	ands	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005834:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	041b      	lsls	r3, r3, #16
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a12      	ldr	r2, [pc, #72]	; (8005890 <TIM_OC5_SetConfig+0x9c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_OC5_SetConfig+0x5e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a11      	ldr	r2, [pc, #68]	; (8005894 <TIM_OC5_SetConfig+0xa0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d109      	bne.n	8005866 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005858:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	fffeff8f 	.word	0xfffeff8f
 8005890:	40010000 	.word	0x40010000
 8005894:	40010400 	.word	0x40010400

08005898 <TIM_OC6_SetConfig>:
=======
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <TIM_OC5_SetConfig+0x98>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	041b      	lsls	r3, r3, #16
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a12      	ldr	r2, [pc, #72]	; (8006a18 <TIM_OC5_SetConfig+0x9c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_OC5_SetConfig+0x5e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a11      	ldr	r2, [pc, #68]	; (8006a1c <TIM_OC5_SetConfig+0xa0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d109      	bne.n	80069ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	fffeff8f 	.word	0xfffeff8f
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40010400 	.word	0x40010400

08006a20 <TIM_OC6_SetConfig>:
>>>>>>> Stashed changes
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
=======
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< Updated upstream
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <TIM_OC6_SetConfig+0x9c>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	051b      	lsls	r3, r3, #20
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <TIM_OC6_SetConfig+0xa0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC6_SetConfig+0x60>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a12      	ldr	r2, [pc, #72]	; (800593c <TIM_OC6_SetConfig+0xa4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d109      	bne.n	800590c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	029b      	lsls	r3, r3, #10
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
=======
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <TIM_OC6_SetConfig+0x9c>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	051b      	lsls	r3, r3, #20
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a13      	ldr	r2, [pc, #76]	; (8006ac0 <TIM_OC6_SetConfig+0xa0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d003      	beq.n	8006a80 <TIM_OC6_SetConfig+0x60>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a12      	ldr	r2, [pc, #72]	; (8006ac4 <TIM_OC6_SetConfig+0xa4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d109      	bne.n	8006a94 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	029b      	lsls	r3, r3, #10
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	621a      	str	r2, [r3, #32]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	feff8fff 	.word	0xfeff8fff
 8005938:	40010000 	.word	0x40010000
 800593c:	40010400 	.word	0x40010400

08005940 <TIM_SlaveTimer_SetConfig>:
=======
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	feff8fff 	.word	0xfeff8fff
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400

08006ac8 <TIM_SlaveTimer_SetConfig>:
>>>>>>> Stashed changes
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
<<<<<<< Updated upstream
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
=======
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4b39      	ldr	r3, [pc, #228]	; (8005a4c <TIM_SlaveTimer_SetConfig+0x10c>)
 8005968:	4013      	ands	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b30      	cmp	r3, #48	; 0x30
 8005984:	d05c      	beq.n	8005a40 <TIM_SlaveTimer_SetConfig+0x100>
 8005986:	2b30      	cmp	r3, #48	; 0x30
 8005988:	d806      	bhi.n	8005998 <TIM_SlaveTimer_SetConfig+0x58>
 800598a:	2b10      	cmp	r3, #16
 800598c:	d058      	beq.n	8005a40 <TIM_SlaveTimer_SetConfig+0x100>
 800598e:	2b20      	cmp	r3, #32
 8005990:	d056      	beq.n	8005a40 <TIM_SlaveTimer_SetConfig+0x100>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d054      	beq.n	8005a40 <TIM_SlaveTimer_SetConfig+0x100>
=======
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <TIM_SlaveTimer_SetConfig+0x10c>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	2b30      	cmp	r3, #48	; 0x30
 8006b0c:	d05c      	beq.n	8006bc8 <TIM_SlaveTimer_SetConfig+0x100>
 8006b0e:	2b30      	cmp	r3, #48	; 0x30
 8006b10:	d806      	bhi.n	8006b20 <TIM_SlaveTimer_SetConfig+0x58>
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d058      	beq.n	8006bc8 <TIM_SlaveTimer_SetConfig+0x100>
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d056      	beq.n	8006bc8 <TIM_SlaveTimer_SetConfig+0x100>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d054      	beq.n	8006bc8 <TIM_SlaveTimer_SetConfig+0x100>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
<<<<<<< Updated upstream
 8005996:	e054      	b.n	8005a42 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005998:	2b50      	cmp	r3, #80	; 0x50
 800599a:	d03d      	beq.n	8005a18 <TIM_SlaveTimer_SetConfig+0xd8>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d802      	bhi.n	80059a6 <TIM_SlaveTimer_SetConfig+0x66>
 80059a0:	2b40      	cmp	r3, #64	; 0x40
 80059a2:	d010      	beq.n	80059c6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80059a4:	e04d      	b.n	8005a42 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80059a6:	2b60      	cmp	r3, #96	; 0x60
 80059a8:	d040      	beq.n	8005a2c <TIM_SlaveTimer_SetConfig+0xec>
 80059aa:	2b70      	cmp	r3, #112	; 0x70
 80059ac:	d000      	beq.n	80059b0 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80059ae:	e048      	b.n	8005a42 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	68d9      	ldr	r1, [r3, #12]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f000 f9ea 	bl	8005d98 <TIM_ETR_SetConfig>
      break;
 80059c4:	e03d      	b.n	8005a42 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d101      	bne.n	80059d2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e038      	b.n	8005a44 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a1a      	ldr	r2, [r3, #32]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059f8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	621a      	str	r2, [r3, #32]
      break;
 8005a16:	e014      	b.n	8005a42 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f000 f887 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      break;
 8005a2a:	e00a      	b.n	8005a42 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	6899      	ldr	r1, [r3, #8]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f000 f8e9 	bl	8005c10 <TIM_TI2_ConfigInputStage>
      break;
 8005a3e:	e000      	b.n	8005a42 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005a40:	bf00      	nop
  }
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	fffefff8 	.word	0xfffefff8

08005a50 <TIM_TI1_SetConfig>:
=======
 8006b1e:	e054      	b.n	8006bca <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006b20:	2b50      	cmp	r3, #80	; 0x50
 8006b22:	d03d      	beq.n	8006ba0 <TIM_SlaveTimer_SetConfig+0xd8>
 8006b24:	2b50      	cmp	r3, #80	; 0x50
 8006b26:	d802      	bhi.n	8006b2e <TIM_SlaveTimer_SetConfig+0x66>
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d010      	beq.n	8006b4e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006b2c:	e04d      	b.n	8006bca <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006b2e:	2b60      	cmp	r3, #96	; 0x60
 8006b30:	d040      	beq.n	8006bb4 <TIM_SlaveTimer_SetConfig+0xec>
 8006b32:	2b70      	cmp	r3, #112	; 0x70
 8006b34:	d000      	beq.n	8006b38 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006b36:	e048      	b.n	8006bca <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68d9      	ldr	r1, [r3, #12]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f000 f9ea 	bl	8006f20 <TIM_ETR_SetConfig>
      break;
 8006b4c:	e03d      	b.n	8006bca <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b05      	cmp	r3, #5
 8006b54:	d101      	bne.n	8006b5a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e038      	b.n	8006bcc <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a1a      	ldr	r2, [r3, #32]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b80:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	621a      	str	r2, [r3, #32]
      break;
 8006b9e:	e014      	b.n	8006bca <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6818      	ldr	r0, [r3, #0]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	6899      	ldr	r1, [r3, #8]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	461a      	mov	r2, r3
 8006bae:	f000 f887 	bl	8006cc0 <TIM_TI1_ConfigInputStage>
      break;
 8006bb2:	e00a      	b.n	8006bca <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	6899      	ldr	r1, [r3, #8]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f000 f8e9 	bl	8006d98 <TIM_TI2_ConfigInputStage>
      break;
 8006bc6:	e000      	b.n	8006bca <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006bc8:	bf00      	nop
  }
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	fffefff8 	.word	0xfffefff8

08006bd8 <TIM_TI1_SetConfig>:
>>>>>>> Stashed changes
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
=======
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< Updated upstream
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0201 	bic.w	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4a28      	ldr	r2, [pc, #160]	; (8005b1c <TIM_TI1_SetConfig+0xcc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d01b      	beq.n	8005ab6 <TIM_TI1_SetConfig+0x66>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d017      	beq.n	8005ab6 <TIM_TI1_SetConfig+0x66>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <TIM_TI1_SetConfig+0xd0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d013      	beq.n	8005ab6 <TIM_TI1_SetConfig+0x66>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <TIM_TI1_SetConfig+0xd4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00f      	beq.n	8005ab6 <TIM_TI1_SetConfig+0x66>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <TIM_TI1_SetConfig+0xd8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00b      	beq.n	8005ab6 <TIM_TI1_SetConfig+0x66>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <TIM_TI1_SetConfig+0xdc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <TIM_TI1_SetConfig+0x66>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4a21      	ldr	r2, [pc, #132]	; (8005b30 <TIM_TI1_SetConfig+0xe0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_TI1_SetConfig+0x66>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4a20      	ldr	r2, [pc, #128]	; (8005b34 <TIM_TI1_SetConfig+0xe4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d101      	bne.n	8005aba <TIM_TI1_SetConfig+0x6a>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <TIM_TI1_SetConfig+0x6c>
 8005aba:	2300      	movs	r3, #0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e003      	b.n	8005ada <TIM_TI1_SetConfig+0x8a>
=======
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0201 	bic.w	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4a28      	ldr	r2, [pc, #160]	; (8006ca4 <TIM_TI1_SetConfig+0xcc>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01b      	beq.n	8006c3e <TIM_TI1_SetConfig+0x66>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0c:	d017      	beq.n	8006c3e <TIM_TI1_SetConfig+0x66>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a25      	ldr	r2, [pc, #148]	; (8006ca8 <TIM_TI1_SetConfig+0xd0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d013      	beq.n	8006c3e <TIM_TI1_SetConfig+0x66>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a24      	ldr	r2, [pc, #144]	; (8006cac <TIM_TI1_SetConfig+0xd4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <TIM_TI1_SetConfig+0x66>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a23      	ldr	r2, [pc, #140]	; (8006cb0 <TIM_TI1_SetConfig+0xd8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_TI1_SetConfig+0x66>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a22      	ldr	r2, [pc, #136]	; (8006cb4 <TIM_TI1_SetConfig+0xdc>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_TI1_SetConfig+0x66>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a21      	ldr	r2, [pc, #132]	; (8006cb8 <TIM_TI1_SetConfig+0xe0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_TI1_SetConfig+0x66>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4a20      	ldr	r2, [pc, #128]	; (8006cbc <TIM_TI1_SetConfig+0xe4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d101      	bne.n	8006c42 <TIM_TI1_SetConfig+0x6a>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <TIM_TI1_SetConfig+0x6c>
 8006c42:	2300      	movs	r3, #0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d008      	beq.n	8006c5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0303 	bic.w	r3, r3, #3
 8006c4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e003      	b.n	8006c62 <TIM_TI1_SetConfig+0x8a>
>>>>>>> Stashed changes
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
<<<<<<< Updated upstream
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
=======
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
<<<<<<< Updated upstream
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f023 030a 	bic.w	r3, r3, #10
 8005af4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f003 030a 	and.w	r3, r3, #10
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800
 8005b28:	40000c00 	.word	0x40000c00
 8005b2c:	40010400 	.word	0x40010400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40001800 	.word	0x40001800

08005b38 <TIM_TI1_ConfigInputStage>:
=======
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f023 030a 	bic.w	r3, r3, #10
 8006c7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f003 030a 	and.w	r3, r3, #10
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40010400 	.word	0x40010400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40001800 	.word	0x40001800

08006cc0 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
=======
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 030a 	bic.w	r3, r3, #10
 8005b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <TIM_TI2_SetConfig>:
=======
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0201 	bic.w	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f023 030a 	bic.w	r3, r3, #10
 8006cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <TIM_TI2_SetConfig>:
>>>>>>> Stashed changes
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005b96:	b480      	push	{r7}
 8005b98:	b087      	sub	sp, #28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	603b      	str	r3, [r7, #0]
=======
 8006d1e:	b480      	push	{r7}
 8006d20:	b087      	sub	sp, #28
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
 8006d2a:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f023 0210 	bic.w	r2, r3, #16
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	031b      	lsls	r3, r3, #12
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005be8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	621a      	str	r2, [r3, #32]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_TI2_ConfigInputStage>:
=======
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	f023 0210 	bic.w	r2, r3, #16
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	031b      	lsls	r3, r3, #12
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	621a      	str	r2, [r3, #32]
}
 8006d8c:	bf00      	nop
 8006d8e:	371c      	adds	r7, #28
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
=======
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< Updated upstream
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f023 0210 	bic.w	r2, r3, #16
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	031b      	lsls	r3, r3, #12
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	621a      	str	r2, [r3, #32]
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <TIM_TI3_SetConfig>:
=======
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f023 0210 	bic.w	r2, r3, #16
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	031b      	lsls	r3, r3, #12
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	621a      	str	r2, [r3, #32]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <TIM_TI3_SetConfig>:
>>>>>>> Stashed changes
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
=======
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< Updated upstream
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f023 0303 	bic.w	r3, r3, #3
 8005c9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	621a      	str	r2, [r3, #32]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <TIM_TI4_SetConfig>:
=======
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 0303 	bic.w	r3, r3, #3
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <TIM_TI4_SetConfig>:
>>>>>>> Stashed changes
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
=======
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< Updated upstream
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	031b      	lsls	r3, r3, #12
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	031b      	lsls	r3, r3, #12
 8005d40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <TIM_ITRx_SetConfig>:
=======
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	031b      	lsls	r3, r3, #12
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	031b      	lsls	r3, r3, #12
 8006ec8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
=======
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f043 0307 	orr.w	r3, r3, #7
 8005d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	609a      	str	r2, [r3, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <TIM_ETR_SetConfig>:
=======
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f043 0307 	orr.w	r3, r3, #7
 8006f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	609a      	str	r2, [r3, #8]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	021a      	lsls	r2, r3, #8
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	609a      	str	r2, [r3, #8]
}
 8005dcc:	bf00      	nop
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <TIM_CCxChannelCmd>:
=======
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	021a      	lsls	r2, r3, #8
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	609a      	str	r2, [r3, #8]
}
 8006f54:	bf00      	nop
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <TIM_CCxChannelCmd>:
>>>>>>> Stashed changes
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< Updated upstream
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
=======
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< Updated upstream
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2201      	movs	r2, #1
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1a      	ldr	r2, [r3, #32]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f003 031f 	and.w	r3, r3, #31
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	431a      	orrs	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	2201      	movs	r2, #1
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a1a      	ldr	r2, [r3, #32]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	43db      	mvns	r3, r3
 8006f82:	401a      	ands	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 031f 	and.w	r3, r3, #31
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	fa01 f303 	lsl.w	r3, r1, r3
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
	...

08006fac <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
=======
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e06d      	b.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a30      	ldr	r2, [pc, #192]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2f      	ldr	r2, [pc, #188]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d108      	bne.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e06d      	b.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a30      	ldr	r2, [pc, #192]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d108      	bne.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< Updated upstream
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
=======
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ffe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< Updated upstream
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d022      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eae:	d01d      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1d      	ldr	r2, [pc, #116]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d018      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d013      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00e      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d009      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d004      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d10c      	bne.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	609a      	str	r2, [r3, #8]
=======
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a20      	ldr	r2, [pc, #128]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d022      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007036:	d01d      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1c      	ldr	r2, [pc, #112]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1a      	ldr	r2, [pc, #104]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00e      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10c      	bne.n	800708e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800707a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	4313      	orrs	r3, r2
 8007084:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40010000 	.word	0x40010000
 8005f28:	40010400 	.word	0x40010400
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40014000 	.word	0x40014000
 8005f3c:	40001800 	.word	0x40001800

08005f40 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40010400 	.word	0x40010400
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800
 80070bc:	40000c00 	.word	0x40000c00
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40001800 	.word	0x40001800

080070c8 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> Stashed changes
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< Updated upstream
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
=======
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d101      	bne.n	8005f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e065      	b.n	8006028 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e065      	b.n	80071b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> Stashed changes

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< Updated upstream
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a16      	ldr	r2, [pc, #88]	; (8006034 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d004      	beq.n	8005fea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a14      	ldr	r2, [pc, #80]	; (8006038 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d115      	bne.n	8006016 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
=======
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4313      	orrs	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	041b      	lsls	r3, r3, #16
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a16      	ldr	r2, [pc, #88]	; (80071bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d115      	bne.n	800719e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
>>>>>>> Stashed changes
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
<<<<<<< Updated upstream
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	051b      	lsls	r3, r3, #20
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
=======
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	051b      	lsls	r3, r3, #20
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< Updated upstream
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400

0800603c <HAL_TIMEx_CommutCallback>:
=======
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40010000 	.word	0x40010000
 80071c0:	40010400 	.word	0x40010400

080071c4 <HAL_TIMEx_CommutCallback>:
>>>>>>> Stashed changes
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
=======
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_TIMEx_BreakCallback>:
=======
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_TIMEx_BreakCallback>:
>>>>>>> Stashed changes
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
=======
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIMEx_Break2Callback>:
=======
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_TIMEx_Break2Callback>:
>>>>>>> Stashed changes
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
=======
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_UART_Init>:
=======
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_UART_Init>:
>>>>>>> Stashed changes
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e040      	b.n	800610c <HAL_UART_Init+0x94>
=======
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e040      	b.n	8007294 <HAL_UART_Init+0x94>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< Updated upstream
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
=======
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
>>>>>>> Stashed changes

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< Updated upstream
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fb f9c8 	bl	8001430 <HAL_UART_MspInit>
=======
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fa fcf6 	bl	8001c14 <HAL_UART_MspInit>
>>>>>>> Stashed changes
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< Updated upstream
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2224      	movs	r2, #36	; 0x24
 80060a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f8be 	bl	8006238 <UART_SetConfig>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e022      	b.n	800610c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fb5c 	bl	800678c <UART_AdvFeatureConfig>
=======
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2224      	movs	r2, #36	; 0x24
 800722c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0201 	bic.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fac4 	bl	80077cc <UART_SetConfig>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e022      	b.n	8007294 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fd62 	bl	8007d20 <UART_AdvFeatureConfig>
>>>>>>> Stashed changes
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< Updated upstream
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fbe3 	bl	80068d0 <UART_CheckIdleState>
 800610a:	4603      	mov	r3, r0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_UART_Transmit>:
=======
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800726a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800727a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fde9 	bl	8007e64 <UART_CheckIdleState>
 8007292:	4603      	mov	r3, r0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_UART_Transmit>:
>>>>>>> Stashed changes
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< Updated upstream
 8006114:	b580      	push	{r7, lr}
 8006116:	b08a      	sub	sp, #40	; 0x28
 8006118:	af02      	add	r7, sp, #8
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	80fb      	strh	r3, [r7, #6]
=======
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	; 0x28
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	80fb      	strh	r3, [r7, #6]
>>>>>>> Stashed changes
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< Updated upstream
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006128:	2b20      	cmp	r3, #32
 800612a:	d17f      	bne.n	800622c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_UART_Transmit+0x24>
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e078      	b.n	800622e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_UART_Transmit+0x36>
 8006146:	2302      	movs	r3, #2
 8006148:	e071      	b.n	800622e <HAL_UART_Transmit+0x11a>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2221      	movs	r2, #33	; 0x21
 800615c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800615e:	f7fb fb19 	bl	8001794 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617c:	d108      	bne.n	8006190 <HAL_UART_Transmit+0x7c>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	e003      	b.n	8006198 <HAL_UART_Transmit+0x84>
=======
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d17f      	bne.n	80073b4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_UART_Transmit+0x24>
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e078      	b.n	80073b6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_UART_Transmit+0x36>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e071      	b.n	80073b6 <HAL_UART_Transmit+0x11a>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2221      	movs	r2, #33	; 0x21
 80072e4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80072e6:	f7fa fe77 	bl	8001fd8 <HAL_GetTick>
 80072ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007304:	d108      	bne.n	8007318 <HAL_UART_Transmit+0x7c>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	61bb      	str	r3, [r7, #24]
 8007316:	e003      	b.n	8007320 <HAL_UART_Transmit+0x84>
>>>>>>> Stashed changes
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< Updated upstream
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80061a0:	e02c      	b.n	80061fc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2200      	movs	r2, #0
 80061aa:	2180      	movs	r1, #128	; 0x80
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fbd4 	bl	800695a <UART_WaitOnFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e038      	b.n	800622e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	3302      	adds	r3, #2
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	e007      	b.n	80061ea <HAL_UART_Transmit+0xd6>
=======
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007328:	e02c      	b.n	8007384 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2200      	movs	r2, #0
 8007332:	2180      	movs	r1, #128	; 0x80
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fdda 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e038      	b.n	80073b6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10b      	bne.n	8007362 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007358:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	3302      	adds	r3, #2
 800735e:	61bb      	str	r3, [r7, #24]
 8007360:	e007      	b.n	8007372 <HAL_UART_Transmit+0xd6>
>>>>>>> Stashed changes
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< Updated upstream
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	781a      	ldrb	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3301      	adds	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1cc      	bne.n	80061a2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2200      	movs	r2, #0
 8006210:	2140      	movs	r1, #64	; 0x40
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fba1 	bl	800695a <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e005      	b.n	800622e <HAL_UART_Transmit+0x11a>
=======
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	3301      	adds	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1cc      	bne.n	800732a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2200      	movs	r2, #0
 8007398:	2140      	movs	r1, #64	; 0x40
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fda7 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e005      	b.n	80073b6 <HAL_UART_Transmit+0x11a>
>>>>>>> Stashed changes
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_UART_Transmit+0x11a>
=======
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e000      	b.n	80073b6 <HAL_UART_Transmit+0x11a>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_BUSY;
<<<<<<< Updated upstream
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <UART_SetConfig>:
=======
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	f040 808a 	bne.w	80074ec <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_UART_Receive_IT+0x24>
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e082      	b.n	80074ee <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_UART_Receive_IT+0x36>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e07b      	b.n	80074ee <HAL_UART_Receive_IT+0x12e>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	88fa      	ldrh	r2, [r7, #6]
 8007408:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007422:	d10e      	bne.n	8007442 <HAL_UART_Receive_IT+0x82>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <HAL_UART_Receive_IT+0x78>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007436:	e02d      	b.n	8007494 <HAL_UART_Receive_IT+0xd4>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	22ff      	movs	r2, #255	; 0xff
 800743c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007440:	e028      	b.n	8007494 <HAL_UART_Receive_IT+0xd4>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10d      	bne.n	8007466 <HAL_UART_Receive_IT+0xa6>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <HAL_UART_Receive_IT+0x9c>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	22ff      	movs	r2, #255	; 0xff
 8007456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800745a:	e01b      	b.n	8007494 <HAL_UART_Receive_IT+0xd4>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	227f      	movs	r2, #127	; 0x7f
 8007460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007464:	e016      	b.n	8007494 <HAL_UART_Receive_IT+0xd4>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800746e:	d10d      	bne.n	800748c <HAL_UART_Receive_IT+0xcc>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <HAL_UART_Receive_IT+0xc2>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	227f      	movs	r2, #127	; 0x7f
 800747c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007480:	e008      	b.n	8007494 <HAL_UART_Receive_IT+0xd4>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	223f      	movs	r2, #63	; 0x3f
 8007486:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800748a:	e003      	b.n	8007494 <HAL_UART_Receive_IT+0xd4>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2222      	movs	r2, #34	; 0x22
 800749e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0201 	orr.w	r2, r2, #1
 80074ae:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b8:	d107      	bne.n	80074ca <HAL_UART_Receive_IT+0x10a>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a0d      	ldr	r2, [pc, #52]	; (80074fc <HAL_UART_Receive_IT+0x13c>)
 80074c6:	661a      	str	r2, [r3, #96]	; 0x60
 80074c8:	e002      	b.n	80074d0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4a0c      	ldr	r2, [pc, #48]	; (8007500 <HAL_UART_Receive_IT+0x140>)
 80074ce:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80074e6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e000      	b.n	80074ee <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80074ec:	2302      	movs	r3, #2
  }
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	08008129 	.word	0x08008129
 8007500:	08008083 	.word	0x08008083

08007504 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	f640 030f 	movw	r3, #2063	; 0x80f
 800752a:	4013      	ands	r3, r2
 800752c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d113      	bne.n	800755c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00e      	beq.n	800755c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8114 	beq.w	800777a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
      }
      return;
 800755a:	e10e      	b.n	800777a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80d6 	beq.w	8007710 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80cb 	beq.w	8007710 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00e      	beq.n	80075a2 <HAL_UART_IRQHandler+0x9e>
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2201      	movs	r2, #1
 8007594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759a:	f043 0201 	orr.w	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00e      	beq.n	80075ca <HAL_UART_IRQHandler+0xc6>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d009      	beq.n	80075ca <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2202      	movs	r2, #2
 80075bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075c2:	f043 0204 	orr.w	r2, r3, #4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00e      	beq.n	80075f2 <HAL_UART_IRQHandler+0xee>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d009      	beq.n	80075f2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2204      	movs	r2, #4
 80075e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ea:	f043 0202 	orr.w	r2, r3, #2
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d013      	beq.n	8007624 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	d104      	bne.n	8007610 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800760c:	2b00      	cmp	r3, #0
 800760e:	d009      	beq.n	8007624 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2208      	movs	r2, #8
 8007616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800761c:	f043 0208 	orr.w	r2, r3, #8
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00f      	beq.n	800764e <HAL_UART_IRQHandler+0x14a>
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007646:	f043 0220 	orr.w	r2, r3, #32
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8093 	beq.w	800777e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00c      	beq.n	800767c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f003 0320 	and.w	r3, r3, #32
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007680:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d004      	beq.n	800769a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007696:	2b00      	cmp	r3, #0
 8007698:	d031      	beq.n	80076fe <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fca2 	bl	8007fe4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b40      	cmp	r3, #64	; 0x40
 80076ac:	d123      	bne.n	80076f6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d013      	beq.n	80076ee <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ca:	4a30      	ldr	r2, [pc, #192]	; (800778c <HAL_UART_IRQHandler+0x288>)
 80076cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fb fb94 	bl	8002e00 <HAL_DMA_Abort_IT>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	e00e      	b.n	800770c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f858 	bl	80077a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f4:	e00a      	b.n	800770c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f854 	bl	80077a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fc:	e006      	b.n	800770c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f850 	bl	80077a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800770a:	e038      	b.n	800777e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	bf00      	nop
    return;
 800770e:	e036      	b.n	800777e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00d      	beq.n	8007736 <HAL_UART_IRQHandler+0x232>
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800772c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f842 	bl	80077b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007734:	e026      	b.n	8007784 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00d      	beq.n	800775c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007746:	2b00      	cmp	r3, #0
 8007748:	d008      	beq.n	800775c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774e:	2b00      	cmp	r3, #0
 8007750:	d017      	beq.n	8007782 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
    }
    return;
 800775a:	e012      	b.n	8007782 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <HAL_UART_IRQHandler+0x280>
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fc6d 	bl	8008050 <UART_EndTransmit_IT>
    return;
 8007776:	bf00      	nop
 8007778:	e004      	b.n	8007784 <HAL_UART_IRQHandler+0x280>
      return;
 800777a:	bf00      	nop
 800777c:	e002      	b.n	8007784 <HAL_UART_IRQHandler+0x280>
    return;
 800777e:	bf00      	nop
 8007780:	e000      	b.n	8007784 <HAL_UART_IRQHandler+0x280>
    return;
 8007782:	bf00      	nop
  }

}
 8007784:	3720      	adds	r7, #32
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	08008025 	.word	0x08008025

08007790 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <UART_SetConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
=======
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
<<<<<<< Updated upstream
 8006240:	2300      	movs	r3, #0
 8006242:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	75fb      	strb	r3, [r7, #23]
=======
 80077d4:	2300      	movs	r3, #0
 80077d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< Updated upstream
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4bb1      	ldr	r3, [pc, #708]	; (800652c <UART_SetConfig+0x2f4>)
 8006268:	4013      	ands	r3, r2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	430b      	orrs	r3, r1
 8006272:	6013      	str	r3, [r2, #0]
=======
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4bb1      	ldr	r3, [pc, #708]	; (8007ac0 <UART_SetConfig+0x2f4>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6812      	ldr	r2, [r2, #0]
 8007802:	6939      	ldr	r1, [r7, #16]
 8007804:	430b      	orrs	r3, r1
 8007806:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< Updated upstream
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
=======
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< Updated upstream
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	609a      	str	r2, [r3, #8]
=======
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< Updated upstream
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a9f      	ldr	r2, [pc, #636]	; (8006530 <UART_SetConfig+0x2f8>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d121      	bne.n	80062fc <UART_SetConfig+0xc4>
 80062b8:	4b9e      	ldr	r3, [pc, #632]	; (8006534 <UART_SetConfig+0x2fc>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d816      	bhi.n	80062f4 <UART_SetConfig+0xbc>
 80062c6:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x94>)
 80062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062cc:	080062dd 	.word	0x080062dd
 80062d0:	080062e9 	.word	0x080062e9
 80062d4:	080062e3 	.word	0x080062e3
 80062d8:	080062ef 	.word	0x080062ef
 80062dc:	2301      	movs	r3, #1
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e151      	b.n	8006586 <UART_SetConfig+0x34e>
 80062e2:	2302      	movs	r3, #2
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e14e      	b.n	8006586 <UART_SetConfig+0x34e>
 80062e8:	2304      	movs	r3, #4
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e14b      	b.n	8006586 <UART_SetConfig+0x34e>
 80062ee:	2308      	movs	r3, #8
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e148      	b.n	8006586 <UART_SetConfig+0x34e>
 80062f4:	2310      	movs	r3, #16
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	bf00      	nop
 80062fa:	e144      	b.n	8006586 <UART_SetConfig+0x34e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a8d      	ldr	r2, [pc, #564]	; (8006538 <UART_SetConfig+0x300>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d134      	bne.n	8006370 <UART_SetConfig+0x138>
 8006306:	4b8b      	ldr	r3, [pc, #556]	; (8006534 <UART_SetConfig+0x2fc>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f003 030c 	and.w	r3, r3, #12
 8006310:	2b0c      	cmp	r3, #12
 8006312:	d829      	bhi.n	8006368 <UART_SetConfig+0x130>
 8006314:	a201      	add	r2, pc, #4	; (adr r2, 800631c <UART_SetConfig+0xe4>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	08006351 	.word	0x08006351
 8006320:	08006369 	.word	0x08006369
 8006324:	08006369 	.word	0x08006369
 8006328:	08006369 	.word	0x08006369
 800632c:	0800635d 	.word	0x0800635d
 8006330:	08006369 	.word	0x08006369
 8006334:	08006369 	.word	0x08006369
 8006338:	08006369 	.word	0x08006369
 800633c:	08006357 	.word	0x08006357
 8006340:	08006369 	.word	0x08006369
 8006344:	08006369 	.word	0x08006369
 8006348:	08006369 	.word	0x08006369
 800634c:	08006363 	.word	0x08006363
 8006350:	2300      	movs	r3, #0
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e117      	b.n	8006586 <UART_SetConfig+0x34e>
 8006356:	2302      	movs	r3, #2
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e114      	b.n	8006586 <UART_SetConfig+0x34e>
 800635c:	2304      	movs	r3, #4
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e111      	b.n	8006586 <UART_SetConfig+0x34e>
 8006362:	2308      	movs	r3, #8
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e10e      	b.n	8006586 <UART_SetConfig+0x34e>
 8006368:	2310      	movs	r3, #16
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	bf00      	nop
 800636e:	e10a      	b.n	8006586 <UART_SetConfig+0x34e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a71      	ldr	r2, [pc, #452]	; (800653c <UART_SetConfig+0x304>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d120      	bne.n	80063bc <UART_SetConfig+0x184>
 800637a:	4b6e      	ldr	r3, [pc, #440]	; (8006534 <UART_SetConfig+0x2fc>)
 800637c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006384:	2b10      	cmp	r3, #16
 8006386:	d00f      	beq.n	80063a8 <UART_SetConfig+0x170>
 8006388:	2b10      	cmp	r3, #16
 800638a:	d802      	bhi.n	8006392 <UART_SetConfig+0x15a>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <UART_SetConfig+0x164>
 8006390:	e010      	b.n	80063b4 <UART_SetConfig+0x17c>
 8006392:	2b20      	cmp	r3, #32
 8006394:	d005      	beq.n	80063a2 <UART_SetConfig+0x16a>
 8006396:	2b30      	cmp	r3, #48	; 0x30
 8006398:	d009      	beq.n	80063ae <UART_SetConfig+0x176>
 800639a:	e00b      	b.n	80063b4 <UART_SetConfig+0x17c>
 800639c:	2300      	movs	r3, #0
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e0f1      	b.n	8006586 <UART_SetConfig+0x34e>
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	e0ee      	b.n	8006586 <UART_SetConfig+0x34e>
 80063a8:	2304      	movs	r3, #4
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e0eb      	b.n	8006586 <UART_SetConfig+0x34e>
 80063ae:	2308      	movs	r3, #8
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e0e8      	b.n	8006586 <UART_SetConfig+0x34e>
 80063b4:	2310      	movs	r3, #16
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	bf00      	nop
 80063ba:	e0e4      	b.n	8006586 <UART_SetConfig+0x34e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a5f      	ldr	r2, [pc, #380]	; (8006540 <UART_SetConfig+0x308>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d120      	bne.n	8006408 <UART_SetConfig+0x1d0>
 80063c6:	4b5b      	ldr	r3, [pc, #364]	; (8006534 <UART_SetConfig+0x2fc>)
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d00f      	beq.n	80063f4 <UART_SetConfig+0x1bc>
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d802      	bhi.n	80063de <UART_SetConfig+0x1a6>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <UART_SetConfig+0x1b0>
 80063dc:	e010      	b.n	8006400 <UART_SetConfig+0x1c8>
 80063de:	2b80      	cmp	r3, #128	; 0x80
 80063e0:	d005      	beq.n	80063ee <UART_SetConfig+0x1b6>
 80063e2:	2bc0      	cmp	r3, #192	; 0xc0
 80063e4:	d009      	beq.n	80063fa <UART_SetConfig+0x1c2>
 80063e6:	e00b      	b.n	8006400 <UART_SetConfig+0x1c8>
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e0cb      	b.n	8006586 <UART_SetConfig+0x34e>
 80063ee:	2302      	movs	r3, #2
 80063f0:	77fb      	strb	r3, [r7, #31]
 80063f2:	e0c8      	b.n	8006586 <UART_SetConfig+0x34e>
 80063f4:	2304      	movs	r3, #4
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	e0c5      	b.n	8006586 <UART_SetConfig+0x34e>
 80063fa:	2308      	movs	r3, #8
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e0c2      	b.n	8006586 <UART_SetConfig+0x34e>
 8006400:	2310      	movs	r3, #16
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	bf00      	nop
 8006406:	e0be      	b.n	8006586 <UART_SetConfig+0x34e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a4d      	ldr	r2, [pc, #308]	; (8006544 <UART_SetConfig+0x30c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d124      	bne.n	800645c <UART_SetConfig+0x224>
 8006412:	4b48      	ldr	r3, [pc, #288]	; (8006534 <UART_SetConfig+0x2fc>)
 8006414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006420:	d012      	beq.n	8006448 <UART_SetConfig+0x210>
 8006422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006426:	d802      	bhi.n	800642e <UART_SetConfig+0x1f6>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <UART_SetConfig+0x204>
 800642c:	e012      	b.n	8006454 <UART_SetConfig+0x21c>
 800642e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006432:	d006      	beq.n	8006442 <UART_SetConfig+0x20a>
 8006434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006438:	d009      	beq.n	800644e <UART_SetConfig+0x216>
 800643a:	e00b      	b.n	8006454 <UART_SetConfig+0x21c>
 800643c:	2300      	movs	r3, #0
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e0a1      	b.n	8006586 <UART_SetConfig+0x34e>
 8006442:	2302      	movs	r3, #2
 8006444:	77fb      	strb	r3, [r7, #31]
 8006446:	e09e      	b.n	8006586 <UART_SetConfig+0x34e>
 8006448:	2304      	movs	r3, #4
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e09b      	b.n	8006586 <UART_SetConfig+0x34e>
 800644e:	2308      	movs	r3, #8
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e098      	b.n	8006586 <UART_SetConfig+0x34e>
 8006454:	2310      	movs	r3, #16
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	bf00      	nop
 800645a:	e094      	b.n	8006586 <UART_SetConfig+0x34e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a39      	ldr	r2, [pc, #228]	; (8006548 <UART_SetConfig+0x310>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d124      	bne.n	80064b0 <UART_SetConfig+0x278>
 8006466:	4b33      	ldr	r3, [pc, #204]	; (8006534 <UART_SetConfig+0x2fc>)
 8006468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006474:	d012      	beq.n	800649c <UART_SetConfig+0x264>
 8006476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647a:	d802      	bhi.n	8006482 <UART_SetConfig+0x24a>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <UART_SetConfig+0x258>
 8006480:	e012      	b.n	80064a8 <UART_SetConfig+0x270>
 8006482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006486:	d006      	beq.n	8006496 <UART_SetConfig+0x25e>
 8006488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800648c:	d009      	beq.n	80064a2 <UART_SetConfig+0x26a>
 800648e:	e00b      	b.n	80064a8 <UART_SetConfig+0x270>
 8006490:	2301      	movs	r3, #1
 8006492:	77fb      	strb	r3, [r7, #31]
 8006494:	e077      	b.n	8006586 <UART_SetConfig+0x34e>
 8006496:	2302      	movs	r3, #2
 8006498:	77fb      	strb	r3, [r7, #31]
 800649a:	e074      	b.n	8006586 <UART_SetConfig+0x34e>
 800649c:	2304      	movs	r3, #4
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e071      	b.n	8006586 <UART_SetConfig+0x34e>
 80064a2:	2308      	movs	r3, #8
 80064a4:	77fb      	strb	r3, [r7, #31]
 80064a6:	e06e      	b.n	8006586 <UART_SetConfig+0x34e>
 80064a8:	2310      	movs	r3, #16
 80064aa:	77fb      	strb	r3, [r7, #31]
 80064ac:	bf00      	nop
 80064ae:	e06a      	b.n	8006586 <UART_SetConfig+0x34e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a25      	ldr	r2, [pc, #148]	; (800654c <UART_SetConfig+0x314>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d124      	bne.n	8006504 <UART_SetConfig+0x2cc>
 80064ba:	4b1e      	ldr	r3, [pc, #120]	; (8006534 <UART_SetConfig+0x2fc>)
 80064bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80064c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c8:	d012      	beq.n	80064f0 <UART_SetConfig+0x2b8>
 80064ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ce:	d802      	bhi.n	80064d6 <UART_SetConfig+0x29e>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <UART_SetConfig+0x2ac>
 80064d4:	e012      	b.n	80064fc <UART_SetConfig+0x2c4>
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064da:	d006      	beq.n	80064ea <UART_SetConfig+0x2b2>
 80064dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064e0:	d009      	beq.n	80064f6 <UART_SetConfig+0x2be>
 80064e2:	e00b      	b.n	80064fc <UART_SetConfig+0x2c4>
 80064e4:	2300      	movs	r3, #0
 80064e6:	77fb      	strb	r3, [r7, #31]
 80064e8:	e04d      	b.n	8006586 <UART_SetConfig+0x34e>
 80064ea:	2302      	movs	r3, #2
 80064ec:	77fb      	strb	r3, [r7, #31]
 80064ee:	e04a      	b.n	8006586 <UART_SetConfig+0x34e>
 80064f0:	2304      	movs	r3, #4
 80064f2:	77fb      	strb	r3, [r7, #31]
 80064f4:	e047      	b.n	8006586 <UART_SetConfig+0x34e>
 80064f6:	2308      	movs	r3, #8
 80064f8:	77fb      	strb	r3, [r7, #31]
 80064fa:	e044      	b.n	8006586 <UART_SetConfig+0x34e>
 80064fc:	2310      	movs	r3, #16
 80064fe:	77fb      	strb	r3, [r7, #31]
 8006500:	bf00      	nop
 8006502:	e040      	b.n	8006586 <UART_SetConfig+0x34e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a11      	ldr	r2, [pc, #68]	; (8006550 <UART_SetConfig+0x318>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d139      	bne.n	8006582 <UART_SetConfig+0x34a>
 800650e:	4b09      	ldr	r3, [pc, #36]	; (8006534 <UART_SetConfig+0x2fc>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651c:	d027      	beq.n	800656e <UART_SetConfig+0x336>
 800651e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006522:	d817      	bhi.n	8006554 <UART_SetConfig+0x31c>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01c      	beq.n	8006562 <UART_SetConfig+0x32a>
 8006528:	e027      	b.n	800657a <UART_SetConfig+0x342>
 800652a:	bf00      	nop
 800652c:	efff69f3 	.word	0xefff69f3
 8006530:	40011000 	.word	0x40011000
 8006534:	40023800 	.word	0x40023800
 8006538:	40004400 	.word	0x40004400
 800653c:	40004800 	.word	0x40004800
 8006540:	40004c00 	.word	0x40004c00
 8006544:	40005000 	.word	0x40005000
 8006548:	40011400 	.word	0x40011400
 800654c:	40007800 	.word	0x40007800
 8006550:	40007c00 	.word	0x40007c00
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	d006      	beq.n	8006568 <UART_SetConfig+0x330>
 800655a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800655e:	d009      	beq.n	8006574 <UART_SetConfig+0x33c>
 8006560:	e00b      	b.n	800657a <UART_SetConfig+0x342>
 8006562:	2300      	movs	r3, #0
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e00e      	b.n	8006586 <UART_SetConfig+0x34e>
 8006568:	2302      	movs	r3, #2
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e00b      	b.n	8006586 <UART_SetConfig+0x34e>
 800656e:	2304      	movs	r3, #4
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e008      	b.n	8006586 <UART_SetConfig+0x34e>
 8006574:	2308      	movs	r3, #8
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e005      	b.n	8006586 <UART_SetConfig+0x34e>
 800657a:	2310      	movs	r3, #16
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	bf00      	nop
 8006580:	e001      	b.n	8006586 <UART_SetConfig+0x34e>
 8006582:	2310      	movs	r3, #16
 8006584:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658e:	d17f      	bne.n	8006690 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006590:	7ffb      	ldrb	r3, [r7, #31]
 8006592:	2b08      	cmp	r3, #8
 8006594:	d85c      	bhi.n	8006650 <UART_SetConfig+0x418>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0x364>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065e1 	.word	0x080065e1
 80065a4:	08006601 	.word	0x08006601
 80065a8:	08006651 	.word	0x08006651
 80065ac:	08006619 	.word	0x08006619
 80065b0:	08006651 	.word	0x08006651
 80065b4:	08006651 	.word	0x08006651
 80065b8:	08006651 	.word	0x08006651
 80065bc:	08006639 	.word	0x08006639
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c0:	f7fc fda2 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 80065c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	005a      	lsls	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	085b      	lsrs	r3, r3, #1
 80065d0:	441a      	add	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	b29b      	uxth	r3, r3
 80065dc:	61bb      	str	r3, [r7, #24]
        break;
 80065de:	e03a      	b.n	8006656 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e0:	f7fc fda6 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 80065e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	005a      	lsls	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	441a      	add	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	61bb      	str	r3, [r7, #24]
        break;
 80065fe:	e02a      	b.n	8006656 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	085a      	lsrs	r2, r3, #1
 8006606:	4b5f      	ldr	r3, [pc, #380]	; (8006784 <UART_SetConfig+0x54c>)
 8006608:	4413      	add	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6852      	ldr	r2, [r2, #4]
 800660e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006612:	b29b      	uxth	r3, r3
 8006614:	61bb      	str	r3, [r7, #24]
        break;
 8006616:	e01e      	b.n	8006656 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006618:	f7fc fc92 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 800661c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	005a      	lsls	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	441a      	add	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006632:	b29b      	uxth	r3, r3
 8006634:	61bb      	str	r3, [r7, #24]
        break;
 8006636:	e00e      	b.n	8006656 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	fbb2 f3f3 	udiv	r3, r2, r3
 800664a:	b29b      	uxth	r3, r3
 800664c:	61bb      	str	r3, [r7, #24]
        break;
 800664e:	e002      	b.n	8006656 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	75fb      	strb	r3, [r7, #23]
        break;
 8006654:	bf00      	nop
=======
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a9f      	ldr	r2, [pc, #636]	; (8007ac4 <UART_SetConfig+0x2f8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d121      	bne.n	8007890 <UART_SetConfig+0xc4>
 800784c:	4b9e      	ldr	r3, [pc, #632]	; (8007ac8 <UART_SetConfig+0x2fc>)
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d816      	bhi.n	8007888 <UART_SetConfig+0xbc>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x94>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007871 	.word	0x08007871
 8007864:	0800787d 	.word	0x0800787d
 8007868:	08007877 	.word	0x08007877
 800786c:	08007883 	.word	0x08007883
 8007870:	2301      	movs	r3, #1
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	e151      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007876:	2302      	movs	r3, #2
 8007878:	77fb      	strb	r3, [r7, #31]
 800787a:	e14e      	b.n	8007b1a <UART_SetConfig+0x34e>
 800787c:	2304      	movs	r3, #4
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	e14b      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007882:	2308      	movs	r3, #8
 8007884:	77fb      	strb	r3, [r7, #31]
 8007886:	e148      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007888:	2310      	movs	r3, #16
 800788a:	77fb      	strb	r3, [r7, #31]
 800788c:	bf00      	nop
 800788e:	e144      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a8d      	ldr	r2, [pc, #564]	; (8007acc <UART_SetConfig+0x300>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d134      	bne.n	8007904 <UART_SetConfig+0x138>
 800789a:	4b8b      	ldr	r3, [pc, #556]	; (8007ac8 <UART_SetConfig+0x2fc>)
 800789c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a0:	f003 030c 	and.w	r3, r3, #12
 80078a4:	2b0c      	cmp	r3, #12
 80078a6:	d829      	bhi.n	80078fc <UART_SetConfig+0x130>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <UART_SetConfig+0xe4>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078e5 	.word	0x080078e5
 80078b4:	080078fd 	.word	0x080078fd
 80078b8:	080078fd 	.word	0x080078fd
 80078bc:	080078fd 	.word	0x080078fd
 80078c0:	080078f1 	.word	0x080078f1
 80078c4:	080078fd 	.word	0x080078fd
 80078c8:	080078fd 	.word	0x080078fd
 80078cc:	080078fd 	.word	0x080078fd
 80078d0:	080078eb 	.word	0x080078eb
 80078d4:	080078fd 	.word	0x080078fd
 80078d8:	080078fd 	.word	0x080078fd
 80078dc:	080078fd 	.word	0x080078fd
 80078e0:	080078f7 	.word	0x080078f7
 80078e4:	2300      	movs	r3, #0
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e117      	b.n	8007b1a <UART_SetConfig+0x34e>
 80078ea:	2302      	movs	r3, #2
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e114      	b.n	8007b1a <UART_SetConfig+0x34e>
 80078f0:	2304      	movs	r3, #4
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e111      	b.n	8007b1a <UART_SetConfig+0x34e>
 80078f6:	2308      	movs	r3, #8
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e10e      	b.n	8007b1a <UART_SetConfig+0x34e>
 80078fc:	2310      	movs	r3, #16
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	bf00      	nop
 8007902:	e10a      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a71      	ldr	r2, [pc, #452]	; (8007ad0 <UART_SetConfig+0x304>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d120      	bne.n	8007950 <UART_SetConfig+0x184>
 800790e:	4b6e      	ldr	r3, [pc, #440]	; (8007ac8 <UART_SetConfig+0x2fc>)
 8007910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007918:	2b10      	cmp	r3, #16
 800791a:	d00f      	beq.n	800793c <UART_SetConfig+0x170>
 800791c:	2b10      	cmp	r3, #16
 800791e:	d802      	bhi.n	8007926 <UART_SetConfig+0x15a>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <UART_SetConfig+0x164>
 8007924:	e010      	b.n	8007948 <UART_SetConfig+0x17c>
 8007926:	2b20      	cmp	r3, #32
 8007928:	d005      	beq.n	8007936 <UART_SetConfig+0x16a>
 800792a:	2b30      	cmp	r3, #48	; 0x30
 800792c:	d009      	beq.n	8007942 <UART_SetConfig+0x176>
 800792e:	e00b      	b.n	8007948 <UART_SetConfig+0x17c>
 8007930:	2300      	movs	r3, #0
 8007932:	77fb      	strb	r3, [r7, #31]
 8007934:	e0f1      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007936:	2302      	movs	r3, #2
 8007938:	77fb      	strb	r3, [r7, #31]
 800793a:	e0ee      	b.n	8007b1a <UART_SetConfig+0x34e>
 800793c:	2304      	movs	r3, #4
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e0eb      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007942:	2308      	movs	r3, #8
 8007944:	77fb      	strb	r3, [r7, #31]
 8007946:	e0e8      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007948:	2310      	movs	r3, #16
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	bf00      	nop
 800794e:	e0e4      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a5f      	ldr	r2, [pc, #380]	; (8007ad4 <UART_SetConfig+0x308>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d120      	bne.n	800799c <UART_SetConfig+0x1d0>
 800795a:	4b5b      	ldr	r3, [pc, #364]	; (8007ac8 <UART_SetConfig+0x2fc>)
 800795c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d00f      	beq.n	8007988 <UART_SetConfig+0x1bc>
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d802      	bhi.n	8007972 <UART_SetConfig+0x1a6>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <UART_SetConfig+0x1b0>
 8007970:	e010      	b.n	8007994 <UART_SetConfig+0x1c8>
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d005      	beq.n	8007982 <UART_SetConfig+0x1b6>
 8007976:	2bc0      	cmp	r3, #192	; 0xc0
 8007978:	d009      	beq.n	800798e <UART_SetConfig+0x1c2>
 800797a:	e00b      	b.n	8007994 <UART_SetConfig+0x1c8>
 800797c:	2300      	movs	r3, #0
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e0cb      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007982:	2302      	movs	r3, #2
 8007984:	77fb      	strb	r3, [r7, #31]
 8007986:	e0c8      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007988:	2304      	movs	r3, #4
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e0c5      	b.n	8007b1a <UART_SetConfig+0x34e>
 800798e:	2308      	movs	r3, #8
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e0c2      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007994:	2310      	movs	r3, #16
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	bf00      	nop
 800799a:	e0be      	b.n	8007b1a <UART_SetConfig+0x34e>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a4d      	ldr	r2, [pc, #308]	; (8007ad8 <UART_SetConfig+0x30c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d124      	bne.n	80079f0 <UART_SetConfig+0x224>
 80079a6:	4b48      	ldr	r3, [pc, #288]	; (8007ac8 <UART_SetConfig+0x2fc>)
 80079a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b4:	d012      	beq.n	80079dc <UART_SetConfig+0x210>
 80079b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ba:	d802      	bhi.n	80079c2 <UART_SetConfig+0x1f6>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <UART_SetConfig+0x204>
 80079c0:	e012      	b.n	80079e8 <UART_SetConfig+0x21c>
 80079c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c6:	d006      	beq.n	80079d6 <UART_SetConfig+0x20a>
 80079c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079cc:	d009      	beq.n	80079e2 <UART_SetConfig+0x216>
 80079ce:	e00b      	b.n	80079e8 <UART_SetConfig+0x21c>
 80079d0:	2300      	movs	r3, #0
 80079d2:	77fb      	strb	r3, [r7, #31]
 80079d4:	e0a1      	b.n	8007b1a <UART_SetConfig+0x34e>
 80079d6:	2302      	movs	r3, #2
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e09e      	b.n	8007b1a <UART_SetConfig+0x34e>
 80079dc:	2304      	movs	r3, #4
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e09b      	b.n	8007b1a <UART_SetConfig+0x34e>
 80079e2:	2308      	movs	r3, #8
 80079e4:	77fb      	strb	r3, [r7, #31]
 80079e6:	e098      	b.n	8007b1a <UART_SetConfig+0x34e>
 80079e8:	2310      	movs	r3, #16
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	bf00      	nop
 80079ee:	e094      	b.n	8007b1a <UART_SetConfig+0x34e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a39      	ldr	r2, [pc, #228]	; (8007adc <UART_SetConfig+0x310>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d124      	bne.n	8007a44 <UART_SetConfig+0x278>
 80079fa:	4b33      	ldr	r3, [pc, #204]	; (8007ac8 <UART_SetConfig+0x2fc>)
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a08:	d012      	beq.n	8007a30 <UART_SetConfig+0x264>
 8007a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a0e:	d802      	bhi.n	8007a16 <UART_SetConfig+0x24a>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <UART_SetConfig+0x258>
 8007a14:	e012      	b.n	8007a3c <UART_SetConfig+0x270>
 8007a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a1a:	d006      	beq.n	8007a2a <UART_SetConfig+0x25e>
 8007a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a20:	d009      	beq.n	8007a36 <UART_SetConfig+0x26a>
 8007a22:	e00b      	b.n	8007a3c <UART_SetConfig+0x270>
 8007a24:	2301      	movs	r3, #1
 8007a26:	77fb      	strb	r3, [r7, #31]
 8007a28:	e077      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	77fb      	strb	r3, [r7, #31]
 8007a2e:	e074      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a30:	2304      	movs	r3, #4
 8007a32:	77fb      	strb	r3, [r7, #31]
 8007a34:	e071      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a36:	2308      	movs	r3, #8
 8007a38:	77fb      	strb	r3, [r7, #31]
 8007a3a:	e06e      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	77fb      	strb	r3, [r7, #31]
 8007a40:	bf00      	nop
 8007a42:	e06a      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a25      	ldr	r2, [pc, #148]	; (8007ae0 <UART_SetConfig+0x314>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d124      	bne.n	8007a98 <UART_SetConfig+0x2cc>
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <UART_SetConfig+0x2fc>)
 8007a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5c:	d012      	beq.n	8007a84 <UART_SetConfig+0x2b8>
 8007a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a62:	d802      	bhi.n	8007a6a <UART_SetConfig+0x29e>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d007      	beq.n	8007a78 <UART_SetConfig+0x2ac>
 8007a68:	e012      	b.n	8007a90 <UART_SetConfig+0x2c4>
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6e:	d006      	beq.n	8007a7e <UART_SetConfig+0x2b2>
 8007a70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a74:	d009      	beq.n	8007a8a <UART_SetConfig+0x2be>
 8007a76:	e00b      	b.n	8007a90 <UART_SetConfig+0x2c4>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	77fb      	strb	r3, [r7, #31]
 8007a7c:	e04d      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	77fb      	strb	r3, [r7, #31]
 8007a82:	e04a      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a84:	2304      	movs	r3, #4
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e047      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a8a:	2308      	movs	r3, #8
 8007a8c:	77fb      	strb	r3, [r7, #31]
 8007a8e:	e044      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a90:	2310      	movs	r3, #16
 8007a92:	77fb      	strb	r3, [r7, #31]
 8007a94:	bf00      	nop
 8007a96:	e040      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a11      	ldr	r2, [pc, #68]	; (8007ae4 <UART_SetConfig+0x318>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d139      	bne.n	8007b16 <UART_SetConfig+0x34a>
 8007aa2:	4b09      	ldr	r3, [pc, #36]	; (8007ac8 <UART_SetConfig+0x2fc>)
 8007aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab0:	d027      	beq.n	8007b02 <UART_SetConfig+0x336>
 8007ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab6:	d817      	bhi.n	8007ae8 <UART_SetConfig+0x31c>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d01c      	beq.n	8007af6 <UART_SetConfig+0x32a>
 8007abc:	e027      	b.n	8007b0e <UART_SetConfig+0x342>
 8007abe:	bf00      	nop
 8007ac0:	efff69f3 	.word	0xefff69f3
 8007ac4:	40011000 	.word	0x40011000
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40004400 	.word	0x40004400
 8007ad0:	40004800 	.word	0x40004800
 8007ad4:	40004c00 	.word	0x40004c00
 8007ad8:	40005000 	.word	0x40005000
 8007adc:	40011400 	.word	0x40011400
 8007ae0:	40007800 	.word	0x40007800
 8007ae4:	40007c00 	.word	0x40007c00
 8007ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aec:	d006      	beq.n	8007afc <UART_SetConfig+0x330>
 8007aee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007af2:	d009      	beq.n	8007b08 <UART_SetConfig+0x33c>
 8007af4:	e00b      	b.n	8007b0e <UART_SetConfig+0x342>
 8007af6:	2300      	movs	r3, #0
 8007af8:	77fb      	strb	r3, [r7, #31]
 8007afa:	e00e      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007afc:	2302      	movs	r3, #2
 8007afe:	77fb      	strb	r3, [r7, #31]
 8007b00:	e00b      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007b02:	2304      	movs	r3, #4
 8007b04:	77fb      	strb	r3, [r7, #31]
 8007b06:	e008      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	77fb      	strb	r3, [r7, #31]
 8007b0c:	e005      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007b0e:	2310      	movs	r3, #16
 8007b10:	77fb      	strb	r3, [r7, #31]
 8007b12:	bf00      	nop
 8007b14:	e001      	b.n	8007b1a <UART_SetConfig+0x34e>
 8007b16:	2310      	movs	r3, #16
 8007b18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b22:	d17f      	bne.n	8007c24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007b24:	7ffb      	ldrb	r3, [r7, #31]
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d85c      	bhi.n	8007be4 <UART_SetConfig+0x418>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <UART_SetConfig+0x364>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b55 	.word	0x08007b55
 8007b34:	08007b75 	.word	0x08007b75
 8007b38:	08007b95 	.word	0x08007b95
 8007b3c:	08007be5 	.word	0x08007be5
 8007b40:	08007bad 	.word	0x08007bad
 8007b44:	08007be5 	.word	0x08007be5
 8007b48:	08007be5 	.word	0x08007be5
 8007b4c:	08007be5 	.word	0x08007be5
 8007b50:	08007bcd 	.word	0x08007bcd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b54:	f7fc fbe2 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 8007b58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	005a      	lsls	r2, r3, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	61bb      	str	r3, [r7, #24]
        break;
 8007b72:	e03a      	b.n	8007bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b74:	f7fc fbe6 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 8007b78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	005a      	lsls	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	61bb      	str	r3, [r7, #24]
        break;
 8007b92:	e02a      	b.n	8007bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	085a      	lsrs	r2, r3, #1
 8007b9a:	4b5f      	ldr	r3, [pc, #380]	; (8007d18 <UART_SetConfig+0x54c>)
 8007b9c:	4413      	add	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6852      	ldr	r2, [r2, #4]
 8007ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	61bb      	str	r3, [r7, #24]
        break;
 8007baa:	e01e      	b.n	8007bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bac:	f7fc fad2 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8007bb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	005a      	lsls	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	085b      	lsrs	r3, r3, #1
 8007bbc:	441a      	add	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	61bb      	str	r3, [r7, #24]
        break;
 8007bca:	e00e      	b.n	8007bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	085b      	lsrs	r3, r3, #1
 8007bd2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	61bb      	str	r3, [r7, #24]
        break;
 8007be2:	e002      	b.n	8007bea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	75fb      	strb	r3, [r7, #23]
        break;
 8007be8:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< Updated upstream
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b0f      	cmp	r3, #15
 800665a:	d916      	bls.n	800668a <UART_SetConfig+0x452>
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006662:	d212      	bcs.n	800668a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f023 030f 	bic.w	r3, r3, #15
 800666c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	085b      	lsrs	r3, r3, #1
 8006672:	b29b      	uxth	r3, r3
 8006674:	f003 0307 	and.w	r3, r3, #7
 8006678:	b29a      	uxth	r2, r3
 800667a:	897b      	ldrh	r3, [r7, #10]
 800667c:	4313      	orrs	r3, r2
 800667e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	897a      	ldrh	r2, [r7, #10]
 8006686:	60da      	str	r2, [r3, #12]
 8006688:	e070      	b.n	800676c <UART_SetConfig+0x534>
=======
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	2b0f      	cmp	r3, #15
 8007bee:	d916      	bls.n	8007c1e <UART_SetConfig+0x452>
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf6:	d212      	bcs.n	8007c1e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f023 030f 	bic.w	r3, r3, #15
 8007c00:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	085b      	lsrs	r3, r3, #1
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	897b      	ldrh	r3, [r7, #10]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	897a      	ldrh	r2, [r7, #10]
 8007c1a:	60da      	str	r2, [r3, #12]
 8007c1c:	e070      	b.n	8007d00 <UART_SetConfig+0x534>
>>>>>>> Stashed changes
    }
    else
    {
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 800668a:	2301      	movs	r3, #1
 800668c:	75fb      	strb	r3, [r7, #23]
 800668e:	e06d      	b.n	800676c <UART_SetConfig+0x534>
=======
 8007c1e:	2301      	movs	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
 8007c22:	e06d      	b.n	8007d00 <UART_SetConfig+0x534>
>>>>>>> Stashed changes
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< Updated upstream
 8006690:	7ffb      	ldrb	r3, [r7, #31]
 8006692:	2b08      	cmp	r3, #8
 8006694:	d859      	bhi.n	800674a <UART_SetConfig+0x512>
 8006696:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0x464>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066df 	.word	0x080066df
 80066a4:	080066fd 	.word	0x080066fd
 80066a8:	0800674b 	.word	0x0800674b
 80066ac:	08006715 	.word	0x08006715
 80066b0:	0800674b 	.word	0x0800674b
 80066b4:	0800674b 	.word	0x0800674b
 80066b8:	0800674b 	.word	0x0800674b
 80066bc:	08006733 	.word	0x08006733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c0:	f7fc fd22 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 80066c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	085a      	lsrs	r2, r3, #1
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	441a      	add	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	b29b      	uxth	r3, r3
 80066da:	61bb      	str	r3, [r7, #24]
        break;
 80066dc:	e038      	b.n	8006750 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066de:	f7fc fd27 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 80066e2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	085a      	lsrs	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	441a      	add	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	61bb      	str	r3, [r7, #24]
        break;
 80066fa:	e029      	b.n	8006750 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	085a      	lsrs	r2, r3, #1
 8006702:	4b21      	ldr	r3, [pc, #132]	; (8006788 <UART_SetConfig+0x550>)
 8006704:	4413      	add	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6852      	ldr	r2, [r2, #4]
 800670a:	fbb3 f3f2 	udiv	r3, r3, r2
 800670e:	b29b      	uxth	r3, r3
 8006710:	61bb      	str	r3, [r7, #24]
        break;
 8006712:	e01d      	b.n	8006750 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006714:	f7fc fc14 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8006718:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	085a      	lsrs	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	441a      	add	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	b29b      	uxth	r3, r3
 800672e:	61bb      	str	r3, [r7, #24]
        break;
 8006730:	e00e      	b.n	8006750 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	b29b      	uxth	r3, r3
 8006746:	61bb      	str	r3, [r7, #24]
        break;
 8006748:	e002      	b.n	8006750 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	75fb      	strb	r3, [r7, #23]
        break;
 800674e:	bf00      	nop
=======
 8007c24:	7ffb      	ldrb	r3, [r7, #31]
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d859      	bhi.n	8007cde <UART_SetConfig+0x512>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0x464>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c55 	.word	0x08007c55
 8007c34:	08007c73 	.word	0x08007c73
 8007c38:	08007c91 	.word	0x08007c91
 8007c3c:	08007cdf 	.word	0x08007cdf
 8007c40:	08007ca9 	.word	0x08007ca9
 8007c44:	08007cdf 	.word	0x08007cdf
 8007c48:	08007cdf 	.word	0x08007cdf
 8007c4c:	08007cdf 	.word	0x08007cdf
 8007c50:	08007cc7 	.word	0x08007cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c54:	f7fc fb62 	bl	800431c <HAL_RCC_GetPCLK1Freq>
 8007c58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	085a      	lsrs	r2, r3, #1
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	441a      	add	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	61bb      	str	r3, [r7, #24]
        break;
 8007c70:	e038      	b.n	8007ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c72:	f7fc fb67 	bl	8004344 <HAL_RCC_GetPCLK2Freq>
 8007c76:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	085a      	lsrs	r2, r3, #1
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	441a      	add	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	61bb      	str	r3, [r7, #24]
        break;
 8007c8e:	e029      	b.n	8007ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	085a      	lsrs	r2, r3, #1
 8007c96:	4b21      	ldr	r3, [pc, #132]	; (8007d1c <UART_SetConfig+0x550>)
 8007c98:	4413      	add	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6852      	ldr	r2, [r2, #4]
 8007c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	61bb      	str	r3, [r7, #24]
        break;
 8007ca6:	e01d      	b.n	8007ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ca8:	f7fc fa54 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8007cac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	085a      	lsrs	r2, r3, #1
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	441a      	add	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	61bb      	str	r3, [r7, #24]
        break;
 8007cc4:	e00e      	b.n	8007ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	085b      	lsrs	r3, r3, #1
 8007ccc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	61bb      	str	r3, [r7, #24]
        break;
 8007cdc:	e002      	b.n	8007ce4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ce2:	bf00      	nop
>>>>>>> Stashed changes
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
<<<<<<< Updated upstream
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b0f      	cmp	r3, #15
 8006754:	d908      	bls.n	8006768 <UART_SetConfig+0x530>
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800675c:	d204      	bcs.n	8006768 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	60da      	str	r2, [r3, #12]
 8006766:	e001      	b.n	800676c <UART_SetConfig+0x534>
=======
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	2b0f      	cmp	r3, #15
 8007ce8:	d908      	bls.n	8007cfc <UART_SetConfig+0x530>
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf0:	d204      	bcs.n	8007cfc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	e001      	b.n	8007d00 <UART_SetConfig+0x534>
>>>>>>> Stashed changes
    }
    else
    {
      ret = HAL_ERROR;
<<<<<<< Updated upstream
 8006768:	2301      	movs	r3, #1
 800676a:	75fb      	strb	r3, [r7, #23]
=======
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< Updated upstream
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	01e84800 	.word	0x01e84800
 8006788:	00f42400 	.word	0x00f42400

0800678c <UART_AdvFeatureConfig>:
=======
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3720      	adds	r7, #32
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	01e84800 	.word	0x01e84800
 8007d1c:	00f42400 	.word	0x00f42400

08007d20 <UART_AdvFeatureConfig>:
>>>>>>> Stashed changes
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
=======
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< Updated upstream
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
=======
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< Updated upstream
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
=======
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00a      	beq.n	8007d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< Updated upstream
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
=======
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< Updated upstream
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
=======
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< Updated upstream
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]
=======
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< Updated upstream
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]
=======
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< Updated upstream
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01a      	beq.n	80068a2 <UART_AdvFeatureConfig+0x116>
=======
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d01a      	beq.n	8007e36 <UART_AdvFeatureConfig+0x116>
>>>>>>> Stashed changes
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< Updated upstream
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800688a:	d10a      	bne.n	80068a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
=======
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e1e:	d10a      	bne.n	8007e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< Updated upstream
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <UART_CheckIdleState>:
=======
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	605a      	str	r2, [r3, #4]
  }
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <UART_CheckIdleState>:
>>>>>>> Stashed changes
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< Updated upstream
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	6078      	str	r0, [r7, #4]
=======
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< Updated upstream
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80068de:	f7fa ff59 	bl	8001794 <HAL_GetTick>
 80068e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d10e      	bne.n	8006910 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f82a 	bl	800695a <UART_WaitOnFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e020      	b.n	8006952 <UART_CheckIdleState+0x82>
=======
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e72:	f7fa f8b1 	bl	8001fd8 <HAL_GetTick>
 8007e76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	2b08      	cmp	r3, #8
 8007e84:	d10e      	bne.n	8007ea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f82a 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e020      	b.n	8007ee6 <UART_CheckIdleState+0x82>
>>>>>>> Stashed changes
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< Updated upstream
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b04      	cmp	r3, #4
 800691c:	d10e      	bne.n	800693c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800691e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f814 	bl	800695a <UART_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d001      	beq.n	800693c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e00a      	b.n	8006952 <UART_CheckIdleState+0x82>
=======
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0304 	and.w	r3, r3, #4
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	d10e      	bne.n	8007ed0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f814 	bl	8007eee <UART_WaitOnFlagUntilTimeout>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e00a      	b.n	8007ee6 <UART_CheckIdleState+0x82>
>>>>>>> Stashed changes
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< Updated upstream
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2220      	movs	r2, #32
 8006940:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <UART_WaitOnFlagUntilTimeout>:
=======
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <UART_WaitOnFlagUntilTimeout>:
>>>>>>> Stashed changes
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< Updated upstream
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	603b      	str	r3, [r7, #0]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696a:	e05d      	b.n	8006a28 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d059      	beq.n	8006a28 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006974:	f7fa ff0e 	bl	8001794 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	429a      	cmp	r2, r3
 8006982:	d302      	bcc.n	800698a <UART_WaitOnFlagUntilTimeout+0x30>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d11b      	bne.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006998:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e042      	b.n	8006a48 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d02b      	beq.n	8006a28 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069de:	d123      	bne.n	8006a28 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069e8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0201 	bic.w	r2, r2, #1
 8006a08:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e00f      	b.n	8006a48 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69da      	ldr	r2, [r3, #28]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4013      	ands	r3, r2
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	bf0c      	ite	eq
 8006a38:	2301      	moveq	r3, #1
 8006a3a:	2300      	movne	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	461a      	mov	r2, r3
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d092      	beq.n	800696c <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007efe:	e05d      	b.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f06:	d059      	beq.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f08:	f7fa f866 	bl	8001fd8 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d302      	bcc.n	8007f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d11b      	bne.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0201 	bic.w	r2, r2, #1
 8007f3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2220      	movs	r2, #32
 8007f42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2220      	movs	r2, #32
 8007f48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e042      	b.n	8007fdc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d02b      	beq.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f72:	d123      	bne.n	8007fbc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f7c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e00f      	b.n	8007fdc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69da      	ldr	r2, [r3, #28]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	bf0c      	ite	eq
 8007fcc:	2301      	moveq	r3, #1
 8007fce:	2300      	movne	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d092      	beq.n	8007f00 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USB_CoreInit>:
=======
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ffa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0201 	bic.w	r2, r2, #1
 800800a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2220      	movs	r2, #32
 8008010:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff fbae 	bl	80077a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008048:	bf00      	nop
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008066:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2220      	movs	r2, #32
 800806c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff fb8b 	bl	8007790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008090:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008096:	2b22      	cmp	r3, #34	; 0x22
 8008098:	d13a      	bne.n	8008110 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080a2:	89bb      	ldrh	r3, [r7, #12]
 80080a4:	b2d9      	uxtb	r1, r3
 80080a6:	89fb      	ldrh	r3, [r7, #14]
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ae:	400a      	ands	r2, r1
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d121      	bne.n	8008120 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080ea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0201 	bic.w	r2, r2, #1
 80080fa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7f9 f823 	bl	8001154 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800810e:	e007      	b.n	8008120 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	699a      	ldr	r2, [r3, #24]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0208 	orr.w	r2, r2, #8
 800811e:	619a      	str	r2, [r3, #24]
}
 8008120:	bf00      	nop
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008136:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800813c:	2b22      	cmp	r3, #34	; 0x22
 800813e:	d13a      	bne.n	80081b6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800814e:	89ba      	ldrh	r2, [r7, #12]
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	4013      	ands	r3, r2
 8008154:	b29a      	uxth	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815e:	1c9a      	adds	r2, r3, #2
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800817c:	b29b      	uxth	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d121      	bne.n	80081c6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008190:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0201 	bic.w	r2, r2, #1
 80081a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7f8 ffd0 	bl	8001154 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081b4:	e007      	b.n	80081c6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699a      	ldr	r2, [r3, #24]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0208 	orr.w	r2, r2, #8
 80081c4:	619a      	str	r2, [r3, #24]
}
 80081c6:	bf00      	nop
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <USB_CoreInit>:
>>>>>>> Stashed changes
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< Updated upstream
 8006a50:	b084      	sub	sp, #16
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	f107 001c 	add.w	r0, r7, #28
 8006a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d120      	bne.n	8006aaa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	4b20      	ldr	r3, [pc, #128]	; (8006afc <USB_CoreInit+0xac>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	60d3      	str	r3, [r2, #12]
=======
 80081d0:	b084      	sub	sp, #16
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	f107 001c 	add.w	r0, r7, #28
 80081de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d120      	bne.n	800822a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	4b20      	ldr	r3, [pc, #128]	; (800827c <USB_CoreInit+0xac>)
 80081fa:	4013      	ands	r3, r2
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	60d3      	str	r3, [r2, #12]
>>>>>>> Stashed changes
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
<<<<<<< Updated upstream
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d105      	bne.n	8006a9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa52 	bl	8006f48 <USB_CoreReset>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73fb      	strb	r3, [r7, #15]
 8006aa8:	e010      	b.n	8006acc <USB_CoreInit+0x7c>
=======
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800820c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d105      	bne.n	800821e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa52 	bl	80086c8 <USB_CoreReset>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]
 8008228:	e010      	b.n	800824c <USB_CoreInit+0x7c>
>>>>>>> Stashed changes
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
<<<<<<< Updated upstream
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fa46 	bl	8006f48 <USB_CoreReset>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d10b      	bne.n	8006aea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f043 0206 	orr.w	r2, r3, #6
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f043 0220 	orr.w	r2, r3, #32
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006af6:	b004      	add	sp, #16
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	ffbdffbf 	.word	0xffbdffbf

08006b00 <USB_DisableGlobalInt>:
=======
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa46 	bl	80086c8 <USB_CoreReset>
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800824c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824e:	2b01      	cmp	r3, #1
 8008250:	d10b      	bne.n	800826a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f043 0206 	orr.w	r2, r3, #6
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f043 0220 	orr.w	r2, r3, #32
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008276:	b004      	add	sp, #16
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	ffbdffbf 	.word	0xffbdffbf

08008280 <USB_DisableGlobalInt>:
>>>>>>> Stashed changes
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< Updated upstream
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f023 0201 	bic.w	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_SetCurrentMode>:
=======
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f023 0201 	bic.w	r2, r3, #1
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USB_SetCurrentMode>:
>>>>>>> Stashed changes
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
<<<<<<< Updated upstream
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d106      	bne.n	8006b4e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	60da      	str	r2, [r3, #12]
 8006b4c:	e00b      	b.n	8006b66 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d106      	bne.n	8006b62 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60da      	str	r2, [r3, #12]
 8006b60:	e001      	b.n	8006b66 <USB_SetCurrentMode+0x44>
=======
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d106      	bne.n	80082ce <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	60da      	str	r2, [r3, #12]
 80082cc:	e00b      	b.n	80082e6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
 80082e0:	e001      	b.n	80082e6 <USB_SetCurrentMode+0x44>
>>>>>>> Stashed changes
  }
  else
  {
    return HAL_ERROR;
<<<<<<< Updated upstream
 8006b62:	2301      	movs	r3, #1
 8006b64:	e003      	b.n	8006b6e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006b66:	2032      	movs	r0, #50	; 0x32
 8006b68:	f7fa fe20 	bl	80017ac <HAL_Delay>

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <USB_DevInit>:
=======
 80082e2:	2301      	movs	r3, #1
 80082e4:	e003      	b.n	80082ee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80082e6:	2032      	movs	r0, #50	; 0x32
 80082e8:	f7f9 fe82 	bl	8001ff0 <HAL_Delay>

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <USB_DevInit>:
>>>>>>> Stashed changes
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< Updated upstream
 8006b78:	b084      	sub	sp, #16
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b086      	sub	sp, #24
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b92:	2300      	movs	r3, #0
 8006b94:	613b      	str	r3, [r7, #16]
 8006b96:	e009      	b.n	8006bac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	3340      	adds	r3, #64	; 0x40
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b0e      	cmp	r3, #14
 8006bb0:	d9f2      	bls.n	8006b98 <USB_DevInit+0x20>
=======
 80082f8:	b084      	sub	sp, #16
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008312:	2300      	movs	r3, #0
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	e009      	b.n	800832c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	3340      	adds	r3, #64	; 0x40
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	2200      	movs	r2, #0
 8008324:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	3301      	adds	r3, #1
 800832a:	613b      	str	r3, [r7, #16]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2b0e      	cmp	r3, #14
 8008330:	d9f2      	bls.n	8008318 <USB_DevInit+0x20>
>>>>>>> Stashed changes
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
<<<<<<< Updated upstream
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d11c      	bne.n	8006bf2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bc6:	f043 0302 	orr.w	r3, r3, #2
 8006bca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	e005      	b.n	8006bfe <USB_DevInit+0x86>
=======
 8008332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d11c      	bne.n	8008372 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008346:	f043 0302 	orr.w	r3, r3, #2
 800834a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	e005      	b.n	800837e <USB_DevInit+0x86>
>>>>>>> Stashed changes
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
<<<<<<< Updated upstream
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> Stashed changes
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
<<<<<<< Updated upstream
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c04:	461a      	mov	r2, r3
 8006c06:	2300      	movs	r3, #0
 8006c08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c10:	4619      	mov	r1, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c18:	461a      	mov	r2, r3
 8006c1a:	680b      	ldr	r3, [r1, #0]
 8006c1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d10c      	bne.n	8006c3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f959 	bl	8006ee4 <USB_SetDevSpeed>
 8006c32:	e018      	b.n	8006c66 <USB_DevInit+0xee>
=======
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008384:	461a      	mov	r2, r3
 8008386:	2300      	movs	r3, #0
 8008388:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008390:	4619      	mov	r1, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008398:	461a      	mov	r2, r3
 800839a:	680b      	ldr	r3, [r1, #0]
 800839c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800839e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d10c      	bne.n	80083be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d104      	bne.n	80083b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083aa:	2100      	movs	r1, #0
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f959 	bl	8008664 <USB_SetDevSpeed>
 80083b2:	e018      	b.n	80083e6 <USB_DevInit+0xee>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
<<<<<<< Updated upstream
 8006c34:	2101      	movs	r1, #1
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f954 	bl	8006ee4 <USB_SetDevSpeed>
 8006c3c:	e013      	b.n	8006c66 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d10c      	bne.n	8006c5e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f949 	bl	8006ee4 <USB_SetDevSpeed>
 8006c52:	e008      	b.n	8006c66 <USB_DevInit+0xee>
=======
 80083b4:	2101      	movs	r1, #1
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f954 	bl	8008664 <USB_SetDevSpeed>
 80083bc:	e013      	b.n	80083e6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d10c      	bne.n	80083de <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80083ca:	2100      	movs	r1, #0
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f949 	bl	8008664 <USB_SetDevSpeed>
 80083d2:	e008      	b.n	80083e6 <USB_DevInit+0xee>
>>>>>>> Stashed changes
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
<<<<<<< Updated upstream
 8006c54:	2101      	movs	r1, #1
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f944 	bl	8006ee4 <USB_SetDevSpeed>
 8006c5c:	e003      	b.n	8006c66 <USB_DevInit+0xee>
=======
 80083d4:	2101      	movs	r1, #1
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f944 	bl	8008664 <USB_SetDevSpeed>
 80083dc:	e003      	b.n	80083e6 <USB_DevInit+0xee>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
<<<<<<< Updated upstream
 8006c5e:	2103      	movs	r1, #3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f93f 	bl	8006ee4 <USB_SetDevSpeed>
=======
 80083de:	2103      	movs	r1, #3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f93f 	bl	8008664 <USB_SetDevSpeed>
>>>>>>> Stashed changes
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
<<<<<<< Updated upstream
 8006c66:	2110      	movs	r1, #16
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f8f3 	bl	8006e54 <USB_FlushTxFifo>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f911 	bl	8006ea0 <USB_FlushRxFifo>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]
=======
 80083e6:	2110      	movs	r1, #16
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f8f3 	bl	80085d4 <USB_FlushTxFifo>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f911 	bl	8008620 <USB_FlushRxFifo>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
<<<<<<< Updated upstream
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8e:	461a      	mov	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	e043      	b.n	8006d3a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc8:	d118      	bne.n	8006cfc <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	e013      	b.n	8006d0e <USB_DevInit+0x196>
=======
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840e:	461a      	mov	r2, r3
 8008410:	2300      	movs	r3, #0
 8008412:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841a:	461a      	mov	r2, r3
 800841c:	2300      	movs	r3, #0
 800841e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008426:	461a      	mov	r2, r3
 8008428:	2300      	movs	r3, #0
 800842a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800842c:	2300      	movs	r3, #0
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	e043      	b.n	80084ba <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008448:	d118      	bne.n	800847c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10a      	bne.n	8008466 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800845c:	461a      	mov	r2, r3
 800845e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	e013      	b.n	800848e <USB_DevInit+0x196>
>>>>>>> Stashed changes
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
<<<<<<< Updated upstream
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e008      	b.n	8006d0e <USB_DevInit+0x196>
=======
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008472:	461a      	mov	r2, r3
 8008474:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	e008      	b.n	800848e <USB_DevInit+0x196>
>>>>>>> Stashed changes
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
<<<<<<< Updated upstream
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	461a      	mov	r2, r3
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3301      	adds	r3, #1
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d3b7      	bcc.n	8006cb2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	e043      	b.n	8006dd0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d5e:	d118      	bne.n	8006d92 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	461a      	mov	r2, r3
 8006d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e013      	b.n	8006da4 <USB_DevInit+0x22c>
=======
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008488:	461a      	mov	r2, r3
 800848a:	2300      	movs	r3, #0
 800848c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	461a      	mov	r2, r3
 800849c:	2300      	movs	r3, #0
 800849e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ac:	461a      	mov	r2, r3
 80084ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3301      	adds	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d3b7      	bcc.n	8008432 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084c2:	2300      	movs	r3, #0
 80084c4:	613b      	str	r3, [r7, #16]
 80084c6:	e043      	b.n	8008550 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084de:	d118      	bne.n	8008512 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f2:	461a      	mov	r2, r3
 80084f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	e013      	b.n	8008524 <USB_DevInit+0x22c>
>>>>>>> Stashed changes
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
<<<<<<< Updated upstream
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e008      	b.n	8006da4 <USB_DevInit+0x22c>
=======
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008508:	461a      	mov	r2, r3
 800850a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	e008      	b.n	8008524 <USB_DevInit+0x22c>
>>>>>>> Stashed changes
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
<<<<<<< Updated upstream
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2300      	movs	r3, #0
 8006da2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	461a      	mov	r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d3b7      	bcc.n	8006d48 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006df8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d105      	bne.n	8006e0c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f043 0210 	orr.w	r2, r3, #16
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	619a      	str	r2, [r3, #24]
=======
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851e:	461a      	mov	r2, r3
 8008520:	2300      	movs	r3, #0
 8008522:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	2300      	movs	r3, #0
 8008534:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	015a      	lsls	r2, r3, #5
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4413      	add	r3, r2
 800853e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008542:	461a      	mov	r2, r3
 8008544:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008548:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	3301      	adds	r3, #1
 800854e:	613b      	str	r3, [r7, #16]
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	429a      	cmp	r2, r3
 8008556:	d3b7      	bcc.n	80084c8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800856a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008578:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	2b00      	cmp	r3, #0
 800857e:	d105      	bne.n	800858c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	f043 0210 	orr.w	r2, r3, #16
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
<<<<<<< Updated upstream
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <USB_DevInit+0x2d4>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6193      	str	r3, [r2, #24]
=======
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699a      	ldr	r2, [r3, #24]
 8008590:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <USB_DevInit+0x2d4>)
 8008592:	4313      	orrs	r3, r2
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6193      	str	r3, [r2, #24]
>>>>>>> Stashed changes
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
<<<<<<< Updated upstream
 8006e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f043 0208 	orr.w	r2, r3, #8
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <USB_DevInit+0x2d8>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e48:	b004      	add	sp, #16
 8006e4a:	4770      	bx	lr
 8006e4c:	803c3800 	.word	0x803c3800
 8006e50:	40000004 	.word	0x40000004

08006e54 <USB_FlushTxFifo>:
=======
 8008598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	f043 0208 	orr.w	r2, r3, #8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d105      	bne.n	80085bc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699a      	ldr	r2, [r3, #24]
 80085b4:	4b06      	ldr	r3, [pc, #24]	; (80085d0 <USB_DevInit+0x2d8>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085c8:	b004      	add	sp, #16
 80085ca:	4770      	bx	lr
 80085cc:	803c3800 	.word	0x803c3800
 80085d0:	40000004 	.word	0x40000004

080085d4 <USB_FlushTxFifo>:
>>>>>>> Stashed changes
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
<<<<<<< Updated upstream
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	019b      	lsls	r3, r3, #6
 8006e66:	f043 0220 	orr.w	r2, r3, #32
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	611a      	str	r2, [r3, #16]
=======
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	019b      	lsls	r3, r3, #6
 80085e6:	f043 0220 	orr.w	r2, r3, #32
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  do
  {
    if (++count > 200000U)
<<<<<<< Updated upstream
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4a09      	ldr	r2, [pc, #36]	; (8006e9c <USB_FlushTxFifo+0x48>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d901      	bls.n	8006e80 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e006      	b.n	8006e8e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d0f0      	beq.n	8006e6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	00030d40 	.word	0x00030d40

08006ea0 <USB_FlushRxFifo>:
=======
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4a09      	ldr	r2, [pc, #36]	; (800861c <USB_FlushTxFifo+0x48>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d901      	bls.n	8008600 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e006      	b.n	800860e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	f003 0320 	and.w	r3, r3, #32
 8008608:	2b20      	cmp	r3, #32
 800860a:	d0f0      	beq.n	80085ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	00030d40 	.word	0x00030d40

08008620 <USB_FlushRxFifo>:
>>>>>>> Stashed changes
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< Updated upstream
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	611a      	str	r2, [r3, #16]
=======
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2210      	movs	r2, #16
 8008630:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  do
  {
    if (++count > 200000U)
<<<<<<< Updated upstream
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4a09      	ldr	r2, [pc, #36]	; (8006ee0 <USB_FlushRxFifo+0x40>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d901      	bls.n	8006ec4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e006      	b.n	8006ed2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d0f0      	beq.n	8006eb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	00030d40 	.word	0x00030d40

08006ee4 <USB_SetDevSpeed>:
=======
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4a09      	ldr	r2, [pc, #36]	; (8008660 <USB_FlushRxFifo+0x40>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d901      	bls.n	8008644 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e006      	b.n	8008652 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b10      	cmp	r3, #16
 800864e:	d0f0      	beq.n	8008632 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	00030d40 	.word	0x00030d40

08008664 <USB_SetDevSpeed>:
>>>>>>> Stashed changes
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
<<<<<<< Updated upstream
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f04:	4313      	orrs	r3, r2
 8006f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USB_DevDisconnect>:
=======
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008684:	4313      	orrs	r3, r2
 8008686:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <USB_DevDisconnect>:
>>>>>>> Stashed changes
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< Updated upstream
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006f36:	2003      	movs	r0, #3
 8006f38:	f7fa fc38 	bl	80017ac <HAL_Delay>

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <USB_CoreReset>:
=======
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086b0:	f043 0302 	orr.w	r3, r3, #2
 80086b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80086b6:	2003      	movs	r0, #3
 80086b8:	f7f9 fc9a 	bl	8001ff0 <HAL_Delay>

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <USB_CoreReset>:
>>>>>>> Stashed changes
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< Updated upstream
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
=======
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
<<<<<<< Updated upstream
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4a13      	ldr	r2, [pc, #76]	; (8006fac <USB_CoreReset+0x64>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d901      	bls.n	8006f66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e01b      	b.n	8006f9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	daf2      	bge.n	8006f54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f043 0201 	orr.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]
=======
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3301      	adds	r3, #1
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4a13      	ldr	r2, [pc, #76]	; (800872c <USB_CoreReset+0x64>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e01b      	b.n	800871e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	daf2      	bge.n	80086d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f043 0201 	orr.w	r2, r3, #1
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

  do
  {
    if (++count > 200000U)
<<<<<<< Updated upstream
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3301      	adds	r3, #1
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <USB_CoreReset+0x64>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d901      	bls.n	8006f90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e006      	b.n	8006f9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d0f0      	beq.n	8006f7e <USB_CoreReset+0x36>

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	00030d40 	.word	0x00030d40

08006fb0 <__errno>:
 8006fb0:	4b01      	ldr	r3, [pc, #4]	; (8006fb8 <__errno+0x8>)
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000010 	.word	0x20000010

08006fbc <__libc_init_array>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4e0d      	ldr	r6, [pc, #52]	; (8006ff4 <__libc_init_array+0x38>)
 8006fc0:	4c0d      	ldr	r4, [pc, #52]	; (8006ff8 <__libc_init_array+0x3c>)
 8006fc2:	1ba4      	subs	r4, r4, r6
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	2500      	movs	r5, #0
 8006fc8:	42a5      	cmp	r5, r4
 8006fca:	d109      	bne.n	8006fe0 <__libc_init_array+0x24>
 8006fcc:	4e0b      	ldr	r6, [pc, #44]	; (8006ffc <__libc_init_array+0x40>)
 8006fce:	4c0c      	ldr	r4, [pc, #48]	; (8007000 <__libc_init_array+0x44>)
 8006fd0:	f000 fc26 	bl	8007820 <_init>
 8006fd4:	1ba4      	subs	r4, r4, r6
 8006fd6:	10a4      	asrs	r4, r4, #2
 8006fd8:	2500      	movs	r5, #0
 8006fda:	42a5      	cmp	r5, r4
 8006fdc:	d105      	bne.n	8006fea <__libc_init_array+0x2e>
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fe4:	4798      	blx	r3
 8006fe6:	3501      	adds	r5, #1
 8006fe8:	e7ee      	b.n	8006fc8 <__libc_init_array+0xc>
 8006fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fee:	4798      	blx	r3
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	e7f2      	b.n	8006fda <__libc_init_array+0x1e>
 8006ff4:	080078a8 	.word	0x080078a8
 8006ff8:	080078a8 	.word	0x080078a8
 8006ffc:	080078a8 	.word	0x080078a8
 8007000:	080078ac 	.word	0x080078ac

08007004 <memset>:
 8007004:	4402      	add	r2, r0
 8007006:	4603      	mov	r3, r0
 8007008:	4293      	cmp	r3, r2
 800700a:	d100      	bne.n	800700e <memset+0xa>
 800700c:	4770      	bx	lr
 800700e:	f803 1b01 	strb.w	r1, [r3], #1
 8007012:	e7f9      	b.n	8007008 <memset+0x4>

08007014 <siprintf>:
 8007014:	b40e      	push	{r1, r2, r3}
 8007016:	b500      	push	{lr}
 8007018:	b09c      	sub	sp, #112	; 0x70
 800701a:	ab1d      	add	r3, sp, #116	; 0x74
 800701c:	9002      	str	r0, [sp, #8]
 800701e:	9006      	str	r0, [sp, #24]
 8007020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007024:	4809      	ldr	r0, [pc, #36]	; (800704c <siprintf+0x38>)
 8007026:	9107      	str	r1, [sp, #28]
 8007028:	9104      	str	r1, [sp, #16]
 800702a:	4909      	ldr	r1, [pc, #36]	; (8007050 <siprintf+0x3c>)
 800702c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007030:	9105      	str	r1, [sp, #20]
 8007032:	6800      	ldr	r0, [r0, #0]
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	a902      	add	r1, sp, #8
 8007038:	f000 f866 	bl	8007108 <_svfiprintf_r>
 800703c:	9b02      	ldr	r3, [sp, #8]
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	b01c      	add	sp, #112	; 0x70
 8007044:	f85d eb04 	ldr.w	lr, [sp], #4
 8007048:	b003      	add	sp, #12
 800704a:	4770      	bx	lr
 800704c:	20000010 	.word	0x20000010
 8007050:	ffff0208 	.word	0xffff0208

08007054 <__ssputs_r>:
 8007054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	688e      	ldr	r6, [r1, #8]
 800705a:	429e      	cmp	r6, r3
 800705c:	4682      	mov	sl, r0
 800705e:	460c      	mov	r4, r1
 8007060:	4690      	mov	r8, r2
 8007062:	4699      	mov	r9, r3
 8007064:	d837      	bhi.n	80070d6 <__ssputs_r+0x82>
 8007066:	898a      	ldrh	r2, [r1, #12]
 8007068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800706c:	d031      	beq.n	80070d2 <__ssputs_r+0x7e>
 800706e:	6825      	ldr	r5, [r4, #0]
 8007070:	6909      	ldr	r1, [r1, #16]
 8007072:	1a6f      	subs	r7, r5, r1
 8007074:	6965      	ldr	r5, [r4, #20]
 8007076:	2302      	movs	r3, #2
 8007078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800707c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007080:	f109 0301 	add.w	r3, r9, #1
 8007084:	443b      	add	r3, r7
 8007086:	429d      	cmp	r5, r3
 8007088:	bf38      	it	cc
 800708a:	461d      	movcc	r5, r3
 800708c:	0553      	lsls	r3, r2, #21
 800708e:	d530      	bpl.n	80070f2 <__ssputs_r+0x9e>
 8007090:	4629      	mov	r1, r5
 8007092:	f000 fb2b 	bl	80076ec <_malloc_r>
 8007096:	4606      	mov	r6, r0
 8007098:	b950      	cbnz	r0, 80070b0 <__ssputs_r+0x5c>
 800709a:	230c      	movs	r3, #12
 800709c:	f8ca 3000 	str.w	r3, [sl]
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	463a      	mov	r2, r7
 80070b2:	6921      	ldr	r1, [r4, #16]
 80070b4:	f000 faa8 	bl	8007608 <memcpy>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	81a3      	strh	r3, [r4, #12]
 80070c4:	6126      	str	r6, [r4, #16]
 80070c6:	6165      	str	r5, [r4, #20]
 80070c8:	443e      	add	r6, r7
 80070ca:	1bed      	subs	r5, r5, r7
 80070cc:	6026      	str	r6, [r4, #0]
 80070ce:	60a5      	str	r5, [r4, #8]
 80070d0:	464e      	mov	r6, r9
 80070d2:	454e      	cmp	r6, r9
 80070d4:	d900      	bls.n	80070d8 <__ssputs_r+0x84>
 80070d6:	464e      	mov	r6, r9
 80070d8:	4632      	mov	r2, r6
 80070da:	4641      	mov	r1, r8
 80070dc:	6820      	ldr	r0, [r4, #0]
 80070de:	f000 fa9e 	bl	800761e <memmove>
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	1b9b      	subs	r3, r3, r6
 80070e6:	60a3      	str	r3, [r4, #8]
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	441e      	add	r6, r3
 80070ec:	6026      	str	r6, [r4, #0]
 80070ee:	2000      	movs	r0, #0
 80070f0:	e7dc      	b.n	80070ac <__ssputs_r+0x58>
 80070f2:	462a      	mov	r2, r5
 80070f4:	f000 fb54 	bl	80077a0 <_realloc_r>
 80070f8:	4606      	mov	r6, r0
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d1e2      	bne.n	80070c4 <__ssputs_r+0x70>
 80070fe:	6921      	ldr	r1, [r4, #16]
 8007100:	4650      	mov	r0, sl
 8007102:	f000 faa5 	bl	8007650 <_free_r>
 8007106:	e7c8      	b.n	800709a <__ssputs_r+0x46>

08007108 <_svfiprintf_r>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	461d      	mov	r5, r3
 800710e:	898b      	ldrh	r3, [r1, #12]
 8007110:	061f      	lsls	r7, r3, #24
 8007112:	b09d      	sub	sp, #116	; 0x74
 8007114:	4680      	mov	r8, r0
 8007116:	460c      	mov	r4, r1
 8007118:	4616      	mov	r6, r2
 800711a:	d50f      	bpl.n	800713c <_svfiprintf_r+0x34>
 800711c:	690b      	ldr	r3, [r1, #16]
 800711e:	b96b      	cbnz	r3, 800713c <_svfiprintf_r+0x34>
 8007120:	2140      	movs	r1, #64	; 0x40
 8007122:	f000 fae3 	bl	80076ec <_malloc_r>
 8007126:	6020      	str	r0, [r4, #0]
 8007128:	6120      	str	r0, [r4, #16]
 800712a:	b928      	cbnz	r0, 8007138 <_svfiprintf_r+0x30>
 800712c:	230c      	movs	r3, #12
 800712e:	f8c8 3000 	str.w	r3, [r8]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	e0c8      	b.n	80072ca <_svfiprintf_r+0x1c2>
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	6163      	str	r3, [r4, #20]
 800713c:	2300      	movs	r3, #0
 800713e:	9309      	str	r3, [sp, #36]	; 0x24
 8007140:	2320      	movs	r3, #32
 8007142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007146:	2330      	movs	r3, #48	; 0x30
 8007148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800714c:	9503      	str	r5, [sp, #12]
 800714e:	f04f 0b01 	mov.w	fp, #1
 8007152:	4637      	mov	r7, r6
 8007154:	463d      	mov	r5, r7
 8007156:	f815 3b01 	ldrb.w	r3, [r5], #1
 800715a:	b10b      	cbz	r3, 8007160 <_svfiprintf_r+0x58>
 800715c:	2b25      	cmp	r3, #37	; 0x25
 800715e:	d13e      	bne.n	80071de <_svfiprintf_r+0xd6>
 8007160:	ebb7 0a06 	subs.w	sl, r7, r6
 8007164:	d00b      	beq.n	800717e <_svfiprintf_r+0x76>
 8007166:	4653      	mov	r3, sl
 8007168:	4632      	mov	r2, r6
 800716a:	4621      	mov	r1, r4
 800716c:	4640      	mov	r0, r8
 800716e:	f7ff ff71 	bl	8007054 <__ssputs_r>
 8007172:	3001      	adds	r0, #1
 8007174:	f000 80a4 	beq.w	80072c0 <_svfiprintf_r+0x1b8>
 8007178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717a:	4453      	add	r3, sl
 800717c:	9309      	str	r3, [sp, #36]	; 0x24
 800717e:	783b      	ldrb	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 809d 	beq.w	80072c0 <_svfiprintf_r+0x1b8>
 8007186:	2300      	movs	r3, #0
 8007188:	f04f 32ff 	mov.w	r2, #4294967295
 800718c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007190:	9304      	str	r3, [sp, #16]
 8007192:	9307      	str	r3, [sp, #28]
 8007194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007198:	931a      	str	r3, [sp, #104]	; 0x68
 800719a:	462f      	mov	r7, r5
 800719c:	2205      	movs	r2, #5
 800719e:	f817 1b01 	ldrb.w	r1, [r7], #1
 80071a2:	4850      	ldr	r0, [pc, #320]	; (80072e4 <_svfiprintf_r+0x1dc>)
 80071a4:	f7f9 f854 	bl	8000250 <memchr>
 80071a8:	9b04      	ldr	r3, [sp, #16]
 80071aa:	b9d0      	cbnz	r0, 80071e2 <_svfiprintf_r+0xda>
 80071ac:	06d9      	lsls	r1, r3, #27
 80071ae:	bf44      	itt	mi
 80071b0:	2220      	movmi	r2, #32
 80071b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071b6:	071a      	lsls	r2, r3, #28
 80071b8:	bf44      	itt	mi
 80071ba:	222b      	movmi	r2, #43	; 0x2b
 80071bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071c0:	782a      	ldrb	r2, [r5, #0]
 80071c2:	2a2a      	cmp	r2, #42	; 0x2a
 80071c4:	d015      	beq.n	80071f2 <_svfiprintf_r+0xea>
 80071c6:	9a07      	ldr	r2, [sp, #28]
 80071c8:	462f      	mov	r7, r5
 80071ca:	2000      	movs	r0, #0
 80071cc:	250a      	movs	r5, #10
 80071ce:	4639      	mov	r1, r7
 80071d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071d4:	3b30      	subs	r3, #48	; 0x30
 80071d6:	2b09      	cmp	r3, #9
 80071d8:	d94d      	bls.n	8007276 <_svfiprintf_r+0x16e>
 80071da:	b1b8      	cbz	r0, 800720c <_svfiprintf_r+0x104>
 80071dc:	e00f      	b.n	80071fe <_svfiprintf_r+0xf6>
 80071de:	462f      	mov	r7, r5
 80071e0:	e7b8      	b.n	8007154 <_svfiprintf_r+0x4c>
 80071e2:	4a40      	ldr	r2, [pc, #256]	; (80072e4 <_svfiprintf_r+0x1dc>)
 80071e4:	1a80      	subs	r0, r0, r2
 80071e6:	fa0b f000 	lsl.w	r0, fp, r0
 80071ea:	4318      	orrs	r0, r3
 80071ec:	9004      	str	r0, [sp, #16]
 80071ee:	463d      	mov	r5, r7
 80071f0:	e7d3      	b.n	800719a <_svfiprintf_r+0x92>
 80071f2:	9a03      	ldr	r2, [sp, #12]
 80071f4:	1d11      	adds	r1, r2, #4
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	9103      	str	r1, [sp, #12]
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	db01      	blt.n	8007202 <_svfiprintf_r+0xfa>
 80071fe:	9207      	str	r2, [sp, #28]
 8007200:	e004      	b.n	800720c <_svfiprintf_r+0x104>
 8007202:	4252      	negs	r2, r2
 8007204:	f043 0302 	orr.w	r3, r3, #2
 8007208:	9207      	str	r2, [sp, #28]
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	783b      	ldrb	r3, [r7, #0]
 800720e:	2b2e      	cmp	r3, #46	; 0x2e
 8007210:	d10c      	bne.n	800722c <_svfiprintf_r+0x124>
 8007212:	787b      	ldrb	r3, [r7, #1]
 8007214:	2b2a      	cmp	r3, #42	; 0x2a
 8007216:	d133      	bne.n	8007280 <_svfiprintf_r+0x178>
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	1d1a      	adds	r2, r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	9203      	str	r2, [sp, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	bfb8      	it	lt
 8007224:	f04f 33ff 	movlt.w	r3, #4294967295
 8007228:	3702      	adds	r7, #2
 800722a:	9305      	str	r3, [sp, #20]
 800722c:	4d2e      	ldr	r5, [pc, #184]	; (80072e8 <_svfiprintf_r+0x1e0>)
 800722e:	7839      	ldrb	r1, [r7, #0]
 8007230:	2203      	movs	r2, #3
 8007232:	4628      	mov	r0, r5
 8007234:	f7f9 f80c 	bl	8000250 <memchr>
 8007238:	b138      	cbz	r0, 800724a <_svfiprintf_r+0x142>
 800723a:	2340      	movs	r3, #64	; 0x40
 800723c:	1b40      	subs	r0, r0, r5
 800723e:	fa03 f000 	lsl.w	r0, r3, r0
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	4303      	orrs	r3, r0
 8007246:	3701      	adds	r7, #1
 8007248:	9304      	str	r3, [sp, #16]
 800724a:	7839      	ldrb	r1, [r7, #0]
 800724c:	4827      	ldr	r0, [pc, #156]	; (80072ec <_svfiprintf_r+0x1e4>)
 800724e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007252:	2206      	movs	r2, #6
 8007254:	1c7e      	adds	r6, r7, #1
 8007256:	f7f8 fffb 	bl	8000250 <memchr>
 800725a:	2800      	cmp	r0, #0
 800725c:	d038      	beq.n	80072d0 <_svfiprintf_r+0x1c8>
 800725e:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <_svfiprintf_r+0x1e8>)
 8007260:	bb13      	cbnz	r3, 80072a8 <_svfiprintf_r+0x1a0>
 8007262:	9b03      	ldr	r3, [sp, #12]
 8007264:	3307      	adds	r3, #7
 8007266:	f023 0307 	bic.w	r3, r3, #7
 800726a:	3308      	adds	r3, #8
 800726c:	9303      	str	r3, [sp, #12]
 800726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007270:	444b      	add	r3, r9
 8007272:	9309      	str	r3, [sp, #36]	; 0x24
 8007274:	e76d      	b.n	8007152 <_svfiprintf_r+0x4a>
 8007276:	fb05 3202 	mla	r2, r5, r2, r3
 800727a:	2001      	movs	r0, #1
 800727c:	460f      	mov	r7, r1
 800727e:	e7a6      	b.n	80071ce <_svfiprintf_r+0xc6>
 8007280:	2300      	movs	r3, #0
 8007282:	3701      	adds	r7, #1
 8007284:	9305      	str	r3, [sp, #20]
 8007286:	4619      	mov	r1, r3
 8007288:	250a      	movs	r5, #10
 800728a:	4638      	mov	r0, r7
 800728c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007290:	3a30      	subs	r2, #48	; 0x30
 8007292:	2a09      	cmp	r2, #9
 8007294:	d903      	bls.n	800729e <_svfiprintf_r+0x196>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0c8      	beq.n	800722c <_svfiprintf_r+0x124>
 800729a:	9105      	str	r1, [sp, #20]
 800729c:	e7c6      	b.n	800722c <_svfiprintf_r+0x124>
 800729e:	fb05 2101 	mla	r1, r5, r1, r2
 80072a2:	2301      	movs	r3, #1
 80072a4:	4607      	mov	r7, r0
 80072a6:	e7f0      	b.n	800728a <_svfiprintf_r+0x182>
 80072a8:	ab03      	add	r3, sp, #12
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	4622      	mov	r2, r4
 80072ae:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <_svfiprintf_r+0x1ec>)
 80072b0:	a904      	add	r1, sp, #16
 80072b2:	4640      	mov	r0, r8
 80072b4:	f3af 8000 	nop.w
 80072b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072bc:	4681      	mov	r9, r0
 80072be:	d1d6      	bne.n	800726e <_svfiprintf_r+0x166>
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	065b      	lsls	r3, r3, #25
 80072c4:	f53f af35 	bmi.w	8007132 <_svfiprintf_r+0x2a>
 80072c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ca:	b01d      	add	sp, #116	; 0x74
 80072cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d0:	ab03      	add	r3, sp, #12
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4622      	mov	r2, r4
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <_svfiprintf_r+0x1ec>)
 80072d8:	a904      	add	r1, sp, #16
 80072da:	4640      	mov	r0, r8
 80072dc:	f000 f882 	bl	80073e4 <_printf_i>
 80072e0:	e7ea      	b.n	80072b8 <_svfiprintf_r+0x1b0>
 80072e2:	bf00      	nop
 80072e4:	0800786c 	.word	0x0800786c
 80072e8:	08007872 	.word	0x08007872
 80072ec:	08007876 	.word	0x08007876
 80072f0:	00000000 	.word	0x00000000
 80072f4:	08007055 	.word	0x08007055

080072f8 <_printf_common>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	4691      	mov	r9, r2
 80072fe:	461f      	mov	r7, r3
 8007300:	688a      	ldr	r2, [r1, #8]
 8007302:	690b      	ldr	r3, [r1, #16]
 8007304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007308:	4293      	cmp	r3, r2
 800730a:	bfb8      	it	lt
 800730c:	4613      	movlt	r3, r2
 800730e:	f8c9 3000 	str.w	r3, [r9]
 8007312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007316:	4606      	mov	r6, r0
 8007318:	460c      	mov	r4, r1
 800731a:	b112      	cbz	r2, 8007322 <_printf_common+0x2a>
 800731c:	3301      	adds	r3, #1
 800731e:	f8c9 3000 	str.w	r3, [r9]
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	0699      	lsls	r1, r3, #26
 8007326:	bf42      	ittt	mi
 8007328:	f8d9 3000 	ldrmi.w	r3, [r9]
 800732c:	3302      	addmi	r3, #2
 800732e:	f8c9 3000 	strmi.w	r3, [r9]
 8007332:	6825      	ldr	r5, [r4, #0]
 8007334:	f015 0506 	ands.w	r5, r5, #6
 8007338:	d107      	bne.n	800734a <_printf_common+0x52>
 800733a:	f104 0a19 	add.w	sl, r4, #25
 800733e:	68e3      	ldr	r3, [r4, #12]
 8007340:	f8d9 2000 	ldr.w	r2, [r9]
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	42ab      	cmp	r3, r5
 8007348:	dc28      	bgt.n	800739c <_printf_common+0xa4>
 800734a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800734e:	6822      	ldr	r2, [r4, #0]
 8007350:	3300      	adds	r3, #0
 8007352:	bf18      	it	ne
 8007354:	2301      	movne	r3, #1
 8007356:	0692      	lsls	r2, r2, #26
 8007358:	d42d      	bmi.n	80073b6 <_printf_common+0xbe>
 800735a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800735e:	4639      	mov	r1, r7
 8007360:	4630      	mov	r0, r6
 8007362:	47c0      	blx	r8
 8007364:	3001      	adds	r0, #1
 8007366:	d020      	beq.n	80073aa <_printf_common+0xb2>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	68e5      	ldr	r5, [r4, #12]
 800736c:	f8d9 2000 	ldr.w	r2, [r9]
 8007370:	f003 0306 	and.w	r3, r3, #6
 8007374:	2b04      	cmp	r3, #4
 8007376:	bf08      	it	eq
 8007378:	1aad      	subeq	r5, r5, r2
 800737a:	68a3      	ldr	r3, [r4, #8]
 800737c:	6922      	ldr	r2, [r4, #16]
 800737e:	bf0c      	ite	eq
 8007380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007384:	2500      	movne	r5, #0
 8007386:	4293      	cmp	r3, r2
 8007388:	bfc4      	itt	gt
 800738a:	1a9b      	subgt	r3, r3, r2
 800738c:	18ed      	addgt	r5, r5, r3
 800738e:	f04f 0900 	mov.w	r9, #0
 8007392:	341a      	adds	r4, #26
 8007394:	454d      	cmp	r5, r9
 8007396:	d11a      	bne.n	80073ce <_printf_common+0xd6>
 8007398:	2000      	movs	r0, #0
 800739a:	e008      	b.n	80073ae <_printf_common+0xb6>
 800739c:	2301      	movs	r3, #1
 800739e:	4652      	mov	r2, sl
 80073a0:	4639      	mov	r1, r7
 80073a2:	4630      	mov	r0, r6
 80073a4:	47c0      	blx	r8
 80073a6:	3001      	adds	r0, #1
 80073a8:	d103      	bne.n	80073b2 <_printf_common+0xba>
 80073aa:	f04f 30ff 	mov.w	r0, #4294967295
 80073ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b2:	3501      	adds	r5, #1
 80073b4:	e7c3      	b.n	800733e <_printf_common+0x46>
 80073b6:	18e1      	adds	r1, r4, r3
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	2030      	movs	r0, #48	; 0x30
 80073bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073c0:	4422      	add	r2, r4
 80073c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073ca:	3302      	adds	r3, #2
 80073cc:	e7c5      	b.n	800735a <_printf_common+0x62>
 80073ce:	2301      	movs	r3, #1
 80073d0:	4622      	mov	r2, r4
 80073d2:	4639      	mov	r1, r7
 80073d4:	4630      	mov	r0, r6
 80073d6:	47c0      	blx	r8
 80073d8:	3001      	adds	r0, #1
 80073da:	d0e6      	beq.n	80073aa <_printf_common+0xb2>
 80073dc:	f109 0901 	add.w	r9, r9, #1
 80073e0:	e7d8      	b.n	8007394 <_printf_common+0x9c>
	...

080073e4 <_printf_i>:
 80073e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073ec:	460c      	mov	r4, r1
 80073ee:	7e09      	ldrb	r1, [r1, #24]
 80073f0:	b085      	sub	sp, #20
 80073f2:	296e      	cmp	r1, #110	; 0x6e
 80073f4:	4617      	mov	r7, r2
 80073f6:	4606      	mov	r6, r0
 80073f8:	4698      	mov	r8, r3
 80073fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073fc:	f000 80b3 	beq.w	8007566 <_printf_i+0x182>
 8007400:	d822      	bhi.n	8007448 <_printf_i+0x64>
 8007402:	2963      	cmp	r1, #99	; 0x63
 8007404:	d036      	beq.n	8007474 <_printf_i+0x90>
 8007406:	d80a      	bhi.n	800741e <_printf_i+0x3a>
 8007408:	2900      	cmp	r1, #0
 800740a:	f000 80b9 	beq.w	8007580 <_printf_i+0x19c>
 800740e:	2958      	cmp	r1, #88	; 0x58
 8007410:	f000 8083 	beq.w	800751a <_printf_i+0x136>
 8007414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007418:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800741c:	e032      	b.n	8007484 <_printf_i+0xa0>
 800741e:	2964      	cmp	r1, #100	; 0x64
 8007420:	d001      	beq.n	8007426 <_printf_i+0x42>
 8007422:	2969      	cmp	r1, #105	; 0x69
 8007424:	d1f6      	bne.n	8007414 <_printf_i+0x30>
 8007426:	6820      	ldr	r0, [r4, #0]
 8007428:	6813      	ldr	r3, [r2, #0]
 800742a:	0605      	lsls	r5, r0, #24
 800742c:	f103 0104 	add.w	r1, r3, #4
 8007430:	d52a      	bpl.n	8007488 <_printf_i+0xa4>
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6011      	str	r1, [r2, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	da03      	bge.n	8007442 <_printf_i+0x5e>
 800743a:	222d      	movs	r2, #45	; 0x2d
 800743c:	425b      	negs	r3, r3
 800743e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007442:	486f      	ldr	r0, [pc, #444]	; (8007600 <_printf_i+0x21c>)
 8007444:	220a      	movs	r2, #10
 8007446:	e039      	b.n	80074bc <_printf_i+0xd8>
 8007448:	2973      	cmp	r1, #115	; 0x73
 800744a:	f000 809d 	beq.w	8007588 <_printf_i+0x1a4>
 800744e:	d808      	bhi.n	8007462 <_printf_i+0x7e>
 8007450:	296f      	cmp	r1, #111	; 0x6f
 8007452:	d020      	beq.n	8007496 <_printf_i+0xb2>
 8007454:	2970      	cmp	r1, #112	; 0x70
 8007456:	d1dd      	bne.n	8007414 <_printf_i+0x30>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	f043 0320 	orr.w	r3, r3, #32
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	e003      	b.n	800746a <_printf_i+0x86>
 8007462:	2975      	cmp	r1, #117	; 0x75
 8007464:	d017      	beq.n	8007496 <_printf_i+0xb2>
 8007466:	2978      	cmp	r1, #120	; 0x78
 8007468:	d1d4      	bne.n	8007414 <_printf_i+0x30>
 800746a:	2378      	movs	r3, #120	; 0x78
 800746c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007470:	4864      	ldr	r0, [pc, #400]	; (8007604 <_printf_i+0x220>)
 8007472:	e055      	b.n	8007520 <_printf_i+0x13c>
 8007474:	6813      	ldr	r3, [r2, #0]
 8007476:	1d19      	adds	r1, r3, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6011      	str	r1, [r2, #0]
 800747c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007484:	2301      	movs	r3, #1
 8007486:	e08c      	b.n	80075a2 <_printf_i+0x1be>
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6011      	str	r1, [r2, #0]
 800748c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007490:	bf18      	it	ne
 8007492:	b21b      	sxthne	r3, r3
 8007494:	e7cf      	b.n	8007436 <_printf_i+0x52>
 8007496:	6813      	ldr	r3, [r2, #0]
 8007498:	6825      	ldr	r5, [r4, #0]
 800749a:	1d18      	adds	r0, r3, #4
 800749c:	6010      	str	r0, [r2, #0]
 800749e:	0628      	lsls	r0, r5, #24
 80074a0:	d501      	bpl.n	80074a6 <_printf_i+0xc2>
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	e002      	b.n	80074ac <_printf_i+0xc8>
 80074a6:	0668      	lsls	r0, r5, #25
 80074a8:	d5fb      	bpl.n	80074a2 <_printf_i+0xbe>
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	4854      	ldr	r0, [pc, #336]	; (8007600 <_printf_i+0x21c>)
 80074ae:	296f      	cmp	r1, #111	; 0x6f
 80074b0:	bf14      	ite	ne
 80074b2:	220a      	movne	r2, #10
 80074b4:	2208      	moveq	r2, #8
 80074b6:	2100      	movs	r1, #0
 80074b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074bc:	6865      	ldr	r5, [r4, #4]
 80074be:	60a5      	str	r5, [r4, #8]
 80074c0:	2d00      	cmp	r5, #0
 80074c2:	f2c0 8095 	blt.w	80075f0 <_printf_i+0x20c>
 80074c6:	6821      	ldr	r1, [r4, #0]
 80074c8:	f021 0104 	bic.w	r1, r1, #4
 80074cc:	6021      	str	r1, [r4, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d13d      	bne.n	800754e <_printf_i+0x16a>
 80074d2:	2d00      	cmp	r5, #0
 80074d4:	f040 808e 	bne.w	80075f4 <_printf_i+0x210>
 80074d8:	4665      	mov	r5, ip
 80074da:	2a08      	cmp	r2, #8
 80074dc:	d10b      	bne.n	80074f6 <_printf_i+0x112>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	07db      	lsls	r3, r3, #31
 80074e2:	d508      	bpl.n	80074f6 <_printf_i+0x112>
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	6862      	ldr	r2, [r4, #4]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	bfde      	ittt	le
 80074ec:	2330      	movle	r3, #48	; 0x30
 80074ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074f6:	ebac 0305 	sub.w	r3, ip, r5
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	f8cd 8000 	str.w	r8, [sp]
 8007500:	463b      	mov	r3, r7
 8007502:	aa03      	add	r2, sp, #12
 8007504:	4621      	mov	r1, r4
 8007506:	4630      	mov	r0, r6
 8007508:	f7ff fef6 	bl	80072f8 <_printf_common>
 800750c:	3001      	adds	r0, #1
 800750e:	d14d      	bne.n	80075ac <_printf_i+0x1c8>
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	b005      	add	sp, #20
 8007516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800751a:	4839      	ldr	r0, [pc, #228]	; (8007600 <_printf_i+0x21c>)
 800751c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007520:	6813      	ldr	r3, [r2, #0]
 8007522:	6821      	ldr	r1, [r4, #0]
 8007524:	1d1d      	adds	r5, r3, #4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6015      	str	r5, [r2, #0]
 800752a:	060a      	lsls	r2, r1, #24
 800752c:	d50b      	bpl.n	8007546 <_printf_i+0x162>
 800752e:	07ca      	lsls	r2, r1, #31
 8007530:	bf44      	itt	mi
 8007532:	f041 0120 	orrmi.w	r1, r1, #32
 8007536:	6021      	strmi	r1, [r4, #0]
 8007538:	b91b      	cbnz	r3, 8007542 <_printf_i+0x15e>
 800753a:	6822      	ldr	r2, [r4, #0]
 800753c:	f022 0220 	bic.w	r2, r2, #32
 8007540:	6022      	str	r2, [r4, #0]
 8007542:	2210      	movs	r2, #16
 8007544:	e7b7      	b.n	80074b6 <_printf_i+0xd2>
 8007546:	064d      	lsls	r5, r1, #25
 8007548:	bf48      	it	mi
 800754a:	b29b      	uxthmi	r3, r3
 800754c:	e7ef      	b.n	800752e <_printf_i+0x14a>
 800754e:	4665      	mov	r5, ip
 8007550:	fbb3 f1f2 	udiv	r1, r3, r2
 8007554:	fb02 3311 	mls	r3, r2, r1, r3
 8007558:	5cc3      	ldrb	r3, [r0, r3]
 800755a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800755e:	460b      	mov	r3, r1
 8007560:	2900      	cmp	r1, #0
 8007562:	d1f5      	bne.n	8007550 <_printf_i+0x16c>
 8007564:	e7b9      	b.n	80074da <_printf_i+0xf6>
 8007566:	6813      	ldr	r3, [r2, #0]
 8007568:	6825      	ldr	r5, [r4, #0]
 800756a:	6961      	ldr	r1, [r4, #20]
 800756c:	1d18      	adds	r0, r3, #4
 800756e:	6010      	str	r0, [r2, #0]
 8007570:	0628      	lsls	r0, r5, #24
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	d501      	bpl.n	800757a <_printf_i+0x196>
 8007576:	6019      	str	r1, [r3, #0]
 8007578:	e002      	b.n	8007580 <_printf_i+0x19c>
 800757a:	066a      	lsls	r2, r5, #25
 800757c:	d5fb      	bpl.n	8007576 <_printf_i+0x192>
 800757e:	8019      	strh	r1, [r3, #0]
 8007580:	2300      	movs	r3, #0
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	4665      	mov	r5, ip
 8007586:	e7b9      	b.n	80074fc <_printf_i+0x118>
 8007588:	6813      	ldr	r3, [r2, #0]
 800758a:	1d19      	adds	r1, r3, #4
 800758c:	6011      	str	r1, [r2, #0]
 800758e:	681d      	ldr	r5, [r3, #0]
 8007590:	6862      	ldr	r2, [r4, #4]
 8007592:	2100      	movs	r1, #0
 8007594:	4628      	mov	r0, r5
 8007596:	f7f8 fe5b 	bl	8000250 <memchr>
 800759a:	b108      	cbz	r0, 80075a0 <_printf_i+0x1bc>
 800759c:	1b40      	subs	r0, r0, r5
 800759e:	6060      	str	r0, [r4, #4]
 80075a0:	6863      	ldr	r3, [r4, #4]
 80075a2:	6123      	str	r3, [r4, #16]
 80075a4:	2300      	movs	r3, #0
 80075a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075aa:	e7a7      	b.n	80074fc <_printf_i+0x118>
 80075ac:	6923      	ldr	r3, [r4, #16]
 80075ae:	462a      	mov	r2, r5
 80075b0:	4639      	mov	r1, r7
 80075b2:	4630      	mov	r0, r6
 80075b4:	47c0      	blx	r8
 80075b6:	3001      	adds	r0, #1
 80075b8:	d0aa      	beq.n	8007510 <_printf_i+0x12c>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	079b      	lsls	r3, r3, #30
 80075be:	d413      	bmi.n	80075e8 <_printf_i+0x204>
 80075c0:	68e0      	ldr	r0, [r4, #12]
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	4298      	cmp	r0, r3
 80075c6:	bfb8      	it	lt
 80075c8:	4618      	movlt	r0, r3
 80075ca:	e7a3      	b.n	8007514 <_printf_i+0x130>
 80075cc:	2301      	movs	r3, #1
 80075ce:	464a      	mov	r2, r9
 80075d0:	4639      	mov	r1, r7
 80075d2:	4630      	mov	r0, r6
 80075d4:	47c0      	blx	r8
 80075d6:	3001      	adds	r0, #1
 80075d8:	d09a      	beq.n	8007510 <_printf_i+0x12c>
 80075da:	3501      	adds	r5, #1
 80075dc:	68e3      	ldr	r3, [r4, #12]
 80075de:	9a03      	ldr	r2, [sp, #12]
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	42ab      	cmp	r3, r5
 80075e4:	dcf2      	bgt.n	80075cc <_printf_i+0x1e8>
 80075e6:	e7eb      	b.n	80075c0 <_printf_i+0x1dc>
 80075e8:	2500      	movs	r5, #0
 80075ea:	f104 0919 	add.w	r9, r4, #25
 80075ee:	e7f5      	b.n	80075dc <_printf_i+0x1f8>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1ac      	bne.n	800754e <_printf_i+0x16a>
 80075f4:	7803      	ldrb	r3, [r0, #0]
 80075f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075fe:	e76c      	b.n	80074da <_printf_i+0xf6>
 8007600:	0800787d 	.word	0x0800787d
 8007604:	0800788e 	.word	0x0800788e

08007608 <memcpy>:
 8007608:	b510      	push	{r4, lr}
 800760a:	1e43      	subs	r3, r0, #1
 800760c:	440a      	add	r2, r1
 800760e:	4291      	cmp	r1, r2
 8007610:	d100      	bne.n	8007614 <memcpy+0xc>
 8007612:	bd10      	pop	{r4, pc}
 8007614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800761c:	e7f7      	b.n	800760e <memcpy+0x6>

0800761e <memmove>:
 800761e:	4288      	cmp	r0, r1
 8007620:	b510      	push	{r4, lr}
 8007622:	eb01 0302 	add.w	r3, r1, r2
 8007626:	d807      	bhi.n	8007638 <memmove+0x1a>
 8007628:	1e42      	subs	r2, r0, #1
 800762a:	4299      	cmp	r1, r3
 800762c:	d00a      	beq.n	8007644 <memmove+0x26>
 800762e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007632:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007636:	e7f8      	b.n	800762a <memmove+0xc>
 8007638:	4283      	cmp	r3, r0
 800763a:	d9f5      	bls.n	8007628 <memmove+0xa>
 800763c:	1881      	adds	r1, r0, r2
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	42d3      	cmn	r3, r2
 8007642:	d100      	bne.n	8007646 <memmove+0x28>
 8007644:	bd10      	pop	{r4, pc}
 8007646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800764a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800764e:	e7f7      	b.n	8007640 <memmove+0x22>

08007650 <_free_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4605      	mov	r5, r0
 8007654:	2900      	cmp	r1, #0
 8007656:	d045      	beq.n	80076e4 <_free_r+0x94>
 8007658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765c:	1f0c      	subs	r4, r1, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfb8      	it	lt
 8007662:	18e4      	addlt	r4, r4, r3
 8007664:	f000 f8d2 	bl	800780c <__malloc_lock>
 8007668:	4a1f      	ldr	r2, [pc, #124]	; (80076e8 <_free_r+0x98>)
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	4610      	mov	r0, r2
 800766e:	b933      	cbnz	r3, 800767e <_free_r+0x2e>
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	6014      	str	r4, [r2, #0]
 8007674:	4628      	mov	r0, r5
 8007676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800767a:	f000 b8c8 	b.w	800780e <__malloc_unlock>
 800767e:	42a3      	cmp	r3, r4
 8007680:	d90c      	bls.n	800769c <_free_r+0x4c>
 8007682:	6821      	ldr	r1, [r4, #0]
 8007684:	1862      	adds	r2, r4, r1
 8007686:	4293      	cmp	r3, r2
 8007688:	bf04      	itt	eq
 800768a:	681a      	ldreq	r2, [r3, #0]
 800768c:	685b      	ldreq	r3, [r3, #4]
 800768e:	6063      	str	r3, [r4, #4]
 8007690:	bf04      	itt	eq
 8007692:	1852      	addeq	r2, r2, r1
 8007694:	6022      	streq	r2, [r4, #0]
 8007696:	6004      	str	r4, [r0, #0]
 8007698:	e7ec      	b.n	8007674 <_free_r+0x24>
 800769a:	4613      	mov	r3, r2
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	b10a      	cbz	r2, 80076a4 <_free_r+0x54>
 80076a0:	42a2      	cmp	r2, r4
 80076a2:	d9fa      	bls.n	800769a <_free_r+0x4a>
 80076a4:	6819      	ldr	r1, [r3, #0]
 80076a6:	1858      	adds	r0, r3, r1
 80076a8:	42a0      	cmp	r0, r4
 80076aa:	d10b      	bne.n	80076c4 <_free_r+0x74>
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	4401      	add	r1, r0
 80076b0:	1858      	adds	r0, r3, r1
 80076b2:	4282      	cmp	r2, r0
 80076b4:	6019      	str	r1, [r3, #0]
 80076b6:	d1dd      	bne.n	8007674 <_free_r+0x24>
 80076b8:	6810      	ldr	r0, [r2, #0]
 80076ba:	6852      	ldr	r2, [r2, #4]
 80076bc:	605a      	str	r2, [r3, #4]
 80076be:	4401      	add	r1, r0
 80076c0:	6019      	str	r1, [r3, #0]
 80076c2:	e7d7      	b.n	8007674 <_free_r+0x24>
 80076c4:	d902      	bls.n	80076cc <_free_r+0x7c>
 80076c6:	230c      	movs	r3, #12
 80076c8:	602b      	str	r3, [r5, #0]
 80076ca:	e7d3      	b.n	8007674 <_free_r+0x24>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	1821      	adds	r1, r4, r0
 80076d0:	428a      	cmp	r2, r1
 80076d2:	bf04      	itt	eq
 80076d4:	6811      	ldreq	r1, [r2, #0]
 80076d6:	6852      	ldreq	r2, [r2, #4]
 80076d8:	6062      	str	r2, [r4, #4]
 80076da:	bf04      	itt	eq
 80076dc:	1809      	addeq	r1, r1, r0
 80076de:	6021      	streq	r1, [r4, #0]
 80076e0:	605c      	str	r4, [r3, #4]
 80076e2:	e7c7      	b.n	8007674 <_free_r+0x24>
 80076e4:	bd38      	pop	{r3, r4, r5, pc}
 80076e6:	bf00      	nop
 80076e8:	200000ac 	.word	0x200000ac

080076ec <_malloc_r>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	1ccd      	adds	r5, r1, #3
 80076f0:	f025 0503 	bic.w	r5, r5, #3
 80076f4:	3508      	adds	r5, #8
 80076f6:	2d0c      	cmp	r5, #12
 80076f8:	bf38      	it	cc
 80076fa:	250c      	movcc	r5, #12
 80076fc:	2d00      	cmp	r5, #0
 80076fe:	4606      	mov	r6, r0
 8007700:	db01      	blt.n	8007706 <_malloc_r+0x1a>
 8007702:	42a9      	cmp	r1, r5
 8007704:	d903      	bls.n	800770e <_malloc_r+0x22>
 8007706:	230c      	movs	r3, #12
 8007708:	6033      	str	r3, [r6, #0]
 800770a:	2000      	movs	r0, #0
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	f000 f87d 	bl	800780c <__malloc_lock>
 8007712:	4a21      	ldr	r2, [pc, #132]	; (8007798 <_malloc_r+0xac>)
 8007714:	6814      	ldr	r4, [r2, #0]
 8007716:	4621      	mov	r1, r4
 8007718:	b991      	cbnz	r1, 8007740 <_malloc_r+0x54>
 800771a:	4c20      	ldr	r4, [pc, #128]	; (800779c <_malloc_r+0xb0>)
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	b91b      	cbnz	r3, 8007728 <_malloc_r+0x3c>
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f863 	bl	80077ec <_sbrk_r>
 8007726:	6020      	str	r0, [r4, #0]
 8007728:	4629      	mov	r1, r5
 800772a:	4630      	mov	r0, r6
 800772c:	f000 f85e 	bl	80077ec <_sbrk_r>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d124      	bne.n	800777e <_malloc_r+0x92>
 8007734:	230c      	movs	r3, #12
 8007736:	6033      	str	r3, [r6, #0]
 8007738:	4630      	mov	r0, r6
 800773a:	f000 f868 	bl	800780e <__malloc_unlock>
 800773e:	e7e4      	b.n	800770a <_malloc_r+0x1e>
 8007740:	680b      	ldr	r3, [r1, #0]
 8007742:	1b5b      	subs	r3, r3, r5
 8007744:	d418      	bmi.n	8007778 <_malloc_r+0x8c>
 8007746:	2b0b      	cmp	r3, #11
 8007748:	d90f      	bls.n	800776a <_malloc_r+0x7e>
 800774a:	600b      	str	r3, [r1, #0]
 800774c:	50cd      	str	r5, [r1, r3]
 800774e:	18cc      	adds	r4, r1, r3
 8007750:	4630      	mov	r0, r6
 8007752:	f000 f85c 	bl	800780e <__malloc_unlock>
 8007756:	f104 000b 	add.w	r0, r4, #11
 800775a:	1d23      	adds	r3, r4, #4
 800775c:	f020 0007 	bic.w	r0, r0, #7
 8007760:	1ac3      	subs	r3, r0, r3
 8007762:	d0d3      	beq.n	800770c <_malloc_r+0x20>
 8007764:	425a      	negs	r2, r3
 8007766:	50e2      	str	r2, [r4, r3]
 8007768:	e7d0      	b.n	800770c <_malloc_r+0x20>
 800776a:	428c      	cmp	r4, r1
 800776c:	684b      	ldr	r3, [r1, #4]
 800776e:	bf16      	itet	ne
 8007770:	6063      	strne	r3, [r4, #4]
 8007772:	6013      	streq	r3, [r2, #0]
 8007774:	460c      	movne	r4, r1
 8007776:	e7eb      	b.n	8007750 <_malloc_r+0x64>
 8007778:	460c      	mov	r4, r1
 800777a:	6849      	ldr	r1, [r1, #4]
 800777c:	e7cc      	b.n	8007718 <_malloc_r+0x2c>
 800777e:	1cc4      	adds	r4, r0, #3
 8007780:	f024 0403 	bic.w	r4, r4, #3
 8007784:	42a0      	cmp	r0, r4
 8007786:	d005      	beq.n	8007794 <_malloc_r+0xa8>
 8007788:	1a21      	subs	r1, r4, r0
 800778a:	4630      	mov	r0, r6
 800778c:	f000 f82e 	bl	80077ec <_sbrk_r>
 8007790:	3001      	adds	r0, #1
 8007792:	d0cf      	beq.n	8007734 <_malloc_r+0x48>
 8007794:	6025      	str	r5, [r4, #0]
 8007796:	e7db      	b.n	8007750 <_malloc_r+0x64>
 8007798:	200000ac 	.word	0x200000ac
 800779c:	200000b0 	.word	0x200000b0

080077a0 <_realloc_r>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	4607      	mov	r7, r0
 80077a4:	4614      	mov	r4, r2
 80077a6:	460e      	mov	r6, r1
 80077a8:	b921      	cbnz	r1, 80077b4 <_realloc_r+0x14>
 80077aa:	4611      	mov	r1, r2
 80077ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077b0:	f7ff bf9c 	b.w	80076ec <_malloc_r>
 80077b4:	b922      	cbnz	r2, 80077c0 <_realloc_r+0x20>
 80077b6:	f7ff ff4b 	bl	8007650 <_free_r>
 80077ba:	4625      	mov	r5, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c0:	f000 f826 	bl	8007810 <_malloc_usable_size_r>
 80077c4:	42a0      	cmp	r0, r4
 80077c6:	d20f      	bcs.n	80077e8 <_realloc_r+0x48>
 80077c8:	4621      	mov	r1, r4
 80077ca:	4638      	mov	r0, r7
 80077cc:	f7ff ff8e 	bl	80076ec <_malloc_r>
 80077d0:	4605      	mov	r5, r0
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d0f2      	beq.n	80077bc <_realloc_r+0x1c>
 80077d6:	4631      	mov	r1, r6
 80077d8:	4622      	mov	r2, r4
 80077da:	f7ff ff15 	bl	8007608 <memcpy>
 80077de:	4631      	mov	r1, r6
 80077e0:	4638      	mov	r0, r7
 80077e2:	f7ff ff35 	bl	8007650 <_free_r>
 80077e6:	e7e9      	b.n	80077bc <_realloc_r+0x1c>
 80077e8:	4635      	mov	r5, r6
 80077ea:	e7e7      	b.n	80077bc <_realloc_r+0x1c>

080077ec <_sbrk_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4c06      	ldr	r4, [pc, #24]	; (8007808 <_sbrk_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4605      	mov	r5, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	f7f9 ff10 	bl	800161c <_sbrk>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_sbrk_r+0x1a>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	b103      	cbz	r3, 8007806 <_sbrk_r+0x1a>
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	2002b7d0 	.word	0x2002b7d0

0800780c <__malloc_lock>:
 800780c:	4770      	bx	lr

0800780e <__malloc_unlock>:
 800780e:	4770      	bx	lr

08007810 <_malloc_usable_size_r>:
 8007810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007814:	1f18      	subs	r0, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfbc      	itt	lt
 800781a:	580b      	ldrlt	r3, [r1, r0]
 800781c:	18c0      	addlt	r0, r0, r3
 800781e:	4770      	bx	lr

08007820 <_init>:
 8007820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007822:	bf00      	nop
 8007824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007826:	bc08      	pop	{r3}
 8007828:	469e      	mov	lr, r3
 800782a:	4770      	bx	lr

0800782c <_fini>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr
=======
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3301      	adds	r3, #1
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4a09      	ldr	r2, [pc, #36]	; (800872c <USB_CoreReset+0x64>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d901      	bls.n	8008710 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e006      	b.n	800871e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b01      	cmp	r3, #1
 800871a:	d0f0      	beq.n	80086fe <USB_CoreReset+0x36>

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	00030d40 	.word	0x00030d40

08008730 <__errno>:
 8008730:	4b01      	ldr	r3, [pc, #4]	; (8008738 <__errno+0x8>)
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000010 	.word	0x20000010

0800873c <__libc_init_array>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	4e0d      	ldr	r6, [pc, #52]	; (8008774 <__libc_init_array+0x38>)
 8008740:	4c0d      	ldr	r4, [pc, #52]	; (8008778 <__libc_init_array+0x3c>)
 8008742:	1ba4      	subs	r4, r4, r6
 8008744:	10a4      	asrs	r4, r4, #2
 8008746:	2500      	movs	r5, #0
 8008748:	42a5      	cmp	r5, r4
 800874a:	d109      	bne.n	8008760 <__libc_init_array+0x24>
 800874c:	4e0b      	ldr	r6, [pc, #44]	; (800877c <__libc_init_array+0x40>)
 800874e:	4c0c      	ldr	r4, [pc, #48]	; (8008780 <__libc_init_array+0x44>)
 8008750:	f000 fc26 	bl	8008fa0 <_init>
 8008754:	1ba4      	subs	r4, r4, r6
 8008756:	10a4      	asrs	r4, r4, #2
 8008758:	2500      	movs	r5, #0
 800875a:	42a5      	cmp	r5, r4
 800875c:	d105      	bne.n	800876a <__libc_init_array+0x2e>
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008764:	4798      	blx	r3
 8008766:	3501      	adds	r5, #1
 8008768:	e7ee      	b.n	8008748 <__libc_init_array+0xc>
 800876a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800876e:	4798      	blx	r3
 8008770:	3501      	adds	r5, #1
 8008772:	e7f2      	b.n	800875a <__libc_init_array+0x1e>
 8008774:	0800903c 	.word	0x0800903c
 8008778:	0800903c 	.word	0x0800903c
 800877c:	0800903c 	.word	0x0800903c
 8008780:	08009040 	.word	0x08009040

08008784 <memset>:
 8008784:	4402      	add	r2, r0
 8008786:	4603      	mov	r3, r0
 8008788:	4293      	cmp	r3, r2
 800878a:	d100      	bne.n	800878e <memset+0xa>
 800878c:	4770      	bx	lr
 800878e:	f803 1b01 	strb.w	r1, [r3], #1
 8008792:	e7f9      	b.n	8008788 <memset+0x4>

08008794 <siprintf>:
 8008794:	b40e      	push	{r1, r2, r3}
 8008796:	b500      	push	{lr}
 8008798:	b09c      	sub	sp, #112	; 0x70
 800879a:	ab1d      	add	r3, sp, #116	; 0x74
 800879c:	9002      	str	r0, [sp, #8]
 800879e:	9006      	str	r0, [sp, #24]
 80087a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087a4:	4809      	ldr	r0, [pc, #36]	; (80087cc <siprintf+0x38>)
 80087a6:	9107      	str	r1, [sp, #28]
 80087a8:	9104      	str	r1, [sp, #16]
 80087aa:	4909      	ldr	r1, [pc, #36]	; (80087d0 <siprintf+0x3c>)
 80087ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b0:	9105      	str	r1, [sp, #20]
 80087b2:	6800      	ldr	r0, [r0, #0]
 80087b4:	9301      	str	r3, [sp, #4]
 80087b6:	a902      	add	r1, sp, #8
 80087b8:	f000 f866 	bl	8008888 <_svfiprintf_r>
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	2200      	movs	r2, #0
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	b01c      	add	sp, #112	; 0x70
 80087c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c8:	b003      	add	sp, #12
 80087ca:	4770      	bx	lr
 80087cc:	20000010 	.word	0x20000010
 80087d0:	ffff0208 	.word	0xffff0208

080087d4 <__ssputs_r>:
 80087d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d8:	688e      	ldr	r6, [r1, #8]
 80087da:	429e      	cmp	r6, r3
 80087dc:	4682      	mov	sl, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	4690      	mov	r8, r2
 80087e2:	4699      	mov	r9, r3
 80087e4:	d837      	bhi.n	8008856 <__ssputs_r+0x82>
 80087e6:	898a      	ldrh	r2, [r1, #12]
 80087e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087ec:	d031      	beq.n	8008852 <__ssputs_r+0x7e>
 80087ee:	6825      	ldr	r5, [r4, #0]
 80087f0:	6909      	ldr	r1, [r1, #16]
 80087f2:	1a6f      	subs	r7, r5, r1
 80087f4:	6965      	ldr	r5, [r4, #20]
 80087f6:	2302      	movs	r3, #2
 80087f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8008800:	f109 0301 	add.w	r3, r9, #1
 8008804:	443b      	add	r3, r7
 8008806:	429d      	cmp	r5, r3
 8008808:	bf38      	it	cc
 800880a:	461d      	movcc	r5, r3
 800880c:	0553      	lsls	r3, r2, #21
 800880e:	d530      	bpl.n	8008872 <__ssputs_r+0x9e>
 8008810:	4629      	mov	r1, r5
 8008812:	f000 fb2b 	bl	8008e6c <_malloc_r>
 8008816:	4606      	mov	r6, r0
 8008818:	b950      	cbnz	r0, 8008830 <__ssputs_r+0x5c>
 800881a:	230c      	movs	r3, #12
 800881c:	f8ca 3000 	str.w	r3, [sl]
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008830:	463a      	mov	r2, r7
 8008832:	6921      	ldr	r1, [r4, #16]
 8008834:	f000 faa8 	bl	8008d88 <memcpy>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800883e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008842:	81a3      	strh	r3, [r4, #12]
 8008844:	6126      	str	r6, [r4, #16]
 8008846:	6165      	str	r5, [r4, #20]
 8008848:	443e      	add	r6, r7
 800884a:	1bed      	subs	r5, r5, r7
 800884c:	6026      	str	r6, [r4, #0]
 800884e:	60a5      	str	r5, [r4, #8]
 8008850:	464e      	mov	r6, r9
 8008852:	454e      	cmp	r6, r9
 8008854:	d900      	bls.n	8008858 <__ssputs_r+0x84>
 8008856:	464e      	mov	r6, r9
 8008858:	4632      	mov	r2, r6
 800885a:	4641      	mov	r1, r8
 800885c:	6820      	ldr	r0, [r4, #0]
 800885e:	f000 fa9e 	bl	8008d9e <memmove>
 8008862:	68a3      	ldr	r3, [r4, #8]
 8008864:	1b9b      	subs	r3, r3, r6
 8008866:	60a3      	str	r3, [r4, #8]
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	441e      	add	r6, r3
 800886c:	6026      	str	r6, [r4, #0]
 800886e:	2000      	movs	r0, #0
 8008870:	e7dc      	b.n	800882c <__ssputs_r+0x58>
 8008872:	462a      	mov	r2, r5
 8008874:	f000 fb54 	bl	8008f20 <_realloc_r>
 8008878:	4606      	mov	r6, r0
 800887a:	2800      	cmp	r0, #0
 800887c:	d1e2      	bne.n	8008844 <__ssputs_r+0x70>
 800887e:	6921      	ldr	r1, [r4, #16]
 8008880:	4650      	mov	r0, sl
 8008882:	f000 faa5 	bl	8008dd0 <_free_r>
 8008886:	e7c8      	b.n	800881a <__ssputs_r+0x46>

08008888 <_svfiprintf_r>:
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	461d      	mov	r5, r3
 800888e:	898b      	ldrh	r3, [r1, #12]
 8008890:	061f      	lsls	r7, r3, #24
 8008892:	b09d      	sub	sp, #116	; 0x74
 8008894:	4680      	mov	r8, r0
 8008896:	460c      	mov	r4, r1
 8008898:	4616      	mov	r6, r2
 800889a:	d50f      	bpl.n	80088bc <_svfiprintf_r+0x34>
 800889c:	690b      	ldr	r3, [r1, #16]
 800889e:	b96b      	cbnz	r3, 80088bc <_svfiprintf_r+0x34>
 80088a0:	2140      	movs	r1, #64	; 0x40
 80088a2:	f000 fae3 	bl	8008e6c <_malloc_r>
 80088a6:	6020      	str	r0, [r4, #0]
 80088a8:	6120      	str	r0, [r4, #16]
 80088aa:	b928      	cbnz	r0, 80088b8 <_svfiprintf_r+0x30>
 80088ac:	230c      	movs	r3, #12
 80088ae:	f8c8 3000 	str.w	r3, [r8]
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295
 80088b6:	e0c8      	b.n	8008a4a <_svfiprintf_r+0x1c2>
 80088b8:	2340      	movs	r3, #64	; 0x40
 80088ba:	6163      	str	r3, [r4, #20]
 80088bc:	2300      	movs	r3, #0
 80088be:	9309      	str	r3, [sp, #36]	; 0x24
 80088c0:	2320      	movs	r3, #32
 80088c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088c6:	2330      	movs	r3, #48	; 0x30
 80088c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088cc:	9503      	str	r5, [sp, #12]
 80088ce:	f04f 0b01 	mov.w	fp, #1
 80088d2:	4637      	mov	r7, r6
 80088d4:	463d      	mov	r5, r7
 80088d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088da:	b10b      	cbz	r3, 80088e0 <_svfiprintf_r+0x58>
 80088dc:	2b25      	cmp	r3, #37	; 0x25
 80088de:	d13e      	bne.n	800895e <_svfiprintf_r+0xd6>
 80088e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80088e4:	d00b      	beq.n	80088fe <_svfiprintf_r+0x76>
 80088e6:	4653      	mov	r3, sl
 80088e8:	4632      	mov	r2, r6
 80088ea:	4621      	mov	r1, r4
 80088ec:	4640      	mov	r0, r8
 80088ee:	f7ff ff71 	bl	80087d4 <__ssputs_r>
 80088f2:	3001      	adds	r0, #1
 80088f4:	f000 80a4 	beq.w	8008a40 <_svfiprintf_r+0x1b8>
 80088f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fa:	4453      	add	r3, sl
 80088fc:	9309      	str	r3, [sp, #36]	; 0x24
 80088fe:	783b      	ldrb	r3, [r7, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 809d 	beq.w	8008a40 <_svfiprintf_r+0x1b8>
 8008906:	2300      	movs	r3, #0
 8008908:	f04f 32ff 	mov.w	r2, #4294967295
 800890c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008910:	9304      	str	r3, [sp, #16]
 8008912:	9307      	str	r3, [sp, #28]
 8008914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008918:	931a      	str	r3, [sp, #104]	; 0x68
 800891a:	462f      	mov	r7, r5
 800891c:	2205      	movs	r2, #5
 800891e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008922:	4850      	ldr	r0, [pc, #320]	; (8008a64 <_svfiprintf_r+0x1dc>)
 8008924:	f7f7 fc94 	bl	8000250 <memchr>
 8008928:	9b04      	ldr	r3, [sp, #16]
 800892a:	b9d0      	cbnz	r0, 8008962 <_svfiprintf_r+0xda>
 800892c:	06d9      	lsls	r1, r3, #27
 800892e:	bf44      	itt	mi
 8008930:	2220      	movmi	r2, #32
 8008932:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008936:	071a      	lsls	r2, r3, #28
 8008938:	bf44      	itt	mi
 800893a:	222b      	movmi	r2, #43	; 0x2b
 800893c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008940:	782a      	ldrb	r2, [r5, #0]
 8008942:	2a2a      	cmp	r2, #42	; 0x2a
 8008944:	d015      	beq.n	8008972 <_svfiprintf_r+0xea>
 8008946:	9a07      	ldr	r2, [sp, #28]
 8008948:	462f      	mov	r7, r5
 800894a:	2000      	movs	r0, #0
 800894c:	250a      	movs	r5, #10
 800894e:	4639      	mov	r1, r7
 8008950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008954:	3b30      	subs	r3, #48	; 0x30
 8008956:	2b09      	cmp	r3, #9
 8008958:	d94d      	bls.n	80089f6 <_svfiprintf_r+0x16e>
 800895a:	b1b8      	cbz	r0, 800898c <_svfiprintf_r+0x104>
 800895c:	e00f      	b.n	800897e <_svfiprintf_r+0xf6>
 800895e:	462f      	mov	r7, r5
 8008960:	e7b8      	b.n	80088d4 <_svfiprintf_r+0x4c>
 8008962:	4a40      	ldr	r2, [pc, #256]	; (8008a64 <_svfiprintf_r+0x1dc>)
 8008964:	1a80      	subs	r0, r0, r2
 8008966:	fa0b f000 	lsl.w	r0, fp, r0
 800896a:	4318      	orrs	r0, r3
 800896c:	9004      	str	r0, [sp, #16]
 800896e:	463d      	mov	r5, r7
 8008970:	e7d3      	b.n	800891a <_svfiprintf_r+0x92>
 8008972:	9a03      	ldr	r2, [sp, #12]
 8008974:	1d11      	adds	r1, r2, #4
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	9103      	str	r1, [sp, #12]
 800897a:	2a00      	cmp	r2, #0
 800897c:	db01      	blt.n	8008982 <_svfiprintf_r+0xfa>
 800897e:	9207      	str	r2, [sp, #28]
 8008980:	e004      	b.n	800898c <_svfiprintf_r+0x104>
 8008982:	4252      	negs	r2, r2
 8008984:	f043 0302 	orr.w	r3, r3, #2
 8008988:	9207      	str	r2, [sp, #28]
 800898a:	9304      	str	r3, [sp, #16]
 800898c:	783b      	ldrb	r3, [r7, #0]
 800898e:	2b2e      	cmp	r3, #46	; 0x2e
 8008990:	d10c      	bne.n	80089ac <_svfiprintf_r+0x124>
 8008992:	787b      	ldrb	r3, [r7, #1]
 8008994:	2b2a      	cmp	r3, #42	; 0x2a
 8008996:	d133      	bne.n	8008a00 <_svfiprintf_r+0x178>
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	1d1a      	adds	r2, r3, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	9203      	str	r2, [sp, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bfb8      	it	lt
 80089a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a8:	3702      	adds	r7, #2
 80089aa:	9305      	str	r3, [sp, #20]
 80089ac:	4d2e      	ldr	r5, [pc, #184]	; (8008a68 <_svfiprintf_r+0x1e0>)
 80089ae:	7839      	ldrb	r1, [r7, #0]
 80089b0:	2203      	movs	r2, #3
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7f7 fc4c 	bl	8000250 <memchr>
 80089b8:	b138      	cbz	r0, 80089ca <_svfiprintf_r+0x142>
 80089ba:	2340      	movs	r3, #64	; 0x40
 80089bc:	1b40      	subs	r0, r0, r5
 80089be:	fa03 f000 	lsl.w	r0, r3, r0
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	4303      	orrs	r3, r0
 80089c6:	3701      	adds	r7, #1
 80089c8:	9304      	str	r3, [sp, #16]
 80089ca:	7839      	ldrb	r1, [r7, #0]
 80089cc:	4827      	ldr	r0, [pc, #156]	; (8008a6c <_svfiprintf_r+0x1e4>)
 80089ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089d2:	2206      	movs	r2, #6
 80089d4:	1c7e      	adds	r6, r7, #1
 80089d6:	f7f7 fc3b 	bl	8000250 <memchr>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d038      	beq.n	8008a50 <_svfiprintf_r+0x1c8>
 80089de:	4b24      	ldr	r3, [pc, #144]	; (8008a70 <_svfiprintf_r+0x1e8>)
 80089e0:	bb13      	cbnz	r3, 8008a28 <_svfiprintf_r+0x1a0>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	3307      	adds	r3, #7
 80089e6:	f023 0307 	bic.w	r3, r3, #7
 80089ea:	3308      	adds	r3, #8
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f0:	444b      	add	r3, r9
 80089f2:	9309      	str	r3, [sp, #36]	; 0x24
 80089f4:	e76d      	b.n	80088d2 <_svfiprintf_r+0x4a>
 80089f6:	fb05 3202 	mla	r2, r5, r2, r3
 80089fa:	2001      	movs	r0, #1
 80089fc:	460f      	mov	r7, r1
 80089fe:	e7a6      	b.n	800894e <_svfiprintf_r+0xc6>
 8008a00:	2300      	movs	r3, #0
 8008a02:	3701      	adds	r7, #1
 8008a04:	9305      	str	r3, [sp, #20]
 8008a06:	4619      	mov	r1, r3
 8008a08:	250a      	movs	r5, #10
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a10:	3a30      	subs	r2, #48	; 0x30
 8008a12:	2a09      	cmp	r2, #9
 8008a14:	d903      	bls.n	8008a1e <_svfiprintf_r+0x196>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0c8      	beq.n	80089ac <_svfiprintf_r+0x124>
 8008a1a:	9105      	str	r1, [sp, #20]
 8008a1c:	e7c6      	b.n	80089ac <_svfiprintf_r+0x124>
 8008a1e:	fb05 2101 	mla	r1, r5, r1, r2
 8008a22:	2301      	movs	r3, #1
 8008a24:	4607      	mov	r7, r0
 8008a26:	e7f0      	b.n	8008a0a <_svfiprintf_r+0x182>
 8008a28:	ab03      	add	r3, sp, #12
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <_svfiprintf_r+0x1ec>)
 8008a30:	a904      	add	r1, sp, #16
 8008a32:	4640      	mov	r0, r8
 8008a34:	f3af 8000 	nop.w
 8008a38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a3c:	4681      	mov	r9, r0
 8008a3e:	d1d6      	bne.n	80089ee <_svfiprintf_r+0x166>
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	065b      	lsls	r3, r3, #25
 8008a44:	f53f af35 	bmi.w	80088b2 <_svfiprintf_r+0x2a>
 8008a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a4a:	b01d      	add	sp, #116	; 0x74
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	ab03      	add	r3, sp, #12
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	4622      	mov	r2, r4
 8008a56:	4b07      	ldr	r3, [pc, #28]	; (8008a74 <_svfiprintf_r+0x1ec>)
 8008a58:	a904      	add	r1, sp, #16
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f000 f882 	bl	8008b64 <_printf_i>
 8008a60:	e7ea      	b.n	8008a38 <_svfiprintf_r+0x1b0>
 8008a62:	bf00      	nop
 8008a64:	08009000 	.word	0x08009000
 8008a68:	08009006 	.word	0x08009006
 8008a6c:	0800900a 	.word	0x0800900a
 8008a70:	00000000 	.word	0x00000000
 8008a74:	080087d5 	.word	0x080087d5

08008a78 <_printf_common>:
 8008a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7c:	4691      	mov	r9, r2
 8008a7e:	461f      	mov	r7, r3
 8008a80:	688a      	ldr	r2, [r1, #8]
 8008a82:	690b      	ldr	r3, [r1, #16]
 8008a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	bfb8      	it	lt
 8008a8c:	4613      	movlt	r3, r2
 8008a8e:	f8c9 3000 	str.w	r3, [r9]
 8008a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a96:	4606      	mov	r6, r0
 8008a98:	460c      	mov	r4, r1
 8008a9a:	b112      	cbz	r2, 8008aa2 <_printf_common+0x2a>
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f8c9 3000 	str.w	r3, [r9]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	0699      	lsls	r1, r3, #26
 8008aa6:	bf42      	ittt	mi
 8008aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008aac:	3302      	addmi	r3, #2
 8008aae:	f8c9 3000 	strmi.w	r3, [r9]
 8008ab2:	6825      	ldr	r5, [r4, #0]
 8008ab4:	f015 0506 	ands.w	r5, r5, #6
 8008ab8:	d107      	bne.n	8008aca <_printf_common+0x52>
 8008aba:	f104 0a19 	add.w	sl, r4, #25
 8008abe:	68e3      	ldr	r3, [r4, #12]
 8008ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8008ac4:	1a9b      	subs	r3, r3, r2
 8008ac6:	42ab      	cmp	r3, r5
 8008ac8:	dc28      	bgt.n	8008b1c <_printf_common+0xa4>
 8008aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	3300      	adds	r3, #0
 8008ad2:	bf18      	it	ne
 8008ad4:	2301      	movne	r3, #1
 8008ad6:	0692      	lsls	r2, r2, #26
 8008ad8:	d42d      	bmi.n	8008b36 <_printf_common+0xbe>
 8008ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ade:	4639      	mov	r1, r7
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	47c0      	blx	r8
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d020      	beq.n	8008b2a <_printf_common+0xb2>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	68e5      	ldr	r5, [r4, #12]
 8008aec:	f8d9 2000 	ldr.w	r2, [r9]
 8008af0:	f003 0306 	and.w	r3, r3, #6
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	bf08      	it	eq
 8008af8:	1aad      	subeq	r5, r5, r2
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	6922      	ldr	r2, [r4, #16]
 8008afe:	bf0c      	ite	eq
 8008b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b04:	2500      	movne	r5, #0
 8008b06:	4293      	cmp	r3, r2
 8008b08:	bfc4      	itt	gt
 8008b0a:	1a9b      	subgt	r3, r3, r2
 8008b0c:	18ed      	addgt	r5, r5, r3
 8008b0e:	f04f 0900 	mov.w	r9, #0
 8008b12:	341a      	adds	r4, #26
 8008b14:	454d      	cmp	r5, r9
 8008b16:	d11a      	bne.n	8008b4e <_printf_common+0xd6>
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e008      	b.n	8008b2e <_printf_common+0xb6>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4652      	mov	r2, sl
 8008b20:	4639      	mov	r1, r7
 8008b22:	4630      	mov	r0, r6
 8008b24:	47c0      	blx	r8
 8008b26:	3001      	adds	r0, #1
 8008b28:	d103      	bne.n	8008b32 <_printf_common+0xba>
 8008b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b32:	3501      	adds	r5, #1
 8008b34:	e7c3      	b.n	8008abe <_printf_common+0x46>
 8008b36:	18e1      	adds	r1, r4, r3
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	2030      	movs	r0, #48	; 0x30
 8008b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b40:	4422      	add	r2, r4
 8008b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b4a:	3302      	adds	r3, #2
 8008b4c:	e7c5      	b.n	8008ada <_printf_common+0x62>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4622      	mov	r2, r4
 8008b52:	4639      	mov	r1, r7
 8008b54:	4630      	mov	r0, r6
 8008b56:	47c0      	blx	r8
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d0e6      	beq.n	8008b2a <_printf_common+0xb2>
 8008b5c:	f109 0901 	add.w	r9, r9, #1
 8008b60:	e7d8      	b.n	8008b14 <_printf_common+0x9c>
	...

08008b64 <_printf_i>:
 8008b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	7e09      	ldrb	r1, [r1, #24]
 8008b70:	b085      	sub	sp, #20
 8008b72:	296e      	cmp	r1, #110	; 0x6e
 8008b74:	4617      	mov	r7, r2
 8008b76:	4606      	mov	r6, r0
 8008b78:	4698      	mov	r8, r3
 8008b7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b7c:	f000 80b3 	beq.w	8008ce6 <_printf_i+0x182>
 8008b80:	d822      	bhi.n	8008bc8 <_printf_i+0x64>
 8008b82:	2963      	cmp	r1, #99	; 0x63
 8008b84:	d036      	beq.n	8008bf4 <_printf_i+0x90>
 8008b86:	d80a      	bhi.n	8008b9e <_printf_i+0x3a>
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	f000 80b9 	beq.w	8008d00 <_printf_i+0x19c>
 8008b8e:	2958      	cmp	r1, #88	; 0x58
 8008b90:	f000 8083 	beq.w	8008c9a <_printf_i+0x136>
 8008b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b9c:	e032      	b.n	8008c04 <_printf_i+0xa0>
 8008b9e:	2964      	cmp	r1, #100	; 0x64
 8008ba0:	d001      	beq.n	8008ba6 <_printf_i+0x42>
 8008ba2:	2969      	cmp	r1, #105	; 0x69
 8008ba4:	d1f6      	bne.n	8008b94 <_printf_i+0x30>
 8008ba6:	6820      	ldr	r0, [r4, #0]
 8008ba8:	6813      	ldr	r3, [r2, #0]
 8008baa:	0605      	lsls	r5, r0, #24
 8008bac:	f103 0104 	add.w	r1, r3, #4
 8008bb0:	d52a      	bpl.n	8008c08 <_printf_i+0xa4>
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6011      	str	r1, [r2, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da03      	bge.n	8008bc2 <_printf_i+0x5e>
 8008bba:	222d      	movs	r2, #45	; 0x2d
 8008bbc:	425b      	negs	r3, r3
 8008bbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008bc2:	486f      	ldr	r0, [pc, #444]	; (8008d80 <_printf_i+0x21c>)
 8008bc4:	220a      	movs	r2, #10
 8008bc6:	e039      	b.n	8008c3c <_printf_i+0xd8>
 8008bc8:	2973      	cmp	r1, #115	; 0x73
 8008bca:	f000 809d 	beq.w	8008d08 <_printf_i+0x1a4>
 8008bce:	d808      	bhi.n	8008be2 <_printf_i+0x7e>
 8008bd0:	296f      	cmp	r1, #111	; 0x6f
 8008bd2:	d020      	beq.n	8008c16 <_printf_i+0xb2>
 8008bd4:	2970      	cmp	r1, #112	; 0x70
 8008bd6:	d1dd      	bne.n	8008b94 <_printf_i+0x30>
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	f043 0320 	orr.w	r3, r3, #32
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	e003      	b.n	8008bea <_printf_i+0x86>
 8008be2:	2975      	cmp	r1, #117	; 0x75
 8008be4:	d017      	beq.n	8008c16 <_printf_i+0xb2>
 8008be6:	2978      	cmp	r1, #120	; 0x78
 8008be8:	d1d4      	bne.n	8008b94 <_printf_i+0x30>
 8008bea:	2378      	movs	r3, #120	; 0x78
 8008bec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bf0:	4864      	ldr	r0, [pc, #400]	; (8008d84 <_printf_i+0x220>)
 8008bf2:	e055      	b.n	8008ca0 <_printf_i+0x13c>
 8008bf4:	6813      	ldr	r3, [r2, #0]
 8008bf6:	1d19      	adds	r1, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6011      	str	r1, [r2, #0]
 8008bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c04:	2301      	movs	r3, #1
 8008c06:	e08c      	b.n	8008d22 <_printf_i+0x1be>
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6011      	str	r1, [r2, #0]
 8008c0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c10:	bf18      	it	ne
 8008c12:	b21b      	sxthne	r3, r3
 8008c14:	e7cf      	b.n	8008bb6 <_printf_i+0x52>
 8008c16:	6813      	ldr	r3, [r2, #0]
 8008c18:	6825      	ldr	r5, [r4, #0]
 8008c1a:	1d18      	adds	r0, r3, #4
 8008c1c:	6010      	str	r0, [r2, #0]
 8008c1e:	0628      	lsls	r0, r5, #24
 8008c20:	d501      	bpl.n	8008c26 <_printf_i+0xc2>
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	e002      	b.n	8008c2c <_printf_i+0xc8>
 8008c26:	0668      	lsls	r0, r5, #25
 8008c28:	d5fb      	bpl.n	8008c22 <_printf_i+0xbe>
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	4854      	ldr	r0, [pc, #336]	; (8008d80 <_printf_i+0x21c>)
 8008c2e:	296f      	cmp	r1, #111	; 0x6f
 8008c30:	bf14      	ite	ne
 8008c32:	220a      	movne	r2, #10
 8008c34:	2208      	moveq	r2, #8
 8008c36:	2100      	movs	r1, #0
 8008c38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c3c:	6865      	ldr	r5, [r4, #4]
 8008c3e:	60a5      	str	r5, [r4, #8]
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	f2c0 8095 	blt.w	8008d70 <_printf_i+0x20c>
 8008c46:	6821      	ldr	r1, [r4, #0]
 8008c48:	f021 0104 	bic.w	r1, r1, #4
 8008c4c:	6021      	str	r1, [r4, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d13d      	bne.n	8008cce <_printf_i+0x16a>
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	f040 808e 	bne.w	8008d74 <_printf_i+0x210>
 8008c58:	4665      	mov	r5, ip
 8008c5a:	2a08      	cmp	r2, #8
 8008c5c:	d10b      	bne.n	8008c76 <_printf_i+0x112>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	07db      	lsls	r3, r3, #31
 8008c62:	d508      	bpl.n	8008c76 <_printf_i+0x112>
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	6862      	ldr	r2, [r4, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	bfde      	ittt	le
 8008c6c:	2330      	movle	r3, #48	; 0x30
 8008c6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c76:	ebac 0305 	sub.w	r3, ip, r5
 8008c7a:	6123      	str	r3, [r4, #16]
 8008c7c:	f8cd 8000 	str.w	r8, [sp]
 8008c80:	463b      	mov	r3, r7
 8008c82:	aa03      	add	r2, sp, #12
 8008c84:	4621      	mov	r1, r4
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7ff fef6 	bl	8008a78 <_printf_common>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d14d      	bne.n	8008d2c <_printf_i+0x1c8>
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	b005      	add	sp, #20
 8008c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c9a:	4839      	ldr	r0, [pc, #228]	; (8008d80 <_printf_i+0x21c>)
 8008c9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ca0:	6813      	ldr	r3, [r2, #0]
 8008ca2:	6821      	ldr	r1, [r4, #0]
 8008ca4:	1d1d      	adds	r5, r3, #4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6015      	str	r5, [r2, #0]
 8008caa:	060a      	lsls	r2, r1, #24
 8008cac:	d50b      	bpl.n	8008cc6 <_printf_i+0x162>
 8008cae:	07ca      	lsls	r2, r1, #31
 8008cb0:	bf44      	itt	mi
 8008cb2:	f041 0120 	orrmi.w	r1, r1, #32
 8008cb6:	6021      	strmi	r1, [r4, #0]
 8008cb8:	b91b      	cbnz	r3, 8008cc2 <_printf_i+0x15e>
 8008cba:	6822      	ldr	r2, [r4, #0]
 8008cbc:	f022 0220 	bic.w	r2, r2, #32
 8008cc0:	6022      	str	r2, [r4, #0]
 8008cc2:	2210      	movs	r2, #16
 8008cc4:	e7b7      	b.n	8008c36 <_printf_i+0xd2>
 8008cc6:	064d      	lsls	r5, r1, #25
 8008cc8:	bf48      	it	mi
 8008cca:	b29b      	uxthmi	r3, r3
 8008ccc:	e7ef      	b.n	8008cae <_printf_i+0x14a>
 8008cce:	4665      	mov	r5, ip
 8008cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cd4:	fb02 3311 	mls	r3, r2, r1, r3
 8008cd8:	5cc3      	ldrb	r3, [r0, r3]
 8008cda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008cde:	460b      	mov	r3, r1
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	d1f5      	bne.n	8008cd0 <_printf_i+0x16c>
 8008ce4:	e7b9      	b.n	8008c5a <_printf_i+0xf6>
 8008ce6:	6813      	ldr	r3, [r2, #0]
 8008ce8:	6825      	ldr	r5, [r4, #0]
 8008cea:	6961      	ldr	r1, [r4, #20]
 8008cec:	1d18      	adds	r0, r3, #4
 8008cee:	6010      	str	r0, [r2, #0]
 8008cf0:	0628      	lsls	r0, r5, #24
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	d501      	bpl.n	8008cfa <_printf_i+0x196>
 8008cf6:	6019      	str	r1, [r3, #0]
 8008cf8:	e002      	b.n	8008d00 <_printf_i+0x19c>
 8008cfa:	066a      	lsls	r2, r5, #25
 8008cfc:	d5fb      	bpl.n	8008cf6 <_printf_i+0x192>
 8008cfe:	8019      	strh	r1, [r3, #0]
 8008d00:	2300      	movs	r3, #0
 8008d02:	6123      	str	r3, [r4, #16]
 8008d04:	4665      	mov	r5, ip
 8008d06:	e7b9      	b.n	8008c7c <_printf_i+0x118>
 8008d08:	6813      	ldr	r3, [r2, #0]
 8008d0a:	1d19      	adds	r1, r3, #4
 8008d0c:	6011      	str	r1, [r2, #0]
 8008d0e:	681d      	ldr	r5, [r3, #0]
 8008d10:	6862      	ldr	r2, [r4, #4]
 8008d12:	2100      	movs	r1, #0
 8008d14:	4628      	mov	r0, r5
 8008d16:	f7f7 fa9b 	bl	8000250 <memchr>
 8008d1a:	b108      	cbz	r0, 8008d20 <_printf_i+0x1bc>
 8008d1c:	1b40      	subs	r0, r0, r5
 8008d1e:	6060      	str	r0, [r4, #4]
 8008d20:	6863      	ldr	r3, [r4, #4]
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	2300      	movs	r3, #0
 8008d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d2a:	e7a7      	b.n	8008c7c <_printf_i+0x118>
 8008d2c:	6923      	ldr	r3, [r4, #16]
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4639      	mov	r1, r7
 8008d32:	4630      	mov	r0, r6
 8008d34:	47c0      	blx	r8
 8008d36:	3001      	adds	r0, #1
 8008d38:	d0aa      	beq.n	8008c90 <_printf_i+0x12c>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	079b      	lsls	r3, r3, #30
 8008d3e:	d413      	bmi.n	8008d68 <_printf_i+0x204>
 8008d40:	68e0      	ldr	r0, [r4, #12]
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	4298      	cmp	r0, r3
 8008d46:	bfb8      	it	lt
 8008d48:	4618      	movlt	r0, r3
 8008d4a:	e7a3      	b.n	8008c94 <_printf_i+0x130>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	464a      	mov	r2, r9
 8008d50:	4639      	mov	r1, r7
 8008d52:	4630      	mov	r0, r6
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d09a      	beq.n	8008c90 <_printf_i+0x12c>
 8008d5a:	3501      	adds	r5, #1
 8008d5c:	68e3      	ldr	r3, [r4, #12]
 8008d5e:	9a03      	ldr	r2, [sp, #12]
 8008d60:	1a9b      	subs	r3, r3, r2
 8008d62:	42ab      	cmp	r3, r5
 8008d64:	dcf2      	bgt.n	8008d4c <_printf_i+0x1e8>
 8008d66:	e7eb      	b.n	8008d40 <_printf_i+0x1dc>
 8008d68:	2500      	movs	r5, #0
 8008d6a:	f104 0919 	add.w	r9, r4, #25
 8008d6e:	e7f5      	b.n	8008d5c <_printf_i+0x1f8>
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1ac      	bne.n	8008cce <_printf_i+0x16a>
 8008d74:	7803      	ldrb	r3, [r0, #0]
 8008d76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d7e:	e76c      	b.n	8008c5a <_printf_i+0xf6>
 8008d80:	08009011 	.word	0x08009011
 8008d84:	08009022 	.word	0x08009022

08008d88 <memcpy>:
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	1e43      	subs	r3, r0, #1
 8008d8c:	440a      	add	r2, r1
 8008d8e:	4291      	cmp	r1, r2
 8008d90:	d100      	bne.n	8008d94 <memcpy+0xc>
 8008d92:	bd10      	pop	{r4, pc}
 8008d94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d9c:	e7f7      	b.n	8008d8e <memcpy+0x6>

08008d9e <memmove>:
 8008d9e:	4288      	cmp	r0, r1
 8008da0:	b510      	push	{r4, lr}
 8008da2:	eb01 0302 	add.w	r3, r1, r2
 8008da6:	d807      	bhi.n	8008db8 <memmove+0x1a>
 8008da8:	1e42      	subs	r2, r0, #1
 8008daa:	4299      	cmp	r1, r3
 8008dac:	d00a      	beq.n	8008dc4 <memmove+0x26>
 8008dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008db2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008db6:	e7f8      	b.n	8008daa <memmove+0xc>
 8008db8:	4283      	cmp	r3, r0
 8008dba:	d9f5      	bls.n	8008da8 <memmove+0xa>
 8008dbc:	1881      	adds	r1, r0, r2
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	42d3      	cmn	r3, r2
 8008dc2:	d100      	bne.n	8008dc6 <memmove+0x28>
 8008dc4:	bd10      	pop	{r4, pc}
 8008dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008dce:	e7f7      	b.n	8008dc0 <memmove+0x22>

08008dd0 <_free_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	d045      	beq.n	8008e64 <_free_r+0x94>
 8008dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ddc:	1f0c      	subs	r4, r1, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	bfb8      	it	lt
 8008de2:	18e4      	addlt	r4, r4, r3
 8008de4:	f000 f8d2 	bl	8008f8c <__malloc_lock>
 8008de8:	4a1f      	ldr	r2, [pc, #124]	; (8008e68 <_free_r+0x98>)
 8008dea:	6813      	ldr	r3, [r2, #0]
 8008dec:	4610      	mov	r0, r2
 8008dee:	b933      	cbnz	r3, 8008dfe <_free_r+0x2e>
 8008df0:	6063      	str	r3, [r4, #4]
 8008df2:	6014      	str	r4, [r2, #0]
 8008df4:	4628      	mov	r0, r5
 8008df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dfa:	f000 b8c8 	b.w	8008f8e <__malloc_unlock>
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	d90c      	bls.n	8008e1c <_free_r+0x4c>
 8008e02:	6821      	ldr	r1, [r4, #0]
 8008e04:	1862      	adds	r2, r4, r1
 8008e06:	4293      	cmp	r3, r2
 8008e08:	bf04      	itt	eq
 8008e0a:	681a      	ldreq	r2, [r3, #0]
 8008e0c:	685b      	ldreq	r3, [r3, #4]
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	bf04      	itt	eq
 8008e12:	1852      	addeq	r2, r2, r1
 8008e14:	6022      	streq	r2, [r4, #0]
 8008e16:	6004      	str	r4, [r0, #0]
 8008e18:	e7ec      	b.n	8008df4 <_free_r+0x24>
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	b10a      	cbz	r2, 8008e24 <_free_r+0x54>
 8008e20:	42a2      	cmp	r2, r4
 8008e22:	d9fa      	bls.n	8008e1a <_free_r+0x4a>
 8008e24:	6819      	ldr	r1, [r3, #0]
 8008e26:	1858      	adds	r0, r3, r1
 8008e28:	42a0      	cmp	r0, r4
 8008e2a:	d10b      	bne.n	8008e44 <_free_r+0x74>
 8008e2c:	6820      	ldr	r0, [r4, #0]
 8008e2e:	4401      	add	r1, r0
 8008e30:	1858      	adds	r0, r3, r1
 8008e32:	4282      	cmp	r2, r0
 8008e34:	6019      	str	r1, [r3, #0]
 8008e36:	d1dd      	bne.n	8008df4 <_free_r+0x24>
 8008e38:	6810      	ldr	r0, [r2, #0]
 8008e3a:	6852      	ldr	r2, [r2, #4]
 8008e3c:	605a      	str	r2, [r3, #4]
 8008e3e:	4401      	add	r1, r0
 8008e40:	6019      	str	r1, [r3, #0]
 8008e42:	e7d7      	b.n	8008df4 <_free_r+0x24>
 8008e44:	d902      	bls.n	8008e4c <_free_r+0x7c>
 8008e46:	230c      	movs	r3, #12
 8008e48:	602b      	str	r3, [r5, #0]
 8008e4a:	e7d3      	b.n	8008df4 <_free_r+0x24>
 8008e4c:	6820      	ldr	r0, [r4, #0]
 8008e4e:	1821      	adds	r1, r4, r0
 8008e50:	428a      	cmp	r2, r1
 8008e52:	bf04      	itt	eq
 8008e54:	6811      	ldreq	r1, [r2, #0]
 8008e56:	6852      	ldreq	r2, [r2, #4]
 8008e58:	6062      	str	r2, [r4, #4]
 8008e5a:	bf04      	itt	eq
 8008e5c:	1809      	addeq	r1, r1, r0
 8008e5e:	6021      	streq	r1, [r4, #0]
 8008e60:	605c      	str	r4, [r3, #4]
 8008e62:	e7c7      	b.n	8008df4 <_free_r+0x24>
 8008e64:	bd38      	pop	{r3, r4, r5, pc}
 8008e66:	bf00      	nop
 8008e68:	200000ac 	.word	0x200000ac

08008e6c <_malloc_r>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	1ccd      	adds	r5, r1, #3
 8008e70:	f025 0503 	bic.w	r5, r5, #3
 8008e74:	3508      	adds	r5, #8
 8008e76:	2d0c      	cmp	r5, #12
 8008e78:	bf38      	it	cc
 8008e7a:	250c      	movcc	r5, #12
 8008e7c:	2d00      	cmp	r5, #0
 8008e7e:	4606      	mov	r6, r0
 8008e80:	db01      	blt.n	8008e86 <_malloc_r+0x1a>
 8008e82:	42a9      	cmp	r1, r5
 8008e84:	d903      	bls.n	8008e8e <_malloc_r+0x22>
 8008e86:	230c      	movs	r3, #12
 8008e88:	6033      	str	r3, [r6, #0]
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	bd70      	pop	{r4, r5, r6, pc}
 8008e8e:	f000 f87d 	bl	8008f8c <__malloc_lock>
 8008e92:	4a21      	ldr	r2, [pc, #132]	; (8008f18 <_malloc_r+0xac>)
 8008e94:	6814      	ldr	r4, [r2, #0]
 8008e96:	4621      	mov	r1, r4
 8008e98:	b991      	cbnz	r1, 8008ec0 <_malloc_r+0x54>
 8008e9a:	4c20      	ldr	r4, [pc, #128]	; (8008f1c <_malloc_r+0xb0>)
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	b91b      	cbnz	r3, 8008ea8 <_malloc_r+0x3c>
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 f863 	bl	8008f6c <_sbrk_r>
 8008ea6:	6020      	str	r0, [r4, #0]
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 f85e 	bl	8008f6c <_sbrk_r>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d124      	bne.n	8008efe <_malloc_r+0x92>
 8008eb4:	230c      	movs	r3, #12
 8008eb6:	6033      	str	r3, [r6, #0]
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f000 f868 	bl	8008f8e <__malloc_unlock>
 8008ebe:	e7e4      	b.n	8008e8a <_malloc_r+0x1e>
 8008ec0:	680b      	ldr	r3, [r1, #0]
 8008ec2:	1b5b      	subs	r3, r3, r5
 8008ec4:	d418      	bmi.n	8008ef8 <_malloc_r+0x8c>
 8008ec6:	2b0b      	cmp	r3, #11
 8008ec8:	d90f      	bls.n	8008eea <_malloc_r+0x7e>
 8008eca:	600b      	str	r3, [r1, #0]
 8008ecc:	50cd      	str	r5, [r1, r3]
 8008ece:	18cc      	adds	r4, r1, r3
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f000 f85c 	bl	8008f8e <__malloc_unlock>
 8008ed6:	f104 000b 	add.w	r0, r4, #11
 8008eda:	1d23      	adds	r3, r4, #4
 8008edc:	f020 0007 	bic.w	r0, r0, #7
 8008ee0:	1ac3      	subs	r3, r0, r3
 8008ee2:	d0d3      	beq.n	8008e8c <_malloc_r+0x20>
 8008ee4:	425a      	negs	r2, r3
 8008ee6:	50e2      	str	r2, [r4, r3]
 8008ee8:	e7d0      	b.n	8008e8c <_malloc_r+0x20>
 8008eea:	428c      	cmp	r4, r1
 8008eec:	684b      	ldr	r3, [r1, #4]
 8008eee:	bf16      	itet	ne
 8008ef0:	6063      	strne	r3, [r4, #4]
 8008ef2:	6013      	streq	r3, [r2, #0]
 8008ef4:	460c      	movne	r4, r1
 8008ef6:	e7eb      	b.n	8008ed0 <_malloc_r+0x64>
 8008ef8:	460c      	mov	r4, r1
 8008efa:	6849      	ldr	r1, [r1, #4]
 8008efc:	e7cc      	b.n	8008e98 <_malloc_r+0x2c>
 8008efe:	1cc4      	adds	r4, r0, #3
 8008f00:	f024 0403 	bic.w	r4, r4, #3
 8008f04:	42a0      	cmp	r0, r4
 8008f06:	d005      	beq.n	8008f14 <_malloc_r+0xa8>
 8008f08:	1a21      	subs	r1, r4, r0
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f000 f82e 	bl	8008f6c <_sbrk_r>
 8008f10:	3001      	adds	r0, #1
 8008f12:	d0cf      	beq.n	8008eb4 <_malloc_r+0x48>
 8008f14:	6025      	str	r5, [r4, #0]
 8008f16:	e7db      	b.n	8008ed0 <_malloc_r+0x64>
 8008f18:	200000ac 	.word	0x200000ac
 8008f1c:	200000b0 	.word	0x200000b0

08008f20 <_realloc_r>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	4607      	mov	r7, r0
 8008f24:	4614      	mov	r4, r2
 8008f26:	460e      	mov	r6, r1
 8008f28:	b921      	cbnz	r1, 8008f34 <_realloc_r+0x14>
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f30:	f7ff bf9c 	b.w	8008e6c <_malloc_r>
 8008f34:	b922      	cbnz	r2, 8008f40 <_realloc_r+0x20>
 8008f36:	f7ff ff4b 	bl	8008dd0 <_free_r>
 8008f3a:	4625      	mov	r5, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f40:	f000 f826 	bl	8008f90 <_malloc_usable_size_r>
 8008f44:	42a0      	cmp	r0, r4
 8008f46:	d20f      	bcs.n	8008f68 <_realloc_r+0x48>
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f7ff ff8e 	bl	8008e6c <_malloc_r>
 8008f50:	4605      	mov	r5, r0
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d0f2      	beq.n	8008f3c <_realloc_r+0x1c>
 8008f56:	4631      	mov	r1, r6
 8008f58:	4622      	mov	r2, r4
 8008f5a:	f7ff ff15 	bl	8008d88 <memcpy>
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4638      	mov	r0, r7
 8008f62:	f7ff ff35 	bl	8008dd0 <_free_r>
 8008f66:	e7e9      	b.n	8008f3c <_realloc_r+0x1c>
 8008f68:	4635      	mov	r5, r6
 8008f6a:	e7e7      	b.n	8008f3c <_realloc_r+0x1c>

08008f6c <_sbrk_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4c06      	ldr	r4, [pc, #24]	; (8008f88 <_sbrk_r+0x1c>)
 8008f70:	2300      	movs	r3, #0
 8008f72:	4605      	mov	r5, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	f7f8 ff72 	bl	8001e60 <_sbrk>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_sbrk_r+0x1a>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_sbrk_r+0x1a>
 8008f84:	602b      	str	r3, [r5, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	2002b900 	.word	0x2002b900

08008f8c <__malloc_lock>:
 8008f8c:	4770      	bx	lr

08008f8e <__malloc_unlock>:
 8008f8e:	4770      	bx	lr

08008f90 <_malloc_usable_size_r>:
 8008f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f94:	1f18      	subs	r0, r3, #4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	bfbc      	itt	lt
 8008f9a:	580b      	ldrlt	r3, [r1, r0]
 8008f9c:	18c0      	addlt	r0, r0, r3
 8008f9e:	4770      	bx	lr

08008fa0 <_init>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr

08008fac <_fini>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr
>>>>>>> Stashed changes
