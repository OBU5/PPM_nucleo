
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e30  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009030  08009030  00019030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009098  08009098  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090a0  080090a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a0  080090a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090a4  080090a4  000190a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b898  20000074  0800911c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002b90c  0800911c  0002b90c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001664e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c0e  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  00039300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001408  00000000  00000000  0003a830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b84b  00000000  00000000  0003bc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fedd  00000000  00000000  00067483  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00111ae0  00000000  00000000  00077360  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00188e40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d88  00000000  00000000  00188ebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08009018 	.word	0x08009018

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08009018 	.word	0x08009018

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 fcdd 	bl	8001fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f828 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fc26 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000630:	f000 fc0c 	bl	8000e4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000634:	f000 fbac 	bl	8000d90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000638:	f000 fbda 	bl	8000df0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800063c:	f000 f908 	bl	8000850 <MX_SPI1_Init>
  MX_TIM8_Init();
 8000640:	f000 fada 	bl	8000bf8 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000644:	f000 f93e 	bl	80008c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000648:	f000 f9fc 	bl	8000a44 <MX_TIM2_Init>
  MX_ADC1_Init();
 800064c:	f000 f8ae 	bl	80007ac <MX_ADC1_Init>
  MX_TIM3_Init();
 8000650:	f000 fa4c 	bl	8000aec <MX_TIM3_Init>
  MX_TIM6_Init();
 8000654:	f000 fa9a 	bl	8000b8c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	// Start timers
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8000658:	2203      	movs	r2, #3
 800065a:	4905      	ldr	r1, [pc, #20]	; (8000670 <main+0x50>)
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <main+0x54>)
 800065e:	f006 feeb 	bl	8007438 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (state.preparedToRunPolarizationPhase) {
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <main+0x58>)
 8000664:	79db      	ldrb	r3, [r3, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0fb      	beq.n	8000662 <main+0x42>
			chooseActionByState();
 800066a:	f000 ff1b 	bl	80014a4 <chooseActionByState>
		if (state.preparedToRunPolarizationPhase) {
 800066e:	e7f8      	b.n	8000662 <main+0x42>
 8000670:	20000578 	.word	0x20000578
 8000674:	200000f4 	.word	0x200000f4
 8000678:	20015e44 	.word	0x20015e44

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0b8      	sub	sp, #224	; 0xe0
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f008 f8b6 	bl	80087fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2290      	movs	r2, #144	; 0x90
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f008 f8a7 	bl	80087fc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006ae:	f003 f993 	bl	80039d8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <SystemClock_Config+0x124>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <SystemClock_Config+0x124>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <SystemClock_Config+0x124>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ca:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <SystemClock_Config+0x128>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a35      	ldr	r2, [pc, #212]	; (80007a4 <SystemClock_Config+0x128>)
 80006d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <SystemClock_Config+0x128>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fe:	2304      	movs	r3, #4
 8000700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000704:	23d8      	movs	r3, #216	; 0xd8
 8000706:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000710:	2309      	movs	r3, #9
 8000712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800071a:	4618      	mov	r0, r3
 800071c:	f003 f9bc 	bl	8003a98 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000726:	f001 f8a5 	bl	8001874 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800072a:	f003 f965 	bl	80039f8 <HAL_PWREx_EnableOverDrive>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000734:	f001 f89e 	bl	8001874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800075a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800075e:	2107      	movs	r1, #7
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fc47 	bl	8003ff4 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800076c:	f001 f882 	bl	8001874 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART3
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <SystemClock_Config+0x12c>)
 8000772:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000774:	2300      	movs	r3, #0
 8000776:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800077e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000782:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fe2b 	bl	80043e4 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000794:	f001 f86e 	bl	8001874 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	37e0      	adds	r7, #224	; 0xe0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000
 80007a8:	00200110 	.word	0x00200110

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_ADC1_Init+0xa0>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007f0:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_ADC1_Init+0x9c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0x9c>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000812:	f001 fc65 	bl	80020e0 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800081c:	f001 f82a 	bl	8001874 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000828:	2301      	movs	r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC1_Init+0x9c>)
 8000832:	f001 fde5 	bl	8002400 <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800083c:	f001 f81a 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20015e50 	.word	0x20015e50
 800084c:	40012000 	.word	0x40012000

08000850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000856:	4a1a      	ldr	r2, [pc, #104]	; (80008c0 <MX_SPI1_Init+0x70>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_SPI1_Init+0x6c>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI1_Init+0x6c>)
 800086a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800086e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI1_Init+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI1_Init+0x6c>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI1_Init+0x6c>)
 8000896:	2207      	movs	r2, #7
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_SPI1_Init+0x6c>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI1_Init+0x6c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_SPI1_Init+0x6c>)
 80008a8:	f004 f9c2 	bl	8004c30 <HAL_SPI_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80008b2:	f000 ffdf 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2002b800 	.word	0x2002b800
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09a      	sub	sp, #104	; 0x68
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	222c      	movs	r2, #44	; 0x2c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f007 ff7c 	bl	80087fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000904:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000906:	4a4e      	ldr	r2, [pc, #312]	; (8000a40 <MX_TIM1_Init+0x17c>)
 8000908:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800090a:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <MX_TIM1_Init+0x178>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 8000916:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000918:	f241 3221 	movw	r2, #4897	; 0x1321
 800091c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000924:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <MX_TIM1_Init+0x178>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000930:	4842      	ldr	r0, [pc, #264]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000932:	f004 ff1c 	bl	800576e <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800093c:	f000 ff9a 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000946:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800094a:	4619      	mov	r1, r3
 800094c:	483b      	ldr	r0, [pc, #236]	; (8000a3c <MX_TIM1_Init+0x178>)
 800094e:	f005 fc9b 	bl	8006288 <HAL_TIM_ConfigClockSource>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000958:	f000 ff8c 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800095c:	4837      	ldr	r0, [pc, #220]	; (8000a3c <MX_TIM1_Init+0x178>)
 800095e:	f004 ff86 	bl	800586e <HAL_TIM_PWM_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000968:	f000 ff84 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800096c:	2320      	movs	r3, #32
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800097c:	4619      	mov	r1, r3
 800097e:	482f      	ldr	r0, [pc, #188]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000980:	f006 fb50 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800098a:	f000 ff73 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800098e:	2370      	movs	r3, #112	; 0x70
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 8000992:	f240 336a 	movw	r3, #874	; 0x36a
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000998:	2302      	movs	r3, #2
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80009a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4821      	ldr	r0, [pc, #132]	; (8000a3c <MX_TIM1_Init+0x178>)
 80009b8:	f005 fb4e 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80009c2:	f000 ff57 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c6:	2360      	movs	r3, #96	; 0x60
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 80009ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d4:	2204      	movs	r2, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4818      	ldr	r0, [pc, #96]	; (8000a3c <MX_TIM1_Init+0x178>)
 80009da:	f005 fb3d 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80009e4:	f000 ff46 	bl	8001874 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000a1e:	f006 fb8f 	bl	8007140 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000a28:	f000 ff24 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_TIM1_Init+0x178>)
 8000a2e:	f001 f8f3 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 8000a32:	bf00      	nop
 8000a34:	3768      	adds	r7, #104	; 0x68
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2002b7c0 	.word	0x2002b7c0
 8000a40:	40010000 	.word	0x40010000

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a8a:	4817      	ldr	r0, [pc, #92]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a8c:	f005 f848 	bl	8005b20 <HAL_TIM_IC_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a96:	f000 feed 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000aaa:	f006 fabb 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ab4:	f000 fede 	bl	8001874 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000abc:	2301      	movs	r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000ad0:	f005 fa25 	bl	8005f1e <HAL_TIM_IC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ada:	f000 fecb 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2002b864 	.word	0x2002b864

08000aec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b0c:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <MX_TIM3_Init+0x9c>)
 8000b0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50000;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000b16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 43200-1;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b20:	f64a 02bf 	movw	r2, #43199	; 0xa8bf
 8000b24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b34:	f004 fe1b 	bl	800576e <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000b3e:	f000 fe99 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b50:	f005 fb9a 	bl	8006288 <HAL_TIM_ConfigClockSource>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b5a:	f000 fe8b 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_TIM3_Init+0x98>)
 8000b6c:	f006 fa5a 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b76:	f000 fe7d 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3720      	adds	r7, #32
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20015e04 	.word	0x20015e04
 8000b88:	40000400 	.word	0x40000400

08000b8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <MX_TIM6_Init+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4898-1;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000bb0:	f241 3221 	movw	r2, #4897	; 0x1321
 8000bb4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000bbe:	f004 fdd6 	bl	800576e <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bc8:	f000 fe54 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_TIM6_Init+0x64>)
 8000bda:	f006 fa23 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000be4:	f000 fe46 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2002b780 	.word	0x2002b780
 8000bf4:	40001000 	.word	0x40001000

08000bf8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09e      	sub	sp, #120	; 0x78
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
 8000c3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	222c      	movs	r2, #44	; 0x2c
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f007 fdda 	bl	80087fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c48:	4b4f      	ldr	r3, [pc, #316]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c4a:	4a50      	ldr	r2, [pc, #320]	; (8000d8c <MX_TIM8_Init+0x194>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000c5a:	4b4b      	ldr	r3, [pc, #300]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c5c:	226b      	movs	r2, #107	; 0x6b
 8000c5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8000c66:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c68:	2218      	movs	r2, #24
 8000c6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b46      	ldr	r3, [pc, #280]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c72:	4845      	ldr	r0, [pc, #276]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c74:	f004 fd7b 	bl	800576e <HAL_TIM_Base_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000c7e:	f000 fdf9 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c86:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	483e      	ldr	r0, [pc, #248]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000c90:	f005 fafa 	bl	8006288 <HAL_TIM_ConfigClockSource>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000c9a:	f000 fdeb 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c9e:	483a      	ldr	r0, [pc, #232]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000ca0:	f004 fde5 	bl	800586e <HAL_TIM_PWM_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000caa:	f000 fde3 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4835      	ldr	r0, [pc, #212]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000cb2:	f004 ffcf 	bl	8005c54 <HAL_TIM_OnePulse_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000cbc:	f000 fdda 	bl	8001874 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ccc:	4619      	mov	r1, r3
 8000cce:	482e      	ldr	r0, [pc, #184]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000cd0:	f005 fb94 	bl	80063fc <HAL_TIM_SlaveConfigSynchro>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000cda:	f000 fdcb 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000cea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4825      	ldr	r0, [pc, #148]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000cf2:	f006 f997 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000cfc:	f000 fdba 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d00:	2370      	movs	r3, #112	; 0x70
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 8000d04:	2336      	movs	r3, #54	; 0x36
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000d26:	f005 f997 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8000d30:	f000 fda0 	bl	8001874 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000d6a:	f006 f9e9 	bl	8007140 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8000d74:	f000 fd7e 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <MX_TIM8_Init+0x190>)
 8000d7a:	f000 ff4d 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3778      	adds	r7, #120	; 0x78
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000b4 	.word	0x200000b4
 8000d8c:	40010400 	.word	0x40010400

08000d90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <MX_USART3_UART_Init+0x58>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <MX_USART3_UART_Init+0x5c>)
 8000d9e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000db4:	220c      	movs	r2, #12
 8000db6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_USART3_UART_Init+0x54>)
 8000dd2:	f006 fa51 	bl	8007278 <HAL_UART_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8000ddc:	f000 fd4a 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200000f4 	.word	0x200000f4
 8000de8:	40004800 	.word	0x40004800
 8000dec:	001e8480 	.word	0x001e8480

08000df0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfe:	2206      	movs	r2, #6
 8000e00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e10:	2202      	movs	r2, #2
 8000e12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e34:	f002 fc87 	bl	8003746 <HAL_PCD_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e3e:	f000 fd19 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000174 	.word	0x20000174

08000e4c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000e50:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e54:	f7ff fbcc 	bl	80005f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2038      	movs	r0, #56	; 0x38
 8000e5e:	f001 fe70 	bl	8002b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e62:	2038      	movs	r0, #56	; 0x38
 8000e64:	f001 fe89 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 1, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	203c      	movs	r0, #60	; 0x3c
 8000e6e:	f001 fe68 	bl	8002b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000e72:	203c      	movs	r0, #60	; 0x3c
 8000e74:	f001 fe81 	bl	8002b7a <HAL_NVIC_EnableIRQ>

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a6e      	ldr	r2, [pc, #440]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b6c      	ldr	r3, [pc, #432]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	4b69      	ldr	r3, [pc, #420]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a68      	ldr	r2, [pc, #416]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b66      	ldr	r3, [pc, #408]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b63      	ldr	r3, [pc, #396]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a62      	ldr	r2, [pc, #392]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b60      	ldr	r3, [pc, #384]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a5c      	ldr	r2, [pc, #368]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef2:	4b57      	ldr	r3, [pc, #348]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a56      	ldr	r2, [pc, #344]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000ef8:	f043 0310 	orr.w	r3, r3, #16
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b54      	ldr	r3, [pc, #336]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	4b51      	ldr	r3, [pc, #324]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a50      	ldr	r2, [pc, #320]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b48      	ldr	r3, [pc, #288]	; (8001050 <MX_GPIO_Init+0x1d4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000f40:	4844      	ldr	r0, [pc, #272]	; (8001054 <MX_GPIO_Init+0x1d8>)
 8000f42:	f002 fbe7 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2140      	movs	r1, #64	; 0x40
 8000f4a:	4843      	ldr	r0, [pc, #268]	; (8001058 <MX_GPIO_Init+0x1dc>)
 8000f4c:	f002 fbe2 	bl	8003714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Switches_driver_enable_Pin|S1_Pin|S2_Pin|S3_Pin 
 8000f50:	2200      	movs	r2, #0
 8000f52:	217f      	movs	r1, #127	; 0x7f
 8000f54:	4841      	ldr	r0, [pc, #260]	; (800105c <MX_GPIO_Init+0x1e0>)
 8000f56:	f002 fbdd 	bl	8003714 <HAL_GPIO_WritePin>
                          |S4_Pin|S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f60:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <MX_GPIO_Init+0x1e4>)
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	483d      	ldr	r0, [pc, #244]	; (8001064 <MX_GPIO_Init+0x1e8>)
 8000f70:	f002 fa26 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f74:	2332      	movs	r3, #50	; 0x32
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f84:	230b      	movs	r3, #11
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4835      	ldr	r0, [pc, #212]	; (8001064 <MX_GPIO_Init+0x1e8>)
 8000f90:	f002 fa16 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f94:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4829      	ldr	r0, [pc, #164]	; (8001054 <MX_GPIO_Init+0x1d8>)
 8000fae:	f002 fa07 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fc4:	230b      	movs	r3, #11
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4821      	ldr	r0, [pc, #132]	; (8001054 <MX_GPIO_Init+0x1d8>)
 8000fd0:	f002 f9f6 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <MX_GPIO_Init+0x1dc>)
 8000fec:	f002 f9e8 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4815      	ldr	r0, [pc, #84]	; (8001058 <MX_GPIO_Init+0x1dc>)
 8001004:	f002 f9dc 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switches_driver_enable_Pin S1_Pin S2_Pin S3_Pin 
                           S4_Pin S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = Switches_driver_enable_Pin|S1_Pin|S2_Pin|S3_Pin 
 8001008:	237f      	movs	r3, #127	; 0x7f
 800100a:	61fb      	str	r3, [r7, #28]
                          |S4_Pin|S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	480f      	ldr	r0, [pc, #60]	; (800105c <MX_GPIO_Init+0x1e0>)
 8001020:	f002 f9ce 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001024:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001036:	230b      	movs	r3, #11
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_GPIO_Init+0x1dc>)
 8001042:	f002 f9bd 	bl	80033c0 <HAL_GPIO_Init>

}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	; 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400
 8001058:	40021800 	.word	0x40021800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	10110000 	.word	0x10110000
 8001064:	40020800 	.word	0x40020800

08001068 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	//stop the ADC when in interrupt
	HAL_ADC_Stop_DMA(&hadc1);
 8001070:	481f      	ldr	r0, [pc, #124]	; (80010f0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001072:	f001 f967 	bl	8002344 <HAL_ADC_Stop_DMA>

	filledBuffers++; //default value is 0
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001080:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d107      	bne.n	800109a <HAL_ADC_ConvCpltCallback+0x32>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx2.uint16,
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_ADC_ConvCpltCallback+0x90>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	491a      	ldr	r1, [pc, #104]	; (80010fc <HAL_ADC_ConvCpltCallback+0x94>)
 8001092:	4817      	ldr	r0, [pc, #92]	; (80010f0 <HAL_ADC_ConvCpltCallback+0x88>)
 8001094:	f001 f868 	bl	8002168 <HAL_ADC_Start_DMA>
					samplesPerPeriod);
		}

	}

}
 8001098:	e026      	b.n	80010e8 <HAL_ADC_ConvCpltCallback+0x80>
	else if (filledBuffers == 2) {
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_ADC_ConvCpltCallback+0x8c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d122      	bne.n	80010e8 <HAL_ADC_ConvCpltCallback+0x80>
		switchingCircuitIdle();
 80010a2:	f000 fbb9 	bl	8001818 <switchingCircuitIdle>
		filledBuffers = 0;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_ADC_ConvCpltCallback+0x8c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 80010ac:	f000 f932 	bl	8001314 <sendDataOverUART>
		state.remainingMeasurements--;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_ADC_ConvCpltCallback+0x98>)
 80010b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_ADC_ConvCpltCallback+0x98>)
 80010c0:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_ADC_ConvCpltCallback+0x98>)
 80010c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <HAL_ADC_ConvCpltCallback+0x72>
			state.activeMeasureTechnique = 0;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_ADC_ConvCpltCallback+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim6);
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <HAL_ADC_ConvCpltCallback+0x9c>)
 80010d4:	f004 fba0 	bl	8005818 <HAL_TIM_Base_Stop_IT>
}
 80010d8:	e006      	b.n	80010e8 <HAL_ADC_ConvCpltCallback+0x80>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_ADC_ConvCpltCallback+0x90>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4909      	ldr	r1, [pc, #36]	; (8001108 <HAL_ADC_ConvCpltCallback+0xa0>)
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <HAL_ADC_ConvCpltCallback+0x88>)
 80010e4:	f001 f840 	bl	8002168 <HAL_ADC_Start_DMA>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20015e50 	.word	0x20015e50
 80010f4:	20000090 	.word	0x20000090
 80010f8:	20000000 	.word	0x20000000
 80010fc:	2000057c 	.word	0x2000057c
 8001100:	20015e44 	.word	0x20015e44
 8001104:	2002b780 	.word	0x2002b780
 8001108:	20015e98 	.word	0x20015e98

0800110c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0f      	ldr	r2, [pc, #60]	; (8001158 <HAL_UART_RxCpltCallback+0x4c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d117      	bne.n	800114e <HAL_UART_RxCpltCallback+0x42>
		state.measureTechniqueUpdated = 1;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_UART_RxCpltCallback+0x50>)
 8001120:	2201      	movs	r2, #1
 8001122:	719a      	strb	r2, [r3, #6]
		prepareForNextMeasurements(buffer_uart_rx);
 8001124:	480e      	ldr	r0, [pc, #56]	; (8001160 <HAL_UART_RxCpltCallback+0x54>)
 8001126:	f000 f81f 	bl	8001168 <prepareForNextMeasurements>
		char msg_buffer[18];
		//sprintf(msg_buffer, "Mode %u selected\n\r", state.setMeasureTechnique);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffer, strlen(msg_buffer),
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f886 	bl	8000240 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	b29a      	uxth	r2, r3
 8001138:	f107 010c 	add.w	r1, r7, #12
 800113c:	230a      	movs	r3, #10
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <HAL_UART_RxCpltCallback+0x58>)
 8001140:	f006 f8e8 	bl	8007314 <HAL_UART_Transmit>
				10);
		//wait for next incomming data
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8001144:	2203      	movs	r2, #3
 8001146:	4906      	ldr	r1, [pc, #24]	; (8001160 <HAL_UART_RxCpltCallback+0x54>)
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <HAL_UART_RxCpltCallback+0x58>)
 800114a:	f006 f975 	bl	8007438 <HAL_UART_Receive_IT>
	}
}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40004800 	.word	0x40004800
 800115c:	20015e44 	.word	0x20015e44
 8001160:	20000578 	.word	0x20000578
 8001164:	200000f4 	.word	0x200000f4

08001168 <prepareForNextMeasurements>:

prepareForNextMeasurements(char *receivedData) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

	//set measurement method
	switch (receivedData[0]) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	3b30      	subs	r3, #48	; 0x30
 8001176:	2b03      	cmp	r3, #3
 8001178:	d81a      	bhi.n	80011b0 <prepareForNextMeasurements+0x48>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <prepareForNextMeasurements+0x18>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	08001191 	.word	0x08001191
 8001184:	08001199 	.word	0x08001199
 8001188:	080011a1 	.word	0x080011a1
 800118c:	080011a9 	.word	0x080011a9
	case '0':
		state.setMeasureTechnique = 0;
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
		break;
 8001196:	e00f      	b.n	80011b8 <prepareForNextMeasurements+0x50>
	case '1':
		state.setMeasureTechnique = 1;
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <prepareForNextMeasurements+0xfc>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
		break;
 800119e:	e00b      	b.n	80011b8 <prepareForNextMeasurements+0x50>
	case '2':
		state.setMeasureTechnique = 2;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <prepareForNextMeasurements+0xfc>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	701a      	strb	r2, [r3, #0]
		break;
 80011a6:	e007      	b.n	80011b8 <prepareForNextMeasurements+0x50>
	case '3':
		state.setMeasureTechnique = 3;
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <prepareForNextMeasurements+0xfc>)
 80011aa:	2203      	movs	r2, #3
 80011ac:	701a      	strb	r2, [r3, #0]
		break;
 80011ae:	e003      	b.n	80011b8 <prepareForNextMeasurements+0x50>
	default:
		state.setMeasureTechnique = 0;
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <prepareForNextMeasurements+0xfc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
		break;
 80011b6:	bf00      	nop
	}

	//set number of measurements
	switch (receivedData[1]) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3b30      	subs	r3, #48	; 0x30
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d840      	bhi.n	8001246 <prepareForNextMeasurements+0xde>
 80011c4:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <prepareForNextMeasurements+0x64>)
 80011c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	080011f5 	.word	0x080011f5
 80011d0:	080011ff 	.word	0x080011ff
 80011d4:	08001207 	.word	0x08001207
 80011d8:	0800120f 	.word	0x0800120f
 80011dc:	08001217 	.word	0x08001217
 80011e0:	0800121f 	.word	0x0800121f
 80011e4:	08001227 	.word	0x08001227
 80011e8:	0800122f 	.word	0x0800122f
 80011ec:	08001237 	.word	0x08001237
 80011f0:	0800123f 	.word	0x0800123f
	case '0':
		state.setMeasurements = -1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <prepareForNextMeasurements+0xfc>)
 80011f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fa:	809a      	strh	r2, [r3, #4]
		break;
 80011fc:	e027      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '1':
		state.setMeasurements = 1;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001200:	2201      	movs	r2, #1
 8001202:	809a      	strh	r2, [r3, #4]
		break;
 8001204:	e023      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '2':
		state.setMeasurements = 2;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001208:	2202      	movs	r2, #2
 800120a:	809a      	strh	r2, [r3, #4]
		break;
 800120c:	e01f      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '3':
		state.setMeasurements = 3;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001210:	2203      	movs	r2, #3
 8001212:	809a      	strh	r2, [r3, #4]
		break;
 8001214:	e01b      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '4':
		state.setMeasurements = 4;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001218:	2204      	movs	r2, #4
 800121a:	809a      	strh	r2, [r3, #4]
		break;
 800121c:	e017      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '5':
		state.setMeasurements = 5;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001220:	2205      	movs	r2, #5
 8001222:	809a      	strh	r2, [r3, #4]
		break;
 8001224:	e013      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '6':
		state.setMeasurements = 6;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001228:	2206      	movs	r2, #6
 800122a:	809a      	strh	r2, [r3, #4]
		break;
 800122c:	e00f      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '7':
		state.setMeasurements = 7;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001230:	2207      	movs	r2, #7
 8001232:	809a      	strh	r2, [r3, #4]
		break;
 8001234:	e00b      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '8':
		state.setMeasurements = 8;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001238:	2208      	movs	r2, #8
 800123a:	809a      	strh	r2, [r3, #4]
		break;
 800123c:	e007      	b.n	800124e <prepareForNextMeasurements+0xe6>
	case '9':
		state.setMeasurements = 9;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001240:	2209      	movs	r2, #9
 8001242:	809a      	strh	r2, [r3, #4]
		break;
 8001244:	e003      	b.n	800124e <prepareForNextMeasurements+0xe6>
	default:
		state.setMeasurements = 1;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001248:	2201      	movs	r2, #1
 800124a:	809a      	strh	r2, [r3, #4]
		break;
 800124c:	bf00      	nop
	}
	state.preparedToRunPolarizationPhase = 1;
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <prepareForNextMeasurements+0xfc>)
 8001250:	2201      	movs	r2, #1
 8001252:	71da      	strb	r2, [r3, #7]
}
 8001254:	bf00      	nop
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20015e44 	.word	0x20015e44

08001268 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	filledBuffers++;
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_SPI_RxCpltCallback+0x90>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_SPI_RxCpltCallback+0x90>)
 800127a:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_SPI_RxCpltCallback+0x90>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d108      	bne.n	8001296 <HAL_SPI_RxCpltCallback+0x2e>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2.uint8, samplesPerPeriod);
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_SPI_RxCpltCallback+0x94>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	491c      	ldr	r1, [pc, #112]	; (8001300 <HAL_SPI_RxCpltCallback+0x98>)
 800128e:	481d      	ldr	r0, [pc, #116]	; (8001304 <HAL_SPI_RxCpltCallback+0x9c>)
 8001290:	f003 fd60 	bl	8004d54 <HAL_SPI_Receive_DMA>
	 samplesPerPeriod++;
	 sprintf(msg_buffers, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);

	 }*/
}
 8001294:	e02b      	b.n	80012ee <HAL_SPI_RxCpltCallback+0x86>
	else if (filledBuffers == 2) {
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_SPI_RxCpltCallback+0x90>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d127      	bne.n	80012ee <HAL_SPI_RxCpltCallback+0x86>
		switchingCircuitIdle();
 800129e:	f000 fabb 	bl	8001818 <switchingCircuitIdle>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80012a2:	2100      	movs	r1, #0
 80012a4:	4818      	ldr	r0, [pc, #96]	; (8001308 <HAL_SPI_RxCpltCallback+0xa0>)
 80012a6:	f004 fba1 	bl	80059ec <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 80012aa:	2104      	movs	r1, #4
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <HAL_SPI_RxCpltCallback+0xa0>)
 80012ae:	f004 fb9d 	bl	80059ec <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80012b2:	2100      	movs	r1, #0
 80012b4:	4815      	ldr	r0, [pc, #84]	; (800130c <HAL_SPI_RxCpltCallback+0xa4>)
 80012b6:	f004 fb99 	bl	80059ec <HAL_TIM_PWM_Stop_IT>
		filledBuffers = 0;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_SPI_RxCpltCallback+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 80012c0:	f000 f828 	bl	8001314 <sendDataOverUART>
		state.remainingMeasurements--;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_SPI_RxCpltCallback+0xa8>)
 80012c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_SPI_RxCpltCallback+0xa8>)
 80012d4:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_SPI_RxCpltCallback+0xa8>)
 80012d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d103      	bne.n	80012e8 <HAL_SPI_RxCpltCallback+0x80>
			state.activeMeasureTechnique = 0;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_SPI_RxCpltCallback+0xa8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	705a      	strb	r2, [r3, #1]
}
 80012e6:	e002      	b.n	80012ee <HAL_SPI_RxCpltCallback+0x86>
			state.preparedToRunPolarizationPhase = 1;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_SPI_RxCpltCallback+0xa8>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	71da      	strb	r2, [r3, #7]
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000090 	.word	0x20000090
 80012fc:	20000000 	.word	0x20000000
 8001300:	2000057c 	.word	0x2000057c
 8001304:	2002b800 	.word	0x2002b800
 8001308:	2002b7c0 	.word	0x2002b7c0
 800130c:	200000b4 	.word	0x200000b4
 8001310:	20015e44 	.word	0x20015e44

08001314 <sendDataOverUART>:

void sendDataOverUART() {
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	847b      	strh	r3, [r7, #34]	; 0x22
	int i = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
	if (state.activeMeasureTechnique == 1
 8001322:	4b4a      	ldr	r3, [pc, #296]	; (800144c <sendDataOverUART+0x138>)
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d003      	beq.n	8001332 <sendDataOverUART+0x1e>
			|| state.activeMeasureTechnique == 2) {
 800132a:	4b48      	ldr	r3, [pc, #288]	; (800144c <sendDataOverUART+0x138>)
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d16e      	bne.n	8001410 <sendDataOverUART+0xfc>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e025      	b.n	8001384 <sendDataOverUART+0x70>
			adc = (uint16_t) (buffer_rx1.uint8[i])
 8001338:	4a45      	ldr	r2, [pc, #276]	; (8001450 <sendDataOverUART+0x13c>)
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx1.uint8[i + 1]);
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	4942      	ldr	r1, [pc, #264]	; (8001450 <sendDataOverUART+0x13c>)
 8001348:	5ccb      	ldrb	r3, [r1, r3]
 800134a:	b29b      	uxth	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx1.uint8[i])
 8001350:	4413      	add	r3, r2
 8001352:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 8001354:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001356:	463b      	mov	r3, r7
 8001358:	493e      	ldr	r1, [pc, #248]	; (8001454 <sendDataOverUART+0x140>)
 800135a:	4618      	mov	r0, r3
 800135c:	f007 fa56 	bl	800880c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001360:	463b      	mov	r3, r7
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff6c 	bl	8000240 <strlen>
 8001368:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800136a:	b29a      	uxth	r2, r3
 800136c:	4639      	mov	r1, r7
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	4839      	ldr	r0, [pc, #228]	; (8001458 <sendDataOverUART+0x144>)
 8001374:	f005 ffce 	bl	8007314 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	3301      	adds	r3, #1
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	3301      	adds	r3, #1
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
 8001384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <sendDataOverUART+0x148>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d3d4      	bcc.n	8001338 <sendDataOverUART+0x24>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	e025      	b.n	80013e0 <sendDataOverUART+0xcc>
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <sendDataOverUART+0x14c>)
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx2.uint8[i + 1]);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	3301      	adds	r3, #1
 80013a2:	492f      	ldr	r1, [pc, #188]	; (8001460 <sendDataOverUART+0x14c>)
 80013a4:	5ccb      	ldrb	r3, [r1, r3]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx2.uint8[i])
 80013ac:	4413      	add	r3, r2
 80013ae:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 80013b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80013b2:	463b      	mov	r3, r7
 80013b4:	4927      	ldr	r1, [pc, #156]	; (8001454 <sendDataOverUART+0x140>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fa28 	bl	800880c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 80013bc:	463b      	mov	r3, r7
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff3e 	bl	8000240 <strlen>
 80013c4:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4639      	mov	r1, r7
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	4822      	ldr	r0, [pc, #136]	; (8001458 <sendDataOverUART+0x144>)
 80013d0:	f005 ffa0 	bl	8007314 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	3301      	adds	r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3301      	adds	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
 80013e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <sendDataOverUART+0x148>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3d4      	bcc.n	8001394 <sendDataOverUART+0x80>
		}
		sprintf(msg_buffers, ";%hu\n", 50);
 80013ea:	463b      	mov	r3, r7
 80013ec:	2232      	movs	r2, #50	; 0x32
 80013ee:	491d      	ldr	r1, [pc, #116]	; (8001464 <sendDataOverUART+0x150>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fa0b 	bl	800880c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80013f6:	463b      	mov	r3, r7
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe ff21 	bl	8000240 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	b29a      	uxth	r2, r3
 8001402:	4639      	mov	r1, r7
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <sendDataOverUART+0x144>)
 800140a:	f005 ff83 	bl	8007314 <HAL_UART_Transmit>
		sprintf(msg_freq, "%d\n", frequency);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
		HAL_MAX_DELAY);
	}

}
 800140e:	e019      	b.n	8001444 <sendDataOverUART+0x130>
	} else if (state.activeMeasureTechnique == 3) {
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <sendDataOverUART+0x138>)
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d115      	bne.n	8001444 <sendDataOverUART+0x130>
		sprintf(msg_freq, "%d\n", frequency);
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <sendDataOverUART+0x154>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4912      	ldr	r1, [pc, #72]	; (800146c <sendDataOverUART+0x158>)
 8001422:	4618      	mov	r0, r3
 8001424:	f007 f9f2 	bl	800880c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe ff07 	bl	8000240 <strlen>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	f107 0110 	add.w	r1, r7, #16
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <sendDataOverUART+0x144>)
 8001440:	f005 ff68 	bl	8007314 <HAL_UART_Transmit>
}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20015e44 	.word	0x20015e44
 8001450:	20015e98 	.word	0x20015e98
 8001454:	08009030 	.word	0x08009030
 8001458:	200000f4 	.word	0x200000f4
 800145c:	20000000 	.word	0x20000000
 8001460:	2000057c 	.word	0x2000057c
 8001464:	08009038 	.word	0x08009038
 8001468:	200000a0 	.word	0x200000a0
 800146c:	08009040 	.word	0x08009040

08001470 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
		}
		state.index++;*/

	}

}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_TIM_IC_CaptureCallback>:
	LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_0);
	NVIC_SetPriority(DMA2_Stream0_IRQn, 0);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001494:	d102      	bne.n	800149c <HAL_TIM_IC_CaptureCallback+0x18>
		measureFrequencyWithTimer(htim);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f8b6 	bl	8001608 <measureFrequencyWithTimer>
	}
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <chooseActionByState>:
	state.remainingMeasurements = 0;
	state.preparedToRunPolarizationPhase = 0;
	state.index = 0;
}

void chooseActionByState() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	// if new measurement technique was set, update remaining measurements as well
	if (state.measureTechniqueUpdated) {
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <chooseActionByState+0x74>)
 80014aa:	799b      	ldrb	r3, [r3, #6]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <chooseActionByState+0x24>
		state.remainingMeasurements = state.setMeasurements;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <chooseActionByState+0x74>)
 80014b2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <chooseActionByState+0x74>)
 80014b8:	805a      	strh	r2, [r3, #2]
		state.activeMeasureTechnique = state.setMeasureTechnique;
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <chooseActionByState+0x74>)
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <chooseActionByState+0x74>)
 80014c0:	705a      	strb	r2, [r3, #1]
		state.measureTechniqueUpdated = 0;
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <chooseActionByState+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	719a      	strb	r2, [r3, #6]

	}
	switch (state.activeMeasureTechnique) {
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <chooseActionByState+0x74>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d820      	bhi.n	8001512 <chooseActionByState+0x6e>
 80014d0:	a201      	add	r2, pc, #4	; (adr r2, 80014d8 <chooseActionByState+0x34>)
 80014d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d6:	bf00      	nop
 80014d8:	080014e9 	.word	0x080014e9
 80014dc:	080014f5 	.word	0x080014f5
 80014e0:	080014ff 	.word	0x080014ff
 80014e4:	08001509 	.word	0x08001509

	case 0:
		// Idle state
		showOnLEDs(0, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f815 	bl	800151c <showOnLEDs>
		break;
 80014f2:	e00e      	b.n	8001512 <chooseActionByState+0x6e>
	case 1:
		// measure with external ADC
		runPolarizationSequence();
 80014f4:	f000 f8dc 	bl	80016b0 <runPolarizationSequence>
		measureWithExternalADC();
 80014f8:	f000 f832 	bl	8001560 <measureWithExternalADC>
		break;
 80014fc:	e009      	b.n	8001512 <chooseActionByState+0x6e>
	case 2:
		// measure with internal ADC
		runPolarizationSequence();
 80014fe:	f000 f8d7 	bl	80016b0 <runPolarizationSequence>
		measureWithInternalADC();
 8001502:	f000 f855 	bl	80015b0 <measureWithInternalADC>
		break;
 8001506:	e004      	b.n	8001512 <chooseActionByState+0x6e>
	case 3:
		// measure with comparator
		runPolarizationSequence();
 8001508:	f000 f8d2 	bl	80016b0 <runPolarizationSequence>
		measureWithComparator();
 800150c:	f000 f86c 	bl	80015e8 <measureWithComparator>
		break;
 8001510:	bf00      	nop

	}
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20015e44 	.word	0x20015e44

0800151c <showOnLEDs>:

void showOnLEDs(uint8_t L1, uint8_t L2, uint8_t L3) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
 8001526:	460b      	mov	r3, r1
 8001528:	71bb      	strb	r3, [r7, #6]
 800152a:	4613      	mov	r3, r2
 800152c:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, L1);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	461a      	mov	r2, r3
 8001532:	2101      	movs	r1, #1
 8001534:	4809      	ldr	r0, [pc, #36]	; (800155c <showOnLEDs+0x40>)
 8001536:	f002 f8ed 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, L2);
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	461a      	mov	r2, r3
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <showOnLEDs+0x40>)
 8001542:	f002 f8e7 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, L3);
 8001546:	797b      	ldrb	r3, [r7, #5]
 8001548:	461a      	mov	r2, r3
 800154a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <showOnLEDs+0x40>)
 8001550:	f002 f8e0 	bl	8003714 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40020400 	.word	0x40020400

08001560 <measureWithExternalADC>:

void measureWithExternalADC() {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	// visualise
	showOnLEDs(1, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff ffd7 	bl	800151c <showOnLEDs>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <measureWithExternalADC+0x3c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	490a      	ldr	r1, [pc, #40]	; (80015a0 <measureWithExternalADC+0x40>)
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <measureWithExternalADC+0x44>)
 800157a:	f003 fbeb 	bl	8004d54 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 800157e:	2100      	movs	r1, #0
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <measureWithExternalADC+0x48>)
 8001582:	f004 f9a9 	bl	80058d8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 8001586:	2104      	movs	r1, #4
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <measureWithExternalADC+0x48>)
 800158a:	f004 f9a5 	bl	80058d8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 800158e:	2100      	movs	r1, #0
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <measureWithExternalADC+0x4c>)
 8001592:	f004 f9a1 	bl	80058d8 <HAL_TIM_PWM_Start_IT>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000000 	.word	0x20000000
 80015a0:	20015e98 	.word	0x20015e98
 80015a4:	2002b800 	.word	0x2002b800
 80015a8:	2002b7c0 	.word	0x2002b7c0
 80015ac:	200000b4 	.word	0x200000b4

080015b0 <measureWithInternalADC>:

void measureWithInternalADC() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	// visualise
	showOnLEDs(0, 1, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2101      	movs	r1, #1
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ffaf 	bl	800151c <showOnLEDs>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16, samplesPerPeriod);
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <measureWithInternalADC+0x28>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4905      	ldr	r1, [pc, #20]	; (80015dc <measureWithInternalADC+0x2c>)
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <measureWithInternalADC+0x30>)
 80015c8:	f000 fdce 	bl	8002168 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <measureWithInternalADC+0x34>)
 80015ce:	f004 f8f9 	bl	80057c4 <HAL_TIM_Base_Start_IT>
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20015e98 	.word	0x20015e98
 80015e0:	20015e50 	.word	0x20015e50
 80015e4:	2002b780 	.word	0x2002b780

080015e8 <measureWithComparator>:

void measureWithComparator() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	// visualise
	showOnLEDs(0, 0, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2100      	movs	r1, #0
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff93 	bl	800151c <showOnLEDs>
	// run the timer
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80015f6:	2100      	movs	r1, #0
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <measureWithComparator+0x1c>)
 80015fa:	f004 fabd 	bl	8005b78 <HAL_TIM_IC_Start_IT>
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2002b864 	.word	0x2002b864

08001608 <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	if (firstCapturedSample == 0) {
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <measureFrequencyWithTimer+0x90>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <measureFrequencyWithTimer+0x26>
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f004 ff30 	bl	8006480 <HAL_TIM_ReadCapturedValue>
 8001620:	4602      	mov	r2, r0
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <measureFrequencyWithTimer+0x94>)
 8001624:	601a      	str	r2, [r3, #0]
		firstCapturedSample = 1;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <measureFrequencyWithTimer+0x90>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
		}
		else{
			state.preparedToRunPolarizationPhase = 1;
		}
	}
}
 800162c:	e02f      	b.n	800168e <measureFrequencyWithTimer+0x86>
	else if (firstCapturedSample) {
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <measureFrequencyWithTimer+0x90>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d02b      	beq.n	800168e <measureFrequencyWithTimer+0x86>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001636:	2100      	movs	r1, #0
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f004 ff21 	bl	8006480 <HAL_TIM_ReadCapturedValue>
 800163e:	4602      	mov	r2, r0
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <measureFrequencyWithTimer+0x98>)
 8001642:	601a      	str	r2, [r3, #0]
		difference = IC_Value2 - IC_Value1;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <measureFrequencyWithTimer+0x98>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <measureFrequencyWithTimer+0x94>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <measureFrequencyWithTimer+0x9c>)
 8001650:	6013      	str	r3, [r2, #0]
		frequency = /*HAL_RCC_GetHCLKFreq() /*/difference;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <measureFrequencyWithTimer+0x9c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <measureFrequencyWithTimer+0xa0>)
 8001658:	6013      	str	r3, [r2, #0]
		firstCapturedSample = 0;
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <measureFrequencyWithTimer+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001660:	f7ff fe58 	bl	8001314 <sendDataOverUART>
		state.remainingMeasurements--;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <measureFrequencyWithTimer+0xa4>)
 8001666:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	b21a      	sxth	r2, r3
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <measureFrequencyWithTimer+0xa4>)
 8001674:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <measureFrequencyWithTimer+0xa4>)
 8001678:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d103      	bne.n	8001688 <measureFrequencyWithTimer+0x80>
			state.activeMeasureTechnique = 0;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <measureFrequencyWithTimer+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	705a      	strb	r2, [r3, #1]
}
 8001686:	e002      	b.n	800168e <measureFrequencyWithTimer+0x86>
			state.preparedToRunPolarizationPhase = 1;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <measureFrequencyWithTimer+0xa4>)
 800168a:	2201      	movs	r2, #1
 800168c:	71da      	strb	r2, [r3, #7]
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000a4 	.word	0x200000a4
 800169c:	20000094 	.word	0x20000094
 80016a0:	20000098 	.word	0x20000098
 80016a4:	2000009c 	.word	0x2000009c
 80016a8:	200000a0 	.word	0x200000a0
 80016ac:	20015e44 	.word	0x20015e44

080016b0 <runPolarizationSequence>:

void runPolarizationSequence() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 80016b4:	4b56      	ldr	r3, [pc, #344]	; (8001810 <runPolarizationSequence+0x160>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	71da      	strb	r2, [r3, #7]

	// visualise
	showOnLEDs(1, 1, 1);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2101      	movs	r1, #1
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff ff2c 	bl	800151c <showOnLEDs>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2102      	movs	r1, #2
 80016c8:	4852      	ldr	r0, [pc, #328]	; (8001814 <runPolarizationSequence+0x164>)
 80016ca:	f002 f823 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2104      	movs	r1, #4
 80016d2:	4850      	ldr	r0, [pc, #320]	; (8001814 <runPolarizationSequence+0x164>)
 80016d4:	f002 f81e 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	2108      	movs	r1, #8
 80016dc:	484d      	ldr	r0, [pc, #308]	; (8001814 <runPolarizationSequence+0x164>)
 80016de:	f002 f819 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2110      	movs	r1, #16
 80016e6:	484b      	ldr	r0, [pc, #300]	; (8001814 <runPolarizationSequence+0x164>)
 80016e8:	f002 f814 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2120      	movs	r1, #32
 80016f0:	4848      	ldr	r0, [pc, #288]	; (8001814 <runPolarizationSequence+0x164>)
 80016f2:	f002 f80f 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2140      	movs	r1, #64	; 0x40
 80016fa:	4846      	ldr	r0, [pc, #280]	; (8001814 <runPolarizationSequence+0x164>)
 80016fc:	f002 f80a 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001700:	2005      	movs	r0, #5
 8001702:	f000 fccb 	bl	800209c <HAL_Delay>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	2102      	movs	r1, #2
 800170a:	4842      	ldr	r0, [pc, #264]	; (8001814 <runPolarizationSequence+0x164>)
 800170c:	f002 f802 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2104      	movs	r1, #4
 8001714:	483f      	ldr	r0, [pc, #252]	; (8001814 <runPolarizationSequence+0x164>)
 8001716:	f001 fffd 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800171a:	2201      	movs	r2, #1
 800171c:	2108      	movs	r1, #8
 800171e:	483d      	ldr	r0, [pc, #244]	; (8001814 <runPolarizationSequence+0x164>)
 8001720:	f001 fff8 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001724:	2201      	movs	r2, #1
 8001726:	2110      	movs	r1, #16
 8001728:	483a      	ldr	r0, [pc, #232]	; (8001814 <runPolarizationSequence+0x164>)
 800172a:	f001 fff3 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2120      	movs	r1, #32
 8001732:	4838      	ldr	r0, [pc, #224]	; (8001814 <runPolarizationSequence+0x164>)
 8001734:	f001 ffee 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	4835      	ldr	r0, [pc, #212]	; (8001814 <runPolarizationSequence+0x164>)
 800173e:	f001 ffe9 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001746:	f000 fca9 	bl	800209c <HAL_Delay>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2102      	movs	r1, #2
 800174e:	4831      	ldr	r0, [pc, #196]	; (8001814 <runPolarizationSequence+0x164>)
 8001750:	f001 ffe0 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2104      	movs	r1, #4
 8001758:	482e      	ldr	r0, [pc, #184]	; (8001814 <runPolarizationSequence+0x164>)
 800175a:	f001 ffdb 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800175e:	2201      	movs	r2, #1
 8001760:	2108      	movs	r1, #8
 8001762:	482c      	ldr	r0, [pc, #176]	; (8001814 <runPolarizationSequence+0x164>)
 8001764:	f001 ffd6 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2110      	movs	r1, #16
 800176c:	4829      	ldr	r0, [pc, #164]	; (8001814 <runPolarizationSequence+0x164>)
 800176e:	f001 ffd1 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2120      	movs	r1, #32
 8001776:	4827      	ldr	r0, [pc, #156]	; (8001814 <runPolarizationSequence+0x164>)
 8001778:	f001 ffcc 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	4824      	ldr	r0, [pc, #144]	; (8001814 <runPolarizationSequence+0x164>)
 8001782:	f001 ffc7 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001786:	200a      	movs	r0, #10
 8001788:	f000 fc88 	bl	800209c <HAL_Delay>

	//run sequnece T5 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 800178c:	2201      	movs	r2, #1
 800178e:	2102      	movs	r1, #2
 8001790:	4820      	ldr	r0, [pc, #128]	; (8001814 <runPolarizationSequence+0x164>)
 8001792:	f001 ffbf 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2104      	movs	r1, #4
 800179a:	481e      	ldr	r0, [pc, #120]	; (8001814 <runPolarizationSequence+0x164>)
 800179c:	f001 ffba 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2108      	movs	r1, #8
 80017a4:	481b      	ldr	r0, [pc, #108]	; (8001814 <runPolarizationSequence+0x164>)
 80017a6:	f001 ffb5 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80017aa:	2201      	movs	r2, #1
 80017ac:	2110      	movs	r1, #16
 80017ae:	4819      	ldr	r0, [pc, #100]	; (8001814 <runPolarizationSequence+0x164>)
 80017b0:	f001 ffb0 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2120      	movs	r1, #32
 80017b8:	4816      	ldr	r0, [pc, #88]	; (8001814 <runPolarizationSequence+0x164>)
 80017ba:	f001 ffab 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2140      	movs	r1, #64	; 0x40
 80017c2:	4814      	ldr	r0, [pc, #80]	; (8001814 <runPolarizationSequence+0x164>)
 80017c4:	f001 ffa6 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f000 fc67 	bl	800209c <HAL_Delay>

	//run sequnece T6 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2102      	movs	r1, #2
 80017d2:	4810      	ldr	r0, [pc, #64]	; (8001814 <runPolarizationSequence+0x164>)
 80017d4:	f001 ff9e 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 80017d8:	2201      	movs	r2, #1
 80017da:	2104      	movs	r1, #4
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <runPolarizationSequence+0x164>)
 80017de:	f001 ff99 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2108      	movs	r1, #8
 80017e6:	480b      	ldr	r0, [pc, #44]	; (8001814 <runPolarizationSequence+0x164>)
 80017e8:	f001 ff94 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2110      	movs	r1, #16
 80017f0:	4808      	ldr	r0, [pc, #32]	; (8001814 <runPolarizationSequence+0x164>)
 80017f2:	f001 ff8f 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2120      	movs	r1, #32
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <runPolarizationSequence+0x164>)
 80017fc:	f001 ff8a 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001800:	2201      	movs	r2, #1
 8001802:	2140      	movs	r1, #64	; 0x40
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <runPolarizationSequence+0x164>)
 8001806:	f001 ff85 	bl	8003714 <HAL_GPIO_WritePin>

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20015e44 	.word	0x20015e44
 8001814:	40020c00 	.word	0x40020c00

08001818 <switchingCircuitIdle>:

void switchingCircuitIdle() {
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	// visualise
	showOnLEDs(0, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fe7b 	bl	800151c <showOnLEDs>
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 8001826:	2200      	movs	r2, #0
 8001828:	2101      	movs	r1, #1
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <switchingCircuitIdle+0x58>)
 800182c:	f001 ff72 	bl	8003714 <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2102      	movs	r1, #2
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <switchingCircuitIdle+0x58>)
 8001836:	f001 ff6d 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2104      	movs	r1, #4
 800183e:	480c      	ldr	r0, [pc, #48]	; (8001870 <switchingCircuitIdle+0x58>)
 8001840:	f001 ff68 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001844:	2201      	movs	r2, #1
 8001846:	2108      	movs	r1, #8
 8001848:	4809      	ldr	r0, [pc, #36]	; (8001870 <switchingCircuitIdle+0x58>)
 800184a:	f001 ff63 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2110      	movs	r1, #16
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <switchingCircuitIdle+0x58>)
 8001854:	f001 ff5e 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2120      	movs	r1, #32
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <switchingCircuitIdle+0x58>)
 800185e:	f001 ff59 	bl	8003714 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	4802      	ldr	r0, [pc, #8]	; (8001870 <switchingCircuitIdle+0x58>)
 8001868:	f001 ff54 	bl	8003714 <HAL_GPIO_WritePin>
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020c00 	.word	0x40020c00

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_MspInit+0x44>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_MspInit+0x44>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_MspInit+0x44>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_MspInit+0x44>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <HAL_MspInit+0x44>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_MspInit+0x44>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800

080018cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2c      	ldr	r2, [pc, #176]	; (800199c <HAL_ADC_MspInit+0xd0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d152      	bne.n	8001994 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	481c      	ldr	r0, [pc, #112]	; (80019a4 <HAL_ADC_MspInit+0xd8>)
 8001932:	f001 fd45 	bl	80033c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_ADC_MspInit+0xe0>)
 800193a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 8001950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001954:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 8001958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800195c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 8001960:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001964:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 8001968:	2200      	movs	r2, #0
 800196a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 800196e:	2200      	movs	r2, #0
 8001970:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 8001974:	2200      	movs	r2, #0
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 800197a:	f001 f919 	bl	8002bb0 <HAL_DMA_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001984:	f7ff ff76 	bl	8001874 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 800198c:	639a      	str	r2, [r3, #56]	; 0x38
 800198e:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_ADC_MspInit+0xdc>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40012000 	.word	0x40012000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020000 	.word	0x40020000
 80019a8:	2002b720 	.word	0x2002b720
 80019ac:	40026470 	.word	0x40026470

080019b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <HAL_SPI_MspInit+0xdc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d157      	bne.n	8001a82 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_SPI_MspInit+0xe0>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <HAL_SPI_MspInit+0xe0>)
 80019d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <HAL_SPI_MspInit+0xe0>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <HAL_SPI_MspInit+0xe0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <HAL_SPI_MspInit+0xe0>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_SPI_MspInit+0xe0>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a02:	23f0      	movs	r3, #240	; 0xf0
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a12:	2305      	movs	r3, #5
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481d      	ldr	r0, [pc, #116]	; (8001a94 <HAL_SPI_MspInit+0xe4>)
 8001a1e:	f001 fccf 	bl	80033c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_SPI_MspInit+0xec>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a2a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a2e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a4a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a52:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001a66:	480c      	ldr	r0, [pc, #48]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a68:	f001 f8a2 	bl	8002bb0 <HAL_DMA_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8001a72:	f7ff feff 	bl	8001874 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_SPI_MspInit+0xe8>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40013000 	.word	0x40013000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	2002b8a4 	.word	0x2002b8a4
 8001a9c:	40026410 	.word	0x40026410

08001aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <HAL_TIM_Base_MspInit+0xd0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d114      	bne.n	8001adc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab2:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2101      	movs	r1, #1
 8001ace:	201b      	movs	r0, #27
 8001ad0:	f001 f837 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ad4:	201b      	movs	r0, #27
 8001ad6:	f001 f850 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ada:	e044      	b.n	8001b66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <HAL_TIM_Base_MspInit+0xd8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d114      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2100      	movs	r1, #0
 8001b02:	201d      	movs	r0, #29
 8001b04:	f001 f81d 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b08:	201d      	movs	r0, #29
 8001b0a:	f001 f836 	bl	8002b7a <HAL_NVIC_EnableIRQ>
}
 8001b0e:	e02a      	b.n	8001b66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_TIM_Base_MspInit+0xdc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10c      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001b20:	f043 0310 	orr.w	r3, r3, #16
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
}
 8001b32:	e018      	b.n	8001b66 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM8)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a11      	ldr	r2, [pc, #68]	; (8001b80 <HAL_TIM_Base_MspInit+0xe0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d113      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_TIM_Base_MspInit+0xd4>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2101      	movs	r1, #1
 8001b5a:	202e      	movs	r0, #46	; 0x2e
 8001b5c:	f000 fff1 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001b60:	202e      	movs	r0, #46	; 0x2e
 8001b62:	f001 f80a 	bl	8002b7a <HAL_NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40001000 	.word	0x40001000
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d130      	bne.n	8001c08 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_TIM_IC_MspInit+0x8c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_TIM_IC_MspInit+0x8c>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_TIM_IC_MspInit+0x8c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_TIM_IC_MspInit+0x8c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a13      	ldr	r2, [pc, #76]	; (8001c10 <HAL_TIM_IC_MspInit+0x8c>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_TIM_IC_MspInit+0x8c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8001bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001be8:	2301      	movs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4808      	ldr	r0, [pc, #32]	; (8001c14 <HAL_TIM_IC_MspInit+0x90>)
 8001bf4:	f001 fbe4 	bl	80033c0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	201c      	movs	r0, #28
 8001bfe:	f000 ffa0 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c02:	201c      	movs	r0, #28
 8001c04:	f000 ffb9 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a22      	ldr	r2, [pc, #136]	; (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11d      	bne.n	8001c76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c40:	f043 0310 	orr.w	r3, r3, #16
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8001c52:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4816      	ldr	r0, [pc, #88]	; (8001cc8 <HAL_TIM_MspPostInit+0xb0>)
 8001c70:	f001 fba6 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c74:	e020      	b.n	8001cb8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <HAL_TIM_MspPostInit+0xb4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8001c98:	2340      	movs	r3, #64	; 0x40
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <HAL_TIM_MspPostInit+0xb8>)
 8001cb4:	f001 fb84 	bl	80033c0 <HAL_GPIO_Init>
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010400 	.word	0x40010400
 8001cd0:	40020800 	.word	0x40020800

08001cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_UART_MspInit+0x8c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d130      	bne.n	8001d58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_UART_MspInit+0x90>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a1a      	ldr	r2, [pc, #104]	; (8001d64 <HAL_UART_MspInit+0x90>)
 8001cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_UART_MspInit+0x90>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_UART_MspInit+0x90>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <HAL_UART_MspInit+0x90>)
 8001d14:	f043 0308 	orr.w	r3, r3, #8
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_UART_MspInit+0x90>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d38:	2307      	movs	r3, #7
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <HAL_UART_MspInit+0x94>)
 8001d44:	f001 fb3c 	bl	80033c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2027      	movs	r0, #39	; 0x27
 8001d4e:	f000 fef8 	bl	8002b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d52:	2027      	movs	r0, #39	; 0x27
 8001d54:	f000 ff11 	bl	8002b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40004800 	.word	0x40004800
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020c00 	.word	0x40020c00

08001d6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d8c:	d141      	bne.n	8001e12 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001da6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001db8:	230a      	movs	r3, #10
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4817      	ldr	r0, [pc, #92]	; (8001e20 <HAL_PCD_MspInit+0xb4>)
 8001dc4:	f001 fafc 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4810      	ldr	r0, [pc, #64]	; (8001e20 <HAL_PCD_MspInit+0xb4>)
 8001dde:	f001 faef 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de6:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6353      	str	r3, [r2, #52]	; 0x34
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020000 	.word	0x40020000

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <MemManage_Handler+0x4>

08001e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler+0x4>

08001e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <UsageFault_Handler+0x4>

08001e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e78:	f000 f8f0 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <TIM1_CC_IRQHandler+0x10>)
 8001e86:	f003 ff2b 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2002b7c0 	.word	0x2002b7c0

08001e94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <TIM2_IRQHandler+0x10>)
 8001e9a:	f003 ff21 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2002b864 	.word	0x2002b864

08001ea8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIM3_IRQHandler+0x10>)
 8001eae:	f003 ff17 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20015e04 	.word	0x20015e04

08001ebc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <USART3_IRQHandler+0x10>)
 8001ec2:	f005 fb5b 	bl	800757c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200000f4 	.word	0x200000f4

08001ed0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM8_CC_IRQHandler+0x10>)
 8001ed6:	f003 ff03 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200000b4 	.word	0x200000b4

08001ee4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eea:	f001 f801 	bl	8002ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	2002b8a4 	.word	0x2002b8a4

08001ef8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <DMA2_Stream4_IRQHandler+0x10>)
 8001efe:	f000 fff7 	bl	8002ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2002b720 	.word	0x2002b720

08001f0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <_sbrk+0x50>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x16>
		heap_end = &end;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <_sbrk+0x50>)
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <_sbrk+0x54>)
 8001f20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <_sbrk+0x50>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <_sbrk+0x50>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	466a      	mov	r2, sp
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d907      	bls.n	8001f46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f36:	f006 fc37 	bl	80087a8 <__errno>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	e006      	b.n	8001f54 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <_sbrk+0x50>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <_sbrk+0x50>)
 8001f50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200000a8 	.word	0x200000a8
 8001f60:	2002b910 	.word	0x2002b910

08001f64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <SystemInit+0x28>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <SystemInit+0x28>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SystemInit+0x28>)
 8001f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f96:	e003      	b.n	8001fa0 <LoopCopyDataInit>

08001f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f9e:	3104      	adds	r1, #4

08001fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fa8:	d3f6      	bcc.n	8001f98 <CopyDataInit>
  ldr  r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fac:	e002      	b.n	8001fb4 <LoopFillZerobss>

08001fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fb0:	f842 3b04 	str.w	r3, [r2], #4

08001fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fb8:	d3f9      	bcc.n	8001fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fba:	f7ff ffd3 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f006 fbf9 	bl	80087b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7fe fb2d 	bl	8000620 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001fcc:	080090a8 	.word	0x080090a8
  ldr  r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fd4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001fd8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001fdc:	2002b90c 	.word	0x2002b90c

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>

08001fe2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	f000 fda0 	bl	8002b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f000 f805 	bl	8001ffc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001ff2:	f7ff fc47 	bl	8001884 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_InitTick+0x54>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fdbb 	bl	8002b96 <HAL_SYSTICK_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00e      	b.n	8002048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d80a      	bhi.n	8002046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 fd83 	bl	8002b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_InitTick+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000004 	.word	0x20000004
 8002054:	2000000c 	.word	0x2000000c
 8002058:	20000008 	.word	0x20000008

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000000c 	.word	0x2000000c
 8002080:	2002b904 	.word	0x2002b904

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	2002b904 	.word	0x2002b904

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_Delay+0x40>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000000c 	.word	0x2000000c

080020e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e031      	b.n	800215a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fbe4 	bl	80018cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_ADC_Init+0x84>)
 8002124:	4013      	ands	r3, r2
 8002126:	f043 0202 	orr.w	r2, r3, #2
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fab0 	bl	8002694 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
 800214a:	e001      	b.n	8002150 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	ffffeefd 	.word	0xffffeefd

08002168 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Start_DMA+0x1e>
 8002182:	2302      	movs	r3, #2
 8002184:	e0c7      	b.n	8002316 <HAL_ADC_Start_DMA+0x1ae>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d018      	beq.n	80021ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80021ac:	4b5c      	ldr	r3, [pc, #368]	; (8002320 <HAL_ADC_Start_DMA+0x1b8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a5c      	ldr	r2, [pc, #368]	; (8002324 <HAL_ADC_Start_DMA+0x1bc>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0c9a      	lsrs	r2, r3, #18
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80021c0:	e002      	b.n	80021c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f9      	bne.n	80021c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 809b 	bne.w	8002314 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e2:	4b51      	ldr	r3, [pc, #324]	; (8002328 <HAL_ADC_Start_DMA+0x1c0>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002204:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002218:	d106      	bne.n	8002228 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f023 0206 	bic.w	r2, r3, #6
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
 8002226:	e002      	b.n	800222e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223a:	4a3c      	ldr	r2, [pc, #240]	; (800232c <HAL_ADC_Start_DMA+0x1c4>)
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	4a3b      	ldr	r2, [pc, #236]	; (8002330 <HAL_ADC_Start_DMA+0x1c8>)
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	4a3a      	ldr	r2, [pc, #232]	; (8002334 <HAL_ADC_Start_DMA+0x1cc>)
 800224c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002256:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002266:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002276:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	334c      	adds	r3, #76	; 0x4c
 8002282:	4619      	mov	r1, r3
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f000 fd40 	bl	8002d0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <HAL_ADC_Start_DMA+0x1d0>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10f      	bne.n	80022b8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d136      	bne.n	8002314 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	e02d      	b.n	8002314 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <HAL_ADC_Start_DMA+0x1d4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d10e      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x178>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022de:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_ADC_Start_DMA+0x1d0>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d113      	bne.n	8002314 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a13      	ldr	r2, [pc, #76]	; (8002340 <HAL_ADC_Start_DMA+0x1d8>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10e      	bne.n	8002314 <HAL_ADC_Start_DMA+0x1ac>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002312:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000004 	.word	0x20000004
 8002324:	431bde83 	.word	0x431bde83
 8002328:	fffff8fe 	.word	0xfffff8fe
 800232c:	08002889 	.word	0x08002889
 8002330:	08002943 	.word	0x08002943
 8002334:	0800295f 	.word	0x0800295f
 8002338:	40012300 	.word	0x40012300
 800233c:	40012000 	.word	0x40012000
 8002340:	40012200 	.word	0x40012200

08002344 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_ADC_Stop_DMA+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e036      	b.n	80023cc <HAL_ADC_Stop_DMA+0x88>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11e      	bne.n	80023c2 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002392:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fd17 	bl	8002dcc <HAL_DMA_Abort>
 800239e:	4603      	mov	r3, r0
 80023a0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80023b0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_ADC_Stop_DMA+0x90>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	f043 0201 	orr.w	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	ffffeefe 	.word	0xffffeefe

080023d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1c>
 8002418:	2302      	movs	r3, #2
 800241a:	e12a      	b.n	8002672 <HAL_ADC_ConfigChannel+0x272>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b09      	cmp	r3, #9
 800242a:	d93a      	bls.n	80024a2 <HAL_ADC_ConfigChannel+0xa2>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002434:	d035      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68d9      	ldr	r1, [r3, #12]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	3b1e      	subs	r3, #30
 800244c:	2207      	movs	r2, #7
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	400a      	ands	r2, r1
 800245a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_ADC_ConfigChannel+0x280>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10a      	bne.n	800247c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68d9      	ldr	r1, [r3, #12]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	061a      	lsls	r2, r3, #24
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247a:	e035      	b.n	80024e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68d9      	ldr	r1, [r3, #12]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	4603      	mov	r3, r0
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4403      	add	r3, r0
 8002494:	3b1e      	subs	r3, #30
 8002496:	409a      	lsls	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a0:	e022      	b.n	80024e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6919      	ldr	r1, [r3, #16]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	2207      	movs	r2, #7
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43da      	mvns	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	400a      	ands	r2, r1
 80024c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6919      	ldr	r1, [r3, #16]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	4603      	mov	r3, r0
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4403      	add	r3, r0
 80024de:	409a      	lsls	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d824      	bhi.n	800253a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b05      	subs	r3, #5
 8002502:	221f      	movs	r2, #31
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43da      	mvns	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	400a      	ands	r2, r1
 8002510:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b05      	subs	r3, #5
 800252c:	fa00 f203 	lsl.w	r2, r0, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
 8002538:	e04c      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b0c      	cmp	r3, #12
 8002540:	d824      	bhi.n	800258c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	3b23      	subs	r3, #35	; 0x23
 8002554:	221f      	movs	r2, #31
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	400a      	ands	r2, r1
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	4618      	mov	r0, r3
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	3b23      	subs	r3, #35	; 0x23
 800257e:	fa00 f203 	lsl.w	r2, r0, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
 800258a:	e023      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b41      	subs	r3, #65	; 0x41
 800259e:	221f      	movs	r2, #31
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43da      	mvns	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	400a      	ands	r2, r1
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	3b41      	subs	r3, #65	; 0x41
 80025c8:	fa00 f203 	lsl.w	r2, r0, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <HAL_ADC_ConfigChannel+0x284>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10a      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1f4>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_ADC_ConfigChannel+0x288>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4a26      	ldr	r2, [pc, #152]	; (8002688 <HAL_ADC_ConfigChannel+0x288>)
 80025ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_ADC_ConfigChannel+0x284>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d109      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x212>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b12      	cmp	r3, #18
 8002604:	d105      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_ADC_ConfigChannel+0x288>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_ADC_ConfigChannel+0x288>)
 800260c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002610:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1b      	ldr	r2, [pc, #108]	; (8002684 <HAL_ADC_ConfigChannel+0x284>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d125      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x268>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a17      	ldr	r2, [pc, #92]	; (8002680 <HAL_ADC_ConfigChannel+0x280>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <HAL_ADC_ConfigChannel+0x22e>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b11      	cmp	r3, #17
 800262c:	d11c      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_ADC_ConfigChannel+0x288>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4a15      	ldr	r2, [pc, #84]	; (8002688 <HAL_ADC_ConfigChannel+0x288>)
 8002634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002638:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a10      	ldr	r2, [pc, #64]	; (8002680 <HAL_ADC_ConfigChannel+0x280>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d111      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_ADC_ConfigChannel+0x28c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a11      	ldr	r2, [pc, #68]	; (8002690 <HAL_ADC_ConfigChannel+0x290>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0c9a      	lsrs	r2, r3, #18
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800265a:	e002      	b.n	8002662 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3b01      	subs	r3, #1
 8002660:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f9      	bne.n	800265c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	10000012 	.word	0x10000012
 8002684:	40012000 	.word	0x40012000
 8002688:	40012300 	.word	0x40012300
 800268c:	20000004 	.word	0x20000004
 8002690:	431bde83 	.word	0x431bde83

08002694 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800269c:	4b78      	ldr	r3, [pc, #480]	; (8002880 <ADC_Init+0x1ec>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a77      	ldr	r2, [pc, #476]	; (8002880 <ADC_Init+0x1ec>)
 80026a2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026a6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80026a8:	4b75      	ldr	r3, [pc, #468]	; (8002880 <ADC_Init+0x1ec>)
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4973      	ldr	r1, [pc, #460]	; (8002880 <ADC_Init+0x1ec>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	021a      	lsls	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6899      	ldr	r1, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	4a58      	ldr	r2, [pc, #352]	; (8002884 <ADC_Init+0x1f0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d022      	beq.n	800276e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002736:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	e00f      	b.n	800278e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800277c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800278c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0202 	bic.w	r2, r2, #2
 800279c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	005a      	lsls	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	3b01      	subs	r3, #1
 80027e8:	035a      	lsls	r2, r3, #13
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	e007      	b.n	8002804 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002802:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	3b01      	subs	r3, #1
 8002820:	051a      	lsls	r2, r3, #20
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6899      	ldr	r1, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002846:	025a      	lsls	r2, r3, #9
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6899      	ldr	r1, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	029a      	lsls	r2, r3, #10
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40012300 	.word	0x40012300
 8002884:	0f000001 	.word	0x0f000001

08002888 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d13c      	bne.n	800291c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d12b      	bne.n	8002914 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d127      	bne.n	8002914 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d119      	bne.n	8002914 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0220 	bic.w	r2, r2, #32
 80028ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7fe fba7 	bl	8001068 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800291a:	e00e      	b.n	800293a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fd5f 	bl	80023ec <HAL_ADC_ErrorCallback>
}
 800292e:	e004      	b.n	800293a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff fd41 	bl	80023d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f043 0204 	orr.w	r2, r3, #4
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff fd34 	bl	80023ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <__NVIC_SetPriorityGrouping+0x40>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	; (80029cc <__NVIC_SetPriorityGrouping+0x40>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00
 80029d0:	05fa0000 	.word	0x05fa0000

080029d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <__NVIC_EnableIRQ+0x38>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	; (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	; (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af8:	d301      	bcc.n	8002afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00f      	b.n	8002b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <SysTick_Config+0x40>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b06:	210f      	movs	r1, #15
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f7ff ff8e 	bl	8002a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <SysTick_Config+0x40>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <SysTick_Config+0x40>)
 8002b18:	2207      	movs	r2, #7
 8002b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff29 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b54:	f7ff ff3e 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7ff ff8e 	bl	8002a80 <NVIC_EncodePriority>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff5d 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff31 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa2 	bl	8002ae8 <SysTick_Config>
 8002ba4:	4603      	mov	r3, r0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff fa62 	bl	8002084 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e099      	b.n	8002d00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bec:	e00f      	b.n	8002c0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bee:	f7ff fa49 	bl	8002084 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d908      	bls.n	8002c0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2203      	movs	r2, #3
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e078      	b.n	8002d00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e8      	bne.n	8002bee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <HAL_DMA_Init+0x158>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d107      	bne.n	8002c78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	4313      	orrs	r3, r2
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f023 0307 	bic.w	r3, r3, #7
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d117      	bne.n	8002cd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fb09 	bl	80032cc <DMA_CheckFifoParam>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2240      	movs	r2, #64	; 0x40
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e016      	b.n	8002d00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fac0 	bl	8003260 <DMA_CalcBaseAndBitshift>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	223f      	movs	r2, #63	; 0x3f
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	e010803f 	.word	0xe010803f

08002d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_DMA_Start_IT+0x26>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e048      	b.n	8002dc4 <HAL_DMA_Start_IT+0xb8>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d137      	bne.n	8002db6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fa52 	bl	8003204 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	223f      	movs	r2, #63	; 0x3f
 8002d66:	409a      	lsls	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0216 	orr.w	r2, r2, #22
 8002d7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d8a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e005      	b.n	8002dc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dda:	f7ff f953 	bl	8002084 <HAL_GetTick>
 8002dde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d008      	beq.n	8002dfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e052      	b.n	8002ea4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0216 	bic.w	r2, r2, #22
 8002e0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <HAL_DMA_Abort+0x62>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0208 	bic.w	r2, r2, #8
 8002e3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e4e:	e013      	b.n	8002e78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e50:	f7ff f918 	bl	8002084 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d90c      	bls.n	8002e78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e015      	b.n	8002ea4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e4      	bne.n	8002e50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	223f      	movs	r2, #63	; 0x3f
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d004      	beq.n	8002eca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00c      	b.n	8002ee4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2205      	movs	r2, #5
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002efc:	4b92      	ldr	r3, [pc, #584]	; (8003148 <HAL_DMA_IRQHandler+0x258>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a92      	ldr	r2, [pc, #584]	; (800314c <HAL_DMA_IRQHandler+0x25c>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0a9b      	lsrs	r3, r3, #10
 8002f08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01a      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0204 	bic.w	r2, r2, #4
 8002f42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	2208      	movs	r2, #8
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	2201      	movs	r2, #1
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	2201      	movs	r2, #1
 8002f80:	409a      	lsls	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f043 0202 	orr.w	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	2204      	movs	r2, #4
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d012      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	f043 0204 	orr.w	r2, r3, #4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	2210      	movs	r2, #16
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d043      	beq.n	8003060 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d03c      	beq.n	8003060 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	2210      	movs	r2, #16
 8002fec:	409a      	lsls	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d018      	beq.n	8003032 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d024      	beq.n	8003060 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
 800301e:	e01f      	b.n	8003060 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01b      	beq.n	8003060 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e016      	b.n	8003060 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0208 	bic.w	r2, r2, #8
 800304e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2220      	movs	r2, #32
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 808e 	beq.w	800318e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8086 	beq.w	800318e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	2220      	movs	r2, #32
 8003088:	409a      	lsls	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b05      	cmp	r3, #5
 8003098:	d136      	bne.n	8003108 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0216 	bic.w	r2, r2, #22
 80030a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <HAL_DMA_IRQHandler+0x1da>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0208 	bic.w	r2, r2, #8
 80030d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	223f      	movs	r2, #63	; 0x3f
 80030e0:	409a      	lsls	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d07d      	beq.n	80031fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
        }
        return;
 8003106:	e078      	b.n	80031fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01c      	beq.n	8003150 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d108      	bne.n	8003136 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	2b00      	cmp	r3, #0
 800312a:	d030      	beq.n	800318e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
 8003134:	e02b      	b.n	800318e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d027      	beq.n	800318e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
 8003146:	e022      	b.n	800318e <HAL_DMA_IRQHandler+0x29e>
 8003148:	20000004 	.word	0x20000004
 800314c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10f      	bne.n	800317e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0210 	bic.w	r2, r2, #16
 800316c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	2b00      	cmp	r3, #0
 8003194:	d032      	beq.n	80031fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d022      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2205      	movs	r2, #5
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	3301      	adds	r3, #1
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d307      	bcc.n	80031d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f2      	bne.n	80031ba <HAL_DMA_IRQHandler+0x2ca>
 80031d4:	e000      	b.n	80031d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e000      	b.n	80031fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80031fa:	bf00      	nop
    }
  }
}
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop

08003204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003220:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d108      	bne.n	8003244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003242:	e007      	b.n	8003254 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	3b10      	subs	r3, #16
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <DMA_CalcBaseAndBitshift+0x60>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <DMA_CalcBaseAndBitshift+0x64>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d908      	bls.n	80032a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <DMA_CalcBaseAndBitshift+0x68>)
 8003296:	4013      	ands	r3, r2
 8003298:	1d1a      	adds	r2, r3, #4
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	659a      	str	r2, [r3, #88]	; 0x58
 800329e:	e006      	b.n	80032ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <DMA_CalcBaseAndBitshift+0x68>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	aaaaaaab 	.word	0xaaaaaaab
 80032c4:	0800905c 	.word	0x0800905c
 80032c8:	fffffc00 	.word	0xfffffc00

080032cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11f      	bne.n	8003326 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d855      	bhi.n	8003398 <DMA_CheckFifoParam+0xcc>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <DMA_CheckFifoParam+0x28>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003305 	.word	0x08003305
 80032f8:	08003317 	.word	0x08003317
 80032fc:	08003305 	.word	0x08003305
 8003300:	08003399 	.word	0x08003399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d045      	beq.n	800339c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003314:	e042      	b.n	800339c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800331e:	d13f      	bne.n	80033a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003324:	e03c      	b.n	80033a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332e:	d121      	bne.n	8003374 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d836      	bhi.n	80033a4 <DMA_CheckFifoParam+0xd8>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <DMA_CheckFifoParam+0x70>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	0800334d 	.word	0x0800334d
 8003340:	08003353 	.word	0x08003353
 8003344:	0800334d 	.word	0x0800334d
 8003348:	08003365 	.word	0x08003365
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      break;
 8003350:	e02f      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003362:	e021      	b.n	80033a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800336c:	d11e      	bne.n	80033ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003372:	e01b      	b.n	80033ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <DMA_CheckFifoParam+0xb4>
 800337a:	2b03      	cmp	r3, #3
 800337c:	d003      	beq.n	8003386 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800337e:	e018      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e015      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00e      	beq.n	80033b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      break;
 8003396:	e00b      	b.n	80033b0 <DMA_CheckFifoParam+0xe4>
      break;
 8003398:	bf00      	nop
 800339a:	e00a      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 800339c:	bf00      	nop
 800339e:	e008      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 80033a0:	bf00      	nop
 80033a2:	e006      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 80033a4:	bf00      	nop
 80033a6:	e004      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 80033a8:	bf00      	nop
 80033aa:	e002      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 80033b0:	bf00      	nop
    }
  } 
  
  return status; 
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e175      	b.n	80036cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f040 8164 	bne.w	80036c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d00b      	beq.n	800341e <HAL_GPIO_Init+0x5e>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d007      	beq.n	800341e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003412:	2b11      	cmp	r3, #17
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b12      	cmp	r3, #18
 800341c:	d130      	bne.n	8003480 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003454:	2201      	movs	r2, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 0201 	and.w	r2, r3, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x100>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b12      	cmp	r3, #18
 80034be:	d123      	bne.n	8003508 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	08da      	lsrs	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3208      	adds	r2, #8
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0203 	and.w	r2, r3, #3
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80be 	beq.w	80036c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_GPIO_Init+0x320>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a64      	ldr	r2, [pc, #400]	; (80036e0 <HAL_GPIO_Init+0x320>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b62      	ldr	r3, [pc, #392]	; (80036e0 <HAL_GPIO_Init+0x320>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003562:	4a60      	ldr	r2, [pc, #384]	; (80036e4 <HAL_GPIO_Init+0x324>)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a57      	ldr	r2, [pc, #348]	; (80036e8 <HAL_GPIO_Init+0x328>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d037      	beq.n	80035fe <HAL_GPIO_Init+0x23e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a56      	ldr	r2, [pc, #344]	; (80036ec <HAL_GPIO_Init+0x32c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d031      	beq.n	80035fa <HAL_GPIO_Init+0x23a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a55      	ldr	r2, [pc, #340]	; (80036f0 <HAL_GPIO_Init+0x330>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02b      	beq.n	80035f6 <HAL_GPIO_Init+0x236>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a54      	ldr	r2, [pc, #336]	; (80036f4 <HAL_GPIO_Init+0x334>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d025      	beq.n	80035f2 <HAL_GPIO_Init+0x232>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a53      	ldr	r2, [pc, #332]	; (80036f8 <HAL_GPIO_Init+0x338>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01f      	beq.n	80035ee <HAL_GPIO_Init+0x22e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_GPIO_Init+0x33c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d019      	beq.n	80035ea <HAL_GPIO_Init+0x22a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a51      	ldr	r2, [pc, #324]	; (8003700 <HAL_GPIO_Init+0x340>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_GPIO_Init+0x226>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a50      	ldr	r2, [pc, #320]	; (8003704 <HAL_GPIO_Init+0x344>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00d      	beq.n	80035e2 <HAL_GPIO_Init+0x222>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4f      	ldr	r2, [pc, #316]	; (8003708 <HAL_GPIO_Init+0x348>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x21e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4e      	ldr	r2, [pc, #312]	; (800370c <HAL_GPIO_Init+0x34c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_GPIO_Init+0x21a>
 80035d6:	2309      	movs	r3, #9
 80035d8:	e012      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035da:	230a      	movs	r3, #10
 80035dc:	e010      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035de:	2308      	movs	r3, #8
 80035e0:	e00e      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035e2:	2307      	movs	r3, #7
 80035e4:	e00c      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035e6:	2306      	movs	r3, #6
 80035e8:	e00a      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035ea:	2305      	movs	r3, #5
 80035ec:	e008      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035ee:	2304      	movs	r3, #4
 80035f0:	e006      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035f2:	2303      	movs	r3, #3
 80035f4:	e004      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e002      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035fe:	2300      	movs	r3, #0
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	f002 0203 	and.w	r2, r2, #3
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	4093      	lsls	r3, r2
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003610:	4934      	ldr	r1, [pc, #208]	; (80036e4 <HAL_GPIO_Init+0x324>)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800361e:	4b3c      	ldr	r3, [pc, #240]	; (8003710 <HAL_GPIO_Init+0x350>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003642:	4a33      	ldr	r2, [pc, #204]	; (8003710 <HAL_GPIO_Init+0x350>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003648:	4b31      	ldr	r3, [pc, #196]	; (8003710 <HAL_GPIO_Init+0x350>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <HAL_GPIO_Init+0x350>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <HAL_GPIO_Init+0x350>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003696:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <HAL_GPIO_Init+0x350>)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800369c:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <HAL_GPIO_Init+0x350>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036c0:	4a13      	ldr	r2, [pc, #76]	; (8003710 <HAL_GPIO_Init+0x350>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3301      	adds	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	f67f ae86 	bls.w	80033e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036d4:	bf00      	nop
 80036d6:	3724      	adds	r7, #36	; 0x24
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40013800 	.word	0x40013800
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40020400 	.word	0x40020400
 80036f0:	40020800 	.word	0x40020800
 80036f4:	40020c00 	.word	0x40020c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40021400 	.word	0x40021400
 8003700:	40021800 	.word	0x40021800
 8003704:	40021c00 	.word	0x40021c00
 8003708:	40022000 	.word	0x40022000
 800370c:	40022400 	.word	0x40022400
 8003710:	40013c00 	.word	0x40013c00

08003714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
 8003720:	4613      	mov	r3, r2
 8003722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003724:	787b      	ldrb	r3, [r7, #1]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003730:	e003      	b.n	800373a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003732:	887b      	ldrh	r3, [r7, #2]
 8003734:	041a      	lsls	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	619a      	str	r2, [r3, #24]
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003748:	b08f      	sub	sp, #60	; 0x3c
 800374a:	af0a      	add	r7, sp, #40	; 0x28
 800374c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e116      	b.n	8003986 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fe fafa 	bl	8001d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2203      	movs	r2, #3
 800377c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f004 fdae 	bl	80082f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	687e      	ldr	r6, [r7, #4]
 80037a4:	466d      	mov	r5, sp
 80037a6:	f106 0410 	add.w	r4, r6, #16
 80037aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80037ba:	1d33      	adds	r3, r6, #4
 80037bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037be:	6838      	ldr	r0, [r7, #0]
 80037c0:	f004 fd42 	bl	8008248 <USB_CoreInit>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0d7      	b.n	8003986 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f004 fd9c 	bl	800831a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e04a      	b.n	800387e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	333d      	adds	r3, #61	; 0x3d
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037fc:	7bfa      	ldrb	r2, [r7, #15]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	333c      	adds	r3, #60	; 0x3c
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	b298      	uxth	r0, r3
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3342      	adds	r3, #66	; 0x42
 8003824:	4602      	mov	r2, r0
 8003826:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003828:	7bfa      	ldrb	r2, [r7, #15]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	333f      	adds	r3, #63	; 0x3f
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3344      	adds	r3, #68	; 0x44
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3348      	adds	r3, #72	; 0x48
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3350      	adds	r3, #80	; 0x50
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	3301      	adds	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d3af      	bcc.n	80037e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003888:	2300      	movs	r3, #0
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	e044      	b.n	8003918 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	3301      	adds	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
 8003918:	7bfa      	ldrb	r2, [r7, #15]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	429a      	cmp	r2, r3
 8003920:	d3b5      	bcc.n	800388e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	687e      	ldr	r6, [r7, #4]
 800392a:	466d      	mov	r5, sp
 800392c:	f106 0410 	add.w	r4, r6, #16
 8003930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003938:	e894 0003 	ldmia.w	r4, {r0, r1}
 800393c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003940:	1d33      	adds	r3, r6, #4
 8003942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003944:	6838      	ldr	r0, [r7, #0]
 8003946:	f004 fd13 	bl	8008370 <USB_DevInit>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e014      	b.n	8003986 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	2b01      	cmp	r3, #1
 8003972:	d102      	bne.n	800397a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f80b 	bl	8003990 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f004 fec5 	bl	800870e <USB_DevDisconnect>

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003990 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	10000003 	.word	0x10000003

080039d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40007000 	.word	0x40007000

080039f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b23      	ldr	r3, [pc, #140]	; (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a22      	ldr	r2, [pc, #136]	; (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a26:	f7fe fb2d 	bl	8002084 <HAL_GetTick>
 8003a2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a2c:	e009      	b.n	8003a42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a2e:	f7fe fb29 	bl	8002084 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a3c:	d901      	bls.n	8003a42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e022      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4e:	d1ee      	bne.n	8003a2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a50:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0f      	ldr	r2, [pc, #60]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a5c:	f7fe fb12 	bl	8002084 <HAL_GetTick>
 8003a60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a62:	e009      	b.n	8003a78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a64:	f7fe fb0e 	bl	8002084 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a72:	d901      	bls.n	8003a78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e007      	b.n	8003a88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a84:	d1ee      	bne.n	8003a64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e29b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 8087 	beq.w	8003bca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003abc:	4b96      	ldr	r3, [pc, #600]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac8:	4b93      	ldr	r3, [pc, #588]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d112      	bne.n	8003afa <HAL_RCC_OscConfig+0x62>
 8003ad4:	4b90      	ldr	r3, [pc, #576]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae0:	d10b      	bne.n	8003afa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae2:	4b8d      	ldr	r3, [pc, #564]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d06c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x130>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d168      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e275      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x7a>
 8003b04:	4b84      	ldr	r3, [pc, #528]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a83      	ldr	r2, [pc, #524]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	e02e      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x9c>
 8003b1a:	4b7f      	ldr	r3, [pc, #508]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a7e      	ldr	r2, [pc, #504]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7b      	ldr	r2, [pc, #492]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e01d      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b3e:	4b76      	ldr	r3, [pc, #472]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a75      	ldr	r2, [pc, #468]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4b73      	ldr	r3, [pc, #460]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a72      	ldr	r2, [pc, #456]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0xd8>
 8003b58:	4b6f      	ldr	r3, [pc, #444]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6e      	ldr	r2, [pc, #440]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b6c      	ldr	r3, [pc, #432]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6b      	ldr	r2, [pc, #428]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fa84 	bl	8002084 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe fa80 	bl	8002084 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e229      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e014      	b.n	8003bca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fa70 	bl	8002084 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fa6c 	bl	8002084 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e215      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x110>
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d069      	beq.n	8003caa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bd6:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d11c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x190>
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d116      	bne.n	8003c28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e1e9      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	493d      	ldr	r1, [pc, #244]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c26:	e040      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c30:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a38      	ldr	r2, [pc, #224]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fa22 	bl	8002084 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fe fa1e 	bl	8002084 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1c7      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4929      	ldr	r1, [pc, #164]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
 8003c76:	e018      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fe f9fe 	bl	8002084 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7fe f9fa 	bl	8002084 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1a3      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d038      	beq.n	8003d28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d019      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc2:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fe f9db 	bl	8002084 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fe f9d7 	bl	8002084 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e180      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x23a>
 8003cf0:	e01a      	b.n	8003d28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfe:	f7fe f9c1 	bl	8002084 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fe f9bd 	bl	8002084 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d903      	bls.n	8003d1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e166      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
 8003d18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b92      	ldr	r3, [pc, #584]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ee      	bne.n	8003d06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a4 	beq.w	8003e7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b8c      	ldr	r3, [pc, #560]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	4b89      	ldr	r3, [pc, #548]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a88      	ldr	r2, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4e:	4b86      	ldr	r3, [pc, #536]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d5e:	4b83      	ldr	r3, [pc, #524]	; (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d118      	bne.n	8003d9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d6a:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7f      	ldr	r2, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d76:	f7fe f985 	bl	8002084 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7e:	f7fe f981 	bl	8002084 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e12a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d90:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCC_OscConfig+0x4d4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x31a>
 8003da4:	4b70      	ldr	r3, [pc, #448]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a6f      	ldr	r2, [pc, #444]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
 8003db0:	e02d      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x33c>
 8003dba:	4b6b      	ldr	r3, [pc, #428]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a6a      	ldr	r2, [pc, #424]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a67      	ldr	r2, [pc, #412]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	f023 0304 	bic.w	r3, r3, #4
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	d10c      	bne.n	8003df6 <HAL_RCC_OscConfig+0x35e>
 8003ddc:	4b62      	ldr	r3, [pc, #392]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a61      	ldr	r2, [pc, #388]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a5e      	ldr	r2, [pc, #376]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
 8003df4:	e00b      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
 8003df6:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fe f935 	bl	8002084 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fe f931 	bl	8002084 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e0d8      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ee      	beq.n	8003e1e <HAL_RCC_OscConfig+0x386>
 8003e40:	e014      	b.n	8003e6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fe f91f 	bl	8002084 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fe f91b 	bl	8002084 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0c2      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e60:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ee      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d105      	bne.n	8003e7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80ae 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d06d      	beq.n	8003f70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d14b      	bne.n	8003f34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f8ec 	bl	8002084 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe f8e8 	bl	8002084 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e091      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	019b      	lsls	r3, r3, #6
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	071b      	lsls	r3, r3, #28
 8003efa:	491b      	ldr	r1, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe f8ba 	bl	8002084 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe f8b6 	bl	8002084 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e05f      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x47c>
 8003f32:	e057      	b.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe f8a0 	bl	8002084 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f48:	f7fe f89c 	bl	8002084 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e045      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5a:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4b0>
 8003f66:	e03d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f70:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <HAL_RCC_OscConfig+0x558>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d030      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d129      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d122      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d119      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d10f      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d107      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0d0      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d910      	bls.n	800403c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 020f 	bic.w	r2, r3, #15
 8004022:	4965      	ldr	r1, [pc, #404]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a58      	ldr	r2, [pc, #352]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800405e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a52      	ldr	r2, [pc, #328]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d040      	beq.n	8004118 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d115      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e073      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06b      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d6:	4b39      	ldr	r3, [pc, #228]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4936      	ldr	r1, [pc, #216]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fd ffcc 	bl	8002084 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f0:	f7fd ffc8 	bl	8002084 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e053      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 020c 	and.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d1eb      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004118:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d210      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 020f 	bic.w	r2, r3, #15
 800412e:	4922      	ldr	r1, [pc, #136]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004186:	f000 f821 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800418a:	4601      	mov	r1, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <HAL_RCC_ClockConfig+0x1cc>)
 8004198:	5cd3      	ldrb	r3, [r2, r3]
 800419a:	fa21 f303 	lsr.w	r3, r1, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x1d0>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_ClockConfig+0x1d4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd ff28 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023c00 	.word	0x40023c00
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08009044 	.word	0x08009044
 80041c4:	20000004 	.word	0x20000004
 80041c8:	20000008 	.word	0x20000008

080041cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	2300      	movs	r3, #0
 80041dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e2:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d007      	beq.n	80041fe <HAL_RCC_GetSysClockFreq+0x32>
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d008      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x38>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f040 80b4 	bne.w	8004360 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b5e      	ldr	r3, [pc, #376]	; (8004374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041fa:	60bb      	str	r3, [r7, #8]
      break;
 80041fc:	e0b3      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041fe:	4b5e      	ldr	r3, [pc, #376]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004200:	60bb      	str	r3, [r7, #8]
      break;
 8004202:	e0b0      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004204:	4b5a      	ldr	r3, [pc, #360]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800420c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800420e:	4b58      	ldr	r3, [pc, #352]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d04a      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421a:	4b55      	ldr	r3, [pc, #340]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	ea03 0501 	and.w	r5, r3, r1
 8004230:	ea04 0602 	and.w	r6, r4, r2
 8004234:	4629      	mov	r1, r5
 8004236:	4632      	mov	r2, r6
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	f04f 0400 	mov.w	r4, #0
 8004240:	0154      	lsls	r4, r2, #5
 8004242:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004246:	014b      	lsls	r3, r1, #5
 8004248:	4619      	mov	r1, r3
 800424a:	4622      	mov	r2, r4
 800424c:	1b49      	subs	r1, r1, r5
 800424e:	eb62 0206 	sbc.w	r2, r2, r6
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	f04f 0400 	mov.w	r4, #0
 800425a:	0194      	lsls	r4, r2, #6
 800425c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004260:	018b      	lsls	r3, r1, #6
 8004262:	1a5b      	subs	r3, r3, r1
 8004264:	eb64 0402 	sbc.w	r4, r4, r2
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	00e2      	lsls	r2, r4, #3
 8004272:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004276:	00d9      	lsls	r1, r3, #3
 8004278:	460b      	mov	r3, r1
 800427a:	4614      	mov	r4, r2
 800427c:	195b      	adds	r3, r3, r5
 800427e:	eb44 0406 	adc.w	r4, r4, r6
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	0262      	lsls	r2, r4, #9
 800428c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004290:	0259      	lsls	r1, r3, #9
 8004292:	460b      	mov	r3, r1
 8004294:	4614      	mov	r4, r2
 8004296:	4618      	mov	r0, r3
 8004298:	4621      	mov	r1, r4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f04f 0400 	mov.w	r4, #0
 80042a0:	461a      	mov	r2, r3
 80042a2:	4623      	mov	r3, r4
 80042a4:	f7fc f824 	bl	80002f0 <__aeabi_uldivmod>
 80042a8:	4603      	mov	r3, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e049      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b0:	4b2f      	ldr	r3, [pc, #188]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	f04f 0400 	mov.w	r4, #0
 80042ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	ea03 0501 	and.w	r5, r3, r1
 80042c6:	ea04 0602 	and.w	r6, r4, r2
 80042ca:	4629      	mov	r1, r5
 80042cc:	4632      	mov	r2, r6
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	f04f 0400 	mov.w	r4, #0
 80042d6:	0154      	lsls	r4, r2, #5
 80042d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042dc:	014b      	lsls	r3, r1, #5
 80042de:	4619      	mov	r1, r3
 80042e0:	4622      	mov	r2, r4
 80042e2:	1b49      	subs	r1, r1, r5
 80042e4:	eb62 0206 	sbc.w	r2, r2, r6
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	0194      	lsls	r4, r2, #6
 80042f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042f6:	018b      	lsls	r3, r1, #6
 80042f8:	1a5b      	subs	r3, r3, r1
 80042fa:	eb64 0402 	sbc.w	r4, r4, r2
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	00e2      	lsls	r2, r4, #3
 8004308:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800430c:	00d9      	lsls	r1, r3, #3
 800430e:	460b      	mov	r3, r1
 8004310:	4614      	mov	r4, r2
 8004312:	195b      	adds	r3, r3, r5
 8004314:	eb44 0406 	adc.w	r4, r4, r6
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	02a2      	lsls	r2, r4, #10
 8004322:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004326:	0299      	lsls	r1, r3, #10
 8004328:	460b      	mov	r3, r1
 800432a:	4614      	mov	r4, r2
 800432c:	4618      	mov	r0, r3
 800432e:	4621      	mov	r1, r4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f04f 0400 	mov.w	r4, #0
 8004336:	461a      	mov	r2, r3
 8004338:	4623      	mov	r3, r4
 800433a:	f7fb ffd9 	bl	80002f0 <__aeabi_uldivmod>
 800433e:	4603      	mov	r3, r0
 8004340:	460c      	mov	r4, r1
 8004342:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	3301      	adds	r3, #1
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	60bb      	str	r3, [r7, #8]
      break;
 800435e:	e002      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004362:	60bb      	str	r3, [r7, #8]
      break;
 8004364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004366:	68bb      	ldr	r3, [r7, #8]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200

0800437c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_RCC_GetHCLKFreq+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000004 	.word	0x20000004

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004398:	f7ff fff0 	bl	800437c <HAL_RCC_GetHCLKFreq>
 800439c:	4601      	mov	r1, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4a03      	ldr	r2, [pc, #12]	; (80043b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043aa:	5cd3      	ldrb	r3, [r2, r3]
 80043ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08009054 	.word	0x08009054

080043bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043c0:	f7ff ffdc 	bl	800437c <HAL_RCC_GetHCLKFreq>
 80043c4:	4601      	mov	r1, r0
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	0b5b      	lsrs	r3, r3, #13
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	4a03      	ldr	r2, [pc, #12]	; (80043e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d2:	5cd3      	ldrb	r3, [r2, r3]
 80043d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043d8:	4618      	mov	r0, r3
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40023800 	.word	0x40023800
 80043e0:	08009054 	.word	0x08009054

080043e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d012      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800440c:	4b69      	ldr	r3, [pc, #420]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4a68      	ldr	r2, [pc, #416]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004412:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	4b66      	ldr	r3, [pc, #408]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004420:	4964      	ldr	r1, [pc, #400]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800442e:	2301      	movs	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800443e:	4b5d      	ldr	r3, [pc, #372]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004444:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	4959      	ldr	r1, [pc, #356]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445c:	d101      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800445e:	2301      	movs	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800446a:	2301      	movs	r3, #1
 800446c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d017      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800447a:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004480:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	494a      	ldr	r1, [pc, #296]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004498:	d101      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 808b 	beq.w	80045de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	4a39      	ldr	r2, [pc, #228]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d2:	6413      	str	r3, [r2, #64]	; 0x40
 80044d4:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a34      	ldr	r2, [pc, #208]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ec:	f7fd fdca 	bl	8002084 <HAL_GetTick>
 80044f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fd fdc6 	bl	8002084 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e38d      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004506:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004512:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d035      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	429a      	cmp	r2, r3
 800452e:	d02e      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004530:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004538:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800453a:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004546:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004550:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004552:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004558:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d114      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fd fd8e 	bl	8002084 <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456a:	e00a      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456c:	f7fd fd8a 	bl	8002084 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	; 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e34f      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ee      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800459a:	d111      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045aa:	400b      	ands	r3, r1
 80045ac:	4901      	ldr	r1, [pc, #4]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
 80045b2:	e00b      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045b4:	40023800 	.word	0x40023800
 80045b8:	40007000 	.word	0x40007000
 80045bc:	0ffffcff 	.word	0x0ffffcff
 80045c0:	4bb3      	ldr	r3, [pc, #716]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4ab2      	ldr	r2, [pc, #712]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045ca:	6093      	str	r3, [r2, #8]
 80045cc:	4bb0      	ldr	r3, [pc, #704]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d8:	49ad      	ldr	r1, [pc, #692]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ea:	4ba9      	ldr	r3, [pc, #676]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	4aa7      	ldr	r2, [pc, #668]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045fa:	4ba5      	ldr	r3, [pc, #660]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	49a2      	ldr	r1, [pc, #648]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004618:	4b9d      	ldr	r3, [pc, #628]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004626:	499a      	ldr	r1, [pc, #616]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800463a:	4b95      	ldr	r3, [pc, #596]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004648:	4991      	ldr	r1, [pc, #580]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800465c:	4b8c      	ldr	r3, [pc, #560]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466a:	4989      	ldr	r1, [pc, #548]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800467e:	4b84      	ldr	r3, [pc, #528]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004684:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468c:	4980      	ldr	r1, [pc, #512]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a0:	4b7b      	ldr	r3, [pc, #492]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	f023 0203 	bic.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	4978      	ldr	r1, [pc, #480]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046c2:	4b73      	ldr	r3, [pc, #460]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f023 020c 	bic.w	r2, r3, #12
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d0:	496f      	ldr	r1, [pc, #444]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046e4:	4b6a      	ldr	r3, [pc, #424]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	4967      	ldr	r1, [pc, #412]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004706:	4b62      	ldr	r3, [pc, #392]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	495e      	ldr	r1, [pc, #376]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004728:	4b59      	ldr	r3, [pc, #356]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	4956      	ldr	r1, [pc, #344]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800474a:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	494d      	ldr	r1, [pc, #308]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800476c:	4b48      	ldr	r3, [pc, #288]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	4945      	ldr	r1, [pc, #276]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800478e:	4b40      	ldr	r3, [pc, #256]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	493c      	ldr	r1, [pc, #240]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047b0:	4b37      	ldr	r3, [pc, #220]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047be:	4934      	ldr	r1, [pc, #208]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d011      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047d2:	4b2f      	ldr	r3, [pc, #188]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e0:	492b      	ldr	r1, [pc, #172]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047f0:	d101      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004802:	2301      	movs	r3, #1
 8004804:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004812:	4b1f      	ldr	r3, [pc, #124]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004820:	491b      	ldr	r1, [pc, #108]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004844:	4912      	ldr	r1, [pc, #72]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004868:	4909      	ldr	r1, [pc, #36]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00f      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004882:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	e002      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	4985      	ldr	r1, [pc, #532]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048a8:	4b80      	ldr	r3, [pc, #512]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b8:	497c      	ldr	r1, [pc, #496]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d005      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ce:	f040 80d6 	bne.w	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048d2:	4b76      	ldr	r3, [pc, #472]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a75      	ldr	r2, [pc, #468]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048de:	f7fd fbd1 	bl	8002084 <HAL_GetTick>
 80048e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048e6:	f7fd fbcd 	bl	8002084 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b64      	cmp	r3, #100	; 0x64
 80048f2:	d901      	bls.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e194      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048f8:	4b6c      	ldr	r3, [pc, #432]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d021      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11d      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004918:	4b64      	ldr	r3, [pc, #400]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492c:	0e1b      	lsrs	r3, r3, #24
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	019a      	lsls	r2, r3, #6
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	431a      	orrs	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	061b      	lsls	r3, r3, #24
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	071b      	lsls	r3, r3, #28
 800494c:	4957      	ldr	r1, [pc, #348]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004972:	2b00      	cmp	r3, #0
 8004974:	d02e      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497e:	d129      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004980:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004986:	0c1b      	lsrs	r3, r3, #16
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004994:	0f1b      	lsrs	r3, r3, #28
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	019a      	lsls	r2, r3, #6
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	061b      	lsls	r3, r3, #24
 80049ae:	431a      	orrs	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	071b      	lsls	r3, r3, #28
 80049b4:	493d      	ldr	r1, [pc, #244]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049bc:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c2:	f023 021f 	bic.w	r2, r3, #31
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	3b01      	subs	r3, #1
 80049cc:	4937      	ldr	r1, [pc, #220]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01d      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049e0:	4b32      	ldr	r3, [pc, #200]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e6:	0e1b      	lsrs	r3, r3, #24
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ee:	4b2f      	ldr	r3, [pc, #188]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	0f1b      	lsrs	r3, r3, #28
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	019a      	lsls	r2, r3, #6
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	071b      	lsls	r3, r3, #28
 8004a14:	4925      	ldr	r1, [pc, #148]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d011      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	019a      	lsls	r2, r3, #6
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	061b      	lsls	r3, r3, #24
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	071b      	lsls	r3, r3, #28
 8004a44:	4919      	ldr	r1, [pc, #100]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a4c:	4b17      	ldr	r3, [pc, #92]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a16      	ldr	r2, [pc, #88]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a58:	f7fd fb14 	bl	8002084 <HAL_GetTick>
 8004a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a60:	f7fd fb10 	bl	8002084 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e0d7      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a72:	4b0e      	ldr	r3, [pc, #56]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f040 80cd 	bne.w	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a08      	ldr	r2, [pc, #32]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a92:	f7fd faf7 	bl	8002084 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a9a:	f7fd faf3 	bl	8002084 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b64      	cmp	r3, #100	; 0x64
 8004aa6:	d903      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e0ba      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004aac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ab0:	4b5e      	ldr	r3, [pc, #376]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004abc:	d0ed      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02e      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d12a      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ae6:	4b51      	ldr	r3, [pc, #324]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	0c1b      	lsrs	r3, r3, #16
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af4:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afa:	0f1b      	lsrs	r3, r3, #28
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	019a      	lsls	r2, r3, #6
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	061b      	lsls	r3, r3, #24
 8004b14:	431a      	orrs	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	071b      	lsls	r3, r3, #28
 8004b1a:	4944      	ldr	r1, [pc, #272]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b22:	4b42      	ldr	r3, [pc, #264]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	3b01      	subs	r3, #1
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	493d      	ldr	r1, [pc, #244]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d022      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b50:	d11d      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b52:	4b36      	ldr	r3, [pc, #216]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	0e1b      	lsrs	r3, r3, #24
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b60:	4b32      	ldr	r3, [pc, #200]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	0f1b      	lsrs	r3, r3, #28
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	019a      	lsls	r2, r3, #6
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	071b      	lsls	r3, r3, #28
 8004b86:	4929      	ldr	r1, [pc, #164]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d028      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	0e1b      	lsrs	r3, r3, #24
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ba8:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	019a      	lsls	r2, r3, #6
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	061b      	lsls	r3, r3, #24
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	071b      	lsls	r3, r3, #28
 8004bce:	4917      	ldr	r1, [pc, #92]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	4911      	ldr	r1, [pc, #68]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a0e      	ldr	r2, [pc, #56]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf8:	f7fd fa44 	bl	8002084 <HAL_GetTick>
 8004bfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c00:	f7fd fa40 	bl	8002084 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	; 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e007      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1e:	d1ef      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800

08004c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e084      	b.n	8004d4c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fc fea7 	bl	80019b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c78:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c82:	d902      	bls.n	8004c8a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e002      	b.n	8004c90 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c98:	d007      	beq.n	8004caa <HAL_SPI_Init+0x7a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cba:	d903      	bls.n	8004cc4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004cc2:	e002      	b.n	8004cca <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	ea42 0103 	orr.w	r1, r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	f003 0204 	and.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	ea42 0103 	orr.w	r1, r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69da      	ldr	r2, [r3, #28]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <HAL_SPI_Receive_DMA+0x3c>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d76:	d10b      	bne.n	8004d90 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f900 	bl	8004f8c <HAL_SPI_TransmitReceive_DMA>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	e0f3      	b.n	8004f78 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_SPI_Receive_DMA+0x4a>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e0ec      	b.n	8004f78 <HAL_SPI_Receive_DMA+0x224>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
 8004db4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004db6:	e0da      	b.n	8004f6e <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_SPI_Receive_DMA+0x70>
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dc8:	e0d1      	b.n	8004f6e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	88fa      	ldrh	r2, [r7, #6]
 8004dea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0e:	d107      	bne.n	8004e20 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e38:	d908      	bls.n	8004e4c <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e48:	605a      	str	r2, [r3, #4]
 8004e4a:	e042      	b.n	8004ed2 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e5a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e66:	d134      	bne.n	8004ed2 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e76:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d111      	bne.n	8004eac <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e96:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	085b      	lsrs	r3, r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004eaa:	e012      	b.n	8004ed2 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3301      	adds	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	4a2a      	ldr	r2, [pc, #168]	; (8004f80 <HAL_SPI_Receive_DMA+0x22c>)
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ede:	4a29      	ldr	r2, [pc, #164]	; (8004f84 <HAL_SPI_Receive_DMA+0x230>)
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	4a28      	ldr	r2, [pc, #160]	; (8004f88 <HAL_SPI_Receive_DMA+0x234>)
 8004ee8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	2200      	movs	r2, #0
 8004ef0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	4619      	mov	r1, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	461a      	mov	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f7fd fefe 	bl	8002d0c <HAL_DMA_Start_IT>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1a:	f043 0210 	orr.w	r2, r3, #16
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004f2e:	e01e      	b.n	8004f6e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	d007      	beq.n	8004f4e <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f4c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0220 	orr.w	r2, r2, #32
 8004f5c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	0800540d 	.word	0x0800540d
 8004f84:	080052f5 	.word	0x080052f5
 8004f88:	08005445 	.word	0x08005445

08004f8c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_SPI_TransmitReceive_DMA+0x20>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e16c      	b.n	8005286 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fba:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004fc2:	7dbb      	ldrb	r3, [r7, #22]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d00d      	beq.n	8004fe4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fce:	d106      	bne.n	8004fde <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <HAL_SPI_TransmitReceive_DMA+0x52>
 8004fd8:	7dbb      	ldrb	r3, [r7, #22]
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d002      	beq.n	8004fe4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fe2:	e14b      	b.n	800527c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ff0:	887b      	ldrh	r3, [r7, #2]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ffa:	e13f      	b.n	800527c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b04      	cmp	r3, #4
 8005006:	d003      	beq.n	8005010 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2205      	movs	r2, #5
 800500c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	887a      	ldrh	r2, [r7, #2]
 8005026:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	887a      	ldrh	r2, [r7, #2]
 8005032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	887a      	ldrh	r2, [r7, #2]
 800503a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005058:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005062:	d908      	bls.n	8005076 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005072:	605a      	str	r2, [r3, #4]
 8005074:	e06f      	b.n	8005156 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005084:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005090:	d126      	bne.n	80050e0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10f      	bne.n	80050be <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050ac:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	085b      	lsrs	r3, r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050bc:	e010      	b.n	80050e0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050cc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3301      	adds	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	d134      	bne.n	8005156 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050fa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005102:	b29b      	uxth	r3, r3
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d111      	bne.n	8005130 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800511a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005122:	b29b      	uxth	r3, r3
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800512e:	e012      	b.n	8005156 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800513e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005146:	b29b      	uxth	r3, r3
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	b29b      	uxth	r3, r3
 800514c:	3301      	adds	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b04      	cmp	r3, #4
 8005160:	d108      	bne.n	8005174 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	4a4a      	ldr	r2, [pc, #296]	; (8005290 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	4a49      	ldr	r2, [pc, #292]	; (8005294 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005170:	63da      	str	r2, [r3, #60]	; 0x3c
 8005172:	e007      	b.n	8005184 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005178:	4a47      	ldr	r2, [pc, #284]	; (8005298 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800517a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	4a46      	ldr	r2, [pc, #280]	; (800529c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005182:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005188:	4a45      	ldr	r2, [pc, #276]	; (80052a0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800518a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	2200      	movs	r2, #0
 8005192:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	4619      	mov	r1, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	461a      	mov	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f7fd fdad 	bl	8002d0c <HAL_DMA_Start_IT>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00c      	beq.n	80051d2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	f043 0210 	orr.w	r2, r3, #16
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80051d0:	e054      	b.n	800527c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	2200      	movs	r2, #0
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	2200      	movs	r2, #0
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f6:	2200      	movs	r2, #0
 80051f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	2200      	movs	r2, #0
 8005200:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	4619      	mov	r1, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	461a      	mov	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005218:	b29b      	uxth	r3, r3
 800521a:	f7fd fd77 	bl	8002d0c <HAL_DMA_Start_IT>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005228:	f043 0210 	orr.w	r2, r3, #16
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800523c:	e01e      	b.n	800527c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d007      	beq.n	800525c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800525a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0220 	orr.w	r2, r2, #32
 800526a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0202 	orr.w	r2, r2, #2
 800527a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	0800540d 	.word	0x0800540d
 8005294:	080052f5 	.word	0x080052f5
 8005298:	08005429 	.word	0x08005429
 800529c:	0800537b 	.word	0x0800537b
 80052a0:	08005445 	.word	0x08005445

080052a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005302:	f7fc febf 	bl	8002084 <HAL_GetTick>
 8005306:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005316:	d02a      	beq.n	800536e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0220 	bic.w	r2, r2, #32
 8005326:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0203 	bic.w	r2, r2, #3
 8005336:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	2164      	movs	r1, #100	; 0x64
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f978 	bl	8005632 <SPI_EndRxTransaction>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff ffba 	bl	80052e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800536c:	e002      	b.n	8005374 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7fb ff7a 	bl	8001268 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005388:	f7fc fe7c 	bl	8002084 <HAL_GetTick>
 800538c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539c:	d030      	beq.n	8005400 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0220 	bic.w	r2, r2, #32
 80053ac:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	2164      	movs	r1, #100	; 0x64
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f995 	bl	80056e2 <SPI_EndRxTxTransaction>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0203 	bic.w	r2, r2, #3
 80053d8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff ff71 	bl	80052e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80053fe:	e002      	b.n	8005406 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff ff4f 	bl	80052a4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff ff4c 	bl	80052b8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff ff48 	bl	80052cc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0203 	bic.w	r2, r2, #3
 8005460:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005466:	f043 0210 	orr.w	r2, r3, #16
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff ff32 	bl	80052e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005494:	e04c      	b.n	8005530 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d048      	beq.n	8005530 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800549e:	f7fc fdf1 	bl	8002084 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d902      	bls.n	80054b4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d13d      	bne.n	8005530 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054cc:	d111      	bne.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d6:	d004      	beq.n	80054e2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e0:	d107      	bne.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fa:	d10f      	bne.n	800551c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800551a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e00f      	b.n	8005550 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4013      	ands	r3, r2
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	429a      	cmp	r2, r3
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	429a      	cmp	r2, r3
 800554c:	d1a3      	bne.n	8005496 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005566:	e057      	b.n	8005618 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800556e:	d106      	bne.n	800557e <SPI_WaitFifoStateUntilTimeout+0x26>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d048      	beq.n	8005618 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005586:	f7fc fd7d 	bl	8002084 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d902      	bls.n	800559c <SPI_WaitFifoStateUntilTimeout+0x44>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d13d      	bne.n	8005618 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b4:	d111      	bne.n	80055da <SPI_WaitFifoStateUntilTimeout+0x82>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055be:	d004      	beq.n	80055ca <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c8:	d107      	bne.n	80055da <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	d10f      	bne.n	8005604 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005602:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e008      	b.n	800562a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d19f      	bne.n	8005568 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af02      	add	r7, sp, #8
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005646:	d111      	bne.n	800566c <SPI_EndRxTransaction+0x3a>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005650:	d004      	beq.n	800565c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565a:	d107      	bne.n	800566c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2200      	movs	r2, #0
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff ff04 	bl	8005484 <SPI_WaitFlagStateUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e023      	b.n	80056da <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800569a:	d11d      	bne.n	80056d8 <SPI_EndRxTransaction+0xa6>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a4:	d004      	beq.n	80056b0 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ae:	d113      	bne.n	80056d8 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff ff4b 	bl	8005558 <SPI_WaitFifoStateUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056cc:	f043 0220 	orr.w	r2, r3, #32
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e000      	b.n	80056da <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af02      	add	r7, sp, #8
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff ff2c 	bl	8005558 <SPI_WaitFifoStateUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e027      	b.n	8005766 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	2180      	movs	r1, #128	; 0x80
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff feaf 	bl	8005484 <SPI_WaitFlagStateUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005730:	f043 0220 	orr.w	r2, r3, #32
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e014      	b.n	8005766 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f7ff ff05 	bl	8005558 <SPI_WaitFifoStateUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005758:	f043 0220 	orr.w	r2, r3, #32
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e000      	b.n	8005766 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e01d      	b.n	80057bc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fc f983 	bl	8001aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f000 fec9 	bl	8006544 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <HAL_TIM_Base_Start_IT+0x50>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d00b      	beq.n	8005806 <HAL_TIM_Base_Start_IT+0x42>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f4:	d007      	beq.n	8005806 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0201 	orr.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	00010007 	.word	0x00010007

08005818 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6a1a      	ldr	r2, [r3, #32]
 8005836:	f241 1311 	movw	r3, #4369	; 0x1111
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10f      	bne.n	8005860 <HAL_TIM_Base_Stop_IT+0x48>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a1a      	ldr	r2, [r3, #32]
 8005846:	f240 4344 	movw	r3, #1092	; 0x444
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <HAL_TIM_Base_Stop_IT+0x48>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e01d      	b.n	80058bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f815 	bl	80058c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f000 fe49 	bl	8006544 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d841      	bhi.n	800596c <HAL_TIM_PWM_Start_IT+0x94>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <HAL_TIM_PWM_Start_IT+0x18>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005925 	.word	0x08005925
 80058f4:	0800596d 	.word	0x0800596d
 80058f8:	0800596d 	.word	0x0800596d
 80058fc:	0800596d 	.word	0x0800596d
 8005900:	08005937 	.word	0x08005937
 8005904:	0800596d 	.word	0x0800596d
 8005908:	0800596d 	.word	0x0800596d
 800590c:	0800596d 	.word	0x0800596d
 8005910:	08005949 	.word	0x08005949
 8005914:	0800596d 	.word	0x0800596d
 8005918:	0800596d 	.word	0x0800596d
 800591c:	0800596d 	.word	0x0800596d
 8005920:	0800595b 	.word	0x0800595b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0202 	orr.w	r2, r2, #2
 8005932:	60da      	str	r2, [r3, #12]
      break;
 8005934:	e01b      	b.n	800596e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0204 	orr.w	r2, r2, #4
 8005944:	60da      	str	r2, [r3, #12]
      break;
 8005946:	e012      	b.n	800596e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0208 	orr.w	r2, r2, #8
 8005956:	60da      	str	r2, [r3, #12]
      break;
 8005958:	e009      	b.n	800596e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0210 	orr.w	r2, r2, #16
 8005968:	60da      	str	r2, [r3, #12]
      break;
 800596a:	e000      	b.n	800596e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800596c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fb2e 	bl	8006fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a17      	ldr	r2, [pc, #92]	; (80059e0 <HAL_TIM_PWM_Start_IT+0x108>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_TIM_PWM_Start_IT+0xb8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a16      	ldr	r2, [pc, #88]	; (80059e4 <HAL_TIM_PWM_Start_IT+0x10c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d101      	bne.n	8005994 <HAL_TIM_PWM_Start_IT+0xbc>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <HAL_TIM_PWM_Start_IT+0xbe>
 8005994:	2300      	movs	r3, #0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <HAL_TIM_PWM_Start_IT+0x110>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b06      	cmp	r3, #6
 80059ba:	d00b      	beq.n	80059d4 <HAL_TIM_PWM_Start_IT+0xfc>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c2:	d007      	beq.n	80059d4 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40010400 	.word	0x40010400
 80059e8:	00010007 	.word	0x00010007

080059ec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b0c      	cmp	r3, #12
 80059fa:	d841      	bhi.n	8005a80 <HAL_TIM_PWM_Stop_IT+0x94>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <HAL_TIM_PWM_Stop_IT+0x18>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a39 	.word	0x08005a39
 8005a08:	08005a81 	.word	0x08005a81
 8005a0c:	08005a81 	.word	0x08005a81
 8005a10:	08005a81 	.word	0x08005a81
 8005a14:	08005a4b 	.word	0x08005a4b
 8005a18:	08005a81 	.word	0x08005a81
 8005a1c:	08005a81 	.word	0x08005a81
 8005a20:	08005a81 	.word	0x08005a81
 8005a24:	08005a5d 	.word	0x08005a5d
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	08005a81 	.word	0x08005a81
 8005a34:	08005a6f 	.word	0x08005a6f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0202 	bic.w	r2, r2, #2
 8005a46:	60da      	str	r2, [r3, #12]
      break;
 8005a48:	e01b      	b.n	8005a82 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0204 	bic.w	r2, r2, #4
 8005a58:	60da      	str	r2, [r3, #12]
      break;
 8005a5a:	e012      	b.n	8005a82 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0208 	bic.w	r2, r2, #8
 8005a6a:	60da      	str	r2, [r3, #12]
      break;
 8005a6c:	e009      	b.n	8005a82 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0210 	bic.w	r2, r2, #16
 8005a7c:	60da      	str	r2, [r3, #12]
      break;
 8005a7e:	e000      	b.n	8005a82 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8005a80:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f001 faa4 	bl	8006fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIM_PWM_Stop_IT+0xb8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1f      	ldr	r2, [pc, #124]	; (8005b1c <HAL_TIM_PWM_Stop_IT+0x130>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_TIM_PWM_Stop_IT+0xbc>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_TIM_PWM_Stop_IT+0xbe>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d017      	beq.n	8005ade <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10f      	bne.n	8005ade <HAL_TIM_PWM_Stop_IT+0xf2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6a1a      	ldr	r2, [r3, #32]
 8005ac4:	f240 4344 	movw	r3, #1092	; 0x444
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <HAL_TIM_PWM_Stop_IT+0xf2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005adc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ae8:	4013      	ands	r3, r2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10f      	bne.n	8005b0e <HAL_TIM_PWM_Stop_IT+0x122>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a1a      	ldr	r2, [r3, #32]
 8005af4:	f240 4344 	movw	r3, #1092	; 0x444
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <HAL_TIM_PWM_Stop_IT+0x122>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40010400 	.word	0x40010400

08005b20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e01d      	b.n	8005b6e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fc f81c 	bl	8001b84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f000 fcf0 	bl	8006544 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b0c      	cmp	r3, #12
 8005b86:	d841      	bhi.n	8005c0c <HAL_TIM_IC_Start_IT+0x94>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <HAL_TIM_IC_Start_IT+0x18>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bc5 	.word	0x08005bc5
 8005b94:	08005c0d 	.word	0x08005c0d
 8005b98:	08005c0d 	.word	0x08005c0d
 8005b9c:	08005c0d 	.word	0x08005c0d
 8005ba0:	08005bd7 	.word	0x08005bd7
 8005ba4:	08005c0d 	.word	0x08005c0d
 8005ba8:	08005c0d 	.word	0x08005c0d
 8005bac:	08005c0d 	.word	0x08005c0d
 8005bb0:	08005be9 	.word	0x08005be9
 8005bb4:	08005c0d 	.word	0x08005c0d
 8005bb8:	08005c0d 	.word	0x08005c0d
 8005bbc:	08005c0d 	.word	0x08005c0d
 8005bc0:	08005bfb 	.word	0x08005bfb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0202 	orr.w	r2, r2, #2
 8005bd2:	60da      	str	r2, [r3, #12]
      break;
 8005bd4:	e01b      	b.n	8005c0e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0204 	orr.w	r2, r2, #4
 8005be4:	60da      	str	r2, [r3, #12]
      break;
 8005be6:	e012      	b.n	8005c0e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0208 	orr.w	r2, r2, #8
 8005bf6:	60da      	str	r2, [r3, #12]
      break;
 8005bf8:	e009      	b.n	8005c0e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0210 	orr.w	r2, r2, #16
 8005c08:	60da      	str	r2, [r3, #12]
      break;
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005c0c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2201      	movs	r2, #1
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 f9de 	bl	8006fd8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_TIM_IC_Start_IT+0xd8>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b06      	cmp	r3, #6
 8005c2c:	d00b      	beq.n	8005c46 <HAL_TIM_IC_Start_IT+0xce>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c34:	d007      	beq.n	8005c46 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	00010007 	.word	0x00010007

08005c54 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e02d      	b.n	8005cc4 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f825 	bl	8005ccc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f000 fc55 	bl	8006544 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0208 	bic.w	r2, r2, #8
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6819      	ldr	r1, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0202 	mvn.w	r2, #2
 8005d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb fbae 	bl	8001484 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fbec 	bl	8006508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fbf3 	bl	800651c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d122      	bne.n	8005d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0204 	mvn.w	r2, #4
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fb fb84 	bl	8001484 <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fbc2 	bl	8006508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fbc9 	bl	800651c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d122      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d11b      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0208 	mvn.w	r2, #8
 8005db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2204      	movs	r2, #4
 8005dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fb fb5a 	bl	8001484 <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fb98 	bl	8006508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb9f 	bl	800651c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d122      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d11b      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0210 	mvn.w	r2, #16
 8005e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2208      	movs	r2, #8
 8005e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fb fb30 	bl	8001484 <HAL_TIM_IC_CaptureCallback>
 8005e24:	e005      	b.n	8005e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fb6e 	bl	8006508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fb75 	bl	800651c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d10e      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d107      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0201 	mvn.w	r2, #1
 8005e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fb fb06 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	d10e      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d107      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 f9e0 	bl	8007250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9e:	d10e      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d107      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 f9d3 	bl	8007264 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d10e      	bne.n	8005eea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb23 	bl	8006530 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d10e      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d107      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f06f 0220 	mvn.w	r2, #32
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 f993 	bl	800723c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e08a      	b.n	800604e <HAL_TIM_IC_ConfigChannel+0x130>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d11b      	bne.n	8005f86 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f000 fe77 	bl	8006c50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 020c 	bic.w	r2, r2, #12
 8005f70:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6999      	ldr	r1, [r3, #24]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	619a      	str	r2, [r3, #24]
 8005f84:	e05a      	b.n	800603c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d11c      	bne.n	8005fc6 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f000 fefb 	bl	8006d96 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fae:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6999      	ldr	r1, [r3, #24]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	021a      	lsls	r2, r3, #8
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	619a      	str	r2, [r3, #24]
 8005fc4:	e03a      	b.n	800603c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d11b      	bne.n	8006004 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6819      	ldr	r1, [r3, #0]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f000 ff48 	bl	8006e70 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69da      	ldr	r2, [r3, #28]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 020c 	bic.w	r2, r2, #12
 8005fee:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69d9      	ldr	r1, [r3, #28]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	61da      	str	r2, [r3, #28]
 8006002:	e01b      	b.n	800603c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6819      	ldr	r1, [r3, #0]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f000 ff68 	bl	8006ee8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006026:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69d9      	ldr	r1, [r3, #28]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	021a      	lsls	r2, r3, #8
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800606e:	2302      	movs	r3, #2
 8006070:	e105      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x226>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2202      	movs	r2, #2
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b14      	cmp	r3, #20
 8006086:	f200 80f0 	bhi.w	800626a <HAL_TIM_PWM_ConfigChannel+0x212>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060e5 	.word	0x080060e5
 8006094:	0800626b 	.word	0x0800626b
 8006098:	0800626b 	.word	0x0800626b
 800609c:	0800626b 	.word	0x0800626b
 80060a0:	08006125 	.word	0x08006125
 80060a4:	0800626b 	.word	0x0800626b
 80060a8:	0800626b 	.word	0x0800626b
 80060ac:	0800626b 	.word	0x0800626b
 80060b0:	08006167 	.word	0x08006167
 80060b4:	0800626b 	.word	0x0800626b
 80060b8:	0800626b 	.word	0x0800626b
 80060bc:	0800626b 	.word	0x0800626b
 80060c0:	080061a7 	.word	0x080061a7
 80060c4:	0800626b 	.word	0x0800626b
 80060c8:	0800626b 	.word	0x0800626b
 80060cc:	0800626b 	.word	0x0800626b
 80060d0:	080061e9 	.word	0x080061e9
 80060d4:	0800626b 	.word	0x0800626b
 80060d8:	0800626b 	.word	0x0800626b
 80060dc:	0800626b 	.word	0x0800626b
 80060e0:	08006229 	.word	0x08006229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 faca 	bl	8006684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0208 	orr.w	r2, r2, #8
 80060fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0204 	bic.w	r2, r2, #4
 800610e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	619a      	str	r2, [r3, #24]
      break;
 8006122:	e0a3      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fb1c 	bl	8006768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6999      	ldr	r1, [r3, #24]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	021a      	lsls	r2, r3, #8
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]
      break;
 8006164:	e082      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fb73 	bl	8006858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0208 	orr.w	r2, r2, #8
 8006180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0204 	bic.w	r2, r2, #4
 8006190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	61da      	str	r2, [r3, #28]
      break;
 80061a4:	e062      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fbc9 	bl	8006944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	021a      	lsls	r2, r3, #8
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	61da      	str	r2, [r3, #28]
      break;
 80061e6:	e041      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fc00 	bl	80069f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0208 	orr.w	r2, r2, #8
 8006202:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006226:	e021      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fc32 	bl	8006a98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006242:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	021a      	lsls	r2, r3, #8
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006268:	e000      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800626a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_ConfigClockSource+0x18>
 800629c:	2302      	movs	r3, #2
 800629e:	e0a6      	b.n	80063ee <HAL_TIM_ConfigClockSource+0x166>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4b4f      	ldr	r3, [pc, #316]	; (80063f8 <HAL_TIM_ConfigClockSource+0x170>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d067      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0x120>
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d80b      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x6c>
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d073      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x140>
 80062e0:	2b10      	cmp	r3, #16
 80062e2:	d802      	bhi.n	80062ea <HAL_TIM_ConfigClockSource+0x62>
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d06f      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80062e8:	e078      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d06c      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x140>
 80062ee:	2b30      	cmp	r3, #48	; 0x30
 80062f0:	d06a      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80062f2:	e073      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80062f4:	2b70      	cmp	r3, #112	; 0x70
 80062f6:	d00d      	beq.n	8006314 <HAL_TIM_ConfigClockSource+0x8c>
 80062f8:	2b70      	cmp	r3, #112	; 0x70
 80062fa:	d804      	bhi.n	8006306 <HAL_TIM_ConfigClockSource+0x7e>
 80062fc:	2b50      	cmp	r3, #80	; 0x50
 80062fe:	d033      	beq.n	8006368 <HAL_TIM_ConfigClockSource+0xe0>
 8006300:	2b60      	cmp	r3, #96	; 0x60
 8006302:	d041      	beq.n	8006388 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006304:	e06a      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630a:	d066      	beq.n	80063da <HAL_TIM_ConfigClockSource+0x152>
 800630c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006310:	d017      	beq.n	8006342 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006312:	e063      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	6899      	ldr	r1, [r3, #8]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f000 fe38 	bl	8006f98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006336:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	609a      	str	r2, [r3, #8]
      break;
 8006340:	e04c      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	6899      	ldr	r1, [r3, #8]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f000 fe21 	bl	8006f98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006364:	609a      	str	r2, [r3, #8]
      break;
 8006366:	e039      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	6859      	ldr	r1, [r3, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	461a      	mov	r2, r3
 8006376:	f000 fcdf 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2150      	movs	r1, #80	; 0x50
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fdee 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006386:	e029      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	6859      	ldr	r1, [r3, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	461a      	mov	r2, r3
 8006396:	f000 fd3b 	bl	8006e10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2160      	movs	r1, #96	; 0x60
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fdde 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 80063a6:	e019      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	6859      	ldr	r1, [r3, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f000 fcbf 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2140      	movs	r1, #64	; 0x40
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fdce 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 80063c6:	e009      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f000 fdc5 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 80063d8:	e000      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80063da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	fffeff88 	.word	0xfffeff88

080063fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006410:	2302      	movs	r3, #2
 8006412:	e031      	b.n	8006478 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb8a 	bl	8006b40 <TIM_SlaveTimer_SetConfig>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e018      	b.n	8006478 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006454:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006464:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b0c      	cmp	r3, #12
 8006492:	d831      	bhi.n	80064f8 <HAL_TIM_ReadCapturedValue+0x78>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064d1 	.word	0x080064d1
 80064a0:	080064f9 	.word	0x080064f9
 80064a4:	080064f9 	.word	0x080064f9
 80064a8:	080064f9 	.word	0x080064f9
 80064ac:	080064db 	.word	0x080064db
 80064b0:	080064f9 	.word	0x080064f9
 80064b4:	080064f9 	.word	0x080064f9
 80064b8:	080064f9 	.word	0x080064f9
 80064bc:	080064e5 	.word	0x080064e5
 80064c0:	080064f9 	.word	0x080064f9
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	080064f9 	.word	0x080064f9
 80064cc:	080064ef 	.word	0x080064ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d6:	60fb      	str	r3, [r7, #12]

      break;
 80064d8:	e00f      	b.n	80064fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	60fb      	str	r3, [r7, #12]

      break;
 80064e2:	e00a      	b.n	80064fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	60fb      	str	r3, [r7, #12]

      break;
 80064ec:	e005      	b.n	80064fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	60fb      	str	r3, [r7, #12]

      break;
 80064f6:	e000      	b.n	80064fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80064f8:	bf00      	nop
  }

  return tmpreg;
 80064fa:	68fb      	ldr	r3, [r7, #12]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a40      	ldr	r2, [pc, #256]	; (8006658 <TIM_Base_SetConfig+0x114>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006562:	d00f      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a3d      	ldr	r2, [pc, #244]	; (800665c <TIM_Base_SetConfig+0x118>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00b      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a3c      	ldr	r2, [pc, #240]	; (8006660 <TIM_Base_SetConfig+0x11c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d007      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3b      	ldr	r2, [pc, #236]	; (8006664 <TIM_Base_SetConfig+0x120>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a3a      	ldr	r2, [pc, #232]	; (8006668 <TIM_Base_SetConfig+0x124>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d108      	bne.n	8006596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2f      	ldr	r2, [pc, #188]	; (8006658 <TIM_Base_SetConfig+0x114>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d02b      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a4:	d027      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2c      	ldr	r2, [pc, #176]	; (800665c <TIM_Base_SetConfig+0x118>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d023      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2b      	ldr	r2, [pc, #172]	; (8006660 <TIM_Base_SetConfig+0x11c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01f      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <TIM_Base_SetConfig+0x120>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01b      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a29      	ldr	r2, [pc, #164]	; (8006668 <TIM_Base_SetConfig+0x124>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d017      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a28      	ldr	r2, [pc, #160]	; (800666c <TIM_Base_SetConfig+0x128>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a27      	ldr	r2, [pc, #156]	; (8006670 <TIM_Base_SetConfig+0x12c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00f      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a26      	ldr	r2, [pc, #152]	; (8006674 <TIM_Base_SetConfig+0x130>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00b      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a25      	ldr	r2, [pc, #148]	; (8006678 <TIM_Base_SetConfig+0x134>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d007      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a24      	ldr	r2, [pc, #144]	; (800667c <TIM_Base_SetConfig+0x138>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a23      	ldr	r2, [pc, #140]	; (8006680 <TIM_Base_SetConfig+0x13c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d108      	bne.n	8006608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a0a      	ldr	r2, [pc, #40]	; (8006658 <TIM_Base_SetConfig+0x114>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d003      	beq.n	800663c <TIM_Base_SetConfig+0xf8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a0c      	ldr	r2, [pc, #48]	; (8006668 <TIM_Base_SetConfig+0x124>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d103      	bne.n	8006644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	615a      	str	r2, [r3, #20]
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40010000 	.word	0x40010000
 800665c:	40000400 	.word	0x40000400
 8006660:	40000800 	.word	0x40000800
 8006664:	40000c00 	.word	0x40000c00
 8006668:	40010400 	.word	0x40010400
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400
 8006674:	40014800 	.word	0x40014800
 8006678:	40001800 	.word	0x40001800
 800667c:	40001c00 	.word	0x40001c00
 8006680:	40002000 	.word	0x40002000

08006684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0201 	bic.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4b2b      	ldr	r3, [pc, #172]	; (800675c <TIM_OC1_SetConfig+0xd8>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 0302 	bic.w	r3, r3, #2
 80066cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a21      	ldr	r2, [pc, #132]	; (8006760 <TIM_OC1_SetConfig+0xdc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC1_SetConfig+0x64>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a20      	ldr	r2, [pc, #128]	; (8006764 <TIM_OC1_SetConfig+0xe0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d10c      	bne.n	8006702 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f023 0308 	bic.w	r3, r3, #8
 80066ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f023 0304 	bic.w	r3, r3, #4
 8006700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a16      	ldr	r2, [pc, #88]	; (8006760 <TIM_OC1_SetConfig+0xdc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_OC1_SetConfig+0x8e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <TIM_OC1_SetConfig+0xe0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d111      	bne.n	8006736 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	621a      	str	r2, [r3, #32]
}
 8006750:	bf00      	nop
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	fffeff8f 	.word	0xfffeff8f
 8006760:	40010000 	.word	0x40010000
 8006764:	40010400 	.word	0x40010400

08006768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f023 0210 	bic.w	r2, r3, #16
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4b2e      	ldr	r3, [pc, #184]	; (800684c <TIM_OC2_SetConfig+0xe4>)
 8006794:	4013      	ands	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f023 0320 	bic.w	r3, r3, #32
 80067b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a23      	ldr	r2, [pc, #140]	; (8006850 <TIM_OC2_SetConfig+0xe8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC2_SetConfig+0x68>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a22      	ldr	r2, [pc, #136]	; (8006854 <TIM_OC2_SetConfig+0xec>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10d      	bne.n	80067ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a18      	ldr	r2, [pc, #96]	; (8006850 <TIM_OC2_SetConfig+0xe8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_OC2_SetConfig+0x94>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a17      	ldr	r2, [pc, #92]	; (8006854 <TIM_OC2_SetConfig+0xec>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d113      	bne.n	8006824 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	feff8fff 	.word	0xfeff8fff
 8006850:	40010000 	.word	0x40010000
 8006854:	40010400 	.word	0x40010400

08006858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4b2d      	ldr	r3, [pc, #180]	; (8006938 <TIM_OC3_SetConfig+0xe0>)
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0303 	bic.w	r3, r3, #3
 800688e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a22      	ldr	r2, [pc, #136]	; (800693c <TIM_OC3_SetConfig+0xe4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d003      	beq.n	80068be <TIM_OC3_SetConfig+0x66>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a21      	ldr	r2, [pc, #132]	; (8006940 <TIM_OC3_SetConfig+0xe8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d10d      	bne.n	80068da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a17      	ldr	r2, [pc, #92]	; (800693c <TIM_OC3_SetConfig+0xe4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_OC3_SetConfig+0x92>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a16      	ldr	r2, [pc, #88]	; (8006940 <TIM_OC3_SetConfig+0xe8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d113      	bne.n	8006912 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	621a      	str	r2, [r3, #32]
}
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	fffeff8f 	.word	0xfffeff8f
 800693c:	40010000 	.word	0x40010000
 8006940:	40010400 	.word	0x40010400

08006944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <TIM_OC4_SetConfig+0xa4>)
 8006970:	4013      	ands	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800697a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800698e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	031b      	lsls	r3, r3, #12
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a13      	ldr	r2, [pc, #76]	; (80069ec <TIM_OC4_SetConfig+0xa8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC4_SetConfig+0x68>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a12      	ldr	r2, [pc, #72]	; (80069f0 <TIM_OC4_SetConfig+0xac>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d109      	bne.n	80069c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	019b      	lsls	r3, r3, #6
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	feff8fff 	.word	0xfeff8fff
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400

080069f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <TIM_OC5_SetConfig+0x98>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	041b      	lsls	r3, r3, #16
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a12      	ldr	r2, [pc, #72]	; (8006a90 <TIM_OC5_SetConfig+0x9c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d003      	beq.n	8006a52 <TIM_OC5_SetConfig+0x5e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a11      	ldr	r2, [pc, #68]	; (8006a94 <TIM_OC5_SetConfig+0xa0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d109      	bne.n	8006a66 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	621a      	str	r2, [r3, #32]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	fffeff8f 	.word	0xfffeff8f
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40010400 	.word	0x40010400

08006a98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <TIM_OC6_SetConfig+0x9c>)
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	051b      	lsls	r3, r3, #20
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <TIM_OC6_SetConfig+0xa0>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_OC6_SetConfig+0x60>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <TIM_OC6_SetConfig+0xa4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d109      	bne.n	8006b0c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	029b      	lsls	r3, r3, #10
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	feff8fff 	.word	0xfeff8fff
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40010400 	.word	0x40010400

08006b40 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b58:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4b39      	ldr	r3, [pc, #228]	; (8006c4c <TIM_SlaveTimer_SetConfig+0x10c>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b30      	cmp	r3, #48	; 0x30
 8006b84:	d05c      	beq.n	8006c40 <TIM_SlaveTimer_SetConfig+0x100>
 8006b86:	2b30      	cmp	r3, #48	; 0x30
 8006b88:	d806      	bhi.n	8006b98 <TIM_SlaveTimer_SetConfig+0x58>
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d058      	beq.n	8006c40 <TIM_SlaveTimer_SetConfig+0x100>
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d056      	beq.n	8006c40 <TIM_SlaveTimer_SetConfig+0x100>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d054      	beq.n	8006c40 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006b96:	e054      	b.n	8006c42 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006b98:	2b50      	cmp	r3, #80	; 0x50
 8006b9a:	d03d      	beq.n	8006c18 <TIM_SlaveTimer_SetConfig+0xd8>
 8006b9c:	2b50      	cmp	r3, #80	; 0x50
 8006b9e:	d802      	bhi.n	8006ba6 <TIM_SlaveTimer_SetConfig+0x66>
 8006ba0:	2b40      	cmp	r3, #64	; 0x40
 8006ba2:	d010      	beq.n	8006bc6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006ba4:	e04d      	b.n	8006c42 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006ba6:	2b60      	cmp	r3, #96	; 0x60
 8006ba8:	d040      	beq.n	8006c2c <TIM_SlaveTimer_SetConfig+0xec>
 8006baa:	2b70      	cmp	r3, #112	; 0x70
 8006bac:	d000      	beq.n	8006bb0 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006bae:	e048      	b.n	8006c42 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	68d9      	ldr	r1, [r3, #12]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f000 f9ea 	bl	8006f98 <TIM_ETR_SetConfig>
      break;
 8006bc4:	e03d      	b.n	8006c42 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d101      	bne.n	8006bd2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e038      	b.n	8006c44 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6a1a      	ldr	r2, [r3, #32]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	621a      	str	r2, [r3, #32]
      break;
 8006c16:	e014      	b.n	8006c42 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	6899      	ldr	r1, [r3, #8]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	461a      	mov	r2, r3
 8006c26:	f000 f887 	bl	8006d38 <TIM_TI1_ConfigInputStage>
      break;
 8006c2a:	e00a      	b.n	8006c42 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	6899      	ldr	r1, [r3, #8]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f000 f8e9 	bl	8006e10 <TIM_TI2_ConfigInputStage>
      break;
 8006c3e:	e000      	b.n	8006c42 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006c40:	bf00      	nop
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	fffefff8 	.word	0xfffefff8

08006c50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0201 	bic.w	r2, r3, #1
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a28      	ldr	r2, [pc, #160]	; (8006d1c <TIM_TI1_SetConfig+0xcc>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d01b      	beq.n	8006cb6 <TIM_TI1_SetConfig+0x66>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c84:	d017      	beq.n	8006cb6 <TIM_TI1_SetConfig+0x66>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4a25      	ldr	r2, [pc, #148]	; (8006d20 <TIM_TI1_SetConfig+0xd0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d013      	beq.n	8006cb6 <TIM_TI1_SetConfig+0x66>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4a24      	ldr	r2, [pc, #144]	; (8006d24 <TIM_TI1_SetConfig+0xd4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d00f      	beq.n	8006cb6 <TIM_TI1_SetConfig+0x66>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4a23      	ldr	r2, [pc, #140]	; (8006d28 <TIM_TI1_SetConfig+0xd8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00b      	beq.n	8006cb6 <TIM_TI1_SetConfig+0x66>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a22      	ldr	r2, [pc, #136]	; (8006d2c <TIM_TI1_SetConfig+0xdc>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <TIM_TI1_SetConfig+0x66>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4a21      	ldr	r2, [pc, #132]	; (8006d30 <TIM_TI1_SetConfig+0xe0>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_TI1_SetConfig+0x66>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4a20      	ldr	r2, [pc, #128]	; (8006d34 <TIM_TI1_SetConfig+0xe4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d101      	bne.n	8006cba <TIM_TI1_SetConfig+0x6a>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <TIM_TI1_SetConfig+0x6c>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d008      	beq.n	8006cd2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e003      	b.n	8006cda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f023 030a 	bic.w	r3, r3, #10
 8006cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f003 030a 	and.w	r3, r3, #10
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	621a      	str	r2, [r3, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800
 8006d28:	40000c00 	.word	0x40000c00
 8006d2c:	40010400 	.word	0x40010400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40001800 	.word	0x40001800

08006d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a1b      	ldr	r3, [r3, #32]
 8006d4e:	f023 0201 	bic.w	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f023 030a 	bic.w	r3, r3, #10
 8006d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b087      	sub	sp, #28
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f023 0210 	bic.w	r2, r3, #16
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	031b      	lsls	r3, r3, #12
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006de8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	621a      	str	r2, [r3, #32]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	f023 0210 	bic.w	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	031b      	lsls	r3, r3, #12
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 0303 	bic.w	r3, r3, #3
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	621a      	str	r2, [r3, #32]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	031b      	lsls	r3, r3, #12
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	031b      	lsls	r3, r3, #12
 8006f40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f043 0307 	orr.w	r3, r3, #7
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	609a      	str	r2, [r3, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	021a      	lsls	r2, r3, #8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	609a      	str	r2, [r3, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	2201      	movs	r2, #1
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1a      	ldr	r2, [r3, #32]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	401a      	ands	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	431a      	orrs	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007038:	2302      	movs	r3, #2
 800703a:	e06d      	b.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a30      	ldr	r2, [pc, #192]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d004      	beq.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a2f      	ldr	r2, [pc, #188]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d108      	bne.n	8007082 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007076:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007088:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a20      	ldr	r2, [pc, #128]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d022      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ae:	d01d      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1d      	ldr	r2, [pc, #116]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d018      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d013      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00e      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a15      	ldr	r2, [pc, #84]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d009      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a16      	ldr	r2, [pc, #88]	; (8007138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a15      	ldr	r2, [pc, #84]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d10c      	bne.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40010000 	.word	0x40010000
 8007128:	40010400 	.word	0x40010400
 800712c:	40000400 	.word	0x40000400
 8007130:	40000800 	.word	0x40000800
 8007134:	40000c00 	.word	0x40000c00
 8007138:	40014000 	.word	0x40014000
 800713c:	40001800 	.word	0x40001800

08007140 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007158:	2302      	movs	r3, #2
 800715a:	e065      	b.n	8007228 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	041b      	lsls	r3, r3, #16
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a16      	ldr	r2, [pc, #88]	; (8007234 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d004      	beq.n	80071ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a14      	ldr	r2, [pc, #80]	; (8007238 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d115      	bne.n	8007216 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	051b      	lsls	r3, r3, #20
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	40010000 	.word	0x40010000
 8007238:	40010400 	.word	0x40010400

0800723c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e040      	b.n	800730c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fa fd1a 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2224      	movs	r2, #36	; 0x24
 80072a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fac4 	bl	8007844 <UART_SetConfig>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e022      	b.n	800730c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fd62 	bl	8007d98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0201 	orr.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fde9 	bl	8007edc <UART_CheckIdleState>
 800730a:	4603      	mov	r3, r0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08a      	sub	sp, #40	; 0x28
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007328:	2b20      	cmp	r3, #32
 800732a:	d17f      	bne.n	800742c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <HAL_UART_Transmit+0x24>
 8007332:	88fb      	ldrh	r3, [r7, #6]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d101      	bne.n	800733c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e078      	b.n	800742e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_UART_Transmit+0x36>
 8007346:	2302      	movs	r3, #2
 8007348:	e071      	b.n	800742e <HAL_UART_Transmit+0x11a>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2221      	movs	r2, #33	; 0x21
 800735c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800735e:	f7fa fe91 	bl	8002084 <HAL_GetTick>
 8007362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737c:	d108      	bne.n	8007390 <HAL_UART_Transmit+0x7c>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e003      	b.n	8007398 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80073a0:	e02c      	b.n	80073fc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2200      	movs	r2, #0
 80073aa:	2180      	movs	r1, #128	; 0x80
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fdda 	bl	8007f66 <UART_WaitOnFlagUntilTimeout>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e038      	b.n	800742e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	3302      	adds	r3, #2
 80073d6:	61bb      	str	r3, [r7, #24]
 80073d8:	e007      	b.n	80073ea <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	781a      	ldrb	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	3301      	adds	r3, #1
 80073e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007402:	b29b      	uxth	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1cc      	bne.n	80073a2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2200      	movs	r2, #0
 8007410:	2140      	movs	r1, #64	; 0x40
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fda7 	bl	8007f66 <UART_WaitOnFlagUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e005      	b.n	800742e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	e000      	b.n	800742e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800742c:	2302      	movs	r3, #2
  }
}
 800742e:	4618      	mov	r0, r3
 8007430:	3720      	adds	r7, #32
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800744a:	2b20      	cmp	r3, #32
 800744c:	f040 808a 	bne.w	8007564 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <HAL_UART_Receive_IT+0x24>
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e082      	b.n	8007566 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_UART_Receive_IT+0x36>
 800746a:	2302      	movs	r3, #2
 800746c:	e07b      	b.n	8007566 <HAL_UART_Receive_IT+0x12e>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	88fa      	ldrh	r2, [r7, #6]
 8007480:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	88fa      	ldrh	r2, [r7, #6]
 8007488:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749a:	d10e      	bne.n	80074ba <HAL_UART_Receive_IT+0x82>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <HAL_UART_Receive_IT+0x78>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074ae:	e02d      	b.n	800750c <HAL_UART_Receive_IT+0xd4>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	22ff      	movs	r2, #255	; 0xff
 80074b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074b8:	e028      	b.n	800750c <HAL_UART_Receive_IT+0xd4>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10d      	bne.n	80074de <HAL_UART_Receive_IT+0xa6>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <HAL_UART_Receive_IT+0x9c>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	22ff      	movs	r2, #255	; 0xff
 80074ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074d2:	e01b      	b.n	800750c <HAL_UART_Receive_IT+0xd4>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	227f      	movs	r2, #127	; 0x7f
 80074d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074dc:	e016      	b.n	800750c <HAL_UART_Receive_IT+0xd4>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e6:	d10d      	bne.n	8007504 <HAL_UART_Receive_IT+0xcc>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <HAL_UART_Receive_IT+0xc2>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	227f      	movs	r2, #127	; 0x7f
 80074f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074f8:	e008      	b.n	800750c <HAL_UART_Receive_IT+0xd4>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	223f      	movs	r2, #63	; 0x3f
 80074fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007502:	e003      	b.n	800750c <HAL_UART_Receive_IT+0xd4>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2222      	movs	r2, #34	; 0x22
 8007516:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0201 	orr.w	r2, r2, #1
 8007526:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007530:	d107      	bne.n	8007542 <HAL_UART_Receive_IT+0x10a>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a0d      	ldr	r2, [pc, #52]	; (8007574 <HAL_UART_Receive_IT+0x13c>)
 800753e:	661a      	str	r2, [r3, #96]	; 0x60
 8007540:	e002      	b.n	8007548 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a0c      	ldr	r2, [pc, #48]	; (8007578 <HAL_UART_Receive_IT+0x140>)
 8007546:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800755e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	e000      	b.n	8007566 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007564:	2302      	movs	r3, #2
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	080081a1 	.word	0x080081a1
 8007578:	080080fb 	.word	0x080080fb

0800757c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	f640 030f 	movw	r3, #2063	; 0x80f
 80075a2:	4013      	ands	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d113      	bne.n	80075d4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8114 	beq.w	80077f2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
      }
      return;
 80075d2:	e10e      	b.n	80077f2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80d6 	beq.w	8007788 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80cb 	beq.w	8007788 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00e      	beq.n	800761a <HAL_UART_IRQHandler+0x9e>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007602:	2b00      	cmp	r3, #0
 8007604:	d009      	beq.n	800761a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2201      	movs	r2, #1
 800760c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007612:	f043 0201 	orr.w	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <HAL_UART_IRQHandler+0xc6>
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2202      	movs	r2, #2
 8007634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763a:	f043 0204 	orr.w	r2, r3, #4
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00e      	beq.n	800766a <HAL_UART_IRQHandler+0xee>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2204      	movs	r2, #4
 800765c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007662:	f043 0202 	orr.w	r2, r3, #2
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d013      	beq.n	800769c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007684:	2b00      	cmp	r3, #0
 8007686:	d009      	beq.n	800769c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2208      	movs	r2, #8
 800768e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007694:	f043 0208 	orr.w	r2, r3, #8
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00f      	beq.n	80076c6 <HAL_UART_IRQHandler+0x14a>
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8093 	beq.w	80077f6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00c      	beq.n	80076f4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d004      	beq.n	8007712 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800770e:	2b00      	cmp	r3, #0
 8007710:	d031      	beq.n	8007776 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fca2 	bl	800805c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d123      	bne.n	800776e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007734:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d013      	beq.n	8007766 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007742:	4a30      	ldr	r2, [pc, #192]	; (8007804 <HAL_UART_IRQHandler+0x288>)
 8007744:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774a:	4618      	mov	r0, r3
 800774c:	f7fb fbae 	bl	8002eac <HAL_DMA_Abort_IT>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d016      	beq.n	8007784 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	e00e      	b.n	8007784 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f858 	bl	800781c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776c:	e00a      	b.n	8007784 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f854 	bl	800781c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	e006      	b.n	8007784 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f850 	bl	800781c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007782:	e038      	b.n	80077f6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007784:	bf00      	nop
    return;
 8007786:	e036      	b.n	80077f6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00d      	beq.n	80077ae <HAL_UART_IRQHandler+0x232>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d008      	beq.n	80077ae <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80077a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f842 	bl	8007830 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077ac:	e026      	b.n	80077fc <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00d      	beq.n	80077d4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d017      	beq.n	80077fa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
    }
    return;
 80077d2:	e012      	b.n	80077fa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00e      	beq.n	80077fc <HAL_UART_IRQHandler+0x280>
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d009      	beq.n	80077fc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fc6d 	bl	80080c8 <UART_EndTransmit_IT>
    return;
 80077ee:	bf00      	nop
 80077f0:	e004      	b.n	80077fc <HAL_UART_IRQHandler+0x280>
      return;
 80077f2:	bf00      	nop
 80077f4:	e002      	b.n	80077fc <HAL_UART_IRQHandler+0x280>
    return;
 80077f6:	bf00      	nop
 80077f8:	e000      	b.n	80077fc <HAL_UART_IRQHandler+0x280>
    return;
 80077fa:	bf00      	nop
  }

}
 80077fc:	3720      	adds	r7, #32
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	0800809d 	.word	0x0800809d

08007808 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800784c:	2300      	movs	r3, #0
 800784e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	4313      	orrs	r3, r2
 800786a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4bb1      	ldr	r3, [pc, #708]	; (8007b38 <UART_SetConfig+0x2f4>)
 8007874:	4013      	ands	r3, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6812      	ldr	r2, [r2, #0]
 800787a:	6939      	ldr	r1, [r7, #16]
 800787c:	430b      	orrs	r3, r1
 800787e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a9f      	ldr	r2, [pc, #636]	; (8007b3c <UART_SetConfig+0x2f8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d121      	bne.n	8007908 <UART_SetConfig+0xc4>
 80078c4:	4b9e      	ldr	r3, [pc, #632]	; (8007b40 <UART_SetConfig+0x2fc>)
 80078c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d816      	bhi.n	8007900 <UART_SetConfig+0xbc>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x94>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078e9 	.word	0x080078e9
 80078dc:	080078f5 	.word	0x080078f5
 80078e0:	080078ef 	.word	0x080078ef
 80078e4:	080078fb 	.word	0x080078fb
 80078e8:	2301      	movs	r3, #1
 80078ea:	77fb      	strb	r3, [r7, #31]
 80078ec:	e151      	b.n	8007b92 <UART_SetConfig+0x34e>
 80078ee:	2302      	movs	r3, #2
 80078f0:	77fb      	strb	r3, [r7, #31]
 80078f2:	e14e      	b.n	8007b92 <UART_SetConfig+0x34e>
 80078f4:	2304      	movs	r3, #4
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e14b      	b.n	8007b92 <UART_SetConfig+0x34e>
 80078fa:	2308      	movs	r3, #8
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e148      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007900:	2310      	movs	r3, #16
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	bf00      	nop
 8007906:	e144      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a8d      	ldr	r2, [pc, #564]	; (8007b44 <UART_SetConfig+0x300>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d134      	bne.n	800797c <UART_SetConfig+0x138>
 8007912:	4b8b      	ldr	r3, [pc, #556]	; (8007b40 <UART_SetConfig+0x2fc>)
 8007914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007918:	f003 030c 	and.w	r3, r3, #12
 800791c:	2b0c      	cmp	r3, #12
 800791e:	d829      	bhi.n	8007974 <UART_SetConfig+0x130>
 8007920:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <UART_SetConfig+0xe4>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	0800795d 	.word	0x0800795d
 800792c:	08007975 	.word	0x08007975
 8007930:	08007975 	.word	0x08007975
 8007934:	08007975 	.word	0x08007975
 8007938:	08007969 	.word	0x08007969
 800793c:	08007975 	.word	0x08007975
 8007940:	08007975 	.word	0x08007975
 8007944:	08007975 	.word	0x08007975
 8007948:	08007963 	.word	0x08007963
 800794c:	08007975 	.word	0x08007975
 8007950:	08007975 	.word	0x08007975
 8007954:	08007975 	.word	0x08007975
 8007958:	0800796f 	.word	0x0800796f
 800795c:	2300      	movs	r3, #0
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e117      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007962:	2302      	movs	r3, #2
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e114      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007968:	2304      	movs	r3, #4
 800796a:	77fb      	strb	r3, [r7, #31]
 800796c:	e111      	b.n	8007b92 <UART_SetConfig+0x34e>
 800796e:	2308      	movs	r3, #8
 8007970:	77fb      	strb	r3, [r7, #31]
 8007972:	e10e      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007974:	2310      	movs	r3, #16
 8007976:	77fb      	strb	r3, [r7, #31]
 8007978:	bf00      	nop
 800797a:	e10a      	b.n	8007b92 <UART_SetConfig+0x34e>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a71      	ldr	r2, [pc, #452]	; (8007b48 <UART_SetConfig+0x304>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d120      	bne.n	80079c8 <UART_SetConfig+0x184>
 8007986:	4b6e      	ldr	r3, [pc, #440]	; (8007b40 <UART_SetConfig+0x2fc>)
 8007988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007990:	2b10      	cmp	r3, #16
 8007992:	d00f      	beq.n	80079b4 <UART_SetConfig+0x170>
 8007994:	2b10      	cmp	r3, #16
 8007996:	d802      	bhi.n	800799e <UART_SetConfig+0x15a>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <UART_SetConfig+0x164>
 800799c:	e010      	b.n	80079c0 <UART_SetConfig+0x17c>
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d005      	beq.n	80079ae <UART_SetConfig+0x16a>
 80079a2:	2b30      	cmp	r3, #48	; 0x30
 80079a4:	d009      	beq.n	80079ba <UART_SetConfig+0x176>
 80079a6:	e00b      	b.n	80079c0 <UART_SetConfig+0x17c>
 80079a8:	2300      	movs	r3, #0
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e0f1      	b.n	8007b92 <UART_SetConfig+0x34e>
 80079ae:	2302      	movs	r3, #2
 80079b0:	77fb      	strb	r3, [r7, #31]
 80079b2:	e0ee      	b.n	8007b92 <UART_SetConfig+0x34e>
 80079b4:	2304      	movs	r3, #4
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	e0eb      	b.n	8007b92 <UART_SetConfig+0x34e>
 80079ba:	2308      	movs	r3, #8
 80079bc:	77fb      	strb	r3, [r7, #31]
 80079be:	e0e8      	b.n	8007b92 <UART_SetConfig+0x34e>
 80079c0:	2310      	movs	r3, #16
 80079c2:	77fb      	strb	r3, [r7, #31]
 80079c4:	bf00      	nop
 80079c6:	e0e4      	b.n	8007b92 <UART_SetConfig+0x34e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a5f      	ldr	r2, [pc, #380]	; (8007b4c <UART_SetConfig+0x308>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d120      	bne.n	8007a14 <UART_SetConfig+0x1d0>
 80079d2:	4b5b      	ldr	r3, [pc, #364]	; (8007b40 <UART_SetConfig+0x2fc>)
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079dc:	2b40      	cmp	r3, #64	; 0x40
 80079de:	d00f      	beq.n	8007a00 <UART_SetConfig+0x1bc>
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d802      	bhi.n	80079ea <UART_SetConfig+0x1a6>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <UART_SetConfig+0x1b0>
 80079e8:	e010      	b.n	8007a0c <UART_SetConfig+0x1c8>
 80079ea:	2b80      	cmp	r3, #128	; 0x80
 80079ec:	d005      	beq.n	80079fa <UART_SetConfig+0x1b6>
 80079ee:	2bc0      	cmp	r3, #192	; 0xc0
 80079f0:	d009      	beq.n	8007a06 <UART_SetConfig+0x1c2>
 80079f2:	e00b      	b.n	8007a0c <UART_SetConfig+0x1c8>
 80079f4:	2300      	movs	r3, #0
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e0cb      	b.n	8007b92 <UART_SetConfig+0x34e>
 80079fa:	2302      	movs	r3, #2
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e0c8      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a00:	2304      	movs	r3, #4
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e0c5      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a06:	2308      	movs	r3, #8
 8007a08:	77fb      	strb	r3, [r7, #31]
 8007a0a:	e0c2      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	77fb      	strb	r3, [r7, #31]
 8007a10:	bf00      	nop
 8007a12:	e0be      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a4d      	ldr	r2, [pc, #308]	; (8007b50 <UART_SetConfig+0x30c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d124      	bne.n	8007a68 <UART_SetConfig+0x224>
 8007a1e:	4b48      	ldr	r3, [pc, #288]	; (8007b40 <UART_SetConfig+0x2fc>)
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2c:	d012      	beq.n	8007a54 <UART_SetConfig+0x210>
 8007a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a32:	d802      	bhi.n	8007a3a <UART_SetConfig+0x1f6>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d007      	beq.n	8007a48 <UART_SetConfig+0x204>
 8007a38:	e012      	b.n	8007a60 <UART_SetConfig+0x21c>
 8007a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a3e:	d006      	beq.n	8007a4e <UART_SetConfig+0x20a>
 8007a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a44:	d009      	beq.n	8007a5a <UART_SetConfig+0x216>
 8007a46:	e00b      	b.n	8007a60 <UART_SetConfig+0x21c>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	e0a1      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	77fb      	strb	r3, [r7, #31]
 8007a52:	e09e      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a54:	2304      	movs	r3, #4
 8007a56:	77fb      	strb	r3, [r7, #31]
 8007a58:	e09b      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	77fb      	strb	r3, [r7, #31]
 8007a5e:	e098      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a60:	2310      	movs	r3, #16
 8007a62:	77fb      	strb	r3, [r7, #31]
 8007a64:	bf00      	nop
 8007a66:	e094      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a39      	ldr	r2, [pc, #228]	; (8007b54 <UART_SetConfig+0x310>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d124      	bne.n	8007abc <UART_SetConfig+0x278>
 8007a72:	4b33      	ldr	r3, [pc, #204]	; (8007b40 <UART_SetConfig+0x2fc>)
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a80:	d012      	beq.n	8007aa8 <UART_SetConfig+0x264>
 8007a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a86:	d802      	bhi.n	8007a8e <UART_SetConfig+0x24a>
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d007      	beq.n	8007a9c <UART_SetConfig+0x258>
 8007a8c:	e012      	b.n	8007ab4 <UART_SetConfig+0x270>
 8007a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a92:	d006      	beq.n	8007aa2 <UART_SetConfig+0x25e>
 8007a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a98:	d009      	beq.n	8007aae <UART_SetConfig+0x26a>
 8007a9a:	e00b      	b.n	8007ab4 <UART_SetConfig+0x270>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	77fb      	strb	r3, [r7, #31]
 8007aa0:	e077      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	77fb      	strb	r3, [r7, #31]
 8007aa6:	e074      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e071      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007aae:	2308      	movs	r3, #8
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e06e      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	bf00      	nop
 8007aba:	e06a      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a25      	ldr	r2, [pc, #148]	; (8007b58 <UART_SetConfig+0x314>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d124      	bne.n	8007b10 <UART_SetConfig+0x2cc>
 8007ac6:	4b1e      	ldr	r3, [pc, #120]	; (8007b40 <UART_SetConfig+0x2fc>)
 8007ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007acc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad4:	d012      	beq.n	8007afc <UART_SetConfig+0x2b8>
 8007ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ada:	d802      	bhi.n	8007ae2 <UART_SetConfig+0x29e>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <UART_SetConfig+0x2ac>
 8007ae0:	e012      	b.n	8007b08 <UART_SetConfig+0x2c4>
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae6:	d006      	beq.n	8007af6 <UART_SetConfig+0x2b2>
 8007ae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aec:	d009      	beq.n	8007b02 <UART_SetConfig+0x2be>
 8007aee:	e00b      	b.n	8007b08 <UART_SetConfig+0x2c4>
 8007af0:	2300      	movs	r3, #0
 8007af2:	77fb      	strb	r3, [r7, #31]
 8007af4:	e04d      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007af6:	2302      	movs	r3, #2
 8007af8:	77fb      	strb	r3, [r7, #31]
 8007afa:	e04a      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007afc:	2304      	movs	r3, #4
 8007afe:	77fb      	strb	r3, [r7, #31]
 8007b00:	e047      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007b02:	2308      	movs	r3, #8
 8007b04:	77fb      	strb	r3, [r7, #31]
 8007b06:	e044      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	77fb      	strb	r3, [r7, #31]
 8007b0c:	bf00      	nop
 8007b0e:	e040      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a11      	ldr	r2, [pc, #68]	; (8007b5c <UART_SetConfig+0x318>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d139      	bne.n	8007b8e <UART_SetConfig+0x34a>
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <UART_SetConfig+0x2fc>)
 8007b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b28:	d027      	beq.n	8007b7a <UART_SetConfig+0x336>
 8007b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b2e:	d817      	bhi.n	8007b60 <UART_SetConfig+0x31c>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01c      	beq.n	8007b6e <UART_SetConfig+0x32a>
 8007b34:	e027      	b.n	8007b86 <UART_SetConfig+0x342>
 8007b36:	bf00      	nop
 8007b38:	efff69f3 	.word	0xefff69f3
 8007b3c:	40011000 	.word	0x40011000
 8007b40:	40023800 	.word	0x40023800
 8007b44:	40004400 	.word	0x40004400
 8007b48:	40004800 	.word	0x40004800
 8007b4c:	40004c00 	.word	0x40004c00
 8007b50:	40005000 	.word	0x40005000
 8007b54:	40011400 	.word	0x40011400
 8007b58:	40007800 	.word	0x40007800
 8007b5c:	40007c00 	.word	0x40007c00
 8007b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b64:	d006      	beq.n	8007b74 <UART_SetConfig+0x330>
 8007b66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b6a:	d009      	beq.n	8007b80 <UART_SetConfig+0x33c>
 8007b6c:	e00b      	b.n	8007b86 <UART_SetConfig+0x342>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e00e      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007b74:	2302      	movs	r3, #2
 8007b76:	77fb      	strb	r3, [r7, #31]
 8007b78:	e00b      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007b7a:	2304      	movs	r3, #4
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e008      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007b80:	2308      	movs	r3, #8
 8007b82:	77fb      	strb	r3, [r7, #31]
 8007b84:	e005      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007b86:	2310      	movs	r3, #16
 8007b88:	77fb      	strb	r3, [r7, #31]
 8007b8a:	bf00      	nop
 8007b8c:	e001      	b.n	8007b92 <UART_SetConfig+0x34e>
 8007b8e:	2310      	movs	r3, #16
 8007b90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b9a:	d17f      	bne.n	8007c9c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007b9c:	7ffb      	ldrb	r3, [r7, #31]
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d85c      	bhi.n	8007c5c <UART_SetConfig+0x418>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <UART_SetConfig+0x364>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bcd 	.word	0x08007bcd
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007c0d 	.word	0x08007c0d
 8007bb4:	08007c5d 	.word	0x08007c5d
 8007bb8:	08007c25 	.word	0x08007c25
 8007bbc:	08007c5d 	.word	0x08007c5d
 8007bc0:	08007c5d 	.word	0x08007c5d
 8007bc4:	08007c5d 	.word	0x08007c5d
 8007bc8:	08007c45 	.word	0x08007c45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bcc:	f7fc fbe2 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 8007bd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	005a      	lsls	r2, r3, #1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	085b      	lsrs	r3, r3, #1
 8007bdc:	441a      	add	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	61bb      	str	r3, [r7, #24]
        break;
 8007bea:	e03a      	b.n	8007c62 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bec:	f7fc fbe6 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 8007bf0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	005a      	lsls	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	61bb      	str	r3, [r7, #24]
        break;
 8007c0a:	e02a      	b.n	8007c62 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	085a      	lsrs	r2, r3, #1
 8007c12:	4b5f      	ldr	r3, [pc, #380]	; (8007d90 <UART_SetConfig+0x54c>)
 8007c14:	4413      	add	r3, r2
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	61bb      	str	r3, [r7, #24]
        break;
 8007c22:	e01e      	b.n	8007c62 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c24:	f7fc fad2 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8007c28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	005a      	lsls	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	61bb      	str	r3, [r7, #24]
        break;
 8007c42:	e00e      	b.n	8007c62 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	085b      	lsrs	r3, r3, #1
 8007c4a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	61bb      	str	r3, [r7, #24]
        break;
 8007c5a:	e002      	b.n	8007c62 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	75fb      	strb	r3, [r7, #23]
        break;
 8007c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b0f      	cmp	r3, #15
 8007c66:	d916      	bls.n	8007c96 <UART_SetConfig+0x452>
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c6e:	d212      	bcs.n	8007c96 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f023 030f 	bic.w	r3, r3, #15
 8007c78:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	897b      	ldrh	r3, [r7, #10]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	897a      	ldrh	r2, [r7, #10]
 8007c92:	60da      	str	r2, [r3, #12]
 8007c94:	e070      	b.n	8007d78 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	75fb      	strb	r3, [r7, #23]
 8007c9a:	e06d      	b.n	8007d78 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007c9c:	7ffb      	ldrb	r3, [r7, #31]
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d859      	bhi.n	8007d56 <UART_SetConfig+0x512>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x464>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007ceb 	.word	0x08007ceb
 8007cb0:	08007d09 	.word	0x08007d09
 8007cb4:	08007d57 	.word	0x08007d57
 8007cb8:	08007d21 	.word	0x08007d21
 8007cbc:	08007d57 	.word	0x08007d57
 8007cc0:	08007d57 	.word	0x08007d57
 8007cc4:	08007d57 	.word	0x08007d57
 8007cc8:	08007d3f 	.word	0x08007d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f7fc fb62 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 8007cd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	085a      	lsrs	r2, r3, #1
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	441a      	add	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	61bb      	str	r3, [r7, #24]
        break;
 8007ce8:	e038      	b.n	8007d5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cea:	f7fc fb67 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 8007cee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	085a      	lsrs	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	441a      	add	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	61bb      	str	r3, [r7, #24]
        break;
 8007d06:	e029      	b.n	8007d5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	085a      	lsrs	r2, r3, #1
 8007d0e:	4b21      	ldr	r3, [pc, #132]	; (8007d94 <UART_SetConfig+0x550>)
 8007d10:	4413      	add	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6852      	ldr	r2, [r2, #4]
 8007d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	61bb      	str	r3, [r7, #24]
        break;
 8007d1e:	e01d      	b.n	8007d5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d20:	f7fc fa54 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 8007d24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	085a      	lsrs	r2, r3, #1
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	441a      	add	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	61bb      	str	r3, [r7, #24]
        break;
 8007d3c:	e00e      	b.n	8007d5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	61bb      	str	r3, [r7, #24]
        break;
 8007d54:	e002      	b.n	8007d5c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]
        break;
 8007d5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b0f      	cmp	r3, #15
 8007d60:	d908      	bls.n	8007d74 <UART_SetConfig+0x530>
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d68:	d204      	bcs.n	8007d74 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e001      	b.n	8007d78 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3720      	adds	r7, #32
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	01e84800 	.word	0x01e84800
 8007d94:	00f42400 	.word	0x00f42400

08007d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	f003 0308 	and.w	r3, r3, #8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01a      	beq.n	8007eae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e96:	d10a      	bne.n	8007eae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	605a      	str	r2, [r3, #4]
  }
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007eea:	f7fa f8cb 	bl	8002084 <HAL_GetTick>
 8007eee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0308 	and.w	r3, r3, #8
 8007efa:	2b08      	cmp	r3, #8
 8007efc:	d10e      	bne.n	8007f1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007efe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f82a 	bl	8007f66 <UART_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e020      	b.n	8007f5e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d10e      	bne.n	8007f48 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f814 	bl	8007f66 <UART_WaitOnFlagUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e00a      	b.n	8007f5e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	4613      	mov	r3, r2
 8007f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f76:	e05d      	b.n	8008034 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7e:	d059      	beq.n	8008034 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f80:	f7fa f880 	bl	8002084 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d302      	bcc.n	8007f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d11b      	bne.n	8007fce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fa4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0201 	bic.w	r2, r2, #1
 8007fb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e042      	b.n	8008054 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02b      	beq.n	8008034 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fea:	d123      	bne.n	8008034 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ff4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008004:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2220      	movs	r2, #32
 800801a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2220      	movs	r2, #32
 8008020:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2220      	movs	r2, #32
 8008026:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e00f      	b.n	8008054 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69da      	ldr	r2, [r3, #28]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	4013      	ands	r3, r2
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	bf0c      	ite	eq
 8008044:	2301      	moveq	r3, #1
 8008046:	2300      	movne	r3, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	429a      	cmp	r2, r3
 8008050:	d092      	beq.n	8007f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008072:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fbae 	bl	800781c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2220      	movs	r2, #32
 80080e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fb8b 	bl	8007808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008108:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800810e:	2b22      	cmp	r3, #34	; 0x22
 8008110:	d13a      	bne.n	8008188 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800811a:	89bb      	ldrh	r3, [r7, #12]
 800811c:	b2d9      	uxtb	r1, r3
 800811e:	89fb      	ldrh	r3, [r7, #14]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	400a      	ands	r2, r1
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d121      	bne.n	8008198 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008162:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0201 	bic.w	r2, r2, #1
 8008172:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2220      	movs	r2, #32
 8008178:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7f8 ffc3 	bl	800110c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008186:	e007      	b.n	8008198 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0208 	orr.w	r2, r2, #8
 8008196:	619a      	str	r2, [r3, #24]
}
 8008198:	bf00      	nop
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081b4:	2b22      	cmp	r3, #34	; 0x22
 80081b6:	d13a      	bne.n	800822e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80081c6:	89ba      	ldrh	r2, [r7, #12]
 80081c8:	89fb      	ldrh	r3, [r7, #14]
 80081ca:	4013      	ands	r3, r2
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d6:	1c9a      	adds	r2, r3, #2
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d121      	bne.n	800823e <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008208:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0201 	bic.w	r2, r2, #1
 8008218:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7f8 ff70 	bl	800110c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800822c:	e007      	b.n	800823e <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699a      	ldr	r2, [r3, #24]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f042 0208 	orr.w	r2, r2, #8
 800823c:	619a      	str	r2, [r3, #24]
}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008248:	b084      	sub	sp, #16
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	f107 001c 	add.w	r0, r7, #28
 8008256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	2b01      	cmp	r3, #1
 800825e:	d120      	bne.n	80082a2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	4b20      	ldr	r3, [pc, #128]	; (80082f4 <USB_CoreInit+0xac>)
 8008272:	4013      	ands	r3, r2
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008286:	2b01      	cmp	r3, #1
 8008288:	d105      	bne.n	8008296 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fa52 	bl	8008740 <USB_CoreReset>
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
 80082a0:	e010      	b.n	80082c4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa46 	bl	8008740 <USB_CoreReset>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d10b      	bne.n	80082e2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f043 0206 	orr.w	r2, r3, #6
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f043 0220 	orr.w	r2, r3, #32
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082ee:	b004      	add	sp, #16
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	ffbdffbf 	.word	0xffbdffbf

080082f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f023 0201 	bic.w	r2, r3, #1
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d106      	bne.n	8008346 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	60da      	str	r2, [r3, #12]
 8008344:	e00b      	b.n	800835e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60da      	str	r2, [r3, #12]
 8008358:	e001      	b.n	800835e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e003      	b.n	8008366 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800835e:	2032      	movs	r0, #50	; 0x32
 8008360:	f7f9 fe9c 	bl	800209c <HAL_Delay>

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008370:	b084      	sub	sp, #16
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800837e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	e009      	b.n	80083a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	3340      	adds	r3, #64	; 0x40
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	2200      	movs	r2, #0
 800839c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	3301      	adds	r3, #1
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b0e      	cmp	r3, #14
 80083a8:	d9f2      	bls.n	8008390 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11c      	bne.n	80083ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083be:	f043 0302 	orr.w	r3, r3, #2
 80083c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e005      	b.n	80083f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083fc:	461a      	mov	r2, r3
 80083fe:	2300      	movs	r3, #0
 8008400:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008408:	4619      	mov	r1, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008410:	461a      	mov	r2, r3
 8008412:	680b      	ldr	r3, [r1, #0]
 8008414:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	2b01      	cmp	r3, #1
 800841a:	d10c      	bne.n	8008436 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f959 	bl	80086dc <USB_SetDevSpeed>
 800842a:	e018      	b.n	800845e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800842c:	2101      	movs	r1, #1
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f954 	bl	80086dc <USB_SetDevSpeed>
 8008434:	e013      	b.n	800845e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	2b03      	cmp	r3, #3
 800843a:	d10c      	bne.n	8008456 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008442:	2100      	movs	r1, #0
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f949 	bl	80086dc <USB_SetDevSpeed>
 800844a:	e008      	b.n	800845e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800844c:	2101      	movs	r1, #1
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f944 	bl	80086dc <USB_SetDevSpeed>
 8008454:	e003      	b.n	800845e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008456:	2103      	movs	r1, #3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f93f 	bl	80086dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800845e:	2110      	movs	r1, #16
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f8f3 	bl	800864c <USB_FlushTxFifo>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f911 	bl	8008698 <USB_FlushRxFifo>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008486:	461a      	mov	r2, r3
 8008488:	2300      	movs	r3, #0
 800848a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008492:	461a      	mov	r2, r3
 8008494:	2300      	movs	r3, #0
 8008496:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849e:	461a      	mov	r2, r3
 80084a0:	2300      	movs	r3, #0
 80084a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a4:	2300      	movs	r3, #0
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	e043      	b.n	8008532 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084c0:	d118      	bne.n	80084f4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d4:	461a      	mov	r2, r3
 80084d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	e013      	b.n	8008506 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	461a      	mov	r2, r3
 80084ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	e008      	b.n	8008506 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	461a      	mov	r2, r3
 8008502:	2300      	movs	r3, #0
 8008504:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	461a      	mov	r2, r3
 8008514:	2300      	movs	r3, #0
 8008516:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	461a      	mov	r2, r3
 8008526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800852a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	3301      	adds	r3, #1
 8008530:	613b      	str	r3, [r7, #16]
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	429a      	cmp	r2, r3
 8008538:	d3b7      	bcc.n	80084aa <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800853a:	2300      	movs	r3, #0
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	e043      	b.n	80085c8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008556:	d118      	bne.n	800858a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	461a      	mov	r2, r3
 800856c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	e013      	b.n	800859c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008580:	461a      	mov	r2, r3
 8008582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	e008      	b.n	800859c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	461a      	mov	r2, r3
 8008598:	2300      	movs	r3, #0
 800859a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	461a      	mov	r2, r3
 80085aa:	2300      	movs	r3, #0
 80085ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	461a      	mov	r2, r3
 80085bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	3301      	adds	r3, #1
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d3b7      	bcc.n	8008540 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d105      	bne.n	8008604 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	f043 0210 	orr.w	r2, r3, #16
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <USB_DevInit+0x2d4>)
 800860a:	4313      	orrs	r3, r2
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	f043 0208 	orr.w	r2, r3, #8
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d105      	bne.n	8008634 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699a      	ldr	r2, [r3, #24]
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <USB_DevInit+0x2d8>)
 800862e:	4313      	orrs	r3, r2
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008634:	7dfb      	ldrb	r3, [r7, #23]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008640:	b004      	add	sp, #16
 8008642:	4770      	bx	lr
 8008644:	803c3800 	.word	0x803c3800
 8008648:	40000004 	.word	0x40000004

0800864c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	019b      	lsls	r3, r3, #6
 800865e:	f043 0220 	orr.w	r2, r3, #32
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	4a09      	ldr	r2, [pc, #36]	; (8008694 <USB_FlushTxFifo+0x48>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d901      	bls.n	8008678 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e006      	b.n	8008686 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b20      	cmp	r3, #32
 8008682:	d0f0      	beq.n	8008666 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	00030d40 	.word	0x00030d40

08008698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2210      	movs	r2, #16
 80086a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3301      	adds	r3, #1
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4a09      	ldr	r2, [pc, #36]	; (80086d8 <USB_FlushRxFifo+0x40>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d901      	bls.n	80086bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e006      	b.n	80086ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d0f0      	beq.n	80086aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	00030d40 	.word	0x00030d40

080086dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	68f9      	ldr	r1, [r7, #12]
 80086f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086fc:	4313      	orrs	r3, r2
 80086fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008728:	f043 0302 	orr.w	r3, r3, #2
 800872c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800872e:	2003      	movs	r0, #3
 8008730:	f7f9 fcb4 	bl	800209c <HAL_Delay>

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <USB_CoreReset+0x64>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d901      	bls.n	800875e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e01b      	b.n	8008796 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	daf2      	bge.n	800874c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f043 0201 	orr.w	r2, r3, #1
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3301      	adds	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <USB_CoreReset+0x64>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d901      	bls.n	8008788 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e006      	b.n	8008796 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b01      	cmp	r3, #1
 8008792:	d0f0      	beq.n	8008776 <USB_CoreReset+0x36>

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	00030d40 	.word	0x00030d40

080087a8 <__errno>:
 80087a8:	4b01      	ldr	r3, [pc, #4]	; (80087b0 <__errno+0x8>)
 80087aa:	6818      	ldr	r0, [r3, #0]
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20000010 	.word	0x20000010

080087b4 <__libc_init_array>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	4e0d      	ldr	r6, [pc, #52]	; (80087ec <__libc_init_array+0x38>)
 80087b8:	4c0d      	ldr	r4, [pc, #52]	; (80087f0 <__libc_init_array+0x3c>)
 80087ba:	1ba4      	subs	r4, r4, r6
 80087bc:	10a4      	asrs	r4, r4, #2
 80087be:	2500      	movs	r5, #0
 80087c0:	42a5      	cmp	r5, r4
 80087c2:	d109      	bne.n	80087d8 <__libc_init_array+0x24>
 80087c4:	4e0b      	ldr	r6, [pc, #44]	; (80087f4 <__libc_init_array+0x40>)
 80087c6:	4c0c      	ldr	r4, [pc, #48]	; (80087f8 <__libc_init_array+0x44>)
 80087c8:	f000 fc26 	bl	8009018 <_init>
 80087cc:	1ba4      	subs	r4, r4, r6
 80087ce:	10a4      	asrs	r4, r4, #2
 80087d0:	2500      	movs	r5, #0
 80087d2:	42a5      	cmp	r5, r4
 80087d4:	d105      	bne.n	80087e2 <__libc_init_array+0x2e>
 80087d6:	bd70      	pop	{r4, r5, r6, pc}
 80087d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087dc:	4798      	blx	r3
 80087de:	3501      	adds	r5, #1
 80087e0:	e7ee      	b.n	80087c0 <__libc_init_array+0xc>
 80087e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087e6:	4798      	blx	r3
 80087e8:	3501      	adds	r5, #1
 80087ea:	e7f2      	b.n	80087d2 <__libc_init_array+0x1e>
 80087ec:	080090a0 	.word	0x080090a0
 80087f0:	080090a0 	.word	0x080090a0
 80087f4:	080090a0 	.word	0x080090a0
 80087f8:	080090a4 	.word	0x080090a4

080087fc <memset>:
 80087fc:	4402      	add	r2, r0
 80087fe:	4603      	mov	r3, r0
 8008800:	4293      	cmp	r3, r2
 8008802:	d100      	bne.n	8008806 <memset+0xa>
 8008804:	4770      	bx	lr
 8008806:	f803 1b01 	strb.w	r1, [r3], #1
 800880a:	e7f9      	b.n	8008800 <memset+0x4>

0800880c <siprintf>:
 800880c:	b40e      	push	{r1, r2, r3}
 800880e:	b500      	push	{lr}
 8008810:	b09c      	sub	sp, #112	; 0x70
 8008812:	ab1d      	add	r3, sp, #116	; 0x74
 8008814:	9002      	str	r0, [sp, #8]
 8008816:	9006      	str	r0, [sp, #24]
 8008818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800881c:	4809      	ldr	r0, [pc, #36]	; (8008844 <siprintf+0x38>)
 800881e:	9107      	str	r1, [sp, #28]
 8008820:	9104      	str	r1, [sp, #16]
 8008822:	4909      	ldr	r1, [pc, #36]	; (8008848 <siprintf+0x3c>)
 8008824:	f853 2b04 	ldr.w	r2, [r3], #4
 8008828:	9105      	str	r1, [sp, #20]
 800882a:	6800      	ldr	r0, [r0, #0]
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	a902      	add	r1, sp, #8
 8008830:	f000 f866 	bl	8008900 <_svfiprintf_r>
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]
 800883a:	b01c      	add	sp, #112	; 0x70
 800883c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008840:	b003      	add	sp, #12
 8008842:	4770      	bx	lr
 8008844:	20000010 	.word	0x20000010
 8008848:	ffff0208 	.word	0xffff0208

0800884c <__ssputs_r>:
 800884c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008850:	688e      	ldr	r6, [r1, #8]
 8008852:	429e      	cmp	r6, r3
 8008854:	4682      	mov	sl, r0
 8008856:	460c      	mov	r4, r1
 8008858:	4690      	mov	r8, r2
 800885a:	4699      	mov	r9, r3
 800885c:	d837      	bhi.n	80088ce <__ssputs_r+0x82>
 800885e:	898a      	ldrh	r2, [r1, #12]
 8008860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008864:	d031      	beq.n	80088ca <__ssputs_r+0x7e>
 8008866:	6825      	ldr	r5, [r4, #0]
 8008868:	6909      	ldr	r1, [r1, #16]
 800886a:	1a6f      	subs	r7, r5, r1
 800886c:	6965      	ldr	r5, [r4, #20]
 800886e:	2302      	movs	r3, #2
 8008870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008874:	fb95 f5f3 	sdiv	r5, r5, r3
 8008878:	f109 0301 	add.w	r3, r9, #1
 800887c:	443b      	add	r3, r7
 800887e:	429d      	cmp	r5, r3
 8008880:	bf38      	it	cc
 8008882:	461d      	movcc	r5, r3
 8008884:	0553      	lsls	r3, r2, #21
 8008886:	d530      	bpl.n	80088ea <__ssputs_r+0x9e>
 8008888:	4629      	mov	r1, r5
 800888a:	f000 fb2b 	bl	8008ee4 <_malloc_r>
 800888e:	4606      	mov	r6, r0
 8008890:	b950      	cbnz	r0, 80088a8 <__ssputs_r+0x5c>
 8008892:	230c      	movs	r3, #12
 8008894:	f8ca 3000 	str.w	r3, [sl]
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a8:	463a      	mov	r2, r7
 80088aa:	6921      	ldr	r1, [r4, #16]
 80088ac:	f000 faa8 	bl	8008e00 <memcpy>
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	6126      	str	r6, [r4, #16]
 80088be:	6165      	str	r5, [r4, #20]
 80088c0:	443e      	add	r6, r7
 80088c2:	1bed      	subs	r5, r5, r7
 80088c4:	6026      	str	r6, [r4, #0]
 80088c6:	60a5      	str	r5, [r4, #8]
 80088c8:	464e      	mov	r6, r9
 80088ca:	454e      	cmp	r6, r9
 80088cc:	d900      	bls.n	80088d0 <__ssputs_r+0x84>
 80088ce:	464e      	mov	r6, r9
 80088d0:	4632      	mov	r2, r6
 80088d2:	4641      	mov	r1, r8
 80088d4:	6820      	ldr	r0, [r4, #0]
 80088d6:	f000 fa9e 	bl	8008e16 <memmove>
 80088da:	68a3      	ldr	r3, [r4, #8]
 80088dc:	1b9b      	subs	r3, r3, r6
 80088de:	60a3      	str	r3, [r4, #8]
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	441e      	add	r6, r3
 80088e4:	6026      	str	r6, [r4, #0]
 80088e6:	2000      	movs	r0, #0
 80088e8:	e7dc      	b.n	80088a4 <__ssputs_r+0x58>
 80088ea:	462a      	mov	r2, r5
 80088ec:	f000 fb54 	bl	8008f98 <_realloc_r>
 80088f0:	4606      	mov	r6, r0
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d1e2      	bne.n	80088bc <__ssputs_r+0x70>
 80088f6:	6921      	ldr	r1, [r4, #16]
 80088f8:	4650      	mov	r0, sl
 80088fa:	f000 faa5 	bl	8008e48 <_free_r>
 80088fe:	e7c8      	b.n	8008892 <__ssputs_r+0x46>

08008900 <_svfiprintf_r>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	461d      	mov	r5, r3
 8008906:	898b      	ldrh	r3, [r1, #12]
 8008908:	061f      	lsls	r7, r3, #24
 800890a:	b09d      	sub	sp, #116	; 0x74
 800890c:	4680      	mov	r8, r0
 800890e:	460c      	mov	r4, r1
 8008910:	4616      	mov	r6, r2
 8008912:	d50f      	bpl.n	8008934 <_svfiprintf_r+0x34>
 8008914:	690b      	ldr	r3, [r1, #16]
 8008916:	b96b      	cbnz	r3, 8008934 <_svfiprintf_r+0x34>
 8008918:	2140      	movs	r1, #64	; 0x40
 800891a:	f000 fae3 	bl	8008ee4 <_malloc_r>
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	6120      	str	r0, [r4, #16]
 8008922:	b928      	cbnz	r0, 8008930 <_svfiprintf_r+0x30>
 8008924:	230c      	movs	r3, #12
 8008926:	f8c8 3000 	str.w	r3, [r8]
 800892a:	f04f 30ff 	mov.w	r0, #4294967295
 800892e:	e0c8      	b.n	8008ac2 <_svfiprintf_r+0x1c2>
 8008930:	2340      	movs	r3, #64	; 0x40
 8008932:	6163      	str	r3, [r4, #20]
 8008934:	2300      	movs	r3, #0
 8008936:	9309      	str	r3, [sp, #36]	; 0x24
 8008938:	2320      	movs	r3, #32
 800893a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800893e:	2330      	movs	r3, #48	; 0x30
 8008940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008944:	9503      	str	r5, [sp, #12]
 8008946:	f04f 0b01 	mov.w	fp, #1
 800894a:	4637      	mov	r7, r6
 800894c:	463d      	mov	r5, r7
 800894e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008952:	b10b      	cbz	r3, 8008958 <_svfiprintf_r+0x58>
 8008954:	2b25      	cmp	r3, #37	; 0x25
 8008956:	d13e      	bne.n	80089d6 <_svfiprintf_r+0xd6>
 8008958:	ebb7 0a06 	subs.w	sl, r7, r6
 800895c:	d00b      	beq.n	8008976 <_svfiprintf_r+0x76>
 800895e:	4653      	mov	r3, sl
 8008960:	4632      	mov	r2, r6
 8008962:	4621      	mov	r1, r4
 8008964:	4640      	mov	r0, r8
 8008966:	f7ff ff71 	bl	800884c <__ssputs_r>
 800896a:	3001      	adds	r0, #1
 800896c:	f000 80a4 	beq.w	8008ab8 <_svfiprintf_r+0x1b8>
 8008970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008972:	4453      	add	r3, sl
 8008974:	9309      	str	r3, [sp, #36]	; 0x24
 8008976:	783b      	ldrb	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 809d 	beq.w	8008ab8 <_svfiprintf_r+0x1b8>
 800897e:	2300      	movs	r3, #0
 8008980:	f04f 32ff 	mov.w	r2, #4294967295
 8008984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	9307      	str	r3, [sp, #28]
 800898c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008990:	931a      	str	r3, [sp, #104]	; 0x68
 8008992:	462f      	mov	r7, r5
 8008994:	2205      	movs	r2, #5
 8008996:	f817 1b01 	ldrb.w	r1, [r7], #1
 800899a:	4850      	ldr	r0, [pc, #320]	; (8008adc <_svfiprintf_r+0x1dc>)
 800899c:	f7f7 fc58 	bl	8000250 <memchr>
 80089a0:	9b04      	ldr	r3, [sp, #16]
 80089a2:	b9d0      	cbnz	r0, 80089da <_svfiprintf_r+0xda>
 80089a4:	06d9      	lsls	r1, r3, #27
 80089a6:	bf44      	itt	mi
 80089a8:	2220      	movmi	r2, #32
 80089aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089ae:	071a      	lsls	r2, r3, #28
 80089b0:	bf44      	itt	mi
 80089b2:	222b      	movmi	r2, #43	; 0x2b
 80089b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80089b8:	782a      	ldrb	r2, [r5, #0]
 80089ba:	2a2a      	cmp	r2, #42	; 0x2a
 80089bc:	d015      	beq.n	80089ea <_svfiprintf_r+0xea>
 80089be:	9a07      	ldr	r2, [sp, #28]
 80089c0:	462f      	mov	r7, r5
 80089c2:	2000      	movs	r0, #0
 80089c4:	250a      	movs	r5, #10
 80089c6:	4639      	mov	r1, r7
 80089c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089cc:	3b30      	subs	r3, #48	; 0x30
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d94d      	bls.n	8008a6e <_svfiprintf_r+0x16e>
 80089d2:	b1b8      	cbz	r0, 8008a04 <_svfiprintf_r+0x104>
 80089d4:	e00f      	b.n	80089f6 <_svfiprintf_r+0xf6>
 80089d6:	462f      	mov	r7, r5
 80089d8:	e7b8      	b.n	800894c <_svfiprintf_r+0x4c>
 80089da:	4a40      	ldr	r2, [pc, #256]	; (8008adc <_svfiprintf_r+0x1dc>)
 80089dc:	1a80      	subs	r0, r0, r2
 80089de:	fa0b f000 	lsl.w	r0, fp, r0
 80089e2:	4318      	orrs	r0, r3
 80089e4:	9004      	str	r0, [sp, #16]
 80089e6:	463d      	mov	r5, r7
 80089e8:	e7d3      	b.n	8008992 <_svfiprintf_r+0x92>
 80089ea:	9a03      	ldr	r2, [sp, #12]
 80089ec:	1d11      	adds	r1, r2, #4
 80089ee:	6812      	ldr	r2, [r2, #0]
 80089f0:	9103      	str	r1, [sp, #12]
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	db01      	blt.n	80089fa <_svfiprintf_r+0xfa>
 80089f6:	9207      	str	r2, [sp, #28]
 80089f8:	e004      	b.n	8008a04 <_svfiprintf_r+0x104>
 80089fa:	4252      	negs	r2, r2
 80089fc:	f043 0302 	orr.w	r3, r3, #2
 8008a00:	9207      	str	r2, [sp, #28]
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	783b      	ldrb	r3, [r7, #0]
 8008a06:	2b2e      	cmp	r3, #46	; 0x2e
 8008a08:	d10c      	bne.n	8008a24 <_svfiprintf_r+0x124>
 8008a0a:	787b      	ldrb	r3, [r7, #1]
 8008a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a0e:	d133      	bne.n	8008a78 <_svfiprintf_r+0x178>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	1d1a      	adds	r2, r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	9203      	str	r2, [sp, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfb8      	it	lt
 8008a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a20:	3702      	adds	r7, #2
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	4d2e      	ldr	r5, [pc, #184]	; (8008ae0 <_svfiprintf_r+0x1e0>)
 8008a26:	7839      	ldrb	r1, [r7, #0]
 8008a28:	2203      	movs	r2, #3
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f7f7 fc10 	bl	8000250 <memchr>
 8008a30:	b138      	cbz	r0, 8008a42 <_svfiprintf_r+0x142>
 8008a32:	2340      	movs	r3, #64	; 0x40
 8008a34:	1b40      	subs	r0, r0, r5
 8008a36:	fa03 f000 	lsl.w	r0, r3, r0
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	4303      	orrs	r3, r0
 8008a3e:	3701      	adds	r7, #1
 8008a40:	9304      	str	r3, [sp, #16]
 8008a42:	7839      	ldrb	r1, [r7, #0]
 8008a44:	4827      	ldr	r0, [pc, #156]	; (8008ae4 <_svfiprintf_r+0x1e4>)
 8008a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a4a:	2206      	movs	r2, #6
 8008a4c:	1c7e      	adds	r6, r7, #1
 8008a4e:	f7f7 fbff 	bl	8000250 <memchr>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d038      	beq.n	8008ac8 <_svfiprintf_r+0x1c8>
 8008a56:	4b24      	ldr	r3, [pc, #144]	; (8008ae8 <_svfiprintf_r+0x1e8>)
 8008a58:	bb13      	cbnz	r3, 8008aa0 <_svfiprintf_r+0x1a0>
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	3307      	adds	r3, #7
 8008a5e:	f023 0307 	bic.w	r3, r3, #7
 8008a62:	3308      	adds	r3, #8
 8008a64:	9303      	str	r3, [sp, #12]
 8008a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a68:	444b      	add	r3, r9
 8008a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6c:	e76d      	b.n	800894a <_svfiprintf_r+0x4a>
 8008a6e:	fb05 3202 	mla	r2, r5, r2, r3
 8008a72:	2001      	movs	r0, #1
 8008a74:	460f      	mov	r7, r1
 8008a76:	e7a6      	b.n	80089c6 <_svfiprintf_r+0xc6>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	3701      	adds	r7, #1
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	250a      	movs	r5, #10
 8008a82:	4638      	mov	r0, r7
 8008a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a88:	3a30      	subs	r2, #48	; 0x30
 8008a8a:	2a09      	cmp	r2, #9
 8008a8c:	d903      	bls.n	8008a96 <_svfiprintf_r+0x196>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0c8      	beq.n	8008a24 <_svfiprintf_r+0x124>
 8008a92:	9105      	str	r1, [sp, #20]
 8008a94:	e7c6      	b.n	8008a24 <_svfiprintf_r+0x124>
 8008a96:	fb05 2101 	mla	r1, r5, r1, r2
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	e7f0      	b.n	8008a82 <_svfiprintf_r+0x182>
 8008aa0:	ab03      	add	r3, sp, #12
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	4622      	mov	r2, r4
 8008aa6:	4b11      	ldr	r3, [pc, #68]	; (8008aec <_svfiprintf_r+0x1ec>)
 8008aa8:	a904      	add	r1, sp, #16
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f3af 8000 	nop.w
 8008ab0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ab4:	4681      	mov	r9, r0
 8008ab6:	d1d6      	bne.n	8008a66 <_svfiprintf_r+0x166>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	065b      	lsls	r3, r3, #25
 8008abc:	f53f af35 	bmi.w	800892a <_svfiprintf_r+0x2a>
 8008ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ac2:	b01d      	add	sp, #116	; 0x74
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac8:	ab03      	add	r3, sp, #12
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	4622      	mov	r2, r4
 8008ace:	4b07      	ldr	r3, [pc, #28]	; (8008aec <_svfiprintf_r+0x1ec>)
 8008ad0:	a904      	add	r1, sp, #16
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	f000 f882 	bl	8008bdc <_printf_i>
 8008ad8:	e7ea      	b.n	8008ab0 <_svfiprintf_r+0x1b0>
 8008ada:	bf00      	nop
 8008adc:	08009064 	.word	0x08009064
 8008ae0:	0800906a 	.word	0x0800906a
 8008ae4:	0800906e 	.word	0x0800906e
 8008ae8:	00000000 	.word	0x00000000
 8008aec:	0800884d 	.word	0x0800884d

08008af0 <_printf_common>:
 8008af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af4:	4691      	mov	r9, r2
 8008af6:	461f      	mov	r7, r3
 8008af8:	688a      	ldr	r2, [r1, #8]
 8008afa:	690b      	ldr	r3, [r1, #16]
 8008afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b00:	4293      	cmp	r3, r2
 8008b02:	bfb8      	it	lt
 8008b04:	4613      	movlt	r3, r2
 8008b06:	f8c9 3000 	str.w	r3, [r9]
 8008b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	b112      	cbz	r2, 8008b1a <_printf_common+0x2a>
 8008b14:	3301      	adds	r3, #1
 8008b16:	f8c9 3000 	str.w	r3, [r9]
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	0699      	lsls	r1, r3, #26
 8008b1e:	bf42      	ittt	mi
 8008b20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b24:	3302      	addmi	r3, #2
 8008b26:	f8c9 3000 	strmi.w	r3, [r9]
 8008b2a:	6825      	ldr	r5, [r4, #0]
 8008b2c:	f015 0506 	ands.w	r5, r5, #6
 8008b30:	d107      	bne.n	8008b42 <_printf_common+0x52>
 8008b32:	f104 0a19 	add.w	sl, r4, #25
 8008b36:	68e3      	ldr	r3, [r4, #12]
 8008b38:	f8d9 2000 	ldr.w	r2, [r9]
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	42ab      	cmp	r3, r5
 8008b40:	dc28      	bgt.n	8008b94 <_printf_common+0xa4>
 8008b42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b46:	6822      	ldr	r2, [r4, #0]
 8008b48:	3300      	adds	r3, #0
 8008b4a:	bf18      	it	ne
 8008b4c:	2301      	movne	r3, #1
 8008b4e:	0692      	lsls	r2, r2, #26
 8008b50:	d42d      	bmi.n	8008bae <_printf_common+0xbe>
 8008b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b56:	4639      	mov	r1, r7
 8008b58:	4630      	mov	r0, r6
 8008b5a:	47c0      	blx	r8
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d020      	beq.n	8008ba2 <_printf_common+0xb2>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	68e5      	ldr	r5, [r4, #12]
 8008b64:	f8d9 2000 	ldr.w	r2, [r9]
 8008b68:	f003 0306 	and.w	r3, r3, #6
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	bf08      	it	eq
 8008b70:	1aad      	subeq	r5, r5, r2
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	6922      	ldr	r2, [r4, #16]
 8008b76:	bf0c      	ite	eq
 8008b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b7c:	2500      	movne	r5, #0
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	bfc4      	itt	gt
 8008b82:	1a9b      	subgt	r3, r3, r2
 8008b84:	18ed      	addgt	r5, r5, r3
 8008b86:	f04f 0900 	mov.w	r9, #0
 8008b8a:	341a      	adds	r4, #26
 8008b8c:	454d      	cmp	r5, r9
 8008b8e:	d11a      	bne.n	8008bc6 <_printf_common+0xd6>
 8008b90:	2000      	movs	r0, #0
 8008b92:	e008      	b.n	8008ba6 <_printf_common+0xb6>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4652      	mov	r2, sl
 8008b98:	4639      	mov	r1, r7
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	47c0      	blx	r8
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d103      	bne.n	8008baa <_printf_common+0xba>
 8008ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008baa:	3501      	adds	r5, #1
 8008bac:	e7c3      	b.n	8008b36 <_printf_common+0x46>
 8008bae:	18e1      	adds	r1, r4, r3
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	2030      	movs	r0, #48	; 0x30
 8008bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bb8:	4422      	add	r2, r4
 8008bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bc2:	3302      	adds	r3, #2
 8008bc4:	e7c5      	b.n	8008b52 <_printf_common+0x62>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4639      	mov	r1, r7
 8008bcc:	4630      	mov	r0, r6
 8008bce:	47c0      	blx	r8
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d0e6      	beq.n	8008ba2 <_printf_common+0xb2>
 8008bd4:	f109 0901 	add.w	r9, r9, #1
 8008bd8:	e7d8      	b.n	8008b8c <_printf_common+0x9c>
	...

08008bdc <_printf_i>:
 8008bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008be0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008be4:	460c      	mov	r4, r1
 8008be6:	7e09      	ldrb	r1, [r1, #24]
 8008be8:	b085      	sub	sp, #20
 8008bea:	296e      	cmp	r1, #110	; 0x6e
 8008bec:	4617      	mov	r7, r2
 8008bee:	4606      	mov	r6, r0
 8008bf0:	4698      	mov	r8, r3
 8008bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bf4:	f000 80b3 	beq.w	8008d5e <_printf_i+0x182>
 8008bf8:	d822      	bhi.n	8008c40 <_printf_i+0x64>
 8008bfa:	2963      	cmp	r1, #99	; 0x63
 8008bfc:	d036      	beq.n	8008c6c <_printf_i+0x90>
 8008bfe:	d80a      	bhi.n	8008c16 <_printf_i+0x3a>
 8008c00:	2900      	cmp	r1, #0
 8008c02:	f000 80b9 	beq.w	8008d78 <_printf_i+0x19c>
 8008c06:	2958      	cmp	r1, #88	; 0x58
 8008c08:	f000 8083 	beq.w	8008d12 <_printf_i+0x136>
 8008c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c14:	e032      	b.n	8008c7c <_printf_i+0xa0>
 8008c16:	2964      	cmp	r1, #100	; 0x64
 8008c18:	d001      	beq.n	8008c1e <_printf_i+0x42>
 8008c1a:	2969      	cmp	r1, #105	; 0x69
 8008c1c:	d1f6      	bne.n	8008c0c <_printf_i+0x30>
 8008c1e:	6820      	ldr	r0, [r4, #0]
 8008c20:	6813      	ldr	r3, [r2, #0]
 8008c22:	0605      	lsls	r5, r0, #24
 8008c24:	f103 0104 	add.w	r1, r3, #4
 8008c28:	d52a      	bpl.n	8008c80 <_printf_i+0xa4>
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da03      	bge.n	8008c3a <_printf_i+0x5e>
 8008c32:	222d      	movs	r2, #45	; 0x2d
 8008c34:	425b      	negs	r3, r3
 8008c36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c3a:	486f      	ldr	r0, [pc, #444]	; (8008df8 <_printf_i+0x21c>)
 8008c3c:	220a      	movs	r2, #10
 8008c3e:	e039      	b.n	8008cb4 <_printf_i+0xd8>
 8008c40:	2973      	cmp	r1, #115	; 0x73
 8008c42:	f000 809d 	beq.w	8008d80 <_printf_i+0x1a4>
 8008c46:	d808      	bhi.n	8008c5a <_printf_i+0x7e>
 8008c48:	296f      	cmp	r1, #111	; 0x6f
 8008c4a:	d020      	beq.n	8008c8e <_printf_i+0xb2>
 8008c4c:	2970      	cmp	r1, #112	; 0x70
 8008c4e:	d1dd      	bne.n	8008c0c <_printf_i+0x30>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	f043 0320 	orr.w	r3, r3, #32
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	e003      	b.n	8008c62 <_printf_i+0x86>
 8008c5a:	2975      	cmp	r1, #117	; 0x75
 8008c5c:	d017      	beq.n	8008c8e <_printf_i+0xb2>
 8008c5e:	2978      	cmp	r1, #120	; 0x78
 8008c60:	d1d4      	bne.n	8008c0c <_printf_i+0x30>
 8008c62:	2378      	movs	r3, #120	; 0x78
 8008c64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c68:	4864      	ldr	r0, [pc, #400]	; (8008dfc <_printf_i+0x220>)
 8008c6a:	e055      	b.n	8008d18 <_printf_i+0x13c>
 8008c6c:	6813      	ldr	r3, [r2, #0]
 8008c6e:	1d19      	adds	r1, r3, #4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6011      	str	r1, [r2, #0]
 8008c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e08c      	b.n	8008d9a <_printf_i+0x1be>
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6011      	str	r1, [r2, #0]
 8008c84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c88:	bf18      	it	ne
 8008c8a:	b21b      	sxthne	r3, r3
 8008c8c:	e7cf      	b.n	8008c2e <_printf_i+0x52>
 8008c8e:	6813      	ldr	r3, [r2, #0]
 8008c90:	6825      	ldr	r5, [r4, #0]
 8008c92:	1d18      	adds	r0, r3, #4
 8008c94:	6010      	str	r0, [r2, #0]
 8008c96:	0628      	lsls	r0, r5, #24
 8008c98:	d501      	bpl.n	8008c9e <_printf_i+0xc2>
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	e002      	b.n	8008ca4 <_printf_i+0xc8>
 8008c9e:	0668      	lsls	r0, r5, #25
 8008ca0:	d5fb      	bpl.n	8008c9a <_printf_i+0xbe>
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	4854      	ldr	r0, [pc, #336]	; (8008df8 <_printf_i+0x21c>)
 8008ca6:	296f      	cmp	r1, #111	; 0x6f
 8008ca8:	bf14      	ite	ne
 8008caa:	220a      	movne	r2, #10
 8008cac:	2208      	moveq	r2, #8
 8008cae:	2100      	movs	r1, #0
 8008cb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cb4:	6865      	ldr	r5, [r4, #4]
 8008cb6:	60a5      	str	r5, [r4, #8]
 8008cb8:	2d00      	cmp	r5, #0
 8008cba:	f2c0 8095 	blt.w	8008de8 <_printf_i+0x20c>
 8008cbe:	6821      	ldr	r1, [r4, #0]
 8008cc0:	f021 0104 	bic.w	r1, r1, #4
 8008cc4:	6021      	str	r1, [r4, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d13d      	bne.n	8008d46 <_printf_i+0x16a>
 8008cca:	2d00      	cmp	r5, #0
 8008ccc:	f040 808e 	bne.w	8008dec <_printf_i+0x210>
 8008cd0:	4665      	mov	r5, ip
 8008cd2:	2a08      	cmp	r2, #8
 8008cd4:	d10b      	bne.n	8008cee <_printf_i+0x112>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	07db      	lsls	r3, r3, #31
 8008cda:	d508      	bpl.n	8008cee <_printf_i+0x112>
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	6862      	ldr	r2, [r4, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	bfde      	ittt	le
 8008ce4:	2330      	movle	r3, #48	; 0x30
 8008ce6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cee:	ebac 0305 	sub.w	r3, ip, r5
 8008cf2:	6123      	str	r3, [r4, #16]
 8008cf4:	f8cd 8000 	str.w	r8, [sp]
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	aa03      	add	r2, sp, #12
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7ff fef6 	bl	8008af0 <_printf_common>
 8008d04:	3001      	adds	r0, #1
 8008d06:	d14d      	bne.n	8008da4 <_printf_i+0x1c8>
 8008d08:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0c:	b005      	add	sp, #20
 8008d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d12:	4839      	ldr	r0, [pc, #228]	; (8008df8 <_printf_i+0x21c>)
 8008d14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d18:	6813      	ldr	r3, [r2, #0]
 8008d1a:	6821      	ldr	r1, [r4, #0]
 8008d1c:	1d1d      	adds	r5, r3, #4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6015      	str	r5, [r2, #0]
 8008d22:	060a      	lsls	r2, r1, #24
 8008d24:	d50b      	bpl.n	8008d3e <_printf_i+0x162>
 8008d26:	07ca      	lsls	r2, r1, #31
 8008d28:	bf44      	itt	mi
 8008d2a:	f041 0120 	orrmi.w	r1, r1, #32
 8008d2e:	6021      	strmi	r1, [r4, #0]
 8008d30:	b91b      	cbnz	r3, 8008d3a <_printf_i+0x15e>
 8008d32:	6822      	ldr	r2, [r4, #0]
 8008d34:	f022 0220 	bic.w	r2, r2, #32
 8008d38:	6022      	str	r2, [r4, #0]
 8008d3a:	2210      	movs	r2, #16
 8008d3c:	e7b7      	b.n	8008cae <_printf_i+0xd2>
 8008d3e:	064d      	lsls	r5, r1, #25
 8008d40:	bf48      	it	mi
 8008d42:	b29b      	uxthmi	r3, r3
 8008d44:	e7ef      	b.n	8008d26 <_printf_i+0x14a>
 8008d46:	4665      	mov	r5, ip
 8008d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d4c:	fb02 3311 	mls	r3, r2, r1, r3
 8008d50:	5cc3      	ldrb	r3, [r0, r3]
 8008d52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d56:	460b      	mov	r3, r1
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	d1f5      	bne.n	8008d48 <_printf_i+0x16c>
 8008d5c:	e7b9      	b.n	8008cd2 <_printf_i+0xf6>
 8008d5e:	6813      	ldr	r3, [r2, #0]
 8008d60:	6825      	ldr	r5, [r4, #0]
 8008d62:	6961      	ldr	r1, [r4, #20]
 8008d64:	1d18      	adds	r0, r3, #4
 8008d66:	6010      	str	r0, [r2, #0]
 8008d68:	0628      	lsls	r0, r5, #24
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	d501      	bpl.n	8008d72 <_printf_i+0x196>
 8008d6e:	6019      	str	r1, [r3, #0]
 8008d70:	e002      	b.n	8008d78 <_printf_i+0x19c>
 8008d72:	066a      	lsls	r2, r5, #25
 8008d74:	d5fb      	bpl.n	8008d6e <_printf_i+0x192>
 8008d76:	8019      	strh	r1, [r3, #0]
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6123      	str	r3, [r4, #16]
 8008d7c:	4665      	mov	r5, ip
 8008d7e:	e7b9      	b.n	8008cf4 <_printf_i+0x118>
 8008d80:	6813      	ldr	r3, [r2, #0]
 8008d82:	1d19      	adds	r1, r3, #4
 8008d84:	6011      	str	r1, [r2, #0]
 8008d86:	681d      	ldr	r5, [r3, #0]
 8008d88:	6862      	ldr	r2, [r4, #4]
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f7f7 fa5f 	bl	8000250 <memchr>
 8008d92:	b108      	cbz	r0, 8008d98 <_printf_i+0x1bc>
 8008d94:	1b40      	subs	r0, r0, r5
 8008d96:	6060      	str	r0, [r4, #4]
 8008d98:	6863      	ldr	r3, [r4, #4]
 8008d9a:	6123      	str	r3, [r4, #16]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008da2:	e7a7      	b.n	8008cf4 <_printf_i+0x118>
 8008da4:	6923      	ldr	r3, [r4, #16]
 8008da6:	462a      	mov	r2, r5
 8008da8:	4639      	mov	r1, r7
 8008daa:	4630      	mov	r0, r6
 8008dac:	47c0      	blx	r8
 8008dae:	3001      	adds	r0, #1
 8008db0:	d0aa      	beq.n	8008d08 <_printf_i+0x12c>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	079b      	lsls	r3, r3, #30
 8008db6:	d413      	bmi.n	8008de0 <_printf_i+0x204>
 8008db8:	68e0      	ldr	r0, [r4, #12]
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	4298      	cmp	r0, r3
 8008dbe:	bfb8      	it	lt
 8008dc0:	4618      	movlt	r0, r3
 8008dc2:	e7a3      	b.n	8008d0c <_printf_i+0x130>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	464a      	mov	r2, r9
 8008dc8:	4639      	mov	r1, r7
 8008dca:	4630      	mov	r0, r6
 8008dcc:	47c0      	blx	r8
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d09a      	beq.n	8008d08 <_printf_i+0x12c>
 8008dd2:	3501      	adds	r5, #1
 8008dd4:	68e3      	ldr	r3, [r4, #12]
 8008dd6:	9a03      	ldr	r2, [sp, #12]
 8008dd8:	1a9b      	subs	r3, r3, r2
 8008dda:	42ab      	cmp	r3, r5
 8008ddc:	dcf2      	bgt.n	8008dc4 <_printf_i+0x1e8>
 8008dde:	e7eb      	b.n	8008db8 <_printf_i+0x1dc>
 8008de0:	2500      	movs	r5, #0
 8008de2:	f104 0919 	add.w	r9, r4, #25
 8008de6:	e7f5      	b.n	8008dd4 <_printf_i+0x1f8>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1ac      	bne.n	8008d46 <_printf_i+0x16a>
 8008dec:	7803      	ldrb	r3, [r0, #0]
 8008dee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008df2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df6:	e76c      	b.n	8008cd2 <_printf_i+0xf6>
 8008df8:	08009075 	.word	0x08009075
 8008dfc:	08009086 	.word	0x08009086

08008e00 <memcpy>:
 8008e00:	b510      	push	{r4, lr}
 8008e02:	1e43      	subs	r3, r0, #1
 8008e04:	440a      	add	r2, r1
 8008e06:	4291      	cmp	r1, r2
 8008e08:	d100      	bne.n	8008e0c <memcpy+0xc>
 8008e0a:	bd10      	pop	{r4, pc}
 8008e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e14:	e7f7      	b.n	8008e06 <memcpy+0x6>

08008e16 <memmove>:
 8008e16:	4288      	cmp	r0, r1
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	eb01 0302 	add.w	r3, r1, r2
 8008e1e:	d807      	bhi.n	8008e30 <memmove+0x1a>
 8008e20:	1e42      	subs	r2, r0, #1
 8008e22:	4299      	cmp	r1, r3
 8008e24:	d00a      	beq.n	8008e3c <memmove+0x26>
 8008e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008e2e:	e7f8      	b.n	8008e22 <memmove+0xc>
 8008e30:	4283      	cmp	r3, r0
 8008e32:	d9f5      	bls.n	8008e20 <memmove+0xa>
 8008e34:	1881      	adds	r1, r0, r2
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	42d3      	cmn	r3, r2
 8008e3a:	d100      	bne.n	8008e3e <memmove+0x28>
 8008e3c:	bd10      	pop	{r4, pc}
 8008e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e42:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008e46:	e7f7      	b.n	8008e38 <memmove+0x22>

08008e48 <_free_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	2900      	cmp	r1, #0
 8008e4e:	d045      	beq.n	8008edc <_free_r+0x94>
 8008e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e54:	1f0c      	subs	r4, r1, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bfb8      	it	lt
 8008e5a:	18e4      	addlt	r4, r4, r3
 8008e5c:	f000 f8d2 	bl	8009004 <__malloc_lock>
 8008e60:	4a1f      	ldr	r2, [pc, #124]	; (8008ee0 <_free_r+0x98>)
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	4610      	mov	r0, r2
 8008e66:	b933      	cbnz	r3, 8008e76 <_free_r+0x2e>
 8008e68:	6063      	str	r3, [r4, #4]
 8008e6a:	6014      	str	r4, [r2, #0]
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e72:	f000 b8c8 	b.w	8009006 <__malloc_unlock>
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	d90c      	bls.n	8008e94 <_free_r+0x4c>
 8008e7a:	6821      	ldr	r1, [r4, #0]
 8008e7c:	1862      	adds	r2, r4, r1
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	bf04      	itt	eq
 8008e82:	681a      	ldreq	r2, [r3, #0]
 8008e84:	685b      	ldreq	r3, [r3, #4]
 8008e86:	6063      	str	r3, [r4, #4]
 8008e88:	bf04      	itt	eq
 8008e8a:	1852      	addeq	r2, r2, r1
 8008e8c:	6022      	streq	r2, [r4, #0]
 8008e8e:	6004      	str	r4, [r0, #0]
 8008e90:	e7ec      	b.n	8008e6c <_free_r+0x24>
 8008e92:	4613      	mov	r3, r2
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	b10a      	cbz	r2, 8008e9c <_free_r+0x54>
 8008e98:	42a2      	cmp	r2, r4
 8008e9a:	d9fa      	bls.n	8008e92 <_free_r+0x4a>
 8008e9c:	6819      	ldr	r1, [r3, #0]
 8008e9e:	1858      	adds	r0, r3, r1
 8008ea0:	42a0      	cmp	r0, r4
 8008ea2:	d10b      	bne.n	8008ebc <_free_r+0x74>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	4401      	add	r1, r0
 8008ea8:	1858      	adds	r0, r3, r1
 8008eaa:	4282      	cmp	r2, r0
 8008eac:	6019      	str	r1, [r3, #0]
 8008eae:	d1dd      	bne.n	8008e6c <_free_r+0x24>
 8008eb0:	6810      	ldr	r0, [r2, #0]
 8008eb2:	6852      	ldr	r2, [r2, #4]
 8008eb4:	605a      	str	r2, [r3, #4]
 8008eb6:	4401      	add	r1, r0
 8008eb8:	6019      	str	r1, [r3, #0]
 8008eba:	e7d7      	b.n	8008e6c <_free_r+0x24>
 8008ebc:	d902      	bls.n	8008ec4 <_free_r+0x7c>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	e7d3      	b.n	8008e6c <_free_r+0x24>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	1821      	adds	r1, r4, r0
 8008ec8:	428a      	cmp	r2, r1
 8008eca:	bf04      	itt	eq
 8008ecc:	6811      	ldreq	r1, [r2, #0]
 8008ece:	6852      	ldreq	r2, [r2, #4]
 8008ed0:	6062      	str	r2, [r4, #4]
 8008ed2:	bf04      	itt	eq
 8008ed4:	1809      	addeq	r1, r1, r0
 8008ed6:	6021      	streq	r1, [r4, #0]
 8008ed8:	605c      	str	r4, [r3, #4]
 8008eda:	e7c7      	b.n	8008e6c <_free_r+0x24>
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	200000ac 	.word	0x200000ac

08008ee4 <_malloc_r>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	1ccd      	adds	r5, r1, #3
 8008ee8:	f025 0503 	bic.w	r5, r5, #3
 8008eec:	3508      	adds	r5, #8
 8008eee:	2d0c      	cmp	r5, #12
 8008ef0:	bf38      	it	cc
 8008ef2:	250c      	movcc	r5, #12
 8008ef4:	2d00      	cmp	r5, #0
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	db01      	blt.n	8008efe <_malloc_r+0x1a>
 8008efa:	42a9      	cmp	r1, r5
 8008efc:	d903      	bls.n	8008f06 <_malloc_r+0x22>
 8008efe:	230c      	movs	r3, #12
 8008f00:	6033      	str	r3, [r6, #0]
 8008f02:	2000      	movs	r0, #0
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
 8008f06:	f000 f87d 	bl	8009004 <__malloc_lock>
 8008f0a:	4a21      	ldr	r2, [pc, #132]	; (8008f90 <_malloc_r+0xac>)
 8008f0c:	6814      	ldr	r4, [r2, #0]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	b991      	cbnz	r1, 8008f38 <_malloc_r+0x54>
 8008f12:	4c20      	ldr	r4, [pc, #128]	; (8008f94 <_malloc_r+0xb0>)
 8008f14:	6823      	ldr	r3, [r4, #0]
 8008f16:	b91b      	cbnz	r3, 8008f20 <_malloc_r+0x3c>
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f863 	bl	8008fe4 <_sbrk_r>
 8008f1e:	6020      	str	r0, [r4, #0]
 8008f20:	4629      	mov	r1, r5
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f85e 	bl	8008fe4 <_sbrk_r>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d124      	bne.n	8008f76 <_malloc_r+0x92>
 8008f2c:	230c      	movs	r3, #12
 8008f2e:	6033      	str	r3, [r6, #0]
 8008f30:	4630      	mov	r0, r6
 8008f32:	f000 f868 	bl	8009006 <__malloc_unlock>
 8008f36:	e7e4      	b.n	8008f02 <_malloc_r+0x1e>
 8008f38:	680b      	ldr	r3, [r1, #0]
 8008f3a:	1b5b      	subs	r3, r3, r5
 8008f3c:	d418      	bmi.n	8008f70 <_malloc_r+0x8c>
 8008f3e:	2b0b      	cmp	r3, #11
 8008f40:	d90f      	bls.n	8008f62 <_malloc_r+0x7e>
 8008f42:	600b      	str	r3, [r1, #0]
 8008f44:	50cd      	str	r5, [r1, r3]
 8008f46:	18cc      	adds	r4, r1, r3
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f000 f85c 	bl	8009006 <__malloc_unlock>
 8008f4e:	f104 000b 	add.w	r0, r4, #11
 8008f52:	1d23      	adds	r3, r4, #4
 8008f54:	f020 0007 	bic.w	r0, r0, #7
 8008f58:	1ac3      	subs	r3, r0, r3
 8008f5a:	d0d3      	beq.n	8008f04 <_malloc_r+0x20>
 8008f5c:	425a      	negs	r2, r3
 8008f5e:	50e2      	str	r2, [r4, r3]
 8008f60:	e7d0      	b.n	8008f04 <_malloc_r+0x20>
 8008f62:	428c      	cmp	r4, r1
 8008f64:	684b      	ldr	r3, [r1, #4]
 8008f66:	bf16      	itet	ne
 8008f68:	6063      	strne	r3, [r4, #4]
 8008f6a:	6013      	streq	r3, [r2, #0]
 8008f6c:	460c      	movne	r4, r1
 8008f6e:	e7eb      	b.n	8008f48 <_malloc_r+0x64>
 8008f70:	460c      	mov	r4, r1
 8008f72:	6849      	ldr	r1, [r1, #4]
 8008f74:	e7cc      	b.n	8008f10 <_malloc_r+0x2c>
 8008f76:	1cc4      	adds	r4, r0, #3
 8008f78:	f024 0403 	bic.w	r4, r4, #3
 8008f7c:	42a0      	cmp	r0, r4
 8008f7e:	d005      	beq.n	8008f8c <_malloc_r+0xa8>
 8008f80:	1a21      	subs	r1, r4, r0
 8008f82:	4630      	mov	r0, r6
 8008f84:	f000 f82e 	bl	8008fe4 <_sbrk_r>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d0cf      	beq.n	8008f2c <_malloc_r+0x48>
 8008f8c:	6025      	str	r5, [r4, #0]
 8008f8e:	e7db      	b.n	8008f48 <_malloc_r+0x64>
 8008f90:	200000ac 	.word	0x200000ac
 8008f94:	200000b0 	.word	0x200000b0

08008f98 <_realloc_r>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	460e      	mov	r6, r1
 8008fa0:	b921      	cbnz	r1, 8008fac <_realloc_r+0x14>
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fa8:	f7ff bf9c 	b.w	8008ee4 <_malloc_r>
 8008fac:	b922      	cbnz	r2, 8008fb8 <_realloc_r+0x20>
 8008fae:	f7ff ff4b 	bl	8008e48 <_free_r>
 8008fb2:	4625      	mov	r5, r4
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb8:	f000 f826 	bl	8009008 <_malloc_usable_size_r>
 8008fbc:	42a0      	cmp	r0, r4
 8008fbe:	d20f      	bcs.n	8008fe0 <_realloc_r+0x48>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	f7ff ff8e 	bl	8008ee4 <_malloc_r>
 8008fc8:	4605      	mov	r5, r0
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d0f2      	beq.n	8008fb4 <_realloc_r+0x1c>
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	f7ff ff15 	bl	8008e00 <memcpy>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4638      	mov	r0, r7
 8008fda:	f7ff ff35 	bl	8008e48 <_free_r>
 8008fde:	e7e9      	b.n	8008fb4 <_realloc_r+0x1c>
 8008fe0:	4635      	mov	r5, r6
 8008fe2:	e7e7      	b.n	8008fb4 <_realloc_r+0x1c>

08008fe4 <_sbrk_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4c06      	ldr	r4, [pc, #24]	; (8009000 <_sbrk_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4605      	mov	r5, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	6023      	str	r3, [r4, #0]
 8008ff0:	f7f8 ff8c 	bl	8001f0c <_sbrk>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_sbrk_r+0x1a>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_sbrk_r+0x1a>
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	2002b908 	.word	0x2002b908

08009004 <__malloc_lock>:
 8009004:	4770      	bx	lr

08009006 <__malloc_unlock>:
 8009006:	4770      	bx	lr

08009008 <_malloc_usable_size_r>:
 8009008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800900c:	1f18      	subs	r0, r3, #4
 800900e:	2b00      	cmp	r3, #0
 8009010:	bfbc      	itt	lt
 8009012:	580b      	ldrlt	r3, [r1, r0]
 8009014:	18c0      	addlt	r0, r0, r3
 8009016:	4770      	bx	lr

08009018 <_init>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr

08009024 <_fini>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr
