
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b84  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006d7c  08006d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d9c  08006d9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006d9c  08006d9c  00016d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da4  08006da4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015ebc  20000010  08006dbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015ecc  08006dbc  00025ecc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ad0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000293e  00000000  00000000  00035b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00038450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  00039848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029fb9  00000000  00000000  0003aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2b9  00000000  00000000  00064ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001082d4  00000000  00000000  00073d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017c03e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  0017c0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08006d64 	.word	0x08006d64

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08006d64 	.word	0x08006d64

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 ff7b 	bl	8001436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f830 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 fb48 	bl	8000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000548:	f000 fb28 	bl	8000b9c <MX_DMA_Init>
  MX_ETH_Init();
 800054c:	f000 f8c2 	bl	80006d4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000550:	f000 fac6 	bl	8000ae0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000554:	f000 faf4 	bl	8000b40 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000558:	f000 f8fc 	bl	8000754 <MX_SPI1_Init>
  MX_TIM8_Init();
 800055c:	f000 f9f4 	bl	8000948 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000560:	f000 f932 	bl	80007c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	// Start timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x58>)
 8000568:	f004 fb2a 	bl	8004bc0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 800056c:	2104      	movs	r1, #4
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <main+0x58>)
 8000570:	f004 fb26 	bl	8004bc0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8000574:	2100      	movs	r1, #0
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <main+0x5c>)
 8000578:	f004 fb22 	bl	8004bc0 <HAL_TIM_PWM_Start_IT>

	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx, rxCount);
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <main+0x60>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b29b      	uxth	r3, r3
 8000582:	461a      	mov	r2, r3
 8000584:	4905      	ldr	r1, [pc, #20]	; (800059c <main+0x64>)
 8000586:	4806      	ldr	r0, [pc, #24]	; (80005a0 <main+0x68>)
 8000588:	f003 fdac 	bl	80040e4 <HAL_SPI_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800058c:	e7fe      	b.n	800058c <main+0x54>
 800058e:	bf00      	nop
 8000590:	20015d7c 	.word	0x20015d7c
 8000594:	2000002c 	.word	0x2000002c
 8000598:	20000000 	.word	0x20000000
 800059c:	200004f0 	.word	0x200004f0
 80005a0:	20015dbc 	.word	0x20015dbc

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b0b8      	sub	sp, #224	; 0xe0
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f006 fbce 	bl	8006d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2290      	movs	r2, #144	; 0x90
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f006 fbbf 	bl	8006d54 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005d6:	f002 fbc7 	bl	8002d68 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <SystemClock_Config+0x124>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	4a3a      	ldr	r2, [pc, #232]	; (80006c8 <SystemClock_Config+0x124>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	6413      	str	r3, [r2, #64]	; 0x40
 80005e6:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <SystemClock_Config+0x124>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <SystemClock_Config+0x128>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a35      	ldr	r2, [pc, #212]	; (80006cc <SystemClock_Config+0x128>)
 80005f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	4b33      	ldr	r3, [pc, #204]	; (80006cc <SystemClock_Config+0x128>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060a:	2301      	movs	r3, #1
 800060c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000610:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000626:	2304      	movs	r3, #4
 8000628:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800062c:	23d8      	movs	r3, #216	; 0xd8
 800062e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000638:	2309      	movs	r3, #9
 800063a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fbf0 	bl	8002e28 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800064e:	f000 fbad 	bl	8000dac <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000652:	f002 fb99 	bl	8002d88 <HAL_PWREx_EnableOverDrive>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800065c:	f000 fba6 	bl	8000dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000682:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000686:	2107      	movs	r1, #7
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fe7b 	bl	8003384 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000694:	f000 fb8a 	bl	8000dac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART3
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <SystemClock_Config+0x12c>)
 800069a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800069c:	2300      	movs	r3, #0
 800069e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80006a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 f85f 	bl	8003774 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80006bc:	f000 fb76 	bl	8000dac <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	37e0      	adds	r7, #224	; 0xe0
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000
 80006d0:	00200110 	.word	0x00200110

080006d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ETH_Init+0x78>)
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <MX_ETH_Init+0x7c>)
 80006dc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_ETH_Init+0x78>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ETH_Init+0x78>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_ETH_Init+0x78>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_ETH_Init+0x78>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_ETH_Init+0x78>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	3302      	adds	r3, #2
 8000702:	22e1      	movs	r2, #225	; 0xe1
 8000704:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ETH_Init+0x78>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	3303      	adds	r3, #3
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_ETH_Init+0x78>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	3304      	adds	r3, #4
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_ETH_Init+0x78>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	3305      	adds	r3, #5
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_ETH_Init+0x78>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_ETH_Init+0x78>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_ETH_Init+0x78>)
 8000732:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000736:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_ETH_Init+0x78>)
 800073a:	f001 fb83 	bl	8001e44 <HAL_ETH_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000744:	f000 fb32 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20015e80 	.word	0x20015e80
 8000750:	40028000 	.word	0x40028000

08000754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_SPI1_Init+0x6c>)
 800075a:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <MX_SPI1_Init+0x70>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_SPI1_Init+0x6c>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_SPI1_Init+0x6c>)
 8000766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_SPI1_Init+0x6c>)
 800076e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000772:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_SPI1_Init+0x6c>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_SPI1_Init+0x6c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_SPI1_Init+0x6c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_SPI1_Init+0x6c>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SPI1_Init+0x6c>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_SPI1_Init+0x6c>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SPI1_Init+0x6c>)
 800079a:	2207      	movs	r2, #7
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_SPI1_Init+0x6c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI1_Init+0x6c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_SPI1_Init+0x6c>)
 80007ac:	f003 fc08 	bl	8003fc0 <HAL_SPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80007b6:	f000 faf9 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20015dbc 	.word	0x20015dbc
 80007c4:	40013000 	.word	0x40013000

080007c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09a      	sub	sp, #104	; 0x68
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
 80007fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	222c      	movs	r2, #44	; 0x2c
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f006 faa6 	bl	8006d54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000808:	4b4d      	ldr	r3, [pc, #308]	; (8000940 <MX_TIM1_Init+0x178>)
 800080a:	4a4e      	ldr	r2, [pc, #312]	; (8000944 <MX_TIM1_Init+0x17c>)
 800080c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800080e:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <MX_TIM1_Init+0x178>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b4a      	ldr	r3, [pc, #296]	; (8000940 <MX_TIM1_Init+0x178>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 800081a:	4b49      	ldr	r3, [pc, #292]	; (8000940 <MX_TIM1_Init+0x178>)
 800081c:	f241 3221 	movw	r2, #4897	; 0x1321
 8000820:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	4b47      	ldr	r3, [pc, #284]	; (8000940 <MX_TIM1_Init+0x178>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000828:	4b45      	ldr	r3, [pc, #276]	; (8000940 <MX_TIM1_Init+0x178>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b44      	ldr	r3, [pc, #272]	; (8000940 <MX_TIM1_Init+0x178>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000834:	4842      	ldr	r0, [pc, #264]	; (8000940 <MX_TIM1_Init+0x178>)
 8000836:	f004 f962 	bl	8004afe <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000840:	f000 fab4 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800084a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800084e:	4619      	mov	r1, r3
 8000850:	483b      	ldr	r0, [pc, #236]	; (8000940 <MX_TIM1_Init+0x178>)
 8000852:	f004 fcbd 	bl	80051d0 <HAL_TIM_ConfigClockSource>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800085c:	f000 faa6 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000860:	4837      	ldr	r0, [pc, #220]	; (8000940 <MX_TIM1_Init+0x178>)
 8000862:	f004 f977 	bl	8004b54 <HAL_TIM_PWM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800086c:	f000 fa9e 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000870:	2320      	movs	r3, #32
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800087c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000880:	4619      	mov	r1, r3
 8000882:	482f      	ldr	r0, [pc, #188]	; (8000940 <MX_TIM1_Init+0x178>)
 8000884:	f005 fa0e 	bl	8005ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800088e:	f000 fa8d 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000892:	2370      	movs	r3, #112	; 0x70
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 8000896:	f240 336a 	movw	r3, #874	; 0x36a
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800089c:	2302      	movs	r3, #2
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80008a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4821      	ldr	r0, [pc, #132]	; (8000940 <MX_TIM1_Init+0x178>)
 80008bc:	f004 fb70 	bl	8004fa0 <HAL_TIM_PWM_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80008c6:	f000 fa71 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ca:	2360      	movs	r3, #96	; 0x60
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 80008ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d8:	2204      	movs	r2, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4818      	ldr	r0, [pc, #96]	; (8000940 <MX_TIM1_Init+0x178>)
 80008de:	f004 fb5f 	bl	8004fa0 <HAL_TIM_PWM_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80008e8:	f000 fa60 	bl	8000dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800090e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_TIM1_Init+0x178>)
 8000922:	f005 fa4d 	bl	8005dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 800092c:	f000 fa3e 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_TIM1_Init+0x178>)
 8000932:	f000 fbf7 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000936:	bf00      	nop
 8000938:	3768      	adds	r7, #104	; 0x68
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20015d7c 	.word	0x20015d7c
 8000944:	40010000 	.word	0x40010000

08000948 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09e      	sub	sp, #120	; 0x78
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800095c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	222c      	movs	r2, #44	; 0x2c
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f006 f9de 	bl	8006d54 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000998:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <MX_TIM8_Init+0x190>)
 800099a:	4a50      	ldr	r2, [pc, #320]	; (8000adc <MX_TIM8_Init+0x194>)
 800099c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800099e:	4b4e      	ldr	r3, [pc, #312]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b4c      	ldr	r3, [pc, #304]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 80009aa:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009ac:	226b      	movs	r2, #107	; 0x6b
 80009ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b49      	ldr	r3, [pc, #292]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 80009b6:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009b8:	2218      	movs	r2, #24
 80009ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009c2:	4845      	ldr	r0, [pc, #276]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009c4:	f004 f89b 	bl	8004afe <HAL_TIM_Base_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80009ce:	f000 f9ed 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009dc:	4619      	mov	r1, r3
 80009de:	483e      	ldr	r0, [pc, #248]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009e0:	f004 fbf6 	bl	80051d0 <HAL_TIM_ConfigClockSource>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80009ea:	f000 f9df 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009ee:	483a      	ldr	r0, [pc, #232]	; (8000ad8 <MX_TIM8_Init+0x190>)
 80009f0:	f004 f8b0 	bl	8004b54 <HAL_TIM_PWM_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80009fa:	f000 f9d7 	bl	8000dac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 80009fe:	2108      	movs	r1, #8
 8000a00:	4835      	ldr	r0, [pc, #212]	; (8000ad8 <MX_TIM8_Init+0x190>)
 8000a02:	f004 f967 	bl	8004cd4 <HAL_TIM_OnePulse_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000a0c:	f000 f9ce 	bl	8000dac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a10:	2306      	movs	r3, #6
 8000a12:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000a18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	482e      	ldr	r0, [pc, #184]	; (8000ad8 <MX_TIM8_Init+0x190>)
 8000a20:	f004 fc90 	bl	8005344 <HAL_TIM_SlaveConfigSynchro>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000a2a:	f000 f9bf 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4825      	ldr	r0, [pc, #148]	; (8000ad8 <MX_TIM8_Init+0x190>)
 8000a42:	f005 f92f 	bl	8005ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000a4c:	f000 f9ae 	bl	8000dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a50:	2370      	movs	r3, #112	; 0x70
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 8000a54:	2336      	movs	r3, #54	; 0x36
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <MX_TIM8_Init+0x190>)
 8000a76:	f004 fa93 	bl	8004fa0 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8000a80:	f000 f994 	bl	8000dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aaa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <MX_TIM8_Init+0x190>)
 8000aba:	f005 f981 	bl	8005dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8000ac4:	f000 f972 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <MX_TIM8_Init+0x190>)
 8000aca:	f000 fb2b 	bl	8001124 <HAL_TIM_MspPostInit>

}
 8000ace:	bf00      	nop
 8000ad0:	3778      	adds	r7, #120	; 0x78
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000002c 	.word	0x2000002c
 8000adc:	40010400 	.word	0x40010400

08000ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000ae6:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <MX_USART3_UART_Init+0x5c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_USART3_UART_Init+0x58>)
 8000b24:	f005 f9e8 	bl	8005ef8 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 f93d 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000006c 	.word	0x2000006c
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4e:	2206      	movs	r2, #6
 8000b50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b84:	f001 ffa7 	bl	8002ad6 <HAL_PCD_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 f90d 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200000ec 	.word	0x200000ec

08000b9c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_DMA_Init+0x38>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <MX_DMA_Init+0x38>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_DMA_Init+0x38>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2038      	movs	r0, #56	; 0x38
 8000bc0:	f000 fd93 	bl	80016ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc4:	2038      	movs	r0, #56	; 0x38
 8000bc6:	f000 fdac 	bl	8001722 <HAL_NVIC_EnableIRQ>

}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	; 0x30
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b56      	ldr	r3, [pc, #344]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a55      	ldr	r2, [pc, #340]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b53      	ldr	r3, [pc, #332]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a4f      	ldr	r2, [pc, #316]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a49      	ldr	r2, [pc, #292]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b44      	ldr	r3, [pc, #272]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a43      	ldr	r2, [pc, #268]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a3d      	ldr	r2, [pc, #244]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c66:	4b38      	ldr	r3, [pc, #224]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7e:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2110      	movs	r1, #16
 8000c9a:	482c      	ldr	r0, [pc, #176]	; (8000d4c <MX_GPIO_Init+0x174>)
 8000c9c:	f001 fee8 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ca6:	482a      	ldr	r0, [pc, #168]	; (8000d50 <MX_GPIO_Init+0x178>)
 8000ca8:	f001 fee2 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	4828      	ldr	r0, [pc, #160]	; (8000d54 <MX_GPIO_Init+0x17c>)
 8000cb2:	f001 fedd 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <MX_GPIO_Init+0x180>)
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4824      	ldr	r0, [pc, #144]	; (8000d5c <MX_GPIO_Init+0x184>)
 8000ccc:	f001 fd26 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4819      	ldr	r0, [pc, #100]	; (8000d4c <MX_GPIO_Init+0x174>)
 8000ce8:	f001 fd18 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cec:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MX_GPIO_Init+0x178>)
 8000d06:	f001 fd09 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d0a:	2340      	movs	r3, #64	; 0x40
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <MX_GPIO_Init+0x17c>)
 8000d22:	f001 fcfb 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <MX_GPIO_Init+0x17c>)
 8000d3a:	f001 fcef 	bl	800271c <HAL_GPIO_Init>

}
 8000d3e:	bf00      	nop
 8000d40:	3730      	adds	r7, #48	; 0x30
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000
 8000d50:	40020400 	.word	0x40020400
 8000d54:	40021800 	.word	0x40021800
 8000d58:	10110000 	.word	0x10110000
 8000d5c:	40020800 	.word	0x40020800

08000d60 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	// observe interval of SPI receiving
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d68:	2101      	movs	r1, #1
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <HAL_SPI_RxCpltCallback+0x28>)
 8000d6c:	f001 fe99 	bl	8002aa2 <HAL_GPIO_TogglePin>
	// Run the measurement again
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx, rxCount);
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_SPI_RxCpltCallback+0x2c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	4905      	ldr	r1, [pc, #20]	; (8000d90 <HAL_SPI_RxCpltCallback+0x30>)
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <HAL_SPI_RxCpltCallback+0x34>)
 8000d7c:	f003 f9b2 	bl	80040e4 <HAL_SPI_Receive_DMA>
	 rxCount++;
	 sprintf(msg, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	 }*/
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	200004f0 	.word	0x200004f0
 8000d94:	20015dbc 	.word	0x20015dbc

08000d98 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_MspInit+0x44>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_MspInit+0x44>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_MspInit+0x44>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_MspInit+0x44>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a4e      	ldr	r2, [pc, #312]	; (8000f5c <HAL_ETH_MspInit+0x158>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f040 8096 	bne.w	8000f54 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e28:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3c:	623b      	str	r3, [r7, #32]
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a46      	ldr	r2, [pc, #280]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	4b41      	ldr	r3, [pc, #260]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a40      	ldr	r2, [pc, #256]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b3e      	ldr	r3, [pc, #248]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a3a      	ldr	r2, [pc, #232]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a28      	ldr	r2, [pc, #160]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_ETH_MspInit+0x15c>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ed0:	2332      	movs	r3, #50	; 0x32
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee0:	230b      	movs	r3, #11
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	481e      	ldr	r0, [pc, #120]	; (8000f64 <HAL_ETH_MspInit+0x160>)
 8000eec:	f001 fc16 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ef0:	2386      	movs	r3, #134	; 0x86
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f00:	230b      	movs	r3, #11
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4817      	ldr	r0, [pc, #92]	; (8000f68 <HAL_ETH_MspInit+0x164>)
 8000f0c:	f001 fc06 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f22:	230b      	movs	r3, #11
 8000f24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480f      	ldr	r0, [pc, #60]	; (8000f6c <HAL_ETH_MspInit+0x168>)
 8000f2e:	f001 fbf5 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f44:	230b      	movs	r3, #11
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <HAL_ETH_MspInit+0x16c>)
 8000f50:	f001 fbe4 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3738      	adds	r7, #56	; 0x38
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40028000 	.word	0x40028000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40021800 	.word	0x40021800

08000f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a3d      	ldr	r2, [pc, #244]	; (8001088 <HAL_SPI_MspInit+0x114>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d174      	bne.n	8001080 <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a3c      	ldr	r2, [pc, #240]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b37      	ldr	r3, [pc, #220]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a36      	ldr	r2, [pc, #216]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a30      	ldr	r2, [pc, #192]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <HAL_SPI_MspInit+0x118>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8000fde:	f248 0320 	movw	r3, #32800	; 0x8020
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4825      	ldr	r0, [pc, #148]	; (8001090 <HAL_SPI_MspInit+0x11c>)
 8000ffc:	f001 fb8e 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001010:	2305      	movs	r3, #5
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	481e      	ldr	r0, [pc, #120]	; (8001094 <HAL_SPI_MspInit+0x120>)
 800101c:	f001 fb7e 	bl	800271c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001022:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_SPI_MspInit+0x128>)
 8001024:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001028:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800102c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_SPI_MspInit+0x124>)
 800103c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001040:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001048:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_SPI_MspInit+0x124>)
 800104c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001050:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_SPI_MspInit+0x124>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001066:	f000 fb77 	bl	8001758 <HAL_DMA_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 8001070:	f7ff fe9c 	bl	8000dac <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_SPI_MspInit+0x124>)
 8001078:	659a      	str	r2, [r3, #88]	; 0x58
 800107a:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_SPI_MspInit+0x124>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40013000 	.word	0x40013000
 800108c:	40023800 	.word	0x40023800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020c00 	.word	0x40020c00
 8001098:	20015e20 	.word	0x20015e20
 800109c:	40026410 	.word	0x40026410

080010a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_TIM_Base_MspInit+0x78>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d114      	bne.n	80010dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	201b      	movs	r0, #27
 80010d0:	f000 fb0b 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010d4:	201b      	movs	r0, #27
 80010d6:	f000 fb24 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80010da:	e018      	b.n	800110e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM8)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_TIM_Base_MspInit+0x80>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d113      	bne.n	800110e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a0c      	ldr	r2, [pc, #48]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_TIM_Base_MspInit+0x7c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	202e      	movs	r0, #46	; 0x2e
 8001104:	f000 faf1 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001108:	202e      	movs	r0, #46	; 0x2e
 800110a:	f000 fb0a 	bl	8001722 <HAL_NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40010000 	.word	0x40010000
 800111c:	40023800 	.word	0x40023800
 8001120:	40010400 	.word	0x40010400

08001124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_TIM_MspPostInit+0xa8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d11d      	bne.n	8001182 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_TIM_MspPostInit+0xac>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_TIM_MspPostInit+0xac>)
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <HAL_TIM_MspPostInit+0xac>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800115e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4816      	ldr	r0, [pc, #88]	; (80011d4 <HAL_TIM_MspPostInit+0xb0>)
 800117c:	f001 face 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001180:	e020      	b.n	80011c4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_TIM_MspPostInit+0xb4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d11b      	bne.n	80011c4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_TIM_MspPostInit+0xac>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_TIM_MspPostInit+0xac>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_TIM_MspPostInit+0xac>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80011b4:	2303      	movs	r3, #3
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <HAL_TIM_MspPostInit+0xb8>)
 80011c0:	f001 faac 	bl	800271c <HAL_GPIO_Init>
}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40010000 	.word	0x40010000
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	40020800 	.word	0x40020800

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_UART_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d128      	bne.n	8001254 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_UART_MspInit+0x80>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_UART_MspInit+0x80>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001232:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001244:	2307      	movs	r3, #7
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_UART_MspInit+0x84>)
 8001250:	f001 fa64 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40004800 	.word	0x40004800
 8001260:	40023800 	.word	0x40023800
 8001264:	40020c00 	.word	0x40020c00

08001268 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001288:	d141      	bne.n	800130e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012b4:	230a      	movs	r3, #10
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <HAL_PCD_MspInit+0xb4>)
 80012c0:	f001 fa2c 	bl	800271c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4810      	ldr	r0, [pc, #64]	; (800131c <HAL_PCD_MspInit+0xb4>)
 80012da:	f001 fa1f 	bl	800271c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 80012e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6353      	str	r3, [r2, #52]	; 0x34
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_PCD_MspInit+0xb0>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f89c 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM1_CC_IRQHandler+0x10>)
 8001382:	f003 fced 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20015d7c 	.word	0x20015d7c

08001390 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <TIM8_CC_IRQHandler+0x10>)
 8001396:	f003 fce3 	bl	8004d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000002c 	.word	0x2000002c

080013a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA2_Stream0_IRQHandler+0x10>)
 80013aa:	f000 fae3 	bl	8001974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20015e20 	.word	0x20015e20

080013b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <SystemInit+0x28>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <SystemInit+0x28>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SystemInit+0x28>)
 80013ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d2:	609a      	str	r2, [r3, #8]
#endif
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013ea:	e003      	b.n	80013f4 <LoopCopyDataInit>

080013ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013f2:	3104      	adds	r1, #4

080013f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013fc:	d3f6      	bcc.n	80013ec <CopyDataInit>
  ldr  r2, =_sbss
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001400:	e002      	b.n	8001408 <LoopFillZerobss>

08001402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001404:	f842 3b04 	str.w	r3, [r2], #4

08001408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800140a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800140c:	d3f9      	bcc.n	8001402 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800140e:	f7ff ffd3 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001412:	f005 fc7b 	bl	8006d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff f88f 	bl	8000538 <main>
  bx  lr    
 800141a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001420:	08006dac 	.word	0x08006dac
  ldr  r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001428:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800142c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001430:	20015ecc 	.word	0x20015ecc

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>

08001436 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143a:	2003      	movs	r0, #3
 800143c:	f000 f94a 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001440:	2000      	movs	r0, #0
 8001442:	f000 f805 	bl	8001450 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001446:	f7ff fcb9 	bl	8000dbc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f965 	bl	800173e <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 f92d 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000004 	.word	0x20000004
 80014a8:	2000000c 	.word	0x2000000c
 80014ac:	20000008 	.word	0x20000008

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	20015ec8 	.word	0x20015ec8

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20015ec8 	.word	0x20015ec8

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_Delay+0x40>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000000c 	.word	0x2000000c

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	05fa0000 	.word	0x05fa0000

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff feb8 	bl	80014d8 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e099      	b.n	80018a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001794:	e00f      	b.n	80017b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001796:	f7ff fe9f 	bl	80014d8 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d908      	bls.n	80017b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2203      	movs	r2, #3
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e078      	b.n	80018a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e8      	bne.n	8001796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_DMA_Init+0x158>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2b04      	cmp	r3, #4
 800180e:	d107      	bne.n	8001820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4313      	orrs	r3, r2
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f023 0307 	bic.w	r3, r3, #7
 8001836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b04      	cmp	r3, #4
 8001848:	d117      	bne.n	800187a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4313      	orrs	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00e      	beq.n	800187a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fa77 	bl	8001d50 <DMA_CheckFifoParam>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001876:	2301      	movs	r3, #1
 8001878:	e016      	b.n	80018a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa2e 	bl	8001ce4 <DMA_CalcBaseAndBitshift>
 8001888:	4603      	mov	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	223f      	movs	r2, #63	; 0x3f
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	e010803f 	.word	0xe010803f

080018b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Start_IT+0x26>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e048      	b.n	800196c <HAL_DMA_Start_IT+0xb8>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d137      	bne.n	800195e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f9c0 	bl	8001c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	223f      	movs	r2, #63	; 0x3f
 800190e:	409a      	lsls	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0216 	orr.w	r2, r2, #22
 8001922:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001932:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0208 	orr.w	r2, r2, #8
 800194a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e005      	b.n	800196a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001966:	2302      	movs	r3, #2
 8001968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001980:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <HAL_DMA_IRQHandler+0x258>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a92      	ldr	r2, [pc, #584]	; (8001bd0 <HAL_DMA_IRQHandler+0x25c>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2208      	movs	r2, #8
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01a      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0204 	bic.w	r2, r2, #4
 80019c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	2208      	movs	r2, #8
 80019ce:	409a      	lsls	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	2201      	movs	r2, #1
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d012      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	2201      	movs	r2, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	f043 0202 	orr.w	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d012      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	2204      	movs	r2, #4
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	f043 0204 	orr.w	r2, r3, #4
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	2210      	movs	r2, #16
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d043      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d03c      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2210      	movs	r2, #16
 8001a70:	409a      	lsls	r2, r3
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d018      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d108      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d024      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
 8001aa2:	e01f      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01b      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
 8001ab4:	e016      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0208 	bic.w	r2, r2, #8
 8001ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2220      	movs	r2, #32
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 808e 	beq.w	8001c12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 8086 	beq.w	8001c12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d136      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0216 	bic.w	r2, r2, #22
 8001b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <HAL_DMA_IRQHandler+0x1da>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	223f      	movs	r2, #63	; 0x3f
 8001b64:	409a      	lsls	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d07d      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
        }
        return;
 8001b8a:	e078      	b.n	8001c7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01c      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d030      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
 8001bb8:	e02b      	b.n	8001c12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d027      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
 8001bca:	e022      	b.n	8001c12 <HAL_DMA_IRQHandler+0x29e>
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0210 	bic.w	r2, r2, #16
 8001bf0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d032      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d022      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2205      	movs	r2, #5
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d307      	bcc.n	8001c5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f2      	bne.n	8001c3e <HAL_DMA_IRQHandler+0x2ca>
 8001c58:	e000      	b.n	8001c5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c5a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3
 8001c7c:	e000      	b.n	8001c80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c7e:	bf00      	nop
    }
  }
}
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop

08001c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b40      	cmp	r3, #64	; 0x40
 8001cb4:	d108      	bne.n	8001cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cc6:	e007      	b.n	8001cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	60da      	str	r2, [r3, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	3b10      	subs	r3, #16
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <DMA_CalcBaseAndBitshift+0x60>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <DMA_CalcBaseAndBitshift+0x64>)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d908      	bls.n	8001d24 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <DMA_CalcBaseAndBitshift+0x68>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	1d1a      	adds	r2, r3, #4
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	659a      	str	r2, [r3, #88]	; 0x58
 8001d22:	e006      	b.n	8001d32 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <DMA_CalcBaseAndBitshift+0x68>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	aaaaaaab 	.word	0xaaaaaaab
 8001d48:	08006d94 	.word	0x08006d94
 8001d4c:	fffffc00 	.word	0xfffffc00

08001d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11f      	bne.n	8001daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d855      	bhi.n	8001e1c <DMA_CheckFifoParam+0xcc>
 8001d70:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <DMA_CheckFifoParam+0x28>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001d9b 	.word	0x08001d9b
 8001d80:	08001d89 	.word	0x08001d89
 8001d84:	08001e1d 	.word	0x08001e1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d045      	beq.n	8001e20 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e042      	b.n	8001e20 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001da2:	d13f      	bne.n	8001e24 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da8:	e03c      	b.n	8001e24 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db2:	d121      	bne.n	8001df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d836      	bhi.n	8001e28 <DMA_CheckFifoParam+0xd8>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <DMA_CheckFifoParam+0x70>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001dd7 	.word	0x08001dd7
 8001dc8:	08001dd1 	.word	0x08001dd1
 8001dcc:	08001de9 	.word	0x08001de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd4:	e02f      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d024      	beq.n	8001e2c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de6:	e021      	b.n	8001e2c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df0:	d11e      	bne.n	8001e30 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001df6:	e01b      	b.n	8001e30 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d902      	bls.n	8001e04 <DMA_CheckFifoParam+0xb4>
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d003      	beq.n	8001e0a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e02:	e018      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
      break;
 8001e08:	e015      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00e      	beq.n	8001e34 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1a:	e00b      	b.n	8001e34 <DMA_CheckFifoParam+0xe4>
      break;
 8001e1c:	bf00      	nop
 8001e1e:	e00a      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;
 8001e20:	bf00      	nop
 8001e22:	e008      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;
 8001e24:	bf00      	nop
 8001e26:	e006      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;
 8001e28:	bf00      	nop
 8001e2a:	e004      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;
 8001e2c:	bf00      	nop
 8001e2e:	e002      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;   
 8001e30:	bf00      	nop
 8001e32:	e000      	b.n	8001e36 <DMA_CheckFifoParam+0xe6>
      break;
 8001e34:	bf00      	nop
    }
  } 
  
  return status; 
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001e54:	4ba9      	ldr	r3, [pc, #676]	; (80020fc <HAL_ETH_Init+0x2b8>)
 8001e56:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e183      	b.n	8002172 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe ffc0 	bl	8000e04 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e84:	4b9e      	ldr	r3, [pc, #632]	; (8002100 <HAL_ETH_Init+0x2bc>)
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	4a9d      	ldr	r2, [pc, #628]	; (8002100 <HAL_ETH_Init+0x2bc>)
 8001e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e90:	4b9b      	ldr	r3, [pc, #620]	; (8002100 <HAL_ETH_Init+0x2bc>)
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e9c:	4b99      	ldr	r3, [pc, #612]	; (8002104 <HAL_ETH_Init+0x2c0>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a98      	ldr	r2, [pc, #608]	; (8002104 <HAL_ETH_Init+0x2c0>)
 8001ea2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ea6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ea8:	4b96      	ldr	r3, [pc, #600]	; (8002104 <HAL_ETH_Init+0x2c0>)
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4994      	ldr	r1, [pc, #592]	; (8002104 <HAL_ETH_Init+0x2c0>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ece:	f7ff fb03 	bl	80014d8 <HAL_GetTick>
 8001ed2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ed4:	e011      	b.n	8001efa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001ed6:	f7ff faff 	bl	80014d8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ee4:	d909      	bls.n	8001efa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e13b      	b.n	8002172 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e4      	bne.n	8001ed6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f023 031c 	bic.w	r3, r3, #28
 8001f1a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f1c:	f001 fbf6 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8001f20:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4a78      	ldr	r2, [pc, #480]	; (8002108 <HAL_ETH_Init+0x2c4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d908      	bls.n	8001f3c <HAL_ETH_Init+0xf8>
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4a77      	ldr	r2, [pc, #476]	; (800210c <HAL_ETH_Init+0x2c8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d804      	bhi.n	8001f3c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	e027      	b.n	8001f8c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	4a73      	ldr	r2, [pc, #460]	; (800210c <HAL_ETH_Init+0x2c8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d908      	bls.n	8001f56 <HAL_ETH_Init+0x112>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4a72      	ldr	r2, [pc, #456]	; (8002110 <HAL_ETH_Init+0x2cc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d804      	bhi.n	8001f56 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f043 030c 	orr.w	r3, r3, #12
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	e01a      	b.n	8001f8c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4a6d      	ldr	r2, [pc, #436]	; (8002110 <HAL_ETH_Init+0x2cc>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d903      	bls.n	8001f66 <HAL_ETH_Init+0x122>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4a6c      	ldr	r2, [pc, #432]	; (8002114 <HAL_ETH_Init+0x2d0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d911      	bls.n	8001f8a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4a6a      	ldr	r2, [pc, #424]	; (8002114 <HAL_ETH_Init+0x2d0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d908      	bls.n	8001f80 <HAL_ETH_Init+0x13c>
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	4a69      	ldr	r2, [pc, #420]	; (8002118 <HAL_ETH_Init+0x2d4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d804      	bhi.n	8001f80 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e005      	b.n	8001f8c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f043 0310 	orr.w	r3, r3, #16
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	e000      	b.n	8001f8c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f8a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001f94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f956 	bl	800224c <HAL_ETH_WritePHYRegister>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001faa:	6939      	ldr	r1, [r7, #16]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f9b3 	bl	8002318 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0d9      	b.n	8002172 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001fbe:	20ff      	movs	r0, #255	; 0xff
 8001fc0:	f7ff fa96 	bl	80014f0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a7 	beq.w	800211c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fce:	f7ff fa83 	bl	80014d8 <HAL_GetTick>
 8001fd2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2101      	movs	r1, #1
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f8cd 	bl	800217c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001fe2:	f7ff fa79 	bl	80014d8 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d90f      	bls.n	8002014 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ff8:	6939      	ldr	r1, [r7, #16]
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f98c 	bl	8002318 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0ae      	b.n	8002172 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0da      	beq.n	8001fd4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800201e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002022:	2100      	movs	r1, #0
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f911 	bl	800224c <HAL_ETH_WritePHYRegister>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00b      	beq.n	8002048 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002034:	6939      	ldr	r1, [r7, #16]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f96e 	bl	8002318 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002044:	2301      	movs	r3, #1
 8002046:	e094      	b.n	8002172 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002048:	f7ff fa46 	bl	80014d8 <HAL_GetTick>
 800204c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	461a      	mov	r2, r3
 8002054:	2101      	movs	r1, #1
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f890 	bl	800217c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800205c:	f7ff fa3c 	bl	80014d8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d90f      	bls.n	800208e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f94f 	bl	8002318 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e071      	b.n	8002172 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0da      	beq.n	800204e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	461a      	mov	r2, r3
 800209e:	211f      	movs	r1, #31
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f86b 	bl	800217c <HAL_ETH_ReadPHYRegister>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020b0:	6939      	ldr	r1, [r7, #16]
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f930 	bl	8002318 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020c0:	2301      	movs	r3, #1
 80020c2:	e056      	b.n	8002172 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	e002      	b.n	80020de <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	e037      	b.n	8002160 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	e032      	b.n	8002160 <HAL_ETH_Init+0x31c>
 80020fa:	bf00      	nop
 80020fc:	03938700 	.word	0x03938700
 8002100:	40023800 	.word	0x40023800
 8002104:	40013800 	.word	0x40013800
 8002108:	01312cff 	.word	0x01312cff
 800210c:	02160ebf 	.word	0x02160ebf
 8002110:	039386ff 	.word	0x039386ff
 8002114:	05f5e0ff 	.word	0x05f5e0ff
 8002118:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800212c:	4313      	orrs	r3, r2
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	2100      	movs	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f889 	bl	800224c <HAL_ETH_WritePHYRegister>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002144:	6939      	ldr	r1, [r7, #16]
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8e6 	bl	8002318 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e00c      	b.n	8002172 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002158:	f640 70ff 	movw	r0, #4095	; 0xfff
 800215c:	f7ff f9c8 	bl	80014f0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002160:	6939      	ldr	r1, [r7, #16]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8d8 	bl	8002318 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop

0800217c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	460b      	mov	r3, r1
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b82      	cmp	r3, #130	; 0x82
 800219c:	d101      	bne.n	80021a2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800219e:	2302      	movs	r3, #2
 80021a0:	e050      	b.n	8002244 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2282      	movs	r2, #130	; 0x82
 80021a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 031c 	and.w	r3, r3, #28
 80021b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8a1b      	ldrh	r3, [r3, #16]
 80021be:	02db      	lsls	r3, r3, #11
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021c8:	897b      	ldrh	r3, [r7, #10]
 80021ca:	019b      	lsls	r3, r3, #6
 80021cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f023 0302 	bic.w	r3, r3, #2
 80021dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80021ee:	f7ff f973 	bl	80014d8 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021f4:	e015      	b.n	8002222 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80021f6:	f7ff f96f 	bl	80014d8 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d309      	bcc.n	800221a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e014      	b.n	8002244 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e4      	bne.n	80021f6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	460b      	mov	r3, r1
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b42      	cmp	r3, #66	; 0x42
 800226c:	d101      	bne.n	8002272 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800226e:	2302      	movs	r3, #2
 8002270:	e04e      	b.n	8002310 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2242      	movs	r2, #66	; 0x42
 8002276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f003 031c 	and.w	r3, r3, #28
 8002288:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8a1b      	ldrh	r3, [r3, #16]
 800228e:	02db      	lsls	r3, r3, #11
 8002290:	b29b      	uxth	r3, r3
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002298:	897b      	ldrh	r3, [r7, #10]
 800229a:	019b      	lsls	r3, r3, #6
 800229c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022c8:	f7ff f906 	bl	80014d8 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022ce:	e015      	b.n	80022fc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80022d0:	f7ff f902 	bl	80014d8 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022de:	d309      	bcc.n	80022f4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e00d      	b.n	8002310 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e4      	bne.n	80022d0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b0b0      	sub	sp, #192	; 0xc0
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002334:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800233c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002346:	2300      	movs	r3, #0
 8002348:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800234e:	2300      	movs	r3, #0
 8002350:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800235e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002362:	663b      	str	r3, [r7, #96]	; 0x60
 8002364:	e001      	b.n	800236a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800236a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002374:	2300      	movs	r3, #0
 8002376:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002384:	2340      	movs	r3, #64	; 0x40
 8002386:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80023ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f0:	4bab      	ldr	r3, [pc, #684]	; (80026a0 <ETH_MACDMAConfig+0x388>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80023f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80023fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80023fc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80023fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002400:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002404:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800240a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800240c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800240e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002412:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002418:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800241a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800241c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800241e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002420:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002424:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002428:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800242a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800242c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800242e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002440:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244c:	2001      	movs	r0, #1
 800244e:	f7ff f84f 	bl	80014f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800245c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800245e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002460:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002462:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002464:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800246a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800246c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002470:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002472:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002476:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800247c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002480:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002488:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800248a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002496:	2001      	movs	r0, #1
 8002498:	f7ff f82a 	bl	80014f0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024a4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024ae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80024b8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80024c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024c8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024cc:	4013      	ands	r3, r2
 80024ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80024d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024d6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80024d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80024dc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80024de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80024e2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80024e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80024e8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80024ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80024ee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80024f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80024f4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80024f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002508:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002514:	2001      	movs	r0, #1
 8002516:	f7fe ffeb 	bl	80014f0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002522:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002524:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002528:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800253e:	2001      	movs	r0, #1
 8002540:	f7fe ffd6 	bl	80014f0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800254c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002556:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800255c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002560:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002572:	2304      	movs	r3, #4
 8002574:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800257c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002592:	2300      	movs	r3, #0
 8002594:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002596:	2300      	movs	r3, #0
 8002598:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	f241 0318 	movw	r3, #4120	; 0x1018
 80025a2:	4413      	add	r3, r2
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80025aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <ETH_MACDMAConfig+0x38c>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025b6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80025b8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80025bc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80025be:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80025c0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80025c2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80025c4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80025c6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80025c8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80025ca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80025cc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80025ce:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80025d2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80025d6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80025ea:	4413      	add	r3, r2
 80025ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80025fa:	4413      	add	r3, r2
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002602:	2001      	movs	r0, #1
 8002604:	f7fe ff74 	bl	80014f0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002610:	4413      	add	r3, r2
 8002612:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002616:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800261c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800261e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002620:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002624:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002628:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800262a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800262c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800262e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002632:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002650:	2001      	movs	r0, #1
 8002652:	f7fe ff4d 	bl	80014f0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002662:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d10d      	bne.n	8002688 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f241 031c 	movw	r3, #4124	; 0x101c
 8002674:	4413      	add	r3, r2
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6811      	ldr	r1, [r2, #0]
 800267c:	4a0a      	ldr	r2, [pc, #40]	; (80026a8 <ETH_MACDMAConfig+0x390>)
 800267e:	431a      	orrs	r2, r3
 8002680:	f241 031c 	movw	r3, #4124	; 0x101c
 8002684:	440b      	add	r3, r1
 8002686:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	461a      	mov	r2, r3
 800268e:	2100      	movs	r1, #0
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f80b 	bl	80026ac <ETH_MACAddressConfig>
}
 8002696:	bf00      	nop
 8002698:	37c0      	adds	r7, #192	; 0xc0
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	ff20810f 	.word	0xff20810f
 80026a4:	f8de3f23 	.word	0xf8de3f23
 80026a8:	00010040 	.word	0x00010040

080026ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3305      	adds	r3, #5
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	3204      	adds	r2, #4
 80026c4:	7812      	ldrb	r2, [r2, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <ETH_MACAddressConfig+0x68>)
 80026ce:	4413      	add	r3, r2
 80026d0:	461a      	mov	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3303      	adds	r3, #3
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	061a      	lsls	r2, r3, #24
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3302      	adds	r3, #2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3301      	adds	r3, #1
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	4313      	orrs	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <ETH_MACAddressConfig+0x6c>)
 80026fe:	4413      	add	r3, r2
 8002700:	461a      	mov	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6013      	str	r3, [r2, #0]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40028040 	.word	0x40028040
 8002718:	40028044 	.word	0x40028044

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e175      	b.n	8002a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8164 	bne.w	8002a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d00b      	beq.n	800277a <HAL_GPIO_Init+0x5e>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276e:	2b11      	cmp	r3, #17
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b12      	cmp	r3, #18
 8002778:	d130      	bne.n	80027dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 0201 	and.w	r2, r3, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x100>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b12      	cmp	r3, #18
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80be 	beq.w	8002a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_GPIO_Init+0x320>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a64      	ldr	r2, [pc, #400]	; (8002a3c <HAL_GPIO_Init+0x320>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_GPIO_Init+0x320>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028be:	4a60      	ldr	r2, [pc, #384]	; (8002a40 <HAL_GPIO_Init+0x324>)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	220f      	movs	r2, #15
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a57      	ldr	r2, [pc, #348]	; (8002a44 <HAL_GPIO_Init+0x328>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d037      	beq.n	800295a <HAL_GPIO_Init+0x23e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a56      	ldr	r2, [pc, #344]	; (8002a48 <HAL_GPIO_Init+0x32c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d031      	beq.n	8002956 <HAL_GPIO_Init+0x23a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a55      	ldr	r2, [pc, #340]	; (8002a4c <HAL_GPIO_Init+0x330>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d02b      	beq.n	8002952 <HAL_GPIO_Init+0x236>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a54      	ldr	r2, [pc, #336]	; (8002a50 <HAL_GPIO_Init+0x334>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d025      	beq.n	800294e <HAL_GPIO_Init+0x232>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a53      	ldr	r2, [pc, #332]	; (8002a54 <HAL_GPIO_Init+0x338>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01f      	beq.n	800294a <HAL_GPIO_Init+0x22e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a52      	ldr	r2, [pc, #328]	; (8002a58 <HAL_GPIO_Init+0x33c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d019      	beq.n	8002946 <HAL_GPIO_Init+0x22a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <HAL_GPIO_Init+0x340>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_GPIO_Init+0x226>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_GPIO_Init+0x344>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00d      	beq.n	800293e <HAL_GPIO_Init+0x222>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4f      	ldr	r2, [pc, #316]	; (8002a64 <HAL_GPIO_Init+0x348>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <HAL_GPIO_Init+0x21e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4e      	ldr	r2, [pc, #312]	; (8002a68 <HAL_GPIO_Init+0x34c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_GPIO_Init+0x21a>
 8002932:	2309      	movs	r3, #9
 8002934:	e012      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002936:	230a      	movs	r3, #10
 8002938:	e010      	b.n	800295c <HAL_GPIO_Init+0x240>
 800293a:	2308      	movs	r3, #8
 800293c:	e00e      	b.n	800295c <HAL_GPIO_Init+0x240>
 800293e:	2307      	movs	r3, #7
 8002940:	e00c      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002942:	2306      	movs	r3, #6
 8002944:	e00a      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002946:	2305      	movs	r3, #5
 8002948:	e008      	b.n	800295c <HAL_GPIO_Init+0x240>
 800294a:	2304      	movs	r3, #4
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x240>
 800294e:	2303      	movs	r3, #3
 8002950:	e004      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002952:	2302      	movs	r3, #2
 8002954:	e002      	b.n	800295c <HAL_GPIO_Init+0x240>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_GPIO_Init+0x240>
 800295a:	2300      	movs	r3, #0
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f002 0203 	and.w	r2, r2, #3
 8002962:	0092      	lsls	r2, r2, #2
 8002964:	4093      	lsls	r3, r2
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800296c:	4934      	ldr	r1, [pc, #208]	; (8002a40 <HAL_GPIO_Init+0x324>)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297a:	4b3c      	ldr	r3, [pc, #240]	; (8002a6c <HAL_GPIO_Init+0x350>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299e:	4a33      	ldr	r2, [pc, #204]	; (8002a6c <HAL_GPIO_Init+0x350>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a4:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_GPIO_Init+0x350>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c8:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <HAL_GPIO_Init+0x350>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ce:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_GPIO_Init+0x350>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f2:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <HAL_GPIO_Init+0x350>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <HAL_GPIO_Init+0x350>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <HAL_GPIO_Init+0x350>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	f67f ae86 	bls.w	800273c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	3724      	adds	r7, #36	; 0x24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40013800 	.word	0x40013800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020400 	.word	0x40020400
 8002a4c:	40020800 	.word	0x40020800
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40021400 	.word	0x40021400
 8002a5c:	40021800 	.word	0x40021800
 8002a60:	40021c00 	.word	0x40021c00
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40022400 	.word	0x40022400
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002ac2:	e002      	b.n	8002aca <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ac4:	887a      	ldrh	r2, [r7, #2]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ad8:	b08f      	sub	sp, #60	; 0x3c
 8002ada:	af0a      	add	r7, sp, #40	; 0x28
 8002adc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e116      	b.n	8002d16 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fbb0 	bl	8001268 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fe98 	bl	800685c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	687e      	ldr	r6, [r7, #4]
 8002b34:	466d      	mov	r5, sp
 8002b36:	f106 0410 	add.w	r4, r6, #16
 8002b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b46:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b4a:	1d33      	adds	r3, r6, #4
 8002b4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b4e:	6838      	ldr	r0, [r7, #0]
 8002b50:	f003 fe2c 	bl	80067ac <USB_CoreInit>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0d7      	b.n	8002d16 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f003 fe86 	bl	800687e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e04a      	b.n	8002c0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	333d      	adds	r3, #61	; 0x3d
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	333c      	adds	r3, #60	; 0x3c
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	b298      	uxth	r0, r3
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3342      	adds	r3, #66	; 0x42
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bb8:	7bfa      	ldrb	r2, [r7, #15]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	333f      	adds	r3, #63	; 0x3f
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3344      	adds	r3, #68	; 0x44
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3348      	adds	r3, #72	; 0x48
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3350      	adds	r3, #80	; 0x50
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3af      	bcc.n	8002b78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e044      	b.n	8002ca8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d3b5      	bcc.n	8002c1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	687e      	ldr	r6, [r7, #4]
 8002cba:	466d      	mov	r5, sp
 8002cbc:	f106 0410 	add.w	r4, r6, #16
 8002cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ccc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cd0:	1d33      	adds	r3, r6, #4
 8002cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd4:	6838      	ldr	r0, [r7, #0]
 8002cd6:	f003 fdfd 	bl	80068d4 <USB_DevInit>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e014      	b.n	8002d16 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d102      	bne.n	8002d0a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f80b 	bl	8002d20 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 ffaf 	bl	8006c72 <USB_DevDisconnect>

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	10000003 	.word	0x10000003

08002d68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d76:	6013      	str	r3, [r2, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40007000 	.word	0x40007000

08002d88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db6:	f7fe fb8f 	bl	80014d8 <HAL_GetTick>
 8002dba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dbc:	e009      	b.n	8002dd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dbe:	f7fe fb8b 	bl	80014d8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dcc:	d901      	bls.n	8002dd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e022      	b.n	8002e18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dde:	d1ee      	bne.n	8002dbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dec:	f7fe fb74 	bl	80014d8 <HAL_GetTick>
 8002df0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002df2:	e009      	b.n	8002e08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df4:	f7fe fb70 	bl	80014d8 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e02:	d901      	bls.n	8002e08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e007      	b.n	8002e18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e14:	d1ee      	bne.n	8002df4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40007000 	.word	0x40007000

08002e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e29b      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8087 	beq.w	8002f5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e4c:	4b96      	ldr	r3, [pc, #600]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d00c      	beq.n	8002e72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e58:	4b93      	ldr	r3, [pc, #588]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d112      	bne.n	8002e8a <HAL_RCC_OscConfig+0x62>
 8002e64:	4b90      	ldr	r3, [pc, #576]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e70:	d10b      	bne.n	8002e8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e72:	4b8d      	ldr	r3, [pc, #564]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d06c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x130>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d168      	bne.n	8002f58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e275      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e92:	d106      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x7a>
 8002e94:	4b84      	ldr	r3, [pc, #528]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a83      	ldr	r2, [pc, #524]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	e02e      	b.n	8002f00 <HAL_RCC_OscConfig+0xd8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x9c>
 8002eaa:	4b7f      	ldr	r3, [pc, #508]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7e      	ldr	r2, [pc, #504]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	4b7c      	ldr	r3, [pc, #496]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7b      	ldr	r2, [pc, #492]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xd8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xc0>
 8002ece:	4b76      	ldr	r3, [pc, #472]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a75      	ldr	r2, [pc, #468]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b73      	ldr	r3, [pc, #460]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a72      	ldr	r2, [pc, #456]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xd8>
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6e      	ldr	r2, [pc, #440]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b6c      	ldr	r3, [pc, #432]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6b      	ldr	r2, [pc, #428]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe fae6 	bl	80014d8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fae2 	bl	80014d8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e229      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xe8>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fad2 	bl	80014d8 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe face 	bl	80014d8 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e215      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b57      	ldr	r3, [pc, #348]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x110>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d069      	beq.n	800303a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f66:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x190>
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1e9      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa2:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	493d      	ldr	r1, [pc, #244]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	e040      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a38      	ldr	r2, [pc, #224]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fa84 	bl	80014d8 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7fe fa80 	bl	80014d8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e1c7      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4929      	ldr	r1, [pc, #164]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
 8003006:	e018      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fa60 	bl	80014d8 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301c:	f7fe fa5c 	bl	80014d8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1a3      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d038      	beq.n	80030b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d019      	beq.n	8003082 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe fa3d 	bl	80014d8 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe fa39 	bl	80014d8 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e180      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x23a>
 8003080:	e01a      	b.n	80030b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <HAL_RCC_OscConfig+0x280>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe fa23 	bl	80014d8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003096:	f7fe fa1f 	bl	80014d8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d903      	bls.n	80030ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e166      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
 80030a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b92      	ldr	r3, [pc, #584]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80a4 	beq.w	800320e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b8c      	ldr	r3, [pc, #560]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10d      	bne.n	80030ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	4b89      	ldr	r3, [pc, #548]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a88      	ldr	r2, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b86      	ldr	r3, [pc, #536]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ee:	4b83      	ldr	r3, [pc, #524]	; (80032fc <HAL_RCC_OscConfig+0x4d4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030fa:	4b80      	ldr	r3, [pc, #512]	; (80032fc <HAL_RCC_OscConfig+0x4d4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a7f      	ldr	r2, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x4d4>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003106:	f7fe f9e7 	bl	80014d8 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7fe f9e3 	bl	80014d8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	; 0x64
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e12a      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003120:	4b76      	ldr	r3, [pc, #472]	; (80032fc <HAL_RCC_OscConfig+0x4d4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x31a>
 8003134:	4b70      	ldr	r3, [pc, #448]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a6f      	ldr	r2, [pc, #444]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	e02d      	b.n	800319e <HAL_RCC_OscConfig+0x376>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x33c>
 800314a:	4b6b      	ldr	r3, [pc, #428]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a6a      	ldr	r2, [pc, #424]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a67      	ldr	r2, [pc, #412]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	e01c      	b.n	800319e <HAL_RCC_OscConfig+0x376>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b05      	cmp	r3, #5
 800316a:	d10c      	bne.n	8003186 <HAL_RCC_OscConfig+0x35e>
 800316c:	4b62      	ldr	r3, [pc, #392]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a61      	ldr	r2, [pc, #388]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
 8003178:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a5e      	ldr	r2, [pc, #376]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	e00b      	b.n	800319e <HAL_RCC_OscConfig+0x376>
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d015      	beq.n	80031d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a6:	f7fe f997 	bl	80014d8 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	e00a      	b.n	80031c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fe f993 	bl	80014d8 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031bc:	4293      	cmp	r3, r2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e0d8      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c4:	4b4c      	ldr	r3, [pc, #304]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ee      	beq.n	80031ae <HAL_RCC_OscConfig+0x386>
 80031d0:	e014      	b.n	80031fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7fe f981 	bl	80014d8 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fe f97d 	bl	80014d8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e0c2      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f0:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ee      	bne.n	80031da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80ae 	beq.w	8003374 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003218:	4b37      	ldr	r3, [pc, #220]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	d06d      	beq.n	8003300 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d14b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322c:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a31      	ldr	r2, [pc, #196]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe f94e 	bl	80014d8 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe f94a 	bl	80014d8 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e091      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	491b      	ldr	r1, [pc, #108]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 8003296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe f91c 	bl	80014d8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe f918 	bl	80014d8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e05f      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x47c>
 80032c2:	e057      	b.n	8003374 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe f902 	bl	80014d8 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe f8fe 	bl	80014d8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e045      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4b0>
 80032f6:	e03d      	b.n	8003374 <HAL_RCC_OscConfig+0x54c>
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003300:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <HAL_RCC_OscConfig+0x558>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d030      	beq.n	8003370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d129      	bne.n	8003370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d122      	bne.n	8003370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003336:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003338:	4293      	cmp	r3, r2
 800333a:	d119      	bne.n	8003370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	3b01      	subs	r3, #1
 800334a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d10f      	bne.n	8003370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d107      	bne.n	8003370 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0d0      	b.n	800353e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d910      	bls.n	80033cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 020f 	bic.w	r2, r3, #15
 80033b2:	4965      	ldr	r1, [pc, #404]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0b8      	b.n	800353e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 80033ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003406:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	494d      	ldr	r1, [pc, #308]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d040      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d115      	bne.n	8003466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e073      	b.n	800353e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06b      	b.n	800353e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4936      	ldr	r1, [pc, #216]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003474:	4313      	orrs	r3, r2
 8003476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003478:	f7fe f82e 	bl	80014d8 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe f82a 	bl	80014d8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e053      	b.n	800353e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d210      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 020f 	bic.w	r2, r3, #15
 80034be:	4922      	ldr	r1, [pc, #136]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4916      	ldr	r1, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003516:	f000 f821 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800351a:	4601      	mov	r1, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x1cc>)
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	fa21 f303 	lsr.w	r3, r1, r3
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1d0>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1d4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd ff8a 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023c00 	.word	0x40023c00
 800354c:	40023800 	.word	0x40023800
 8003550:	08006d7c 	.word	0x08006d7c
 8003554:	20000004 	.word	0x20000004
 8003558:	20000008 	.word	0x20000008

0800355c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	2300      	movs	r3, #0
 800356c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d007      	beq.n	800358e <HAL_RCC_GetSysClockFreq+0x32>
 800357e:	2b08      	cmp	r3, #8
 8003580:	d008      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x38>
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 80b4 	bne.w	80036f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003588:	4b5e      	ldr	r3, [pc, #376]	; (8003704 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800358a:	60bb      	str	r3, [r7, #8]
      break;
 800358c:	e0b3      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800358e:	4b5e      	ldr	r3, [pc, #376]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003590:	60bb      	str	r3, [r7, #8]
      break;
 8003592:	e0b0      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003594:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800359c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800359e:	4b58      	ldr	r3, [pc, #352]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d04a      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035aa:	4b55      	ldr	r3, [pc, #340]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	f04f 0400 	mov.w	r4, #0
 80035b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	ea03 0501 	and.w	r5, r3, r1
 80035c0:	ea04 0602 	and.w	r6, r4, r2
 80035c4:	4629      	mov	r1, r5
 80035c6:	4632      	mov	r2, r6
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f04f 0400 	mov.w	r4, #0
 80035d0:	0154      	lsls	r4, r2, #5
 80035d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035d6:	014b      	lsls	r3, r1, #5
 80035d8:	4619      	mov	r1, r3
 80035da:	4622      	mov	r2, r4
 80035dc:	1b49      	subs	r1, r1, r5
 80035de:	eb62 0206 	sbc.w	r2, r2, r6
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	f04f 0400 	mov.w	r4, #0
 80035ea:	0194      	lsls	r4, r2, #6
 80035ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035f0:	018b      	lsls	r3, r1, #6
 80035f2:	1a5b      	subs	r3, r3, r1
 80035f4:	eb64 0402 	sbc.w	r4, r4, r2
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	00e2      	lsls	r2, r4, #3
 8003602:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003606:	00d9      	lsls	r1, r3, #3
 8003608:	460b      	mov	r3, r1
 800360a:	4614      	mov	r4, r2
 800360c:	195b      	adds	r3, r3, r5
 800360e:	eb44 0406 	adc.w	r4, r4, r6
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	0262      	lsls	r2, r4, #9
 800361c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003620:	0259      	lsls	r1, r3, #9
 8003622:	460b      	mov	r3, r1
 8003624:	4614      	mov	r4, r2
 8003626:	4618      	mov	r0, r3
 8003628:	4621      	mov	r1, r4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	461a      	mov	r2, r3
 8003632:	4623      	mov	r3, r4
 8003634:	f7fc fe00 	bl	8000238 <__aeabi_uldivmod>
 8003638:	4603      	mov	r3, r0
 800363a:	460c      	mov	r4, r1
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e049      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4b2f      	ldr	r3, [pc, #188]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	ea03 0501 	and.w	r5, r3, r1
 8003656:	ea04 0602 	and.w	r6, r4, r2
 800365a:	4629      	mov	r1, r5
 800365c:	4632      	mov	r2, r6
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	f04f 0400 	mov.w	r4, #0
 8003666:	0154      	lsls	r4, r2, #5
 8003668:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800366c:	014b      	lsls	r3, r1, #5
 800366e:	4619      	mov	r1, r3
 8003670:	4622      	mov	r2, r4
 8003672:	1b49      	subs	r1, r1, r5
 8003674:	eb62 0206 	sbc.w	r2, r2, r6
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	f04f 0400 	mov.w	r4, #0
 8003680:	0194      	lsls	r4, r2, #6
 8003682:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003686:	018b      	lsls	r3, r1, #6
 8003688:	1a5b      	subs	r3, r3, r1
 800368a:	eb64 0402 	sbc.w	r4, r4, r2
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	00e2      	lsls	r2, r4, #3
 8003698:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800369c:	00d9      	lsls	r1, r3, #3
 800369e:	460b      	mov	r3, r1
 80036a0:	4614      	mov	r4, r2
 80036a2:	195b      	adds	r3, r3, r5
 80036a4:	eb44 0406 	adc.w	r4, r4, r6
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	02a2      	lsls	r2, r4, #10
 80036b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036b6:	0299      	lsls	r1, r3, #10
 80036b8:	460b      	mov	r3, r1
 80036ba:	4614      	mov	r4, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	4621      	mov	r1, r4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f04f 0400 	mov.w	r4, #0
 80036c6:	461a      	mov	r2, r3
 80036c8:	4623      	mov	r3, r4
 80036ca:	f7fc fdb5 	bl	8000238 <__aeabi_uldivmod>
 80036ce:	4603      	mov	r3, r0
 80036d0:	460c      	mov	r4, r1
 80036d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	3301      	adds	r3, #1
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	60bb      	str	r3, [r7, #8]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036f2:	60bb      	str	r3, [r7, #8]
      break;
 80036f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f6:	68bb      	ldr	r3, [r7, #8]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	00f42400 	.word	0x00f42400
 8003708:	007a1200 	.word	0x007a1200

0800370c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_GetHCLKFreq+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000004 	.word	0x20000004

08003724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003728:	f7ff fff0 	bl	800370c <HAL_RCC_GetHCLKFreq>
 800372c:	4601      	mov	r1, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4a03      	ldr	r2, [pc, #12]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373a:	5cd3      	ldrb	r3, [r2, r3]
 800373c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	08006d8c 	.word	0x08006d8c

0800374c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003750:	f7ff ffdc 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003754:	4601      	mov	r1, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4a03      	ldr	r2, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	08006d8c 	.word	0x08006d8c

08003774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d012      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800379c:	4b69      	ldr	r3, [pc, #420]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a68      	ldr	r2, [pc, #416]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037a6:	6093      	str	r3, [r2, #8]
 80037a8:	4b66      	ldr	r3, [pc, #408]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	4964      	ldr	r1, [pc, #400]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80037be:	2301      	movs	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d017      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037ce:	4b5d      	ldr	r3, [pc, #372]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	4959      	ldr	r1, [pc, #356]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ec:	d101      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80037fa:	2301      	movs	r3, #1
 80037fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800380a:	4b4e      	ldr	r3, [pc, #312]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	494a      	ldr	r1, [pc, #296]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003828:	d101      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800382a:	2301      	movs	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003836:	2301      	movs	r3, #1
 8003838:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 808b 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003858:	4b3a      	ldr	r3, [pc, #232]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	4a39      	ldr	r2, [pc, #228]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003862:	6413      	str	r3, [r2, #64]	; 0x40
 8003864:	4b37      	ldr	r3, [pc, #220]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003870:	4b35      	ldr	r3, [pc, #212]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a34      	ldr	r2, [pc, #208]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387c:	f7fd fe2c 	bl	80014d8 <HAL_GetTick>
 8003880:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003884:	f7fd fe28 	bl	80014d8 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	; 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e38d      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003896:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038a2:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d035      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d02e      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80038e2:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038e8:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d114      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fdf0 	bl	80014d8 <HAL_GetTick>
 80038f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fa:	e00a      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fc:	f7fd fdec 	bl	80014d8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	; 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e34f      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0ee      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392a:	d111      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003938:	4b04      	ldr	r3, [pc, #16]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800393a:	400b      	ands	r3, r1
 800393c:	4901      	ldr	r1, [pc, #4]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
 8003942:	e00b      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003944:	40023800 	.word	0x40023800
 8003948:	40007000 	.word	0x40007000
 800394c:	0ffffcff 	.word	0x0ffffcff
 8003950:	4bb3      	ldr	r3, [pc, #716]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4ab2      	ldr	r2, [pc, #712]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003956:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800395a:	6093      	str	r3, [r2, #8]
 800395c:	4bb0      	ldr	r3, [pc, #704]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003968:	49ad      	ldr	r1, [pc, #692]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396a:	4313      	orrs	r3, r2
 800396c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	d010      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800397a:	4ba9      	ldr	r3, [pc, #676]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003980:	4aa7      	ldr	r2, [pc, #668]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003986:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800398a:	4ba5      	ldr	r3, [pc, #660]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	49a2      	ldr	r1, [pc, #648]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039a8:	4b9d      	ldr	r3, [pc, #628]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b6:	499a      	ldr	r1, [pc, #616]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039ca:	4b95      	ldr	r3, [pc, #596]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039d8:	4991      	ldr	r1, [pc, #580]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ec:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fa:	4989      	ldr	r1, [pc, #548]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a0e:	4b84      	ldr	r3, [pc, #528]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4980      	ldr	r1, [pc, #512]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a30:	4b7b      	ldr	r3, [pc, #492]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f023 0203 	bic.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	4978      	ldr	r1, [pc, #480]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a52:	4b73      	ldr	r3, [pc, #460]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f023 020c 	bic.w	r2, r3, #12
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a60:	496f      	ldr	r1, [pc, #444]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a74:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	4967      	ldr	r1, [pc, #412]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a96:	4b62      	ldr	r3, [pc, #392]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa4:	495e      	ldr	r1, [pc, #376]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ab8:	4b59      	ldr	r3, [pc, #356]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	4956      	ldr	r1, [pc, #344]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ada:	4b51      	ldr	r3, [pc, #324]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	494d      	ldr	r1, [pc, #308]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003afc:	4b48      	ldr	r3, [pc, #288]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	4945      	ldr	r1, [pc, #276]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b1e:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2c:	493c      	ldr	r1, [pc, #240]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b40:	4b37      	ldr	r3, [pc, #220]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4e:	4934      	ldr	r1, [pc, #208]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d011      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b62:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b70:	492b      	ldr	r1, [pc, #172]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b80:	d101      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b92:	2301      	movs	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb0:	491b      	ldr	r1, [pc, #108]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd4:	4912      	ldr	r1, [pc, #72]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf8:	4909      	ldr	r1, [pc, #36]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00f      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	e002      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	4985      	ldr	r1, [pc, #532]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003c38:	4b80      	ldr	r3, [pc, #512]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c48:	497c      	ldr	r1, [pc, #496]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d005      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c5e:	f040 80d6 	bne.w	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c62:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a75      	ldr	r2, [pc, #468]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6e:	f7fd fc33 	bl	80014d8 <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c76:	f7fd fc2f 	bl	80014d8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b64      	cmp	r3, #100	; 0x64
 8003c82:	d901      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e194      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c88:	4b6c      	ldr	r3, [pc, #432]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f0      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d021      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11d      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ca8:	4b64      	ldr	r3, [pc, #400]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cb6:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cbc:	0e1b      	lsrs	r3, r3, #24
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	019a      	lsls	r2, r3, #6
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	071b      	lsls	r3, r3, #28
 8003cdc:	4957      	ldr	r1, [pc, #348]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02e      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0e:	d129      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d10:	4b4a      	ldr	r3, [pc, #296]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d24:	0f1b      	lsrs	r3, r3, #28
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	019a      	lsls	r2, r3, #6
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	071b      	lsls	r3, r3, #28
 8003d44:	493d      	ldr	r1, [pc, #244]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d52:	f023 021f 	bic.w	r2, r3, #31
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	4937      	ldr	r1, [pc, #220]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01d      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d70:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d76:	0e1b      	lsrs	r3, r3, #24
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d84:	0f1b      	lsrs	r3, r3, #28
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	019a      	lsls	r2, r3, #6
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	041b      	lsls	r3, r3, #16
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	061b      	lsls	r3, r3, #24
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	071b      	lsls	r3, r3, #28
 8003da4:	4925      	ldr	r1, [pc, #148]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d011      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	019a      	lsls	r2, r3, #6
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	071b      	lsls	r3, r3, #28
 8003dd4:	4919      	ldr	r1, [pc, #100]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003de2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de8:	f7fd fb76 	bl	80014d8 <HAL_GetTick>
 8003dec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003df0:	f7fd fb72 	bl	80014d8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0d7      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 80cd 	bne.w	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e22:	f7fd fb59 	bl	80014d8 <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e2a:	f7fd fb55 	bl	80014d8 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	; 0x64
 8003e36:	d903      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0ba      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003e3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e40:	4b5e      	ldr	r3, [pc, #376]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4c:	d0ed      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d009      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d02e      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d12a      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e76:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e84:	4b4d      	ldr	r3, [pc, #308]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	0f1b      	lsrs	r3, r3, #28
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	019a      	lsls	r2, r3, #6
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	041b      	lsls	r3, r3, #16
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	061b      	lsls	r3, r3, #24
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	071b      	lsls	r3, r3, #28
 8003eaa:	4944      	ldr	r1, [pc, #272]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003eb2:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	493d      	ldr	r1, [pc, #244]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d022      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee0:	d11d      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ee2:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	0e1b      	lsrs	r3, r3, #24
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ef0:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	0f1b      	lsrs	r3, r3, #28
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	019a      	lsls	r2, r3, #6
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	061b      	lsls	r3, r3, #24
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	071b      	lsls	r3, r3, #28
 8003f16:	4929      	ldr	r1, [pc, #164]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d028      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	0e1b      	lsrs	r3, r3, #24
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f38:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4917      	ldr	r1, [pc, #92]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	4911      	ldr	r1, [pc, #68]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fd faa6 	bl	80014d8 <HAL_GetTick>
 8003f8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f90:	f7fd faa2 	bl	80014d8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	; 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e007      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fae:	d1ef      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e084      	b.n	80040dc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fc ffc1 	bl	8000f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004008:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004012:	d902      	bls.n	800401a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e002      	b.n	8004020 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800401a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800401e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004028:	d007      	beq.n	800403a <HAL_SPI_Init+0x7a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004032:	d002      	beq.n	800403a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800404a:	d903      	bls.n	8004054 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
 8004052:	e002      	b.n	800405a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	ea42 0103 	orr.w	r1, r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	0c1b      	lsrs	r3, r3, #16
 800409a:	f003 0204 	and.w	r2, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d110      	bne.n	8004120 <HAL_SPI_Receive_DMA+0x3c>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004106:	d10b      	bne.n	8004120 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2204      	movs	r2, #4
 800410c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f900 	bl	800431c <HAL_SPI_TransmitReceive_DMA>
 800411c:	4603      	mov	r3, r0
 800411e:	e0f3      	b.n	8004308 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_SPI_Receive_DMA+0x4a>
 800412a:	2302      	movs	r3, #2
 800412c:	e0ec      	b.n	8004308 <HAL_SPI_Receive_DMA+0x224>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d002      	beq.n	8004148 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004142:	2302      	movs	r3, #2
 8004144:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004146:	e0da      	b.n	80042fe <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_SPI_Receive_DMA+0x70>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004158:	e0d1      	b.n	80042fe <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2204      	movs	r2, #4
 800415e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	88fa      	ldrh	r2, [r7, #6]
 8004172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	88fa      	ldrh	r2, [r7, #6]
 800417a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419e:	d107      	bne.n	80041b0 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041be:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041c8:	d908      	bls.n	80041dc <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	e042      	b.n	8004262 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ea:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f6:	d134      	bne.n	8004262 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004206:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800420e:	b29b      	uxth	r3, r3
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d111      	bne.n	800423c <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004226:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422e:	b29b      	uxth	r3, r3
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800423a:	e012      	b.n	8004262 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004252:	b29b      	uxth	r3, r3
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	3301      	adds	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <HAL_SPI_Receive_DMA+0x22c>)
 8004268:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	4a29      	ldr	r2, [pc, #164]	; (8004314 <HAL_SPI_Receive_DMA+0x230>)
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	4a28      	ldr	r2, [pc, #160]	; (8004318 <HAL_SPI_Receive_DMA+0x234>)
 8004278:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	2200      	movs	r2, #0
 8004280:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	4619      	mov	r1, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800429a:	b29b      	uxth	r3, r3
 800429c:	f7fd fb0a 	bl	80018b4 <HAL_DMA_Start_IT>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042aa:	f043 0210 	orr.w	r2, r3, #16
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80042be:	e01e      	b.n	80042fe <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d007      	beq.n	80042de <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0220 	orr.w	r2, r2, #32
 80042ec:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	0800479d 	.word	0x0800479d
 8004314:	08004685 	.word	0x08004685
 8004318:	080047d5 	.word	0x080047d5

0800431c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_SPI_TransmitReceive_DMA+0x20>
 8004338:	2302      	movs	r3, #2
 800433a:	e16c      	b.n	8004616 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800434a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004352:	7dbb      	ldrb	r3, [r7, #22]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d00d      	beq.n	8004374 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d106      	bne.n	800436e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004368:	7dbb      	ldrb	r3, [r7, #22]
 800436a:	2b04      	cmp	r3, #4
 800436c:	d002      	beq.n	8004374 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800436e:	2302      	movs	r3, #2
 8004370:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004372:	e14b      	b.n	800460c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004380:	887b      	ldrh	r3, [r7, #2]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	75fb      	strb	r3, [r7, #23]
    goto error;
 800438a:	e13f      	b.n	800460c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b04      	cmp	r3, #4
 8004396:	d003      	beq.n	80043a0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2205      	movs	r2, #5
 800439c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	887a      	ldrh	r2, [r7, #2]
 80043b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	887a      	ldrh	r2, [r7, #2]
 80043c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	887a      	ldrh	r2, [r7, #2]
 80043ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80043e8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043f2:	d908      	bls.n	8004406 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	e06f      	b.n	80044e6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004414:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004420:	d126      	bne.n	8004470 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800443c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004442:	b29b      	uxth	r3, r3
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800444c:	e010      	b.n	8004470 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800445c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004462:	b29b      	uxth	r3, r3
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	b29b      	uxth	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447a:	d134      	bne.n	80044e6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800448a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004492:	b29b      	uxth	r3, r3
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d111      	bne.n	80044c0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044aa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80044be:	e012      	b.n	80044e6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3301      	adds	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d108      	bne.n	8004504 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	4a4a      	ldr	r2, [pc, #296]	; (8004620 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	4a49      	ldr	r2, [pc, #292]	; (8004624 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004500:	63da      	str	r2, [r3, #60]	; 0x3c
 8004502:	e007      	b.n	8004514 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	4a47      	ldr	r2, [pc, #284]	; (8004628 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	4a46      	ldr	r2, [pc, #280]	; (800462c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004512:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	4a45      	ldr	r2, [pc, #276]	; (8004630 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800451a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	2200      	movs	r2, #0
 8004522:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	4619      	mov	r1, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	461a      	mov	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800453c:	b29b      	uxth	r3, r3
 800453e:	f7fd f9b9 	bl	80018b4 <HAL_DMA_Start_IT>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00c      	beq.n	8004562 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004560:	e054      	b.n	800460c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	2200      	movs	r2, #0
 8004580:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	2200      	movs	r2, #0
 8004588:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	2200      	movs	r2, #0
 8004590:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	4619      	mov	r1, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f7fd f983 	bl	80018b4 <HAL_DMA_Start_IT>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00c      	beq.n	80045ce <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b8:	f043 0210 	orr.w	r2, r3, #16
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80045cc:	e01e      	b.n	800460c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d007      	beq.n	80045ec <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ea:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0220 	orr.w	r2, r2, #32
 80045fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0202 	orr.w	r2, r2, #2
 800460a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	0800479d 	.word	0x0800479d
 8004624:	08004685 	.word	0x08004685
 8004628:	080047b9 	.word	0x080047b9
 800462c:	0800470b 	.word	0x0800470b
 8004630:	080047d5 	.word	0x080047d5

08004634 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004692:	f7fc ff21 	bl	80014d8 <HAL_GetTick>
 8004696:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a6:	d02a      	beq.n	80046fe <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0220 	bic.w	r2, r2, #32
 80046b6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0203 	bic.w	r2, r2, #3
 80046c6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	2164      	movs	r1, #100	; 0x64
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f978 	bl	80049c2 <SPI_EndRxTransaction>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff ffba 	bl	8004670 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80046fc:	e002      	b.n	8004704 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f7fc fb2e 	bl	8000d60 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004718:	f7fc fede 	bl	80014d8 <HAL_GetTick>
 800471c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472c:	d030      	beq.n	8004790 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0220 	bic.w	r2, r2, #32
 800473c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	2164      	movs	r1, #100	; 0x64
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f995 	bl	8004a72 <SPI_EndRxTxTransaction>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0203 	bic.w	r2, r2, #3
 8004768:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff ff71 	bl	8004670 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800478e:	e002      	b.n	8004796 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff ff4f 	bl	8004634 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff ff4c 	bl	8004648 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff ff48 	bl	800465c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0203 	bic.w	r2, r2, #3
 80047f0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f6:	f043 0210 	orr.w	r2, r3, #16
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff ff32 	bl	8004670 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004824:	e04c      	b.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d048      	beq.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800482e:	f7fc fe53 	bl	80014d8 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d902      	bls.n	8004844 <SPI_WaitFlagStateUntilTimeout+0x30>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d13d      	bne.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004852:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800485c:	d111      	bne.n	8004882 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004866:	d004      	beq.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004870:	d107      	bne.n	8004882 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004880:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488a:	d10f      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e00f      	b.n	80048e0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4013      	ands	r3, r2
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	bf0c      	ite	eq
 80048d0:	2301      	moveq	r3, #1
 80048d2:	2300      	movne	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	461a      	mov	r2, r3
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d1a3      	bne.n	8004826 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80048f6:	e057      	b.n	80049a8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048fe:	d106      	bne.n	800490e <SPI_WaitFifoStateUntilTimeout+0x26>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d048      	beq.n	80049a8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004916:	f7fc fddf 	bl	80014d8 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d902      	bls.n	800492c <SPI_WaitFifoStateUntilTimeout+0x44>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d13d      	bne.n	80049a8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800493a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004944:	d111      	bne.n	800496a <SPI_WaitFifoStateUntilTimeout+0x82>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800494e:	d004      	beq.n	800495a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004958:	d107      	bne.n	800496a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004968:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004972:	d10f      	bne.n	8004994 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004992:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e008      	b.n	80049ba <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d19f      	bne.n	80048f8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af02      	add	r7, sp, #8
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d6:	d111      	bne.n	80049fc <SPI_EndRxTransaction+0x3a>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e0:	d004      	beq.n	80049ec <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ea:	d107      	bne.n	80049fc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049fa:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2200      	movs	r2, #0
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff ff04 	bl	8004814 <SPI_WaitFlagStateUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e023      	b.n	8004a6a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2a:	d11d      	bne.n	8004a68 <SPI_EndRxTransaction+0xa6>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a34:	d004      	beq.n	8004a40 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	d113      	bne.n	8004a68 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff ff4b 	bl	80048e8 <SPI_WaitFifoStateUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e000      	b.n	8004a6a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b086      	sub	sp, #24
 8004a76:	af02      	add	r7, sp, #8
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff ff2c 	bl	80048e8 <SPI_WaitFifoStateUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e027      	b.n	8004af6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff feaf 	bl	8004814 <SPI_WaitFlagStateUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e014      	b.n	8004af6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff ff05 	bl	80048e8 <SPI_WaitFifoStateUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e000      	b.n	8004af6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e01d      	b.n	8004b4c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fc fabb 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	f000 fc6b 	bl	8005418 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e01d      	b.n	8004ba2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f815 	bl	8004baa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 fc40 	bl	8005418 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b0c      	cmp	r3, #12
 8004bce:	d841      	bhi.n	8004c54 <HAL_TIM_PWM_Start_IT+0x94>
 8004bd0:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <HAL_TIM_PWM_Start_IT+0x18>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004c0d 	.word	0x08004c0d
 8004bdc:	08004c55 	.word	0x08004c55
 8004be0:	08004c55 	.word	0x08004c55
 8004be4:	08004c55 	.word	0x08004c55
 8004be8:	08004c1f 	.word	0x08004c1f
 8004bec:	08004c55 	.word	0x08004c55
 8004bf0:	08004c55 	.word	0x08004c55
 8004bf4:	08004c55 	.word	0x08004c55
 8004bf8:	08004c31 	.word	0x08004c31
 8004bfc:	08004c55 	.word	0x08004c55
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004c55 	.word	0x08004c55
 8004c08:	08004c43 	.word	0x08004c43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0202 	orr.w	r2, r2, #2
 8004c1a:	60da      	str	r2, [r3, #12]
      break;
 8004c1c:	e01b      	b.n	8004c56 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0204 	orr.w	r2, r2, #4
 8004c2c:	60da      	str	r2, [r3, #12]
      break;
 8004c2e:	e012      	b.n	8004c56 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0208 	orr.w	r2, r2, #8
 8004c3e:	60da      	str	r2, [r3, #12]
      break;
 8004c40:	e009      	b.n	8004c56 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0210 	orr.w	r2, r2, #16
 8004c50:	60da      	str	r2, [r3, #12]
      break;
 8004c52:	e000      	b.n	8004c56 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004c54:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fffa 	bl	8005c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <HAL_TIM_PWM_Start_IT+0x108>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_PWM_Start_IT+0xb8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_TIM_PWM_Start_IT+0x10c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_TIM_PWM_Start_IT+0xbc>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_TIM_PWM_Start_IT+0xbe>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <HAL_TIM_PWM_Start_IT+0x110>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d00b      	beq.n	8004cbc <HAL_TIM_PWM_Start_IT+0xfc>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	00010007 	.word	0x00010007

08004cd4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e02d      	b.n	8004d44 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f825 	bl	8004d4c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f000 fb7f 	bl	8005418 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0208 	bic.w	r2, r2, #8
 8004d28:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d122      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0202 	mvn.w	r2, #2
 8004d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fb1a 	bl	80053dc <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fb0c 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fb1d 	bl	80053f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d122      	bne.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0204 	mvn.w	r2, #4
 8004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2202      	movs	r2, #2
 8004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 faf0 	bl	80053dc <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fae2 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 faf3 	bl	80053f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d122      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d11b      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0208 	mvn.w	r2, #8
 8004e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2204      	movs	r2, #4
 8004e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fac6 	bl	80053dc <HAL_TIM_IC_CaptureCallback>
 8004e50:	e005      	b.n	8004e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fab8 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fac9 	bl	80053f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0210 	mvn.w	r2, #16
 8004e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa9c 	bl	80053dc <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa8e 	bl	80053c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fa9f 	bl	80053f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0201 	mvn.w	r2, #1
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fb ff5a 	bl	8000d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eee:	2b80      	cmp	r3, #128	; 0x80
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 ffe0 	bl	8005ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1e:	d10e      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b80      	cmp	r3, #128	; 0x80
 8004f2c:	d107      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 ffd3 	bl	8005ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d10e      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa4d 	bl	8005404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	d10e      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d107      	bne.n	8004f96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f06f 0220 	mvn.w	r2, #32
 8004f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 ff93 	bl	8005ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e105      	b.n	80051c6 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b14      	cmp	r3, #20
 8004fce:	f200 80f0 	bhi.w	80051b2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004fd2:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	080051b3 	.word	0x080051b3
 8004fe0:	080051b3 	.word	0x080051b3
 8004fe4:	080051b3 	.word	0x080051b3
 8004fe8:	0800506d 	.word	0x0800506d
 8004fec:	080051b3 	.word	0x080051b3
 8004ff0:	080051b3 	.word	0x080051b3
 8004ff4:	080051b3 	.word	0x080051b3
 8004ff8:	080050af 	.word	0x080050af
 8004ffc:	080051b3 	.word	0x080051b3
 8005000:	080051b3 	.word	0x080051b3
 8005004:	080051b3 	.word	0x080051b3
 8005008:	080050ef 	.word	0x080050ef
 800500c:	080051b3 	.word	0x080051b3
 8005010:	080051b3 	.word	0x080051b3
 8005014:	080051b3 	.word	0x080051b3
 8005018:	08005131 	.word	0x08005131
 800501c:	080051b3 	.word	0x080051b3
 8005020:	080051b3 	.word	0x080051b3
 8005024:	080051b3 	.word	0x080051b3
 8005028:	08005171 	.word	0x08005171
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fa90 	bl	8005558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0208 	orr.w	r2, r2, #8
 8005046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0204 	bic.w	r2, r2, #4
 8005056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6999      	ldr	r1, [r3, #24]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	619a      	str	r2, [r3, #24]
      break;
 800506a:	e0a3      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fae2 	bl	800563c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	021a      	lsls	r2, r3, #8
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	619a      	str	r2, [r3, #24]
      break;
 80050ac:	e082      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fb39 	bl	800572c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0208 	orr.w	r2, r2, #8
 80050c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0204 	bic.w	r2, r2, #4
 80050d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69d9      	ldr	r1, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	61da      	str	r2, [r3, #28]
      break;
 80050ec:	e062      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fb8f 	bl	8005818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69d9      	ldr	r1, [r3, #28]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	61da      	str	r2, [r3, #28]
      break;
 800512e:	e041      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fbc6 	bl	80058c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0208 	orr.w	r2, r2, #8
 800514a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0204 	bic.w	r2, r2, #4
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800516e:	e021      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fbf8 	bl	800596c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	021a      	lsls	r2, r3, #8
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051b0:	e000      	b.n	80051b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80051b2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop

080051d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_TIM_ConfigClockSource+0x18>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e0a6      	b.n	8005336 <HAL_TIM_ConfigClockSource+0x166>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <HAL_TIM_ConfigClockSource+0x170>)
 8005204:	4013      	ands	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d067      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0x120>
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d80b      	bhi.n	800523c <HAL_TIM_ConfigClockSource+0x6c>
 8005224:	2b10      	cmp	r3, #16
 8005226:	d073      	beq.n	8005310 <HAL_TIM_ConfigClockSource+0x140>
 8005228:	2b10      	cmp	r3, #16
 800522a:	d802      	bhi.n	8005232 <HAL_TIM_ConfigClockSource+0x62>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d06f      	beq.n	8005310 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005230:	e078      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005232:	2b20      	cmp	r3, #32
 8005234:	d06c      	beq.n	8005310 <HAL_TIM_ConfigClockSource+0x140>
 8005236:	2b30      	cmp	r3, #48	; 0x30
 8005238:	d06a      	beq.n	8005310 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800523a:	e073      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800523c:	2b70      	cmp	r3, #112	; 0x70
 800523e:	d00d      	beq.n	800525c <HAL_TIM_ConfigClockSource+0x8c>
 8005240:	2b70      	cmp	r3, #112	; 0x70
 8005242:	d804      	bhi.n	800524e <HAL_TIM_ConfigClockSource+0x7e>
 8005244:	2b50      	cmp	r3, #80	; 0x50
 8005246:	d033      	beq.n	80052b0 <HAL_TIM_ConfigClockSource+0xe0>
 8005248:	2b60      	cmp	r3, #96	; 0x60
 800524a:	d041      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800524c:	e06a      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d066      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x152>
 8005254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005258:	d017      	beq.n	800528a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800525a:	e063      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f000 fcd4 	bl	8005c18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800527e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	609a      	str	r2, [r3, #8]
      break;
 8005288:	e04c      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f000 fcbd 	bl	8005c18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ac:	609a      	str	r2, [r3, #8]
      break;
 80052ae:	e039      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6818      	ldr	r0, [r3, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6859      	ldr	r1, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	461a      	mov	r2, r3
 80052be:	f000 fc31 	bl	8005b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2150      	movs	r1, #80	; 0x50
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fc8a 	bl	8005be2 <TIM_ITRx_SetConfig>
      break;
 80052ce:	e029      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	461a      	mov	r2, r3
 80052de:	f000 fc50 	bl	8005b82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2160      	movs	r1, #96	; 0x60
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fc7a 	bl	8005be2 <TIM_ITRx_SetConfig>
      break;
 80052ee:	e019      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6859      	ldr	r1, [r3, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	461a      	mov	r2, r3
 80052fe:	f000 fc11 	bl	8005b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2140      	movs	r1, #64	; 0x40
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fc6a 	bl	8005be2 <TIM_ITRx_SetConfig>
      break;
 800530e:	e009      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f000 fc61 	bl	8005be2 <TIM_ITRx_SetConfig>
      break;
 8005320:	e000      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	fffeff88 	.word	0xfffeff88

08005344 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e031      	b.n	80053c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fb50 	bl	8005a14 <TIM_SlaveTimer_SetConfig>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e018      	b.n	80053c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053ac:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a40      	ldr	r2, [pc, #256]	; (800552c <TIM_Base_SetConfig+0x114>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d013      	beq.n	8005458 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005436:	d00f      	beq.n	8005458 <TIM_Base_SetConfig+0x40>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a3d      	ldr	r2, [pc, #244]	; (8005530 <TIM_Base_SetConfig+0x118>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00b      	beq.n	8005458 <TIM_Base_SetConfig+0x40>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a3c      	ldr	r2, [pc, #240]	; (8005534 <TIM_Base_SetConfig+0x11c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_Base_SetConfig+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a3b      	ldr	r2, [pc, #236]	; (8005538 <TIM_Base_SetConfig+0x120>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a3a      	ldr	r2, [pc, #232]	; (800553c <TIM_Base_SetConfig+0x124>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d108      	bne.n	800546a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a2f      	ldr	r2, [pc, #188]	; (800552c <TIM_Base_SetConfig+0x114>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d02b      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005478:	d027      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2c      	ldr	r2, [pc, #176]	; (8005530 <TIM_Base_SetConfig+0x118>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d023      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2b      	ldr	r2, [pc, #172]	; (8005534 <TIM_Base_SetConfig+0x11c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01f      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <TIM_Base_SetConfig+0x120>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01b      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a29      	ldr	r2, [pc, #164]	; (800553c <TIM_Base_SetConfig+0x124>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d017      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a28      	ldr	r2, [pc, #160]	; (8005540 <TIM_Base_SetConfig+0x128>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a27      	ldr	r2, [pc, #156]	; (8005544 <TIM_Base_SetConfig+0x12c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00f      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <TIM_Base_SetConfig+0x130>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00b      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a25      	ldr	r2, [pc, #148]	; (800554c <TIM_Base_SetConfig+0x134>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d007      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a24      	ldr	r2, [pc, #144]	; (8005550 <TIM_Base_SetConfig+0x138>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d003      	beq.n	80054ca <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a23      	ldr	r2, [pc, #140]	; (8005554 <TIM_Base_SetConfig+0x13c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d108      	bne.n	80054dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a0a      	ldr	r2, [pc, #40]	; (800552c <TIM_Base_SetConfig+0x114>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_Base_SetConfig+0xf8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a0c      	ldr	r2, [pc, #48]	; (800553c <TIM_Base_SetConfig+0x124>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d103      	bne.n	8005518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	615a      	str	r2, [r3, #20]
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40010400 	.word	0x40010400
 8005540:	40014000 	.word	0x40014000
 8005544:	40014400 	.word	0x40014400
 8005548:	40014800 	.word	0x40014800
 800554c:	40001800 	.word	0x40001800
 8005550:	40001c00 	.word	0x40001c00
 8005554:	40002000 	.word	0x40002000

08005558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f023 0201 	bic.w	r2, r3, #1
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <TIM_OC1_SetConfig+0xd8>)
 8005584:	4013      	ands	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0302 	bic.w	r3, r3, #2
 80055a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a21      	ldr	r2, [pc, #132]	; (8005634 <TIM_OC1_SetConfig+0xdc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_OC1_SetConfig+0x64>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a20      	ldr	r2, [pc, #128]	; (8005638 <TIM_OC1_SetConfig+0xe0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10c      	bne.n	80055d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0308 	bic.w	r3, r3, #8
 80055c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a16      	ldr	r2, [pc, #88]	; (8005634 <TIM_OC1_SetConfig+0xdc>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC1_SetConfig+0x8e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <TIM_OC1_SetConfig+0xe0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d111      	bne.n	800560a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	fffeff8f 	.word	0xfffeff8f
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0210 	bic.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <TIM_OC2_SetConfig+0xe4>)
 8005668:	4013      	ands	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a23      	ldr	r2, [pc, #140]	; (8005724 <TIM_OC2_SetConfig+0xe8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC2_SetConfig+0x68>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a22      	ldr	r2, [pc, #136]	; (8005728 <TIM_OC2_SetConfig+0xec>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10d      	bne.n	80056c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a18      	ldr	r2, [pc, #96]	; (8005724 <TIM_OC2_SetConfig+0xe8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC2_SetConfig+0x94>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a17      	ldr	r2, [pc, #92]	; (8005728 <TIM_OC2_SetConfig+0xec>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d113      	bne.n	80056f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	feff8fff 	.word	0xfeff8fff
 8005724:	40010000 	.word	0x40010000
 8005728:	40010400 	.word	0x40010400

0800572c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4b2d      	ldr	r3, [pc, #180]	; (800580c <TIM_OC3_SetConfig+0xe0>)
 8005758:	4013      	ands	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a22      	ldr	r2, [pc, #136]	; (8005810 <TIM_OC3_SetConfig+0xe4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d003      	beq.n	8005792 <TIM_OC3_SetConfig+0x66>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a21      	ldr	r2, [pc, #132]	; (8005814 <TIM_OC3_SetConfig+0xe8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10d      	bne.n	80057ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a17      	ldr	r2, [pc, #92]	; (8005810 <TIM_OC3_SetConfig+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d003      	beq.n	80057be <TIM_OC3_SetConfig+0x92>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a16      	ldr	r2, [pc, #88]	; (8005814 <TIM_OC3_SetConfig+0xe8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d113      	bne.n	80057e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	fffeff8f 	.word	0xfffeff8f
 8005810:	40010000 	.word	0x40010000
 8005814:	40010400 	.word	0x40010400

08005818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <TIM_OC4_SetConfig+0xa4>)
 8005844:	4013      	ands	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a13      	ldr	r2, [pc, #76]	; (80058c0 <TIM_OC4_SetConfig+0xa8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC4_SetConfig+0x68>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a12      	ldr	r2, [pc, #72]	; (80058c4 <TIM_OC4_SetConfig+0xac>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d109      	bne.n	8005894 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	feff8fff 	.word	0xfeff8fff
 80058c0:	40010000 	.word	0x40010000
 80058c4:	40010400 	.word	0x40010400

080058c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <TIM_OC5_SetConfig+0x98>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005908:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	041b      	lsls	r3, r3, #16
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a12      	ldr	r2, [pc, #72]	; (8005964 <TIM_OC5_SetConfig+0x9c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC5_SetConfig+0x5e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a11      	ldr	r2, [pc, #68]	; (8005968 <TIM_OC5_SetConfig+0xa0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d109      	bne.n	800593a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	621a      	str	r2, [r3, #32]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	fffeff8f 	.word	0xfffeff8f
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400

0800596c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <TIM_OC6_SetConfig+0x9c>)
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	051b      	lsls	r3, r3, #20
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <TIM_OC6_SetConfig+0xa0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC6_SetConfig+0x60>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <TIM_OC6_SetConfig+0xa4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d109      	bne.n	80059e0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	feff8fff 	.word	0xfeff8fff
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40010400 	.word	0x40010400

08005a14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4b39      	ldr	r3, [pc, #228]	; (8005b20 <TIM_SlaveTimer_SetConfig+0x10c>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b30      	cmp	r3, #48	; 0x30
 8005a58:	d05c      	beq.n	8005b14 <TIM_SlaveTimer_SetConfig+0x100>
 8005a5a:	2b30      	cmp	r3, #48	; 0x30
 8005a5c:	d806      	bhi.n	8005a6c <TIM_SlaveTimer_SetConfig+0x58>
 8005a5e:	2b10      	cmp	r3, #16
 8005a60:	d058      	beq.n	8005b14 <TIM_SlaveTimer_SetConfig+0x100>
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d056      	beq.n	8005b14 <TIM_SlaveTimer_SetConfig+0x100>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d054      	beq.n	8005b14 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8005a6a:	e054      	b.n	8005b16 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005a6c:	2b50      	cmp	r3, #80	; 0x50
 8005a6e:	d03d      	beq.n	8005aec <TIM_SlaveTimer_SetConfig+0xd8>
 8005a70:	2b50      	cmp	r3, #80	; 0x50
 8005a72:	d802      	bhi.n	8005a7a <TIM_SlaveTimer_SetConfig+0x66>
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d010      	beq.n	8005a9a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8005a78:	e04d      	b.n	8005b16 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005a7a:	2b60      	cmp	r3, #96	; 0x60
 8005a7c:	d040      	beq.n	8005b00 <TIM_SlaveTimer_SetConfig+0xec>
 8005a7e:	2b70      	cmp	r3, #112	; 0x70
 8005a80:	d000      	beq.n	8005a84 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8005a82:	e048      	b.n	8005b16 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68d9      	ldr	r1, [r3, #12]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f000 f8c0 	bl	8005c18 <TIM_ETR_SetConfig>
      break;
 8005a98:	e03d      	b.n	8005b16 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b05      	cmp	r3, #5
 8005aa0:	d101      	bne.n	8005aa6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e038      	b.n	8005b18 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005acc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	621a      	str	r2, [r3, #32]
      break;
 8005aea:	e014      	b.n	8005b16 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6899      	ldr	r1, [r3, #8]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f000 f813 	bl	8005b24 <TIM_TI1_ConfigInputStage>
      break;
 8005afe:	e00a      	b.n	8005b16 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	6899      	ldr	r1, [r3, #8]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f000 f838 	bl	8005b82 <TIM_TI2_ConfigInputStage>
      break;
 8005b12:	e000      	b.n	8005b16 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005b14:	bf00      	nop
  }
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	fffefff8 	.word	0xfffefff8

08005b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0201 	bic.w	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	011b      	lsls	r3, r3, #4
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f023 030a 	bic.w	r3, r3, #10
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b087      	sub	sp, #28
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0210 	bic.w	r2, r3, #16
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	031b      	lsls	r3, r3, #12
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f043 0307 	orr.w	r3, r3, #7
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	609a      	str	r2, [r3, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	021a      	lsls	r2, r3, #8
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	609a      	str	r2, [r3, #8]
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a1a      	ldr	r2, [r3, #32]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	401a      	ands	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1a      	ldr	r2, [r3, #32]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	431a      	orrs	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e06d      	b.n	8005d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a30      	ldr	r2, [pc, #192]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a2f      	ldr	r2, [pc, #188]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d108      	bne.n	8005d02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a20      	ldr	r2, [pc, #128]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d022      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d01d      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d018      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1a      	ldr	r2, [pc, #104]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00e      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d009      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d004      	beq.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a15      	ldr	r2, [pc, #84]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d10c      	bne.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40010400 	.word	0x40010400
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40001800 	.word	0x40001800

08005dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e065      	b.n	8005ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a16      	ldr	r2, [pc, #88]	; (8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a14      	ldr	r2, [pc, #80]	; (8005eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d115      	bne.n	8005e96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	051b      	lsls	r3, r3, #20
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40010000 	.word	0x40010000
 8005eb8:	40010400 	.word	0x40010400

08005ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e040      	b.n	8005f8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb f960 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2224      	movs	r2, #36	; 0x24
 8005f24:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f82c 	bl	8005f94 <UART_SetConfig>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e022      	b.n	8005f8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 faca 	bl	80064e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fb51 	bl	800662c <UART_CheckIdleState>
 8005f8a:	4603      	mov	r3, r0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4bb1      	ldr	r3, [pc, #708]	; (8006288 <UART_SetConfig+0x2f4>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	6939      	ldr	r1, [r7, #16]
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a9f      	ldr	r2, [pc, #636]	; (800628c <UART_SetConfig+0x2f8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d121      	bne.n	8006058 <UART_SetConfig+0xc4>
 8006014:	4b9e      	ldr	r3, [pc, #632]	; (8006290 <UART_SetConfig+0x2fc>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	2b03      	cmp	r3, #3
 8006020:	d816      	bhi.n	8006050 <UART_SetConfig+0xbc>
 8006022:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0x94>)
 8006024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006028:	08006039 	.word	0x08006039
 800602c:	08006045 	.word	0x08006045
 8006030:	0800603f 	.word	0x0800603f
 8006034:	0800604b 	.word	0x0800604b
 8006038:	2301      	movs	r3, #1
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e151      	b.n	80062e2 <UART_SetConfig+0x34e>
 800603e:	2302      	movs	r3, #2
 8006040:	77fb      	strb	r3, [r7, #31]
 8006042:	e14e      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006044:	2304      	movs	r3, #4
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e14b      	b.n	80062e2 <UART_SetConfig+0x34e>
 800604a:	2308      	movs	r3, #8
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e148      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006050:	2310      	movs	r3, #16
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	bf00      	nop
 8006056:	e144      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a8d      	ldr	r2, [pc, #564]	; (8006294 <UART_SetConfig+0x300>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d134      	bne.n	80060cc <UART_SetConfig+0x138>
 8006062:	4b8b      	ldr	r3, [pc, #556]	; (8006290 <UART_SetConfig+0x2fc>)
 8006064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	2b0c      	cmp	r3, #12
 800606e:	d829      	bhi.n	80060c4 <UART_SetConfig+0x130>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0xe4>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	080060ad 	.word	0x080060ad
 800607c:	080060c5 	.word	0x080060c5
 8006080:	080060c5 	.word	0x080060c5
 8006084:	080060c5 	.word	0x080060c5
 8006088:	080060b9 	.word	0x080060b9
 800608c:	080060c5 	.word	0x080060c5
 8006090:	080060c5 	.word	0x080060c5
 8006094:	080060c5 	.word	0x080060c5
 8006098:	080060b3 	.word	0x080060b3
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	080060bf 	.word	0x080060bf
 80060ac:	2300      	movs	r3, #0
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e117      	b.n	80062e2 <UART_SetConfig+0x34e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e114      	b.n	80062e2 <UART_SetConfig+0x34e>
 80060b8:	2304      	movs	r3, #4
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e111      	b.n	80062e2 <UART_SetConfig+0x34e>
 80060be:	2308      	movs	r3, #8
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e10e      	b.n	80062e2 <UART_SetConfig+0x34e>
 80060c4:	2310      	movs	r3, #16
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	bf00      	nop
 80060ca:	e10a      	b.n	80062e2 <UART_SetConfig+0x34e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a71      	ldr	r2, [pc, #452]	; (8006298 <UART_SetConfig+0x304>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d120      	bne.n	8006118 <UART_SetConfig+0x184>
 80060d6:	4b6e      	ldr	r3, [pc, #440]	; (8006290 <UART_SetConfig+0x2fc>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d00f      	beq.n	8006104 <UART_SetConfig+0x170>
 80060e4:	2b10      	cmp	r3, #16
 80060e6:	d802      	bhi.n	80060ee <UART_SetConfig+0x15a>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <UART_SetConfig+0x164>
 80060ec:	e010      	b.n	8006110 <UART_SetConfig+0x17c>
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d005      	beq.n	80060fe <UART_SetConfig+0x16a>
 80060f2:	2b30      	cmp	r3, #48	; 0x30
 80060f4:	d009      	beq.n	800610a <UART_SetConfig+0x176>
 80060f6:	e00b      	b.n	8006110 <UART_SetConfig+0x17c>
 80060f8:	2300      	movs	r3, #0
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e0f1      	b.n	80062e2 <UART_SetConfig+0x34e>
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e0ee      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006104:	2304      	movs	r3, #4
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e0eb      	b.n	80062e2 <UART_SetConfig+0x34e>
 800610a:	2308      	movs	r3, #8
 800610c:	77fb      	strb	r3, [r7, #31]
 800610e:	e0e8      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006110:	2310      	movs	r3, #16
 8006112:	77fb      	strb	r3, [r7, #31]
 8006114:	bf00      	nop
 8006116:	e0e4      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5f      	ldr	r2, [pc, #380]	; (800629c <UART_SetConfig+0x308>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d120      	bne.n	8006164 <UART_SetConfig+0x1d0>
 8006122:	4b5b      	ldr	r3, [pc, #364]	; (8006290 <UART_SetConfig+0x2fc>)
 8006124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006128:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d00f      	beq.n	8006150 <UART_SetConfig+0x1bc>
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d802      	bhi.n	800613a <UART_SetConfig+0x1a6>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <UART_SetConfig+0x1b0>
 8006138:	e010      	b.n	800615c <UART_SetConfig+0x1c8>
 800613a:	2b80      	cmp	r3, #128	; 0x80
 800613c:	d005      	beq.n	800614a <UART_SetConfig+0x1b6>
 800613e:	2bc0      	cmp	r3, #192	; 0xc0
 8006140:	d009      	beq.n	8006156 <UART_SetConfig+0x1c2>
 8006142:	e00b      	b.n	800615c <UART_SetConfig+0x1c8>
 8006144:	2300      	movs	r3, #0
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e0cb      	b.n	80062e2 <UART_SetConfig+0x34e>
 800614a:	2302      	movs	r3, #2
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e0c8      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006150:	2304      	movs	r3, #4
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e0c5      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006156:	2308      	movs	r3, #8
 8006158:	77fb      	strb	r3, [r7, #31]
 800615a:	e0c2      	b.n	80062e2 <UART_SetConfig+0x34e>
 800615c:	2310      	movs	r3, #16
 800615e:	77fb      	strb	r3, [r7, #31]
 8006160:	bf00      	nop
 8006162:	e0be      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a4d      	ldr	r2, [pc, #308]	; (80062a0 <UART_SetConfig+0x30c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d124      	bne.n	80061b8 <UART_SetConfig+0x224>
 800616e:	4b48      	ldr	r3, [pc, #288]	; (8006290 <UART_SetConfig+0x2fc>)
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617c:	d012      	beq.n	80061a4 <UART_SetConfig+0x210>
 800617e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006182:	d802      	bhi.n	800618a <UART_SetConfig+0x1f6>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <UART_SetConfig+0x204>
 8006188:	e012      	b.n	80061b0 <UART_SetConfig+0x21c>
 800618a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618e:	d006      	beq.n	800619e <UART_SetConfig+0x20a>
 8006190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006194:	d009      	beq.n	80061aa <UART_SetConfig+0x216>
 8006196:	e00b      	b.n	80061b0 <UART_SetConfig+0x21c>
 8006198:	2300      	movs	r3, #0
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e0a1      	b.n	80062e2 <UART_SetConfig+0x34e>
 800619e:	2302      	movs	r3, #2
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e09e      	b.n	80062e2 <UART_SetConfig+0x34e>
 80061a4:	2304      	movs	r3, #4
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e09b      	b.n	80062e2 <UART_SetConfig+0x34e>
 80061aa:	2308      	movs	r3, #8
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e098      	b.n	80062e2 <UART_SetConfig+0x34e>
 80061b0:	2310      	movs	r3, #16
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	bf00      	nop
 80061b6:	e094      	b.n	80062e2 <UART_SetConfig+0x34e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a39      	ldr	r2, [pc, #228]	; (80062a4 <UART_SetConfig+0x310>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d124      	bne.n	800620c <UART_SetConfig+0x278>
 80061c2:	4b33      	ldr	r3, [pc, #204]	; (8006290 <UART_SetConfig+0x2fc>)
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d0:	d012      	beq.n	80061f8 <UART_SetConfig+0x264>
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061d6:	d802      	bhi.n	80061de <UART_SetConfig+0x24a>
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <UART_SetConfig+0x258>
 80061dc:	e012      	b.n	8006204 <UART_SetConfig+0x270>
 80061de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e2:	d006      	beq.n	80061f2 <UART_SetConfig+0x25e>
 80061e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061e8:	d009      	beq.n	80061fe <UART_SetConfig+0x26a>
 80061ea:	e00b      	b.n	8006204 <UART_SetConfig+0x270>
 80061ec:	2301      	movs	r3, #1
 80061ee:	77fb      	strb	r3, [r7, #31]
 80061f0:	e077      	b.n	80062e2 <UART_SetConfig+0x34e>
 80061f2:	2302      	movs	r3, #2
 80061f4:	77fb      	strb	r3, [r7, #31]
 80061f6:	e074      	b.n	80062e2 <UART_SetConfig+0x34e>
 80061f8:	2304      	movs	r3, #4
 80061fa:	77fb      	strb	r3, [r7, #31]
 80061fc:	e071      	b.n	80062e2 <UART_SetConfig+0x34e>
 80061fe:	2308      	movs	r3, #8
 8006200:	77fb      	strb	r3, [r7, #31]
 8006202:	e06e      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006204:	2310      	movs	r3, #16
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	bf00      	nop
 800620a:	e06a      	b.n	80062e2 <UART_SetConfig+0x34e>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a25      	ldr	r2, [pc, #148]	; (80062a8 <UART_SetConfig+0x314>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d124      	bne.n	8006260 <UART_SetConfig+0x2cc>
 8006216:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <UART_SetConfig+0x2fc>)
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006224:	d012      	beq.n	800624c <UART_SetConfig+0x2b8>
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622a:	d802      	bhi.n	8006232 <UART_SetConfig+0x29e>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <UART_SetConfig+0x2ac>
 8006230:	e012      	b.n	8006258 <UART_SetConfig+0x2c4>
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006236:	d006      	beq.n	8006246 <UART_SetConfig+0x2b2>
 8006238:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800623c:	d009      	beq.n	8006252 <UART_SetConfig+0x2be>
 800623e:	e00b      	b.n	8006258 <UART_SetConfig+0x2c4>
 8006240:	2300      	movs	r3, #0
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e04d      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006246:	2302      	movs	r3, #2
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e04a      	b.n	80062e2 <UART_SetConfig+0x34e>
 800624c:	2304      	movs	r3, #4
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e047      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006252:	2308      	movs	r3, #8
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e044      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006258:	2310      	movs	r3, #16
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	bf00      	nop
 800625e:	e040      	b.n	80062e2 <UART_SetConfig+0x34e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a11      	ldr	r2, [pc, #68]	; (80062ac <UART_SetConfig+0x318>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d139      	bne.n	80062de <UART_SetConfig+0x34a>
 800626a:	4b09      	ldr	r3, [pc, #36]	; (8006290 <UART_SetConfig+0x2fc>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006278:	d027      	beq.n	80062ca <UART_SetConfig+0x336>
 800627a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800627e:	d817      	bhi.n	80062b0 <UART_SetConfig+0x31c>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01c      	beq.n	80062be <UART_SetConfig+0x32a>
 8006284:	e027      	b.n	80062d6 <UART_SetConfig+0x342>
 8006286:	bf00      	nop
 8006288:	efff69f3 	.word	0xefff69f3
 800628c:	40011000 	.word	0x40011000
 8006290:	40023800 	.word	0x40023800
 8006294:	40004400 	.word	0x40004400
 8006298:	40004800 	.word	0x40004800
 800629c:	40004c00 	.word	0x40004c00
 80062a0:	40005000 	.word	0x40005000
 80062a4:	40011400 	.word	0x40011400
 80062a8:	40007800 	.word	0x40007800
 80062ac:	40007c00 	.word	0x40007c00
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b4:	d006      	beq.n	80062c4 <UART_SetConfig+0x330>
 80062b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80062ba:	d009      	beq.n	80062d0 <UART_SetConfig+0x33c>
 80062bc:	e00b      	b.n	80062d6 <UART_SetConfig+0x342>
 80062be:	2300      	movs	r3, #0
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e00e      	b.n	80062e2 <UART_SetConfig+0x34e>
 80062c4:	2302      	movs	r3, #2
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e00b      	b.n	80062e2 <UART_SetConfig+0x34e>
 80062ca:	2304      	movs	r3, #4
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e008      	b.n	80062e2 <UART_SetConfig+0x34e>
 80062d0:	2308      	movs	r3, #8
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e005      	b.n	80062e2 <UART_SetConfig+0x34e>
 80062d6:	2310      	movs	r3, #16
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	bf00      	nop
 80062dc:	e001      	b.n	80062e2 <UART_SetConfig+0x34e>
 80062de:	2310      	movs	r3, #16
 80062e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ea:	d17f      	bne.n	80063ec <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80062ec:	7ffb      	ldrb	r3, [r7, #31]
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d85c      	bhi.n	80063ac <UART_SetConfig+0x418>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <UART_SetConfig+0x364>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	0800633d 	.word	0x0800633d
 8006300:	0800635d 	.word	0x0800635d
 8006304:	080063ad 	.word	0x080063ad
 8006308:	08006375 	.word	0x08006375
 800630c:	080063ad 	.word	0x080063ad
 8006310:	080063ad 	.word	0x080063ad
 8006314:	080063ad 	.word	0x080063ad
 8006318:	08006395 	.word	0x08006395
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800631c:	f7fd fa02 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8006320:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	005a      	lsls	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	441a      	add	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	fbb2 f3f3 	udiv	r3, r2, r3
 8006336:	b29b      	uxth	r3, r3
 8006338:	61bb      	str	r3, [r7, #24]
        break;
 800633a:	e03a      	b.n	80063b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800633c:	f7fd fa06 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8006340:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	005a      	lsls	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	085b      	lsrs	r3, r3, #1
 800634c:	441a      	add	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	61bb      	str	r3, [r7, #24]
        break;
 800635a:	e02a      	b.n	80063b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	085a      	lsrs	r2, r3, #1
 8006362:	4b5f      	ldr	r3, [pc, #380]	; (80064e0 <UART_SetConfig+0x54c>)
 8006364:	4413      	add	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6852      	ldr	r2, [r2, #4]
 800636a:	fbb3 f3f2 	udiv	r3, r3, r2
 800636e:	b29b      	uxth	r3, r3
 8006370:	61bb      	str	r3, [r7, #24]
        break;
 8006372:	e01e      	b.n	80063b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006374:	f7fd f8f2 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8006378:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	005a      	lsls	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	b29b      	uxth	r3, r3
 8006390:	61bb      	str	r3, [r7, #24]
        break;
 8006392:	e00e      	b.n	80063b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	61bb      	str	r3, [r7, #24]
        break;
 80063aa:	e002      	b.n	80063b2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	75fb      	strb	r3, [r7, #23]
        break;
 80063b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b0f      	cmp	r3, #15
 80063b6:	d916      	bls.n	80063e6 <UART_SetConfig+0x452>
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d212      	bcs.n	80063e6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f023 030f 	bic.w	r3, r3, #15
 80063c8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	897b      	ldrh	r3, [r7, #10]
 80063d8:	4313      	orrs	r3, r2
 80063da:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	897a      	ldrh	r2, [r7, #10]
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	e070      	b.n	80064c8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
 80063ea:	e06d      	b.n	80064c8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80063ec:	7ffb      	ldrb	r3, [r7, #31]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d859      	bhi.n	80064a6 <UART_SetConfig+0x512>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x464>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	0800643b 	.word	0x0800643b
 8006400:	08006459 	.word	0x08006459
 8006404:	080064a7 	.word	0x080064a7
 8006408:	08006471 	.word	0x08006471
 800640c:	080064a7 	.word	0x080064a7
 8006410:	080064a7 	.word	0x080064a7
 8006414:	080064a7 	.word	0x080064a7
 8006418:	0800648f 	.word	0x0800648f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fd f982 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8006420:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	085a      	lsrs	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	441a      	add	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	fbb2 f3f3 	udiv	r3, r2, r3
 8006434:	b29b      	uxth	r3, r3
 8006436:	61bb      	str	r3, [r7, #24]
        break;
 8006438:	e038      	b.n	80064ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800643a:	f7fd f987 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 800643e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	085a      	lsrs	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	441a      	add	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	b29b      	uxth	r3, r3
 8006454:	61bb      	str	r3, [r7, #24]
        break;
 8006456:	e029      	b.n	80064ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	085a      	lsrs	r2, r3, #1
 800645e:	4b21      	ldr	r3, [pc, #132]	; (80064e4 <UART_SetConfig+0x550>)
 8006460:	4413      	add	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6852      	ldr	r2, [r2, #4]
 8006466:	fbb3 f3f2 	udiv	r3, r3, r2
 800646a:	b29b      	uxth	r3, r3
 800646c:	61bb      	str	r3, [r7, #24]
        break;
 800646e:	e01d      	b.n	80064ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006470:	f7fd f874 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8006474:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	085a      	lsrs	r2, r3, #1
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	441a      	add	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	b29b      	uxth	r3, r3
 800648a:	61bb      	str	r3, [r7, #24]
        break;
 800648c:	e00e      	b.n	80064ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	61bb      	str	r3, [r7, #24]
        break;
 80064a4:	e002      	b.n	80064ac <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	75fb      	strb	r3, [r7, #23]
        break;
 80064aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d908      	bls.n	80064c4 <UART_SetConfig+0x530>
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b8:	d204      	bcs.n	80064c4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	e001      	b.n	80064c8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	01e84800 	.word	0x01e84800
 80064e4:	00f42400 	.word	0x00f42400

080064e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01a      	beq.n	80065fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e6:	d10a      	bne.n	80065fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af02      	add	r7, sp, #8
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800663a:	f7fa ff4d 	bl	80014d8 <HAL_GetTick>
 800663e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b08      	cmp	r3, #8
 800664c:	d10e      	bne.n	800666c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f82a 	bl	80066b6 <UART_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e020      	b.n	80066ae <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b04      	cmp	r3, #4
 8006678:	d10e      	bne.n	8006698 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800667a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f814 	bl	80066b6 <UART_WaitOnFlagUntilTimeout>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e00a      	b.n	80066ae <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	4613      	mov	r3, r2
 80066c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c6:	e05d      	b.n	8006784 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d059      	beq.n	8006784 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d0:	f7fa ff02 	bl	80014d8 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d302      	bcc.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d11b      	bne.n	800671e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80066f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0201 	bic.w	r2, r2, #1
 8006704:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e042      	b.n	80067a4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02b      	beq.n	8006784 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800673a:	d123      	bne.n	8006784 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006744:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006754:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2220      	movs	r2, #32
 8006776:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e00f      	b.n	80067a4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69da      	ldr	r2, [r3, #28]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4013      	ands	r3, r2
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	429a      	cmp	r2, r3
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d092      	beq.n	80066c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067ac:	b084      	sub	sp, #16
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	f107 001c 	add.w	r0, r7, #28
 80067ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d120      	bne.n	8006806 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	4b20      	ldr	r3, [pc, #128]	; (8006858 <USB_CoreInit+0xac>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d105      	bne.n	80067fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa52 	bl	8006ca4 <USB_CoreReset>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
 8006804:	e010      	b.n	8006828 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa46 	bl	8006ca4 <USB_CoreReset>
 8006818:	4603      	mov	r3, r0
 800681a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	2b01      	cmp	r3, #1
 800682c:	d10b      	bne.n	8006846 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f043 0206 	orr.w	r2, r3, #6
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f043 0220 	orr.w	r2, r3, #32
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006852:	b004      	add	sp, #16
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	ffbdffbf 	.word	0xffbdffbf

0800685c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f023 0201 	bic.w	r2, r3, #1
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b082      	sub	sp, #8
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	460b      	mov	r3, r1
 8006888:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d106      	bne.n	80068aa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	60da      	str	r2, [r3, #12]
 80068a8:	e00b      	b.n	80068c2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	60da      	str	r2, [r3, #12]
 80068bc:	e001      	b.n	80068c2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e003      	b.n	80068ca <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80068c2:	2032      	movs	r0, #50	; 0x32
 80068c4:	f7fa fe14 	bl	80014f0 <HAL_Delay>

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068d4:	b084      	sub	sp, #16
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	e009      	b.n	8006908 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3340      	adds	r3, #64	; 0x40
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	2200      	movs	r2, #0
 8006900:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	3301      	adds	r3, #1
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b0e      	cmp	r3, #14
 800690c:	d9f2      	bls.n	80068f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d11c      	bne.n	800694e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006922:	f043 0302 	orr.w	r3, r3, #2
 8006926:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e005      	b.n	800695a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006960:	461a      	mov	r2, r3
 8006962:	2300      	movs	r3, #0
 8006964:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	4619      	mov	r1, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	461a      	mov	r2, r3
 8006976:	680b      	ldr	r3, [r1, #0]
 8006978:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800697a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697c:	2b01      	cmp	r3, #1
 800697e:	d10c      	bne.n	800699a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006986:	2100      	movs	r1, #0
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f959 	bl	8006c40 <USB_SetDevSpeed>
 800698e:	e018      	b.n	80069c2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006990:	2101      	movs	r1, #1
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f954 	bl	8006c40 <USB_SetDevSpeed>
 8006998:	e013      	b.n	80069c2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b03      	cmp	r3, #3
 800699e:	d10c      	bne.n	80069ba <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d104      	bne.n	80069b0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069a6:	2100      	movs	r1, #0
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f949 	bl	8006c40 <USB_SetDevSpeed>
 80069ae:	e008      	b.n	80069c2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069b0:	2101      	movs	r1, #1
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f944 	bl	8006c40 <USB_SetDevSpeed>
 80069b8:	e003      	b.n	80069c2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069ba:	2103      	movs	r1, #3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f93f 	bl	8006c40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069c2:	2110      	movs	r1, #16
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8f3 	bl	8006bb0 <USB_FlushTxFifo>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f911 	bl	8006bfc <USB_FlushRxFifo>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	461a      	mov	r2, r3
 80069ec:	2300      	movs	r3, #0
 80069ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	461a      	mov	r2, r3
 80069f8:	2300      	movs	r3, #0
 80069fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a02:	461a      	mov	r2, r3
 8006a04:	2300      	movs	r3, #0
 8006a06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
 8006a0c:	e043      	b.n	8006a96 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a24:	d118      	bne.n	8006a58 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	e013      	b.n	8006a6a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e008      	b.n	8006a6a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a64:	461a      	mov	r2, r3
 8006a66:	2300      	movs	r3, #0
 8006a68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a76:	461a      	mov	r2, r3
 8006a78:	2300      	movs	r3, #0
 8006a7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	3301      	adds	r3, #1
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d3b7      	bcc.n	8006a0e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e043      	b.n	8006b2c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aba:	d118      	bne.n	8006aee <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	e013      	b.n	8006b00 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	e008      	b.n	8006b00 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	461a      	mov	r2, r3
 8006afc:	2300      	movs	r3, #0
 8006afe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2300      	movs	r3, #0
 8006b10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d3b7      	bcc.n	8006aa4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f043 0210 	orr.w	r2, r3, #16
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <USB_DevInit+0x2d4>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f043 0208 	orr.w	r2, r3, #8
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d105      	bne.n	8006b98 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <USB_DevInit+0x2d8>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ba4:	b004      	add	sp, #16
 8006ba6:	4770      	bx	lr
 8006ba8:	803c3800 	.word	0x803c3800
 8006bac:	40000004 	.word	0x40000004

08006bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	019b      	lsls	r3, r3, #6
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <USB_FlushTxFifo+0x48>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e006      	b.n	8006bea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d0f0      	beq.n	8006bca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	00030d40 	.word	0x00030d40

08006bfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3301      	adds	r3, #1
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <USB_FlushRxFifo+0x40>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d901      	bls.n	8006c20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e006      	b.n	8006c2e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d0f0      	beq.n	8006c0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	00030d40 	.word	0x00030d40

08006c40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c60:	4313      	orrs	r3, r2
 8006c62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8c:	f043 0302 	orr.w	r3, r3, #2
 8006c90:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006c92:	2003      	movs	r0, #3
 8006c94:	f7fa fc2c 	bl	80014f0 <HAL_Delay>

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <USB_CoreReset+0x64>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d901      	bls.n	8006cc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e01b      	b.n	8006cfa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	daf2      	bge.n	8006cb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f043 0201 	orr.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <USB_CoreReset+0x64>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d901      	bls.n	8006cec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e006      	b.n	8006cfa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d0f0      	beq.n	8006cda <USB_CoreReset+0x36>

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	00030d40 	.word	0x00030d40

08006d0c <__libc_init_array>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	4e0d      	ldr	r6, [pc, #52]	; (8006d44 <__libc_init_array+0x38>)
 8006d10:	4c0d      	ldr	r4, [pc, #52]	; (8006d48 <__libc_init_array+0x3c>)
 8006d12:	1ba4      	subs	r4, r4, r6
 8006d14:	10a4      	asrs	r4, r4, #2
 8006d16:	2500      	movs	r5, #0
 8006d18:	42a5      	cmp	r5, r4
 8006d1a:	d109      	bne.n	8006d30 <__libc_init_array+0x24>
 8006d1c:	4e0b      	ldr	r6, [pc, #44]	; (8006d4c <__libc_init_array+0x40>)
 8006d1e:	4c0c      	ldr	r4, [pc, #48]	; (8006d50 <__libc_init_array+0x44>)
 8006d20:	f000 f820 	bl	8006d64 <_init>
 8006d24:	1ba4      	subs	r4, r4, r6
 8006d26:	10a4      	asrs	r4, r4, #2
 8006d28:	2500      	movs	r5, #0
 8006d2a:	42a5      	cmp	r5, r4
 8006d2c:	d105      	bne.n	8006d3a <__libc_init_array+0x2e>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d34:	4798      	blx	r3
 8006d36:	3501      	adds	r5, #1
 8006d38:	e7ee      	b.n	8006d18 <__libc_init_array+0xc>
 8006d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d3e:	4798      	blx	r3
 8006d40:	3501      	adds	r5, #1
 8006d42:	e7f2      	b.n	8006d2a <__libc_init_array+0x1e>
 8006d44:	08006da4 	.word	0x08006da4
 8006d48:	08006da4 	.word	0x08006da4
 8006d4c:	08006da4 	.word	0x08006da4
 8006d50:	08006da8 	.word	0x08006da8

08006d54 <memset>:
 8006d54:	4402      	add	r2, r0
 8006d56:	4603      	mov	r3, r0
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d100      	bne.n	8006d5e <memset+0xa>
 8006d5c:	4770      	bx	lr
 8006d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d62:	e7f9      	b.n	8006d58 <memset+0x4>

08006d64 <_init>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	bf00      	nop
 8006d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6a:	bc08      	pop	{r3}
 8006d6c:	469e      	mov	lr, r3
 8006d6e:	4770      	bx	lr

08006d70 <_fini>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr
