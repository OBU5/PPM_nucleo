
PPM_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008330  08008330  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008338  08008338  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b7a8  20000074  080083b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2002b81c  080083b4  0002b81c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f6a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ba3  00000000  00000000  0003700c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  00039bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  0003b078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bd2e  00000000  00000000  0003c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fcf6  00000000  00000000  00068116  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00115aa4  00000000  00000000  00077e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d8b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c00  00000000  00000000  0018d92c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	080082b8 	.word	0x080082b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	080082b8 	.word	0x080082b8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	4907      	ldr	r1, [pc, #28]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000624:	f001 f945 	bl	80018b2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000628:	f000 f838 	bl	800069c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062c:	f000 fb96 	bl	8000d5c <MX_GPIO_Init>
	MX_DMA_Init();
 8000630:	f000 fb84 	bl	8000d3c <MX_DMA_Init>
	MX_ETH_Init();
 8000634:	f000 f8ca 	bl	80007cc <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000638:	f000 fb22 	bl	8000c80 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 800063c:	f000 fb50 	bl	8000ce0 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI1_Init();
 8000640:	f000 f904 	bl	800084c <MX_SPI1_Init>
	MX_TIM8_Init();
 8000644:	f000 fa50 	bl	8000ae8 <MX_TIM8_Init>
	MX_TIM1_Init();
 8000648:	f000 f93a 	bl	80008c0 <MX_TIM1_Init>
	MX_TIM2_Init();
 800064c:	f000 f9f8 	bl	8000a40 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	// Start timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000650:	2100      	movs	r1, #0
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <main+0x64>)
 8000654:	f004 fd1c 	bl	8005090 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8000658:	2104      	movs	r1, #4
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0x64>)
 800065c:	f004 fd18 	bl	8005090 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8000660:	2100      	movs	r1, #0
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <main+0x68>)
 8000664:	f004 fd14 	bl	8005090 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	4808      	ldr	r0, [pc, #32]	; (800068c <main+0x6c>)
 800066c:	f004 fe60 	bl	8005330 <HAL_TIM_IC_Start_IT>

	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1, samplesPerPeriod);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <main+0x70>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	4906      	ldr	r1, [pc, #24]	; (8000694 <main+0x74>)
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <main+0x78>)
 800067c:	f003 ff70 	bl	8004560 <HAL_SPI_Receive_DMA>
	//LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000680:	e7fe      	b.n	8000680 <main+0x60>
 8000682:	bf00      	nop
 8000684:	2002b688 	.word	0x2002b688
 8000688:	200000b4 	.word	0x200000b4
 800068c:	2002b72c 	.word	0x2002b72c
 8000690:	20000000 	.word	0x20000000
 8000694:	20015e00 	.word	0x20015e00
 8000698:	2002b6c8 	.word	0x2002b6c8

0800069c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b0b8      	sub	sp, #224	; 0xe0
 80006a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006a6:	2234      	movs	r2, #52	; 0x34
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 f9f6 	bl	8007a9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2290      	movs	r2, #144	; 0x90
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 f9e7 	bl	8007a9c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80006ce:	f002 fd89 	bl	80031e4 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <SystemClock_Config+0x124>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a3a      	ldr	r2, [pc, #232]	; (80007c0 <SystemClock_Config+0x124>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <SystemClock_Config+0x124>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ea:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <SystemClock_Config+0x128>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a35      	ldr	r2, [pc, #212]	; (80007c4 <SystemClock_Config+0x128>)
 80006f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <SystemClock_Config+0x128>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000702:	2301      	movs	r3, #1
 8000704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000708:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800070c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 800071e:	2304      	movs	r3, #4
 8000720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000724:	23d8      	movs	r3, #216	; 0xd8
 8000726:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000730:	2309      	movs	r3, #9
 8000732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000736:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fdb2 	bl	80032a4 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xae>
		Error_Handler();
 8000746:	f000 fcef 	bl	8001128 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800074a:	f002 fd5b 	bl	8003204 <HAL_PWREx_EnableOverDrive>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xbc>
		Error_Handler();
 8000754:	f000 fce8 	bl	8001128 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800077a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800077e:	2107      	movs	r1, #7
 8000780:	4618      	mov	r0, r3
 8000782:	f003 f83d 	bl	8003800 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xf4>
		Error_Handler();
 800078c:	f000 fccc 	bl	8001128 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <SystemClock_Config+0x12c>)
 8000792:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000794:	2300      	movs	r3, #0
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800079e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fa21 	bl	8003bf0 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x11c>
		Error_Handler();
 80007b4:	f000 fcb8 	bl	8001128 <Error_Handler>
	}
}
 80007b8:	bf00      	nop
 80007ba:	37e0      	adds	r7, #224	; 0xe0
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	00200110 	.word	0x00200110

080007cc <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_ETH_Init+0x78>)
 80007d2:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <MX_ETH_Init+0x7c>)
 80007d4:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ETH_Init+0x78>)
 80007d8:	2201      	movs	r2, #1
 80007da:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_ETH_Init+0x78>)
 80007de:	2200      	movs	r2, #0
 80007e0:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ETH_Init+0x78>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ETH_Init+0x78>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_ETH_Init+0x78>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	3302      	adds	r3, #2
 80007fa:	22e1      	movs	r2, #225	; 0xe1
 80007fc:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ETH_Init+0x78>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	3303      	adds	r3, #3
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_ETH_Init+0x78>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	3304      	adds	r3, #4
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_ETH_Init+0x78>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	3305      	adds	r3, #5
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_ETH_Init+0x78>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_ETH_Init+0x78>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_ETH_Init+0x78>)
 800082a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800082e:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_ETH_Init+0x78>)
 8000832:	f001 fd45 	bl	80022c0 <HAL_ETH_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ETH_Init+0x74>
		Error_Handler();
 800083c:	f000 fc74 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2002b7cc 	.word	0x2002b7cc
 8000848:	40028000 	.word	0x40028000

0800084c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <MX_SPI1_Init+0x70>)
 8000854:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_SPI1_Init+0x6c>)
 800085e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000862:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000866:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800086a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_SPI1_Init+0x6c>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_SPI1_Init+0x6c>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_SPI1_Init+0x6c>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000892:	2207      	movs	r2, #7
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_SPI1_Init+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_SPI1_Init+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_SPI1_Init+0x6c>)
 80008a4:	f003 fdca 	bl	800443c <HAL_SPI_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_SPI1_Init+0x66>
		Error_Handler();
 80008ae:	f000 fc3b 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2002b6c8 	.word	0x2002b6c8
 80008bc:	40013000 	.word	0x40013000

080008c0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09a      	sub	sp, #104	; 0x68
 80008c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	222c      	movs	r2, #44	; 0x2c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f007 f8ce 	bl	8007a9c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000900:	4b4d      	ldr	r3, [pc, #308]	; (8000a38 <MX_TIM1_Init+0x178>)
 8000902:	4a4e      	ldr	r2, [pc, #312]	; (8000a3c <MX_TIM1_Init+0x17c>)
 8000904:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000906:	4b4c      	ldr	r3, [pc, #304]	; (8000a38 <MX_TIM1_Init+0x178>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <MX_TIM1_Init+0x178>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 8000912:	4b49      	ldr	r3, [pc, #292]	; (8000a38 <MX_TIM1_Init+0x178>)
 8000914:	f241 3221 	movw	r2, #4897	; 0x1321
 8000918:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <MX_TIM1_Init+0x178>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000920:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <MX_TIM1_Init+0x178>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <MX_TIM1_Init+0x178>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800092c:	4842      	ldr	r0, [pc, #264]	; (8000a38 <MX_TIM1_Init+0x178>)
 800092e:	f004 fb24 	bl	8004f7a <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000938:	f000 fbf6 	bl	8001128 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000946:	4619      	mov	r1, r3
 8000948:	483b      	ldr	r0, [pc, #236]	; (8000a38 <MX_TIM1_Init+0x178>)
 800094a:	f005 f8e9 	bl	8005b20 <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x98>
		Error_Handler();
 8000954:	f000 fbe8 	bl	8001128 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000958:	4837      	ldr	r0, [pc, #220]	; (8000a38 <MX_TIM1_Init+0x178>)
 800095a:	f004 fb64 	bl	8005026 <HAL_TIM_PWM_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000964:	f000 fbe0 	bl	8001128 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000968:	2320      	movs	r3, #32
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000974:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000978:	4619      	mov	r1, r3
 800097a:	482f      	ldr	r0, [pc, #188]	; (8000a38 <MX_TIM1_Init+0x178>)
 800097c:	f005 ff9e 	bl	80068bc <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8000986:	f000 fbcf 	bl	8001128 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800098a:	2370      	movs	r3, #112	; 0x70
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 800098e:	f240 336a 	movw	r3, #874	; 0x36a
 8000992:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000994:	2302      	movs	r3, #2
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000998:	2300      	movs	r3, #0
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80009a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a4:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80009aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	4821      	ldr	r0, [pc, #132]	; (8000a38 <MX_TIM1_Init+0x178>)
 80009b4:	f004 ff9c 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 80009be:	f000 fbb3 	bl	8001128 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c2:	2360      	movs	r3, #96	; 0x60
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 80009c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80009cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d0:	2204      	movs	r2, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4818      	ldr	r0, [pc, #96]	; (8000a38 <MX_TIM1_Init+0x178>)
 80009d6:	f004 ff8b 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x124>
			!= HAL_OK) {
		Error_Handler();
 80009e0:	f000 fba2 	bl	8001128 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <MX_TIM1_Init+0x178>)
 8000a1a:	f005 ffdd 	bl	80069d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x168>
			!= HAL_OK) {
		Error_Handler();
 8000a24:	f000 fb80 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <MX_TIM1_Init+0x178>)
 8000a2a:	f000 fd83 	bl	8001534 <HAL_TIM_MspPostInit>

}
 8000a2e:	bf00      	nop
 8000a30:	3768      	adds	r7, #104	; 0x68
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2002b688 	.word	0x2002b688
 8000a3c:	40010000 	.word	0x40010000

08000a40 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a64:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000a88:	f004 fc26 	bl	80052d8 <HAL_TIM_IC_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000a92:	f000 fb49 	bl	8001128 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000aa6:	f005 ff09 	bl	80068bc <HAL_TIMEx_MasterConfigSynchronization>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8000ab0:	f000 fb3a 	bl	8001128 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_TIM2_Init+0xa4>)
 8000acc:	f004 fe73 	bl	80057b6 <HAL_TIM_IC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000ad6:	f000 fb27 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2002b72c 	.word	0x2002b72c

08000ae8 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09e      	sub	sp, #120	; 0x78
 8000aec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000aee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000afc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
 8000b28:	615a      	str	r2, [r3, #20]
 8000b2a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	222c      	movs	r2, #44	; 0x2c
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f006 ffb2 	bl	8007a9c <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000b38:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b3a:	4a50      	ldr	r2, [pc, #320]	; (8000c7c <MX_TIM8_Init+0x194>)
 8000b3c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000b3e:	4b4e      	ldr	r3, [pc, #312]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 8000b4a:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b4c:	226b      	movs	r2, #107	; 0x6b
 8000b4e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b49      	ldr	r3, [pc, #292]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 8000b56:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b58:	2218      	movs	r2, #24
 8000b5a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5c:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8000b62:	4845      	ldr	r0, [pc, #276]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b64:	f004 fa09 	bl	8004f7a <HAL_TIM_Base_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM8_Init+0x8a>
		Error_Handler();
 8000b6e:	f000 fadb 	bl	8001128 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b76:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8000b78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	483e      	ldr	r0, [pc, #248]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b80:	f004 ffce 	bl	8005b20 <HAL_TIM_ConfigClockSource>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM8_Init+0xa6>
		Error_Handler();
 8000b8a:	f000 facd 	bl	8001128 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8000b8e:	483a      	ldr	r0, [pc, #232]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000b90:	f004 fa49 	bl	8005026 <HAL_TIM_PWM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM8_Init+0xb6>
		Error_Handler();
 8000b9a:	f000 fac5 	bl	8001128 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	4835      	ldr	r0, [pc, #212]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000ba2:	f004 fca3 	bl	80054ec <HAL_TIM_OnePulse_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM8_Init+0xc8>
		Error_Handler();
 8000bac:	f000 fabc 	bl	8001128 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8000bb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	482e      	ldr	r0, [pc, #184]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000bc0:	f005 f868 	bl	8005c94 <HAL_TIM_SlaveConfigSynchro>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM8_Init+0xe6>
		Error_Handler();
 8000bca:	f000 faad 	bl	8001128 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8000bda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bde:	4619      	mov	r1, r3
 8000be0:	4825      	ldr	r0, [pc, #148]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000be2:	f005 fe6b 	bl	80068bc <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM8_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 8000bec:	f000 fa9c 	bl	8001128 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000bf0:	2370      	movs	r3, #112	; 0x70
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8000bf4:	2336      	movs	r3, #54	; 0x36
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8000c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c10:	2200      	movs	r2, #0
 8000c12:	4619      	mov	r1, r3
 8000c14:	4818      	ldr	r0, [pc, #96]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000c16:	f004 fe6b 	bl	80058f0 <HAL_TIM_PWM_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM8_Init+0x13c>
			!= HAL_OK) {
		Error_Handler();
 8000c20:	f000 fa82 	bl	8001128 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c4a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000c5a:	f005 febd 	bl	80069d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM8_Init+0x180>
			!= HAL_OK) {
		Error_Handler();
 8000c64:	f000 fa60 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_TIM8_Init+0x190>)
 8000c6a:	f000 fc63 	bl	8001534 <HAL_TIM_MspPostInit>

}
 8000c6e:	bf00      	nop
 8000c70:	3778      	adds	r7, #120	; 0x78
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000b4 	.word	0x200000b4
 8000c7c:	40010400 	.word	0x40010400

08000c80 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <MX_USART3_UART_Init+0x5c>)
 8000c88:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART3_UART_Init+0x58>)
 8000cc4:	f005 ff24 	bl	8006b10 <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000cce:	f000 fa2b 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000f4 	.word	0x200000f4
 8000cdc:	40004800 	.word	0x40004800

08000ce0 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cea:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cee:	2206      	movs	r2, #6
 8000cf0:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d24:	f002 f915 	bl	8002f52 <HAL_PCD_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8000d2e:	f000 f9fb 	bl	8001128 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000174 	.word	0x20000174

08000d3c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

	/* Init with LL driver */
	/* DMA controller clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000d40:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000d44:	f7ff fc54 	bl	80005f0 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2038      	movs	r0, #56	; 0x38
 8000d4e:	f000 ff0a 	bl	8001b66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d52:	2038      	movs	r0, #56	; 0x38
 8000d54:	f000 ff23 	bl	8001b9e <HAL_NVIC_EnableIRQ>

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a55      	ldr	r2, [pc, #340]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a4f      	ldr	r2, [pc, #316]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a49      	ldr	r2, [pc, #292]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a43      	ldr	r2, [pc, #268]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b41      	ldr	r3, [pc, #260]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a3d      	ldr	r2, [pc, #244]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000e02:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <MX_GPIO_Init+0x170>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	482c      	ldr	r0, [pc, #176]	; (8000ed0 <MX_GPIO_Init+0x174>)
 8000e20:	f002 f864 	bl	8002eec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e2a:	482a      	ldr	r0, [pc, #168]	; (8000ed4 <MX_GPIO_Init+0x178>)
 8000e2c:	f002 f85e 	bl	8002eec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	4828      	ldr	r0, [pc, #160]	; (8000ed8 <MX_GPIO_Init+0x17c>)
 8000e36:	f002 f859 	bl	8002eec <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_GPIO_Init+0x180>)
 8000e42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4824      	ldr	r0, [pc, #144]	; (8000ee0 <MX_GPIO_Init+0x184>)
 8000e50:	f001 fea2 	bl	8002b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e54:	2310      	movs	r3, #16
 8000e56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4819      	ldr	r0, [pc, #100]	; (8000ed0 <MX_GPIO_Init+0x174>)
 8000e6c:	f001 fe94 	bl	8002b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000e70:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <MX_GPIO_Init+0x178>)
 8000e8a:	f001 fe85 	bl	8002b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_GPIO_Init+0x17c>)
 8000ea6:	f001 fe77 	bl	8002b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_GPIO_Init+0x17c>)
 8000ebe:	f001 fe6b 	bl	8002b98 <HAL_GPIO_Init>

}
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	; 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40021800 	.word	0x40021800
 8000edc:	10110000 	.word	0x10110000
 8000ee0:	40020800 	.word	0x40020800

08000ee4 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	filledBuffers++;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_SPI_RxCpltCallback+0x70>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_SPI_RxCpltCallback+0x70>)
 8000ef6:	701a      	strb	r2, [r3, #0]

	// observe interval of SPI receiving
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4817      	ldr	r0, [pc, #92]	; (8000f58 <HAL_SPI_RxCpltCallback+0x74>)
 8000efc:	f002 f80f 	bl	8002f1e <HAL_GPIO_TogglePin>
	// Run the measurement again

	//first buffer is filled
	if (filledBuffers == 1) {
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_SPI_RxCpltCallback+0x70>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d108      	bne.n	8000f1a <HAL_SPI_RxCpltCallback+0x36>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2, samplesPerPeriod);
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_SPI_RxCpltCallback+0x78>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4913      	ldr	r1, [pc, #76]	; (8000f60 <HAL_SPI_RxCpltCallback+0x7c>)
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <HAL_SPI_RxCpltCallback+0x80>)
 8000f14:	f003 fb24 	bl	8004560 <HAL_SPI_Receive_DMA>
	 samplesPerPeriod++;
	 sprintf(msg_buffers, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);

	 }*/
}
 8000f18:	e017      	b.n	8000f4a <HAL_SPI_RxCpltCallback+0x66>
	else if (filledBuffers == 2) {
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_SPI_RxCpltCallback+0x70>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d113      	bne.n	8000f4a <HAL_SPI_RxCpltCallback+0x66>
		HAL_TIM_Base_Stop(&htim1);
 8000f22:	4811      	ldr	r0, [pc, #68]	; (8000f68 <HAL_SPI_RxCpltCallback+0x84>)
 8000f24:	f004 f854 	bl	8004fd0 <HAL_TIM_Base_Stop>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <HAL_SPI_RxCpltCallback+0x84>)
 8000f2c:	f004 f93a 	bl	80051a4 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8000f30:	2104      	movs	r1, #4
 8000f32:	480d      	ldr	r0, [pc, #52]	; (8000f68 <HAL_SPI_RxCpltCallback+0x84>)
 8000f34:	f004 f936 	bl	80051a4 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <HAL_SPI_RxCpltCallback+0x88>)
 8000f3c:	f004 fa66 	bl	800540c <HAL_TIM_IC_Stop_IT>
		filledBuffers = 0;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <HAL_SPI_RxCpltCallback+0x70>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8000f46:	f000 f813 	bl	8000f70 <sendDataOverUART>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000090 	.word	0x20000090
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000578 	.word	0x20000578
 8000f64:	2002b6c8 	.word	0x2002b6c8
 8000f68:	2002b688 	.word	0x2002b688
 8000f6c:	2002b72c 	.word	0x2002b72c

08000f70 <sendDataOverUART>:

void sendDataOverUART() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	847b      	strh	r3, [r7, #34]	; 0x22
	int i = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
	//send frequency
	sprintf(msg_freq, "%d\n", frequency);
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <sendDataOverUART+0xe8>)
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f88:	f107 0010 	add.w	r0, r7, #16
 8000f8c:	ec53 2b17 	vmov	r2, r3, d7
 8000f90:	4932      	ldr	r1, [pc, #200]	; (800105c <sendDataOverUART+0xec>)
 8000f92:	f006 fd8b 	bl	8007aac <siprintf>
	//HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);

	// first buffer
	for (i = 0; i < samplesPerPeriod; i++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9a:	e025      	b.n	8000fe8 <sendDataOverUART+0x78>
		adc = (uint16_t) (buffer_rx1[i]) + (uint16_t) (256*buffer_rx1[i+1]);
 8000f9c:	4a30      	ldr	r2, [pc, #192]	; (8001060 <sendDataOverUART+0xf0>)
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	3301      	adds	r3, #1
 8000faa:	492d      	ldr	r1, [pc, #180]	; (8001060 <sendDataOverUART+0xf0>)
 8000fac:	5ccb      	ldrb	r3, [r1, r3]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(msg_buffers, "%hu\n", adc);
 8000fb8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4929      	ldr	r1, [pc, #164]	; (8001064 <sendDataOverUART+0xf4>)
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fd74 	bl	8007aac <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f93a 	bl	8000240 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4639      	mov	r1, r7
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	4824      	ldr	r0, [pc, #144]	; (8001068 <sendDataOverUART+0xf8>)
 8000fd8:	f005 fde8 	bl	8006bac <HAL_UART_Transmit>
		i++;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3301      	adds	r3, #1
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < samplesPerPeriod; i++) {
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fea:	4b20      	ldr	r3, [pc, #128]	; (800106c <sendDataOverUART+0xfc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3d4      	bcc.n	8000f9c <sendDataOverUART+0x2c>
	}
	//second buffer
	for (i = 0; i < samplesPerPeriod; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e025      	b.n	8001044 <sendDataOverUART+0xd4>
		adc = (uint16_t) (buffer_rx2[i]) + (uint16_t) (256*buffer_rx2[i+1]);
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <sendDataOverUART+0x100>)
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b29a      	uxth	r2, r3
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	3301      	adds	r3, #1
 8001006:	491a      	ldr	r1, [pc, #104]	; (8001070 <sendDataOverUART+0x100>)
 8001008:	5ccb      	ldrb	r3, [r1, r3]
 800100a:	b29b      	uxth	r3, r3
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	4413      	add	r3, r2
 8001012:	847b      	strh	r3, [r7, #34]	; 0x22
		sprintf(msg_buffers, "%hu\n", adc);
 8001014:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001016:	463b      	mov	r3, r7
 8001018:	4912      	ldr	r1, [pc, #72]	; (8001064 <sendDataOverUART+0xf4>)
 800101a:	4618      	mov	r0, r3
 800101c:	f006 fd46 	bl	8007aac <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8001020:	463b      	mov	r3, r7
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f90c 	bl	8000240 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	4639      	mov	r1, r7
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <sendDataOverUART+0xf8>)
 8001034:	f005 fdba 	bl	8006bac <HAL_UART_Transmit>
		i++;
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	3301      	adds	r3, #1
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < samplesPerPeriod; i++) {
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	3301      	adds	r3, #1
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <sendDataOverUART+0xfc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d3d4      	bcc.n	8000ff8 <sendDataOverUART+0x88>
	}
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000a0 	.word	0x200000a0
 800105c:	080082d0 	.word	0x080082d0
 8001060:	20015e00 	.word	0x20015e00
 8001064:	080082d4 	.word	0x080082d4
 8001068:	200000f4 	.word	0x200000f4
 800106c:	20000000 	.word	0x20000000
 8001070:	20000578 	.word	0x20000578

08001074 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_TIM_IC_CaptureCallback>:
	LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_0);
	NVIC_SetPriority(DMA2_Stream0_IRQn, 0);
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001098:	d135      	bne.n	8001106 <HAL_TIM_IC_CaptureCallback+0x7e>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800109a:	2101      	movs	r1, #1
 800109c:	481c      	ldr	r0, [pc, #112]	; (8001110 <HAL_TIM_IC_CaptureCallback+0x88>)
 800109e:	f001 ff3e 	bl	8002f1e <HAL_GPIO_TogglePin>
		if (firstCapturedSample == 0) {
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10a      	bne.n	80010c0 <HAL_TIM_IC_CaptureCallback+0x38>
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010aa:	2100      	movs	r1, #0
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f004 fe33 	bl	8005d18 <HAL_TIM_ReadCapturedValue>
 80010b2:	4602      	mov	r2, r0
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x90>)
 80010b6:	601a      	str	r2, [r3, #0]
			firstCapturedSample = 1;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
			difference = IC_Value2 - IC_Value1;
			frequency = HAL_RCC_GetHCLKFreq() / difference;
			firstCapturedSample = 0;
		}
	}
}
 80010be:	e022      	b.n	8001106 <HAL_TIM_IC_CaptureCallback+0x7e>
		else if (firstCapturedSample) {
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01e      	beq.n	8001106 <HAL_TIM_IC_CaptureCallback+0x7e>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f004 fe24 	bl	8005d18 <HAL_TIM_ReadCapturedValue>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_TIM_IC_CaptureCallback+0x94>)
 80010d4:	601a      	str	r2, [r3, #0]
			difference = IC_Value2 - IC_Value1;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_TIM_IC_CaptureCallback+0x94>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_TIM_IC_CaptureCallback+0x90>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x98>)
 80010e2:	6013      	str	r3, [r2, #0]
			frequency = HAL_RCC_GetHCLKFreq() / difference;
 80010e4:	f002 fd50 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 80010e8:	4602      	mov	r2, r0
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_TIM_IC_CaptureCallback+0x98>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]
			firstCapturedSample = 0;
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40020400 	.word	0x40020400
 8001114:	200000a4 	.word	0x200000a4
 8001118:	20000094 	.word	0x20000094
 800111c:	20000098 	.word	0x20000098
 8001120:	2000009c 	.word	0x2000009c
 8001124:	200000a0 	.word	0x200000a0

08001128 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_MspInit+0x44>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_MspInit+0x44>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_MspInit+0x44>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_MspInit+0x44>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_MspInit+0x44>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	; 0x38
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a4e      	ldr	r2, [pc, #312]	; (80012d8 <HAL_ETH_MspInit+0x158>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	f040 8096 	bne.w	80012d0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011a4:	4b4d      	ldr	r3, [pc, #308]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a46      	ldr	r2, [pc, #280]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b44      	ldr	r3, [pc, #272]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	4a40      	ldr	r2, [pc, #256]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011de:	6313      	str	r3, [r2, #48]	; 0x30
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ec:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a3a      	ldr	r2, [pc, #232]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b38      	ldr	r3, [pc, #224]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b35      	ldr	r3, [pc, #212]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a34      	ldr	r2, [pc, #208]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001234:	4b29      	ldr	r3, [pc, #164]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	4a28      	ldr	r2, [pc, #160]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 800123a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123e:	6313      	str	r3, [r2, #48]	; 0x30
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_ETH_MspInit+0x15c>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800124c:	2332      	movs	r3, #50	; 0x32
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125c:	230b      	movs	r3, #11
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <HAL_ETH_MspInit+0x160>)
 8001268:	f001 fc96 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800126c:	2386      	movs	r3, #134	; 0x86
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127c:	230b      	movs	r3, #11
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <HAL_ETH_MspInit+0x164>)
 8001288:	f001 fc86 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129e:	230b      	movs	r3, #11
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <HAL_ETH_MspInit+0x168>)
 80012aa:	f001 fc75 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c0:	230b      	movs	r3, #11
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <HAL_ETH_MspInit+0x16c>)
 80012cc:	f001 fc64 	bl	8002b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	3738      	adds	r7, #56	; 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40028000 	.word	0x40028000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40021800 	.word	0x40021800

080012f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a3d      	ldr	r2, [pc, #244]	; (8001404 <HAL_SPI_MspInit+0x114>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d174      	bne.n	80013fc <HAL_SPI_MspInit+0x10c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_SPI_MspInit+0x118>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a3c      	ldr	r2, [pc, #240]	; (8001408 <HAL_SPI_MspInit+0x118>)
 8001318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <HAL_SPI_MspInit+0x118>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <HAL_SPI_MspInit+0x118>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a36      	ldr	r2, [pc, #216]	; (8001408 <HAL_SPI_MspInit+0x118>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b34      	ldr	r3, [pc, #208]	; (8001408 <HAL_SPI_MspInit+0x118>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <HAL_SPI_MspInit+0x118>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a30      	ldr	r2, [pc, #192]	; (8001408 <HAL_SPI_MspInit+0x118>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_SPI_MspInit+0x118>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA15     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 800135a:	f248 0320 	movw	r3, #32800	; 0x8020
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136c:	2305      	movs	r3, #5
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4825      	ldr	r0, [pc, #148]	; (800140c <HAL_SPI_MspInit+0x11c>)
 8001378:	f001 fc0e 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800138c:	2305      	movs	r3, #5
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	481e      	ldr	r0, [pc, #120]	; (8001410 <HAL_SPI_MspInit+0x120>)
 8001398:	f001 fbfe 	bl	8002b98 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_SPI_MspInit+0x124>)
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_SPI_MspInit+0x128>)
 80013a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013a4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013e2:	f000 fbf7 	bl	8001bd4 <HAL_DMA_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 80013ec:	f7ff fe9c 	bl	8001128 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013f4:	659a      	str	r2, [r3, #88]	; 0x58
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_SPI_MspInit+0x124>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40013000 	.word	0x40013000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020c00 	.word	0x40020c00
 8001414:	2002b76c 	.word	0x2002b76c
 8001418:	40026410 	.word	0x40026410

0800141c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <HAL_TIM_Base_MspInit+0x78>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d114      	bne.n	8001458 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	201b      	movs	r0, #27
 800144c:	f000 fb8b 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001450:	201b      	movs	r0, #27
 8001452:	f000 fba4 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001456:	e018      	b.n	800148a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM8)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_TIM_Base_MspInit+0x80>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d113      	bne.n	800148a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	202e      	movs	r0, #46	; 0x2e
 8001480:	f000 fb71 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001484:	202e      	movs	r0, #46	; 0x2e
 8001486:	f000 fb8a 	bl	8001b9e <HAL_NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40010000 	.word	0x40010000
 8001498:	40023800 	.word	0x40023800
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c0:	d12f      	bne.n	8001522 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_TIM_IC_MspInit+0x8c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_TIM_IC_MspInit+0x8c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_TIM_IC_MspInit+0x8c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_TIM_IC_MspInit+0x8c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_TIM_IC_MspInit+0x8c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <HAL_TIM_IC_MspInit+0x8c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0/WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f2:	2301      	movs	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001502:	2301      	movs	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4808      	ldr	r0, [pc, #32]	; (8001530 <HAL_TIM_IC_MspInit+0x90>)
 800150e:	f001 fb43 	bl	8002b98 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	201c      	movs	r0, #28
 8001518:	f000 fb25 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800151c:	201c      	movs	r0, #28
 800151e:	f000 fb3e 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_TIM_MspPostInit+0xa8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d11d      	bne.n	8001592 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <HAL_TIM_MspPostInit+0xac>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <HAL_TIM_MspPostInit+0xac>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <HAL_TIM_MspPostInit+0xac>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800156e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001580:	2301      	movs	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <HAL_TIM_MspPostInit+0xb0>)
 800158c:	f001 fb04 	bl	8002b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001590:	e020      	b.n	80015d4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_TIM_MspPostInit+0xb4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d11b      	bne.n	80015d4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_TIM_MspPostInit+0xac>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_TIM_MspPostInit+0xac>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_TIM_MspPostInit+0xac>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b4:	2340      	movs	r3, #64	; 0x40
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015c4:	2303      	movs	r3, #3
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <HAL_TIM_MspPostInit+0xb8>)
 80015d0:	f001 fae2 	bl	8002b98 <HAL_GPIO_Init>
}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40010000 	.word	0x40010000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010400 	.word	0x40010400
 80015ec:	40020800 	.word	0x40020800

080015f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_UART_MspInit+0x7c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d128      	bne.n	8001664 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_UART_MspInit+0x80>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_UART_MspInit+0x80>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001654:	2307      	movs	r3, #7
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_UART_MspInit+0x84>)
 8001660:	f001 fa9a 	bl	8002b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40004800 	.word	0x40004800
 8001670:	40023800 	.word	0x40023800
 8001674:	40020c00 	.word	0x40020c00

08001678 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001698:	d141      	bne.n	800171e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a22      	ldr	r2, [pc, #136]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016c4:	230a      	movs	r3, #10
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4817      	ldr	r0, [pc, #92]	; (800172c <HAL_PCD_MspInit+0xb4>)
 80016d0:	f001 fa62 	bl	8002b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4810      	ldr	r0, [pc, #64]	; (800172c <HAL_PCD_MspInit+0xb4>)
 80016ea:	f001 fa55 	bl	8002b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 80016f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f2:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	6353      	str	r3, [r2, #52]	; 0x34
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_PCD_MspInit+0xb0>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 f8d2 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <TIM1_CC_IRQHandler+0x10>)
 8001792:	f003 fef1 	bl	8005578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2002b688 	.word	0x2002b688

080017a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <TIM2_IRQHandler+0x10>)
 80017a6:	f003 fee7 	bl	8005578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2002b72c 	.word	0x2002b72c

080017b4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM8_CC_IRQHandler+0x10>)
 80017ba:	f003 fedd 	bl	8005578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000b4 	.word	0x200000b4

080017c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <DMA2_Stream0_IRQHandler+0x10>)
 80017ce:	f000 fb0f 	bl	8001df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2002b76c 	.word	0x2002b76c

080017dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <_sbrk+0x50>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_sbrk+0x16>
		heap_end = &end;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <_sbrk+0x50>)
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <_sbrk+0x54>)
 80017f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <_sbrk+0x50>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <_sbrk+0x50>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	466a      	mov	r2, sp
 8001802:	4293      	cmp	r3, r2
 8001804:	d907      	bls.n	8001816 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001806:	f006 f91f 	bl	8007a48 <__errno>
 800180a:	4602      	mov	r2, r0
 800180c:	230c      	movs	r3, #12
 800180e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	e006      	b.n	8001824 <_sbrk+0x48>
	}

	heap_end += incr;
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <_sbrk+0x50>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a03      	ldr	r2, [pc, #12]	; (800182c <_sbrk+0x50>)
 8001820:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200000a8 	.word	0x200000a8
 8001830:	2002b820 	.word	0x2002b820

08001834 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <SystemInit+0x28>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <SystemInit+0x28>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <SystemInit+0x28>)
 800184a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800184e:	609a      	str	r2, [r3, #8]
#endif
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001898 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001864:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001866:	e003      	b.n	8001870 <LoopCopyDataInit>

08001868 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800186a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800186c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800186e:	3104      	adds	r1, #4

08001870 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001870:	480b      	ldr	r0, [pc, #44]	; (80018a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001874:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001876:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001878:	d3f6      	bcc.n	8001868 <CopyDataInit>
  ldr  r2, =_sbss
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800187c:	e002      	b.n	8001884 <LoopFillZerobss>

0800187e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800187e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001880:	f842 3b04 	str.w	r3, [r2], #4

08001884 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001886:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001888:	d3f9      	bcc.n	800187e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800188a:	f7ff ffd3 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188e:	f006 f8e1 	bl	8007a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001892:	f7fe fec5 	bl	8000620 <main>
  bx  lr    
 8001896:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001898:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800189c:	08008340 	.word	0x08008340
  ldr  r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018a4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80018a8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80018ac:	2002b81c 	.word	0x2002b81c

080018b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC_IRQHandler>

080018b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b6:	2003      	movs	r0, #3
 80018b8:	f000 f94a 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018bc:	2000      	movs	r0, #0
 80018be:	f000 f805 	bl	80018cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80018c2:	f7ff fc39 	bl	8001138 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f965 	bl	8001bba <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f000 f92d 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000004 	.word	0x20000004
 8001924:	2000000c 	.word	0x2000000c
 8001928:	20000008 	.word	0x20000008

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000000c 	.word	0x2000000c
 8001950:	2002b814 	.word	0x2002b814

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2002b814 	.word	0x2002b814

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_Delay+0x40>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000000c 	.word	0x2000000c

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <__NVIC_SetPriorityGrouping+0x40>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <__NVIC_SetPriorityGrouping+0x40>)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	60d3      	str	r3, [r2, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	05fa0000 	.word	0x05fa0000

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <__NVIC_EnableIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	; (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff29 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff3e 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff8e 	bl	8001aa4 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff31 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffa2 	bl	8001b0c <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff feb8 	bl	8001954 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e099      	b.n	8001d24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c10:	e00f      	b.n	8001c32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c12:	f7ff fe9f 	bl	8001954 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d908      	bls.n	8001c32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e078      	b.n	8001d24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e8      	bne.n	8001c12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_DMA_Init+0x158>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d107      	bne.n	8001c9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	4313      	orrs	r3, r2
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f023 0307 	bic.w	r3, r3, #7
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d117      	bne.n	8001cf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00e      	beq.n	8001cf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fa77 	bl	80021cc <DMA_CheckFifoParam>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2240      	movs	r2, #64	; 0x40
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e016      	b.n	8001d24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fa2e 	bl	8002160 <DMA_CalcBaseAndBitshift>
 8001d04:	4603      	mov	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	223f      	movs	r2, #63	; 0x3f
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	e010803f 	.word	0xe010803f

08001d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_DMA_Start_IT+0x26>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e048      	b.n	8001de8 <HAL_DMA_Start_IT+0xb8>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d137      	bne.n	8001dda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f9c0 	bl	8002104 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	223f      	movs	r2, #63	; 0x3f
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0216 	orr.w	r2, r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0208 	orr.w	r2, r2, #8
 8001dc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e005      	b.n	8001de6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
 8001de4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001dfc:	4b92      	ldr	r3, [pc, #584]	; (8002048 <HAL_DMA_IRQHandler+0x258>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a92      	ldr	r2, [pc, #584]	; (800204c <HAL_DMA_IRQHandler+0x25c>)
 8001e02:	fba2 2303 	umull	r2, r3, r2, r3
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01a      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2208      	movs	r2, #8
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2201      	movs	r2, #1
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2201      	movs	r2, #1
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e96:	2204      	movs	r2, #4
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d012      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2210      	movs	r2, #16
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d043      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d03c      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	2210      	movs	r2, #16
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d018      	beq.n	8001f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d108      	bne.n	8001f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d024      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
 8001f1e:	e01f      	b.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
 8001f30:	e016      	b.n	8001f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0208 	bic.w	r2, r2, #8
 8001f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f64:	2220      	movs	r2, #32
 8001f66:	409a      	lsls	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 808e 	beq.w	800208e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8086 	beq.w	800208e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	2220      	movs	r2, #32
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d136      	bne.n	8002008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0216 	bic.w	r2, r2, #22
 8001fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <HAL_DMA_IRQHandler+0x1da>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0208 	bic.w	r2, r2, #8
 8001fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	223f      	movs	r2, #63	; 0x3f
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d07d      	beq.n	80020fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
        }
        return;
 8002006:	e078      	b.n	80020fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d01c      	beq.n	8002050 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d108      	bne.n	8002036 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	2b00      	cmp	r3, #0
 800202a:	d030      	beq.n	800208e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
 8002034:	e02b      	b.n	800208e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d027      	beq.n	800208e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
 8002046:	e022      	b.n	800208e <HAL_DMA_IRQHandler+0x29e>
 8002048:	20000004 	.word	0x20000004
 800204c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10f      	bne.n	800207e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0210 	bic.w	r2, r2, #16
 800206c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	2b00      	cmp	r3, #0
 8002094:	d032      	beq.n	80020fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d022      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3301      	adds	r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d307      	bcc.n	80020d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f2      	bne.n	80020ba <HAL_DMA_IRQHandler+0x2ca>
 80020d4:	e000      	b.n	80020d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e000      	b.n	80020fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80020fa:	bf00      	nop
    }
  }
}
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop

08002104 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002120:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	d108      	bne.n	8002144 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002142:	e007      	b.n	8002154 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3b10      	subs	r3, #16
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <DMA_CalcBaseAndBitshift+0x60>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <DMA_CalcBaseAndBitshift+0x64>)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d908      	bls.n	80021a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <DMA_CalcBaseAndBitshift+0x68>)
 8002196:	4013      	ands	r3, r2
 8002198:	1d1a      	adds	r2, r3, #4
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	659a      	str	r2, [r3, #88]	; 0x58
 800219e:	e006      	b.n	80021ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <DMA_CalcBaseAndBitshift+0x68>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	aaaaaaab 	.word	0xaaaaaaab
 80021c4:	080082f4 	.word	0x080082f4
 80021c8:	fffffc00 	.word	0xfffffc00

080021cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11f      	bne.n	8002226 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d855      	bhi.n	8002298 <DMA_CheckFifoParam+0xcc>
 80021ec:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <DMA_CheckFifoParam+0x28>)
 80021ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f2:	bf00      	nop
 80021f4:	08002205 	.word	0x08002205
 80021f8:	08002217 	.word	0x08002217
 80021fc:	08002205 	.word	0x08002205
 8002200:	08002299 	.word	0x08002299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d045      	beq.n	800229c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002214:	e042      	b.n	800229c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800221e:	d13f      	bne.n	80022a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002224:	e03c      	b.n	80022a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222e:	d121      	bne.n	8002274 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d836      	bhi.n	80022a4 <DMA_CheckFifoParam+0xd8>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <DMA_CheckFifoParam+0x70>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	0800224d 	.word	0x0800224d
 8002240:	08002253 	.word	0x08002253
 8002244:	0800224d 	.word	0x0800224d
 8002248:	08002265 	.word	0x08002265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      break;
 8002250:	e02f      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d024      	beq.n	80022a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002262:	e021      	b.n	80022a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800226c:	d11e      	bne.n	80022ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002272:	e01b      	b.n	80022ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d902      	bls.n	8002280 <DMA_CheckFifoParam+0xb4>
 800227a:	2b03      	cmp	r3, #3
 800227c:	d003      	beq.n	8002286 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800227e:	e018      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e015      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00e      	beq.n	80022b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      break;
 8002296:	e00b      	b.n	80022b0 <DMA_CheckFifoParam+0xe4>
      break;
 8002298:	bf00      	nop
 800229a:	e00a      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      break;
 800229c:	bf00      	nop
 800229e:	e008      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      break;
 80022a0:	bf00      	nop
 80022a2:	e006      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      break;
 80022a4:	bf00      	nop
 80022a6:	e004      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      break;
 80022a8:	bf00      	nop
 80022aa:	e002      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80022ac:	bf00      	nop
 80022ae:	e000      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      break;
 80022b0:	bf00      	nop
    }
  } 
  
  return status; 
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80022d0:	4ba9      	ldr	r3, [pc, #676]	; (8002578 <HAL_ETH_Init+0x2b8>)
 80022d2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e183      	b.n	80025ee <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe ff40 	bl	8001180 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	4b9e      	ldr	r3, [pc, #632]	; (800257c <HAL_ETH_Init+0x2bc>)
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	4a9d      	ldr	r2, [pc, #628]	; (800257c <HAL_ETH_Init+0x2bc>)
 8002306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230a:	6453      	str	r3, [r2, #68]	; 0x44
 800230c:	4b9b      	ldr	r3, [pc, #620]	; (800257c <HAL_ETH_Init+0x2bc>)
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002318:	4b99      	ldr	r3, [pc, #612]	; (8002580 <HAL_ETH_Init+0x2c0>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a98      	ldr	r2, [pc, #608]	; (8002580 <HAL_ETH_Init+0x2c0>)
 800231e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002322:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002324:	4b96      	ldr	r3, [pc, #600]	; (8002580 <HAL_ETH_Init+0x2c0>)
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4994      	ldr	r1, [pc, #592]	; (8002580 <HAL_ETH_Init+0x2c0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800234a:	f7ff fb03 	bl	8001954 <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002350:	e011      	b.n	8002376 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002352:	f7ff faff 	bl	8001954 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002360:	d909      	bls.n	8002376 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e13b      	b.n	80025ee <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e4      	bne.n	8002352 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f023 031c 	bic.w	r3, r3, #28
 8002396:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002398:	f001 fbf6 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 800239c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4a78      	ldr	r2, [pc, #480]	; (8002584 <HAL_ETH_Init+0x2c4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d908      	bls.n	80023b8 <HAL_ETH_Init+0xf8>
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_ETH_Init+0x2c8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d804      	bhi.n	80023b8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e027      	b.n	8002408 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	4a73      	ldr	r2, [pc, #460]	; (8002588 <HAL_ETH_Init+0x2c8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d908      	bls.n	80023d2 <HAL_ETH_Init+0x112>
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_ETH_Init+0x2cc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d804      	bhi.n	80023d2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f043 030c 	orr.w	r3, r3, #12
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e01a      	b.n	8002408 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4a6d      	ldr	r2, [pc, #436]	; (800258c <HAL_ETH_Init+0x2cc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d903      	bls.n	80023e2 <HAL_ETH_Init+0x122>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4a6c      	ldr	r2, [pc, #432]	; (8002590 <HAL_ETH_Init+0x2d0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d911      	bls.n	8002406 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4a6a      	ldr	r2, [pc, #424]	; (8002590 <HAL_ETH_Init+0x2d0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d908      	bls.n	80023fc <HAL_ETH_Init+0x13c>
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4a69      	ldr	r2, [pc, #420]	; (8002594 <HAL_ETH_Init+0x2d4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d804      	bhi.n	80023fc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e005      	b.n	8002408 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f043 0310 	orr.w	r3, r3, #16
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e000      	b.n	8002408 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002406:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002410:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002414:	2100      	movs	r1, #0
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f956 	bl	80026c8 <HAL_ETH_WritePHYRegister>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f9b3 	bl	8002794 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0d9      	b.n	80025ee <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800243a:	20ff      	movs	r0, #255	; 0xff
 800243c:	f7ff fa96 	bl	800196c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a7 	beq.w	8002598 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800244a:	f7ff fa83 	bl	8001954 <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	461a      	mov	r2, r3
 8002456:	2101      	movs	r1, #1
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f8cd 	bl	80025f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800245e:	f7ff fa79 	bl	8001954 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d90f      	bls.n	8002490 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002474:	6939      	ldr	r1, [r7, #16]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f98c 	bl	8002794 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0ae      	b.n	80025ee <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0da      	beq.n	8002450 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800249a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800249e:	2100      	movs	r1, #0
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f911 	bl	80026c8 <HAL_ETH_WritePHYRegister>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024b0:	6939      	ldr	r1, [r7, #16]
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f96e 	bl	8002794 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80024c0:	2301      	movs	r3, #1
 80024c2:	e094      	b.n	80025ee <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80024c4:	f7ff fa46 	bl	8001954 <HAL_GetTick>
 80024c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	461a      	mov	r2, r3
 80024d0:	2101      	movs	r1, #1
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f890 	bl	80025f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80024d8:	f7ff fa3c 	bl	8001954 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d90f      	bls.n	800250a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80024ee:	6939      	ldr	r1, [r7, #16]
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f94f 	bl	8002794 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e071      	b.n	80025ee <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0da      	beq.n	80024ca <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	461a      	mov	r2, r3
 800251a:	211f      	movs	r1, #31
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f86b 	bl	80025f8 <HAL_ETH_ReadPHYRegister>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800252c:	6939      	ldr	r1, [r7, #16]
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f930 	bl	8002794 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800253c:	2301      	movs	r3, #1
 800253e:	e056      	b.n	80025ee <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	e002      	b.n	800255a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	e037      	b.n	80025dc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e032      	b.n	80025dc <HAL_ETH_Init+0x31c>
 8002576:	bf00      	nop
 8002578:	03938700 	.word	0x03938700
 800257c:	40023800 	.word	0x40023800
 8002580:	40013800 	.word	0x40013800
 8002584:	01312cff 	.word	0x01312cff
 8002588:	02160ebf 	.word	0x02160ebf
 800258c:	039386ff 	.word	0x039386ff
 8002590:	05f5e0ff 	.word	0x05f5e0ff
 8002594:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	08db      	lsrs	r3, r3, #3
 800259e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f889 	bl	80026c8 <HAL_ETH_WritePHYRegister>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8e6 	bl	8002794 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e00c      	b.n	80025ee <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80025d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80025d8:	f7ff f9c8 	bl	800196c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8d8 	bl	8002794 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop

080025f8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	460b      	mov	r3, r1
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b82      	cmp	r3, #130	; 0x82
 8002618:	d101      	bne.n	800261e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	e050      	b.n	80026c0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2282      	movs	r2, #130	; 0x82
 8002622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 031c 	and.w	r3, r3, #28
 8002634:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8a1b      	ldrh	r3, [r3, #16]
 800263a:	02db      	lsls	r3, r3, #11
 800263c:	b29b      	uxth	r3, r3
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002644:	897b      	ldrh	r3, [r7, #10]
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f023 0302 	bic.w	r3, r3, #2
 8002658:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800266a:	f7ff f973 	bl	8001954 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002670:	e015      	b.n	800269e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002672:	f7ff f96f 	bl	8001954 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d309      	bcc.n	8002696 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e014      	b.n	80026c0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e4      	bne.n	8002672 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	460b      	mov	r3, r1
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b42      	cmp	r3, #66	; 0x42
 80026e8:	d101      	bne.n	80026ee <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
 80026ec:	e04e      	b.n	800278c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2242      	movs	r2, #66	; 0x42
 80026f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 031c 	and.w	r3, r3, #28
 8002704:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8a1b      	ldrh	r3, [r3, #16]
 800270a:	02db      	lsls	r3, r3, #11
 800270c:	b29b      	uxth	r3, r3
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	019b      	lsls	r3, r3, #6
 8002718:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002744:	f7ff f906 	bl	8001954 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800274a:	e015      	b.n	8002778 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800274c:	f7ff f902 	bl	8001954 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275a:	d309      	bcc.n	8002770 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e00d      	b.n	800278c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e4      	bne.n	800274c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0b0      	sub	sp, #192	; 0xc0
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80027c2:	2300      	movs	r3, #0
 80027c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80027da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027de:	663b      	str	r3, [r7, #96]	; 0x60
 80027e0:	e001      	b.n	80027e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80027e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027f0:	2300      	movs	r3, #0
 80027f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002800:	2340      	movs	r3, #64	; 0x40
 8002802:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002852:	2300      	movs	r3, #0
 8002854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002868:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800286c:	4bab      	ldr	r3, [pc, #684]	; (8002b1c <ETH_MACDMAConfig+0x388>)
 800286e:	4013      	ands	r3, r2
 8002870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002874:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002878:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800287a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800287c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800287e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002880:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002886:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800288a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800288c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800288e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002894:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002898:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800289a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800289c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800289e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80028a0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80028a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80028a4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80028a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80028a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80028aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c8:	2001      	movs	r0, #1
 80028ca:	f7ff f84f 	bl	800196c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028d6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80028da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80028dc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80028de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80028e0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80028e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80028e6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80028e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80028ec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80028ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80028f2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80028f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80028f8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80028fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002904:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002906:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002912:	2001      	movs	r0, #1
 8002914:	f7ff f82a 	bl	800196c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002920:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800292a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002934:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002940:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002944:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002948:	4013      	ands	r3, r2
 800294a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800294e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002952:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002958:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800295a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800295e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002960:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002964:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800296a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800296c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002970:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002984:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002990:	2001      	movs	r0, #1
 8002992:	f7fe ffeb 	bl	800196c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800299e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80029a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80029a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7fe ffd6 	bl	800196c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029c8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80029ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80029d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029dc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80029ee:	2304      	movs	r3, #4
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80029f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80029f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029fc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80029fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a12:	2300      	movs	r3, #0
 8002a14:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a1e:	4413      	add	r3, r2
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002a26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <ETH_MACDMAConfig+0x38c>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a32:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002a34:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a36:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002a38:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002a3a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002a3c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002a3e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002a40:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002a42:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002a44:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002a46:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002a48:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002a4a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002a4e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002a52:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002a54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a66:	4413      	add	r3, r2
 8002a68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a76:	4413      	add	r3, r2
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7fe ff74 	bl	800196c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a92:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002a98:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002a9c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002aa0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002aa4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002aaa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002aae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002abc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002acc:	2001      	movs	r0, #1
 8002ace:	f7fe ff4d 	bl	800196c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ada:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ade:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10d      	bne.n	8002b04 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	f241 031c 	movw	r3, #4124	; 0x101c
 8002af0:	4413      	add	r3, r2
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6811      	ldr	r1, [r2, #0]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <ETH_MACDMAConfig+0x390>)
 8002afa:	431a      	orrs	r2, r3
 8002afc:	f241 031c 	movw	r3, #4124	; 0x101c
 8002b00:	440b      	add	r3, r1
 8002b02:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f80b 	bl	8002b28 <ETH_MACAddressConfig>
}
 8002b12:	bf00      	nop
 8002b14:	37c0      	adds	r7, #192	; 0xc0
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	ff20810f 	.word	0xff20810f
 8002b20:	f8de3f23 	.word	0xf8de3f23
 8002b24:	00010040 	.word	0x00010040

08002b28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3305      	adds	r3, #5
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	3204      	adds	r2, #4
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <ETH_MACAddressConfig+0x68>)
 8002b4a:	4413      	add	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3303      	adds	r3, #3
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	061a      	lsls	r2, r3, #24
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	041b      	lsls	r3, r3, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3301      	adds	r3, #1
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <ETH_MACAddressConfig+0x6c>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	6013      	str	r3, [r2, #0]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40028040 	.word	0x40028040
 8002b94:	40028044 	.word	0x40028044

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	e175      	b.n	8002ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	f040 8164 	bne.w	8002e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_GPIO_Init+0x5e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bea:	2b11      	cmp	r3, #17
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b12      	cmp	r3, #18
 8002bf4:	d130      	bne.n	8002c58 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2203      	movs	r2, #3
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 0201 	and.w	r2, r3, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x100>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d123      	bne.n	8002ce0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	220f      	movs	r2, #15
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	08da      	lsrs	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3208      	adds	r2, #8
 8002cda:	69b9      	ldr	r1, [r7, #24]
 8002cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0203 	and.w	r2, r3, #3
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80be 	beq.w	8002e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d22:	4b65      	ldr	r3, [pc, #404]	; (8002eb8 <HAL_GPIO_Init+0x320>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4a64      	ldr	r2, [pc, #400]	; (8002eb8 <HAL_GPIO_Init+0x320>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b62      	ldr	r3, [pc, #392]	; (8002eb8 <HAL_GPIO_Init+0x320>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d3a:	4a60      	ldr	r2, [pc, #384]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_GPIO_Init+0x328>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d037      	beq.n	8002dd6 <HAL_GPIO_Init+0x23e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a56      	ldr	r2, [pc, #344]	; (8002ec4 <HAL_GPIO_Init+0x32c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d031      	beq.n	8002dd2 <HAL_GPIO_Init+0x23a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a55      	ldr	r2, [pc, #340]	; (8002ec8 <HAL_GPIO_Init+0x330>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d02b      	beq.n	8002dce <HAL_GPIO_Init+0x236>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a54      	ldr	r2, [pc, #336]	; (8002ecc <HAL_GPIO_Init+0x334>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d025      	beq.n	8002dca <HAL_GPIO_Init+0x232>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a53      	ldr	r2, [pc, #332]	; (8002ed0 <HAL_GPIO_Init+0x338>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01f      	beq.n	8002dc6 <HAL_GPIO_Init+0x22e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_GPIO_Init+0x33c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x22a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_GPIO_Init+0x340>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x226>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a50      	ldr	r2, [pc, #320]	; (8002edc <HAL_GPIO_Init+0x344>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x222>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <HAL_GPIO_Init+0x348>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x21e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4e      	ldr	r2, [pc, #312]	; (8002ee4 <HAL_GPIO_Init+0x34c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x21a>
 8002dae:	2309      	movs	r3, #9
 8002db0:	e012      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002db2:	230a      	movs	r3, #10
 8002db4:	e010      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002db6:	2308      	movs	r3, #8
 8002db8:	e00e      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dba:	2307      	movs	r3, #7
 8002dbc:	e00c      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dbe:	2306      	movs	r3, #6
 8002dc0:	e00a      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	e008      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e004      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e002      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x240>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f002 0203 	and.w	r2, r2, #3
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	4093      	lsls	r3, r2
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002de8:	4934      	ldr	r1, [pc, #208]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df6:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1a:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4a:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e74:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e98:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <HAL_GPIO_Init+0x350>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	f67f ae86 	bls.w	8002bb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	3724      	adds	r7, #36	; 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40013800 	.word	0x40013800
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	40020400 	.word	0x40020400
 8002ec8:	40020800 	.word	0x40020800
 8002ecc:	40020c00 	.word	0x40020c00
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40021400 	.word	0x40021400
 8002ed8:	40021800 	.word	0x40021800
 8002edc:	40021c00 	.word	0x40021c00
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	40022400 	.word	0x40022400
 8002ee8:	40013c00 	.word	0x40013c00

08002eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	807b      	strh	r3, [r7, #2]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002efc:	787b      	ldrb	r3, [r7, #1]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f02:	887a      	ldrh	r2, [r7, #2]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f08:	e003      	b.n	8002f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f0a:	887b      	ldrh	r3, [r7, #2]
 8002f0c:	041a      	lsls	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	619a      	str	r2, [r3, #24]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f3e:	e002      	b.n	8002f46 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f40:	887a      	ldrh	r2, [r7, #2]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	619a      	str	r2, [r3, #24]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f54:	b08f      	sub	sp, #60	; 0x3c
 8002f56:	af0a      	add	r7, sp, #40	; 0x28
 8002f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e116      	b.n	8003192 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fb7a 	bl	8001678 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2203      	movs	r2, #3
 8002f88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 faf8 	bl	8007598 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	687e      	ldr	r6, [r7, #4]
 8002fb0:	466d      	mov	r5, sp
 8002fb2:	f106 0410 	add.w	r4, r6, #16
 8002fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc6:	1d33      	adds	r3, r6, #4
 8002fc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fca:	6838      	ldr	r0, [r7, #0]
 8002fcc:	f004 fa8c 	bl	80074e8 <USB_CoreInit>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0d7      	b.n	8003192 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 fae6 	bl	80075ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	e04a      	b.n	800308a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	333d      	adds	r3, #61	; 0x3d
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	333c      	adds	r3, #60	; 0x3c
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	b298      	uxth	r0, r3
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	3342      	adds	r3, #66	; 0x42
 8003030:	4602      	mov	r2, r0
 8003032:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	333f      	adds	r3, #63	; 0x3f
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3344      	adds	r3, #68	; 0x44
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	3348      	adds	r3, #72	; 0x48
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	3350      	adds	r3, #80	; 0x50
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	3301      	adds	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d3af      	bcc.n	8002ff4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]
 8003098:	e044      	b.n	8003124 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	3301      	adds	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	d3b5      	bcc.n	800309a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	687e      	ldr	r6, [r7, #4]
 8003136:	466d      	mov	r5, sp
 8003138:	f106 0410 	add.w	r4, r6, #16
 800313c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003144:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003148:	e885 0003 	stmia.w	r5, {r0, r1}
 800314c:	1d33      	adds	r3, r6, #4
 800314e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003150:	6838      	ldr	r0, [r7, #0]
 8003152:	f004 fa5d 	bl	8007610 <USB_DevInit>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e014      	b.n	8003192 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f80b 	bl	800319c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f004 fc0f 	bl	80079ae <USB_DevDisconnect>

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800319c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	10000003 	.word	0x10000003

080031e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f2:	6013      	str	r3, [r2, #0]
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40007000 	.word	0x40007000

08003204 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <HAL_PWREx_EnableOverDrive+0x98>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_PWREx_EnableOverDrive+0x98>)
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_PWREx_EnableOverDrive+0x98>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003232:	f7fe fb8f 	bl	8001954 <HAL_GetTick>
 8003236:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003238:	e009      	b.n	800324e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800323a:	f7fe fb8b 	bl	8001954 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003248:	d901      	bls.n	800324e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e022      	b.n	8003294 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325a:	d1ee      	bne.n	800323a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0f      	ldr	r2, [pc, #60]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003266:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003268:	f7fe fb74 	bl	8001954 <HAL_GetTick>
 800326c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800326e:	e009      	b.n	8003284 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003270:	f7fe fb70 	bl	8001954 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800327e:	d901      	bls.n	8003284 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e007      	b.n	8003294 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003290:	d1ee      	bne.n	8003270 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	40007000 	.word	0x40007000

080032a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e29b      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8087 	beq.w	80033d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c8:	4b96      	ldr	r3, [pc, #600]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d00c      	beq.n	80032ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d4:	4b93      	ldr	r3, [pc, #588]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d112      	bne.n	8003306 <HAL_RCC_OscConfig+0x62>
 80032e0:	4b90      	ldr	r3, [pc, #576]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ec:	d10b      	bne.n	8003306 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ee:	4b8d      	ldr	r3, [pc, #564]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d06c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x130>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d168      	bne.n	80033d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e275      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330e:	d106      	bne.n	800331e <HAL_RCC_OscConfig+0x7a>
 8003310:	4b84      	ldr	r3, [pc, #528]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a83      	ldr	r2, [pc, #524]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e02e      	b.n	800337c <HAL_RCC_OscConfig+0xd8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0x9c>
 8003326:	4b7f      	ldr	r3, [pc, #508]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a7e      	ldr	r2, [pc, #504]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 800332c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b7c      	ldr	r3, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a7b      	ldr	r2, [pc, #492]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e01d      	b.n	800337c <HAL_RCC_OscConfig+0xd8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0xc0>
 800334a:	4b76      	ldr	r3, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b73      	ldr	r3, [pc, #460]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a72      	ldr	r2, [pc, #456]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0xd8>
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a6e      	ldr	r2, [pc, #440]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 800336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b6c      	ldr	r3, [pc, #432]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a6b      	ldr	r2, [pc, #428]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe fae6 	bl	8001954 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fe fae2 	bl	8001954 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e229      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0xe8>
 80033aa:	e014      	b.n	80033d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fe fad2 	bl	8001954 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe face 	bl	8001954 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e215      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c6:	4b57      	ldr	r3, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x110>
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d069      	beq.n	80034b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033e2:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ee:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d11c      	bne.n	8003434 <HAL_RCC_OscConfig+0x190>
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d116      	bne.n	8003434 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x17a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e1e9      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	493d      	ldr	r1, [pc, #244]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	e040      	b.n	80034b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d023      	beq.n	8003484 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a38      	ldr	r2, [pc, #224]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe fa84 	bl	8001954 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fe fa80 	bl	8001954 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1c7      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003462:	4b30      	ldr	r3, [pc, #192]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4929      	ldr	r1, [pc, #164]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
 8003482:	e018      	b.n	80034b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a26      	ldr	r2, [pc, #152]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe fa60 	bl	8001954 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003498:	f7fe fa5c 	bl	8001954 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1a3      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d038      	beq.n	8003534 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d019      	beq.n	80034fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ca:	4b16      	ldr	r3, [pc, #88]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80034cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ce:	4a15      	ldr	r2, [pc, #84]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fe fa3d 	bl	8001954 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034de:	f7fe fa39 	bl	8001954 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e180      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 80034f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x23a>
 80034fc:	e01a      	b.n	8003534 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <HAL_RCC_OscConfig+0x280>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fe fa23 	bl	8001954 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003512:	f7fe fa1f 	bl	8001954 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d903      	bls.n	8003528 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e166      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
 8003524:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 800352a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ee      	bne.n	8003512 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a4 	beq.w	800368a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4b8c      	ldr	r3, [pc, #560]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	4b89      	ldr	r3, [pc, #548]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a88      	ldr	r2, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b86      	ldr	r3, [pc, #536]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356a:	4b83      	ldr	r3, [pc, #524]	; (8003778 <HAL_RCC_OscConfig+0x4d4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d118      	bne.n	80035a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003576:	4b80      	ldr	r3, [pc, #512]	; (8003778 <HAL_RCC_OscConfig+0x4d4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7f      	ldr	r2, [pc, #508]	; (8003778 <HAL_RCC_OscConfig+0x4d4>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003582:	f7fe f9e7 	bl	8001954 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7fe f9e3 	bl	8001954 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b64      	cmp	r3, #100	; 0x64
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e12a      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359c:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x4d4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x31a>
 80035b0:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a6f      	ldr	r2, [pc, #444]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
 80035bc:	e02d      	b.n	800361a <HAL_RCC_OscConfig+0x376>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x33c>
 80035c6:	4b6b      	ldr	r3, [pc, #428]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a6a      	ldr	r2, [pc, #424]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
 80035d2:	4b68      	ldr	r3, [pc, #416]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a67      	ldr	r2, [pc, #412]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
 80035de:	e01c      	b.n	800361a <HAL_RCC_OscConfig+0x376>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d10c      	bne.n	8003602 <HAL_RCC_OscConfig+0x35e>
 80035e8:	4b62      	ldr	r3, [pc, #392]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a61      	ldr	r2, [pc, #388]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	4b5f      	ldr	r3, [pc, #380]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a5e      	ldr	r2, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003600:	e00b      	b.n	800361a <HAL_RCC_OscConfig+0x376>
 8003602:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a5b      	ldr	r2, [pc, #364]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a58      	ldr	r2, [pc, #352]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fe f997 	bl	8001954 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fe f993 	bl	8001954 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0d8      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ee      	beq.n	800362a <HAL_RCC_OscConfig+0x386>
 800364c:	e014      	b.n	8003678 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fe f981 	bl	8001954 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7fe f97d 	bl	8001954 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e0c2      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ee      	bne.n	8003656 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a3c      	ldr	r2, [pc, #240]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80ae 	beq.w	80037f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003694:	4b37      	ldr	r3, [pc, #220]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d06d      	beq.n	800377c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d14b      	bne.n	8003740 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a31      	ldr	r2, [pc, #196]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80036ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe f94e 	bl	8001954 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe f94a 	bl	8001954 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e091      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b29      	ldr	r3, [pc, #164]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	071b      	lsls	r3, r3, #28
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe f91c 	bl	8001954 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fe f918 	bl	8001954 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e05f      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x47c>
 800373e:	e057      	b.n	80037f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe f902 	bl	8001954 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe f8fe 	bl	8001954 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e045      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_RCC_OscConfig+0x4d0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x4b0>
 8003772:	e03d      	b.n	80037f0 <HAL_RCC_OscConfig+0x54c>
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800377c:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <HAL_RCC_OscConfig+0x558>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d030      	beq.n	80037ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d129      	bne.n	80037ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d122      	bne.n	80037ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ac:	4013      	ands	r3, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d119      	bne.n	80037ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	3b01      	subs	r3, #1
 80037c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d10f      	bne.n	80037ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d107      	bne.n	80037ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800

08003800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0d0      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d910      	bls.n	8003848 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b67      	ldr	r3, [pc, #412]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 020f 	bic.w	r2, r3, #15
 800382e:	4965      	ldr	r1, [pc, #404]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0b8      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003860:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800386a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003878:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a52      	ldr	r2, [pc, #328]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 800387e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003882:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	494d      	ldr	r1, [pc, #308]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d040      	beq.n	8003924 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d115      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e07f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c2:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e073      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d2:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06b      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e2:	4b39      	ldr	r3, [pc, #228]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 0203 	bic.w	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4936      	ldr	r1, [pc, #216]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f4:	f7fe f82e 	bl	8001954 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fc:	f7fe f82a 	bl	8001954 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	; 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e053      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 020c 	and.w	r2, r3, #12
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	429a      	cmp	r2, r3
 8003922:	d1eb      	bne.n	80038fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d210      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b24      	ldr	r3, [pc, #144]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 020f 	bic.w	r2, r3, #15
 800393a:	4922      	ldr	r1, [pc, #136]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	4313      	orrs	r3, r2
 8003940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e032      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4916      	ldr	r1, [pc, #88]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	490e      	ldr	r1, [pc, #56]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003992:	f000 f821 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8003996:	4601      	mov	r1, r0
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x1cc>)
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	fa21 f303 	lsr.w	r3, r1, r3
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1d0>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x1d4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd ff8a 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00
 80039c8:	40023800 	.word	0x40023800
 80039cc:	080082dc 	.word	0x080082dc
 80039d0:	20000004 	.word	0x20000004
 80039d4:	20000008 	.word	0x20000008

080039d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	2300      	movs	r3, #0
 80039e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d007      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x32>
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d008      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x38>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 80b4 	bne.w	8003b6c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a04:	4b5e      	ldr	r3, [pc, #376]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a06:	60bb      	str	r3, [r7, #8]
      break;
 8003a08:	e0b3      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0a:	4b5e      	ldr	r3, [pc, #376]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a0c:	60bb      	str	r3, [r7, #8]
      break;
 8003a0e:	e0b0      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a10:	4b5a      	ldr	r3, [pc, #360]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a18:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a1a:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04a      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a26:	4b55      	ldr	r3, [pc, #340]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	099b      	lsrs	r3, r3, #6
 8003a2c:	f04f 0400 	mov.w	r4, #0
 8003a30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	ea03 0501 	and.w	r5, r3, r1
 8003a3c:	ea04 0602 	and.w	r6, r4, r2
 8003a40:	4629      	mov	r1, r5
 8003a42:	4632      	mov	r2, r6
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	f04f 0400 	mov.w	r4, #0
 8003a4c:	0154      	lsls	r4, r2, #5
 8003a4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a52:	014b      	lsls	r3, r1, #5
 8003a54:	4619      	mov	r1, r3
 8003a56:	4622      	mov	r2, r4
 8003a58:	1b49      	subs	r1, r1, r5
 8003a5a:	eb62 0206 	sbc.w	r2, r2, r6
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	f04f 0400 	mov.w	r4, #0
 8003a66:	0194      	lsls	r4, r2, #6
 8003a68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a6c:	018b      	lsls	r3, r1, #6
 8003a6e:	1a5b      	subs	r3, r3, r1
 8003a70:	eb64 0402 	sbc.w	r4, r4, r2
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	00e2      	lsls	r2, r4, #3
 8003a7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a82:	00d9      	lsls	r1, r3, #3
 8003a84:	460b      	mov	r3, r1
 8003a86:	4614      	mov	r4, r2
 8003a88:	195b      	adds	r3, r3, r5
 8003a8a:	eb44 0406 	adc.w	r4, r4, r6
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	0262      	lsls	r2, r4, #9
 8003a98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a9c:	0259      	lsls	r1, r3, #9
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f04f 0400 	mov.w	r4, #0
 8003aac:	461a      	mov	r2, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	f7fc fc1e 	bl	80002f0 <__aeabi_uldivmod>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e049      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abc:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	f04f 0400 	mov.w	r4, #0
 8003ac6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	ea03 0501 	and.w	r5, r3, r1
 8003ad2:	ea04 0602 	and.w	r6, r4, r2
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	4632      	mov	r2, r6
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	f04f 0400 	mov.w	r4, #0
 8003ae2:	0154      	lsls	r4, r2, #5
 8003ae4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ae8:	014b      	lsls	r3, r1, #5
 8003aea:	4619      	mov	r1, r3
 8003aec:	4622      	mov	r2, r4
 8003aee:	1b49      	subs	r1, r1, r5
 8003af0:	eb62 0206 	sbc.w	r2, r2, r6
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	0194      	lsls	r4, r2, #6
 8003afe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b02:	018b      	lsls	r3, r1, #6
 8003b04:	1a5b      	subs	r3, r3, r1
 8003b06:	eb64 0402 	sbc.w	r4, r4, r2
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	00e2      	lsls	r2, r4, #3
 8003b14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b18:	00d9      	lsls	r1, r3, #3
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	195b      	adds	r3, r3, r5
 8003b20:	eb44 0406 	adc.w	r4, r4, r6
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	02a2      	lsls	r2, r4, #10
 8003b2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b32:	0299      	lsls	r1, r3, #10
 8003b34:	460b      	mov	r3, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f04f 0400 	mov.w	r4, #0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4623      	mov	r3, r4
 8003b46:	f7fc fbd3 	bl	80002f0 <__aeabi_uldivmod>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	60bb      	str	r3, [r7, #8]
      break;
 8003b6a:	e002      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b6e:	60bb      	str	r3, [r7, #8]
      break;
 8003b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b72:	68bb      	ldr	r3, [r7, #8]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	007a1200 	.word	0x007a1200

08003b88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000004 	.word	0x20000004

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ba4:	f7ff fff0 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	0a9b      	lsrs	r3, r3, #10
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4a03      	ldr	r2, [pc, #12]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	080082ec 	.word	0x080082ec

08003bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bcc:	f7ff ffdc 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4601      	mov	r1, r0
 8003bd2:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	0b5b      	lsrs	r3, r3, #13
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4a03      	ldr	r2, [pc, #12]	; (8003bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bde:	5cd3      	ldrb	r3, [r2, r3]
 8003be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40023800 	.word	0x40023800
 8003bec:	080082ec 	.word	0x080082ec

08003bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c18:	4b69      	ldr	r3, [pc, #420]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a68      	ldr	r2, [pc, #416]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c22:	6093      	str	r3, [r2, #8]
 8003c24:	4b66      	ldr	r3, [pc, #408]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	4964      	ldr	r1, [pc, #400]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d017      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c4a:	4b5d      	ldr	r3, [pc, #372]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	4959      	ldr	r1, [pc, #356]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c68:	d101      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d017      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c86:	4b4e      	ldr	r3, [pc, #312]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	494a      	ldr	r1, [pc, #296]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 808b 	beq.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	4a39      	ldr	r2, [pc, #228]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce0:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cec:	4b35      	ldr	r3, [pc, #212]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf8:	f7fd fe2c 	bl	8001954 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d00:	f7fd fe28 	bl	8001954 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e38d      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d12:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d1e:	4b28      	ldr	r3, [pc, #160]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d035      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d02e      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d3c:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d46:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d52:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d5e:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d114      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fd fdf0 	bl	8001954 <HAL_GetTick>
 8003d74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fdec 	bl	8001954 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e34f      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0ee      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da6:	d111      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003db6:	400b      	ands	r3, r1
 8003db8:	4901      	ldr	r1, [pc, #4]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	0ffffcff 	.word	0x0ffffcff
 8003dcc:	4bb3      	ldr	r3, [pc, #716]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4ab2      	ldr	r2, [pc, #712]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dd6:	6093      	str	r3, [r2, #8]
 8003dd8:	4bb0      	ldr	r3, [pc, #704]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	49ad      	ldr	r1, [pc, #692]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003df6:	4ba9      	ldr	r3, [pc, #676]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfc:	4aa7      	ldr	r2, [pc, #668]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e06:	4ba5      	ldr	r3, [pc, #660]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	49a2      	ldr	r1, [pc, #648]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e24:	4b9d      	ldr	r3, [pc, #628]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e32:	499a      	ldr	r1, [pc, #616]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e46:	4b95      	ldr	r3, [pc, #596]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e54:	4991      	ldr	r1, [pc, #580]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e68:	4b8c      	ldr	r3, [pc, #560]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e76:	4989      	ldr	r1, [pc, #548]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e8a:	4b84      	ldr	r3, [pc, #528]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4980      	ldr	r1, [pc, #512]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eac:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	4978      	ldr	r1, [pc, #480]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ece:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	f023 020c 	bic.w	r2, r3, #12
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003edc:	496f      	ldr	r1, [pc, #444]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	4967      	ldr	r1, [pc, #412]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f12:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	495e      	ldr	r1, [pc, #376]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f34:	4b59      	ldr	r3, [pc, #356]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f42:	4956      	ldr	r1, [pc, #344]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f56:	4b51      	ldr	r3, [pc, #324]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	494d      	ldr	r1, [pc, #308]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f78:	4b48      	ldr	r3, [pc, #288]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	4945      	ldr	r1, [pc, #276]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f9a:	4b40      	ldr	r3, [pc, #256]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa8:	493c      	ldr	r1, [pc, #240]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fbc:	4b37      	ldr	r3, [pc, #220]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fca:	4934      	ldr	r1, [pc, #208]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fde:	4b2f      	ldr	r3, [pc, #188]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fec:	492b      	ldr	r1, [pc, #172]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ffc:	d101      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401e:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	491b      	ldr	r1, [pc, #108]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004050:	4912      	ldr	r1, [pc, #72]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00b      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004074:	4909      	ldr	r1, [pc, #36]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00f      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	4985      	ldr	r1, [pc, #532]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00b      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040b4:	4b80      	ldr	r3, [pc, #512]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c4:	497c      	ldr	r1, [pc, #496]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d005      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040da:	f040 80d6 	bne.w	800428a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040de:	4b76      	ldr	r3, [pc, #472]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a75      	ldr	r2, [pc, #468]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ea:	f7fd fc33 	bl	8001954 <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040f2:	f7fd fc2f 	bl	8001954 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b64      	cmp	r3, #100	; 0x64
 80040fe:	d901      	bls.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e194      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004104:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d021      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11d      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004124:	4b64      	ldr	r3, [pc, #400]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004132:	4b61      	ldr	r3, [pc, #388]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004138:	0e1b      	lsrs	r3, r3, #24
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	019a      	lsls	r2, r3, #6
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	071b      	lsls	r3, r3, #28
 8004158:	4957      	ldr	r1, [pc, #348]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418a:	d129      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800418c:	4b4a      	ldr	r3, [pc, #296]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800418e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004192:	0c1b      	lsrs	r3, r3, #16
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800419c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a0:	0f1b      	lsrs	r3, r3, #28
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	019a      	lsls	r2, r3, #6
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	061b      	lsls	r3, r3, #24
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	071b      	lsls	r3, r3, #28
 80041c0:	493d      	ldr	r1, [pc, #244]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041c8:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041ce:	f023 021f 	bic.w	r2, r3, #31
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	3b01      	subs	r3, #1
 80041d8:	4937      	ldr	r1, [pc, #220]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01d      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041ec:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f2:	0e1b      	lsrs	r3, r3, #24
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	0f1b      	lsrs	r3, r3, #28
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	019a      	lsls	r2, r3, #6
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	431a      	orrs	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	431a      	orrs	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	071b      	lsls	r3, r3, #28
 8004220:	4925      	ldr	r1, [pc, #148]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d011      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	019a      	lsls	r2, r3, #6
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	071b      	lsls	r3, r3, #28
 8004250:	4919      	ldr	r1, [pc, #100]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800425e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004264:	f7fd fb76 	bl	8001954 <HAL_GetTick>
 8004268:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800426c:	f7fd fb72 	bl	8001954 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0d7      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	2b01      	cmp	r3, #1
 800428e:	f040 80cd 	bne.w	800442c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429e:	f7fd fb59 	bl	8001954 <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042a4:	e00a      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042a6:	f7fd fb55 	bl	8001954 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b64      	cmp	r3, #100	; 0x64
 80042b2:	d903      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0ba      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80042b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042bc:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c8:	d0ed      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02e      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d12a      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042f2:	4b51      	ldr	r3, [pc, #324]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004300:	4b4d      	ldr	r3, [pc, #308]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	0f1b      	lsrs	r3, r3, #28
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	019a      	lsls	r2, r3, #6
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	431a      	orrs	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	4944      	ldr	r1, [pc, #272]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800432e:	4b42      	ldr	r3, [pc, #264]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004334:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	3b01      	subs	r3, #1
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	493d      	ldr	r1, [pc, #244]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d022      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800435c:	d11d      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800435e:	4b36      	ldr	r3, [pc, #216]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	0e1b      	lsrs	r3, r3, #24
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800436c:	4b32      	ldr	r3, [pc, #200]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	0f1b      	lsrs	r3, r3, #28
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	019a      	lsls	r2, r3, #6
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	431a      	orrs	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	4929      	ldr	r1, [pc, #164]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d028      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043a6:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	0e1b      	lsrs	r3, r3, #24
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043b4:	4b20      	ldr	r3, [pc, #128]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	0c1b      	lsrs	r3, r3, #16
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	019a      	lsls	r2, r3, #6
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	071b      	lsls	r3, r3, #28
 80043da:	4917      	ldr	r1, [pc, #92]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	4911      	ldr	r1, [pc, #68]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004404:	f7fd faa6 	bl	8001954 <HAL_GetTick>
 8004408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800440c:	f7fd faa2 	bl	8001954 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e007      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800442a:	d1ef      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e084      	b.n	8004558 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fc ff41 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004484:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800448e:	d902      	bls.n	8004496 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e002      	b.n	800449c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044a4:	d007      	beq.n	80044b6 <HAL_SPI_Init+0x7a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ae:	d002      	beq.n	80044b6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044c6:	d903      	bls.n	80044d0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
 80044ce:	e002      	b.n	80044d6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	ea42 0103 	orr.w	r1, r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	f003 0204 	and.w	r2, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	ea42 0103 	orr.w	r1, r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004546:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d110      	bne.n	800459c <HAL_SPI_Receive_DMA+0x3c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004582:	d10b      	bne.n	800459c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2204      	movs	r2, #4
 8004588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f900 	bl	8004798 <HAL_SPI_TransmitReceive_DMA>
 8004598:	4603      	mov	r3, r0
 800459a:	e0f3      	b.n	8004784 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_SPI_Receive_DMA+0x4a>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0ec      	b.n	8004784 <HAL_SPI_Receive_DMA+0x224>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d002      	beq.n	80045c4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80045be:	2302      	movs	r3, #2
 80045c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045c2:	e0da      	b.n	800477a <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_SPI_Receive_DMA+0x70>
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045d4:	e0d1      	b.n	800477a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2204      	movs	r2, #4
 80045da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	88fa      	ldrh	r2, [r7, #6]
 80045ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	88fa      	ldrh	r2, [r7, #6]
 80045f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461a:	d107      	bne.n	800462c <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800462a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800463a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004644:	d908      	bls.n	8004658 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	e042      	b.n	80046de <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004666:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004672:	d134      	bne.n	80046de <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004682:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800468a:	b29b      	uxth	r3, r3
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d111      	bne.n	80046b8 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80046b6:	e012      	b.n	80046de <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	4a2a      	ldr	r2, [pc, #168]	; (800478c <HAL_SPI_Receive_DMA+0x22c>)
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	4a29      	ldr	r2, [pc, #164]	; (8004790 <HAL_SPI_Receive_DMA+0x230>)
 80046ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	4a28      	ldr	r2, [pc, #160]	; (8004794 <HAL_SPI_Receive_DMA+0x234>)
 80046f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	2200      	movs	r2, #0
 80046fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	4619      	mov	r1, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004716:	b29b      	uxth	r3, r3
 8004718:	f7fd fb0a 	bl	8001d30 <HAL_DMA_Start_IT>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004726:	f043 0210 	orr.w	r2, r3, #16
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800473a:	e01e      	b.n	800477a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	d007      	beq.n	800475a <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004758:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0220 	orr.w	r2, r2, #32
 8004768:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004782:	7dfb      	ldrb	r3, [r7, #23]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	08004c19 	.word	0x08004c19
 8004790:	08004b01 	.word	0x08004b01
 8004794:	08004c51 	.word	0x08004c51

08004798 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e16c      	b.n	8004a92 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047c6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80047ce:	7dbb      	ldrb	r3, [r7, #22]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d00d      	beq.n	80047f0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047da:	d106      	bne.n	80047ea <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <HAL_SPI_TransmitReceive_DMA+0x52>
 80047e4:	7dbb      	ldrb	r3, [r7, #22]
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d002      	beq.n	80047f0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
 80047ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047ee:	e14b      	b.n	8004a88 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004806:	e13f      	b.n	8004a88 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b04      	cmp	r3, #4
 8004812:	d003      	beq.n	800481c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2205      	movs	r2, #5
 8004818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	887a      	ldrh	r2, [r7, #2]
 8004832:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004864:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800486e:	d908      	bls.n	8004882 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	e06f      	b.n	8004962 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004890:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489c:	d126      	bne.n	80048ec <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048b8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048c8:	e010      	b.n	80048ec <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3301      	adds	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f6:	d134      	bne.n	8004962 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004906:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800490e:	b29b      	uxth	r3, r3
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d111      	bne.n	800493c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004926:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800492e:	b29b      	uxth	r3, r3
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800493a:	e012      	b.n	8004962 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800494a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004952:	b29b      	uxth	r3, r3
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	b29b      	uxth	r3, r3
 8004958:	3301      	adds	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b04      	cmp	r3, #4
 800496c:	d108      	bne.n	8004980 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	4a4a      	ldr	r2, [pc, #296]	; (8004a9c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	4a49      	ldr	r2, [pc, #292]	; (8004aa0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800497c:	63da      	str	r2, [r3, #60]	; 0x3c
 800497e:	e007      	b.n	8004990 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	4a47      	ldr	r2, [pc, #284]	; (8004aa4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	4a46      	ldr	r2, [pc, #280]	; (8004aa8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800498e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	4a45      	ldr	r2, [pc, #276]	; (8004aac <HAL_SPI_TransmitReceive_DMA+0x314>)
 8004996:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	2200      	movs	r2, #0
 800499e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	4619      	mov	r1, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	461a      	mov	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f7fd f9b9 	bl	8001d30 <HAL_DMA_Start_IT>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00c      	beq.n	80049de <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c8:	f043 0210 	orr.w	r2, r3, #16
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80049dc:	e054      	b.n	8004a88 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	2200      	movs	r2, #0
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	2200      	movs	r2, #0
 80049fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	2200      	movs	r2, #0
 8004a04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	4619      	mov	r1, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f7fd f983 	bl	8001d30 <HAL_DMA_Start_IT>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00c      	beq.n	8004a4a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	f043 0210 	orr.w	r2, r3, #16
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004a48:	e01e      	b.n	8004a88 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d007      	beq.n	8004a68 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a66:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0220 	orr.w	r2, r2, #32
 8004a76:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0202 	orr.w	r2, r2, #2
 8004a86:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	08004c19 	.word	0x08004c19
 8004aa0:	08004b01 	.word	0x08004b01
 8004aa4:	08004c35 	.word	0x08004c35
 8004aa8:	08004b87 	.word	0x08004b87
 8004aac:	08004c51 	.word	0x08004c51

08004ab0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0e:	f7fc ff21 	bl	8001954 <HAL_GetTick>
 8004b12:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	d02a      	beq.n	8004b7a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0220 	bic.w	r2, r2, #32
 8004b32:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0203 	bic.w	r2, r2, #3
 8004b42:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	2164      	movs	r1, #100	; 0x64
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f978 	bl	8004e3e <SPI_EndRxTransaction>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2220      	movs	r2, #32
 8004b58:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff ffba 	bl	8004aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b78:	e002      	b.n	8004b80 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7fc f9b2 	bl	8000ee4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b94:	f7fc fede 	bl	8001954 <HAL_GetTick>
 8004b98:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba8:	d030      	beq.n	8004c0c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0220 	bic.w	r2, r2, #32
 8004bb8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	2164      	movs	r1, #100	; 0x64
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f995 	bl	8004eee <SPI_EndRxTxTransaction>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0203 	bic.w	r2, r2, #3
 8004be4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7ff ff71 	bl	8004aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c0a:	e002      	b.n	8004c12 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff ff4f 	bl	8004ab0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff ff4c 	bl	8004ac4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff ff48 	bl	8004ad8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0203 	bic.w	r2, r2, #3
 8004c6c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	f043 0210 	orr.w	r2, r3, #16
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff ff32 	bl	8004aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ca0:	e04c      	b.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d048      	beq.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004caa:	f7fc fe53 	bl	8001954 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d902      	bls.n	8004cc0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d13d      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd8:	d111      	bne.n	8004cfe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce2:	d004      	beq.n	8004cee <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cec:	d107      	bne.n	8004cfe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d06:	d10f      	bne.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e00f      	b.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4013      	ands	r3, r2
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d1a3      	bne.n	8004ca2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d72:	e057      	b.n	8004e24 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d7a:	d106      	bne.n	8004d8a <SPI_WaitFifoStateUntilTimeout+0x26>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d048      	beq.n	8004e24 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d92:	f7fc fddf 	bl	8001954 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d902      	bls.n	8004da8 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d13d      	bne.n	8004e24 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc0:	d111      	bne.n	8004de6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dca:	d004      	beq.n	8004dd6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd4:	d107      	bne.n	8004de6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	d10f      	bne.n	8004e10 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e008      	b.n	8004e36 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d19f      	bne.n	8004d74 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af02      	add	r7, sp, #8
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e52:	d111      	bne.n	8004e78 <SPI_EndRxTransaction+0x3a>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5c:	d004      	beq.n	8004e68 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e66:	d107      	bne.n	8004e78 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e76:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff ff04 	bl	8004c90 <SPI_WaitFlagStateUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e92:	f043 0220 	orr.w	r2, r3, #32
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e023      	b.n	8004ee6 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea6:	d11d      	bne.n	8004ee4 <SPI_EndRxTransaction+0xa6>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb0:	d004      	beq.n	8004ebc <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eba:	d113      	bne.n	8004ee4 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff ff4b 	bl	8004d64 <SPI_WaitFifoStateUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed8:	f043 0220 	orr.w	r2, r3, #32
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e000      	b.n	8004ee6 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af02      	add	r7, sp, #8
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ff2c 	bl	8004d64 <SPI_WaitFifoStateUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e027      	b.n	8004f72 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff feaf 	bl	8004c90 <SPI_WaitFlagStateUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e014      	b.n	8004f72 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff ff05 	bl	8004d64 <SPI_WaitFifoStateUntilTimeout>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f64:	f043 0220 	orr.w	r2, r3, #32
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e000      	b.n	8004f72 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e01d      	b.n	8004fc8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fc fa3b 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 ff0f 	bl	8005ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a1a      	ldr	r2, [r3, #32]
 8004fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10f      	bne.n	8005010 <HAL_TIM_Base_Stop+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_Base_Stop+0x40>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e01d      	b.n	8005074 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f815 	bl	800507c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f000 feb9 	bl	8005ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b0c      	cmp	r3, #12
 800509e:	d841      	bhi.n	8005124 <HAL_TIM_PWM_Start_IT+0x94>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <HAL_TIM_PWM_Start_IT+0x18>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050dd 	.word	0x080050dd
 80050ac:	08005125 	.word	0x08005125
 80050b0:	08005125 	.word	0x08005125
 80050b4:	08005125 	.word	0x08005125
 80050b8:	080050ef 	.word	0x080050ef
 80050bc:	08005125 	.word	0x08005125
 80050c0:	08005125 	.word	0x08005125
 80050c4:	08005125 	.word	0x08005125
 80050c8:	08005101 	.word	0x08005101
 80050cc:	08005125 	.word	0x08005125
 80050d0:	08005125 	.word	0x08005125
 80050d4:	08005125 	.word	0x08005125
 80050d8:	08005113 	.word	0x08005113
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0202 	orr.w	r2, r2, #2
 80050ea:	60da      	str	r2, [r3, #12]
      break;
 80050ec:	e01b      	b.n	8005126 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0204 	orr.w	r2, r2, #4
 80050fc:	60da      	str	r2, [r3, #12]
      break;
 80050fe:	e012      	b.n	8005126 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0208 	orr.w	r2, r2, #8
 800510e:	60da      	str	r2, [r3, #12]
      break;
 8005110:	e009      	b.n	8005126 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0210 	orr.w	r2, r2, #16
 8005120:	60da      	str	r2, [r3, #12]
      break;
 8005122:	e000      	b.n	8005126 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8005124:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2201      	movs	r2, #1
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f001 fb9e 	bl	8006870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <HAL_TIM_PWM_Start_IT+0x108>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIM_PWM_Start_IT+0xb8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a16      	ldr	r2, [pc, #88]	; (800519c <HAL_TIM_PWM_Start_IT+0x10c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d101      	bne.n	800514c <HAL_TIM_PWM_Start_IT+0xbc>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <HAL_TIM_PWM_Start_IT+0xbe>
 800514c:	2300      	movs	r3, #0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005160:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <HAL_TIM_PWM_Start_IT+0x110>)
 800516a:	4013      	ands	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b06      	cmp	r3, #6
 8005172:	d00b      	beq.n	800518c <HAL_TIM_PWM_Start_IT+0xfc>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517a:	d007      	beq.n	800518c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40010400 	.word	0x40010400
 80051a0:	00010007 	.word	0x00010007

080051a4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	d841      	bhi.n	8005238 <HAL_TIM_PWM_Stop_IT+0x94>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <HAL_TIM_PWM_Stop_IT+0x18>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051f1 	.word	0x080051f1
 80051c0:	08005239 	.word	0x08005239
 80051c4:	08005239 	.word	0x08005239
 80051c8:	08005239 	.word	0x08005239
 80051cc:	08005203 	.word	0x08005203
 80051d0:	08005239 	.word	0x08005239
 80051d4:	08005239 	.word	0x08005239
 80051d8:	08005239 	.word	0x08005239
 80051dc:	08005215 	.word	0x08005215
 80051e0:	08005239 	.word	0x08005239
 80051e4:	08005239 	.word	0x08005239
 80051e8:	08005239 	.word	0x08005239
 80051ec:	08005227 	.word	0x08005227
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0202 	bic.w	r2, r2, #2
 80051fe:	60da      	str	r2, [r3, #12]
      break;
 8005200:	e01b      	b.n	800523a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0204 	bic.w	r2, r2, #4
 8005210:	60da      	str	r2, [r3, #12]
      break;
 8005212:	e012      	b.n	800523a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0208 	bic.w	r2, r2, #8
 8005222:	60da      	str	r2, [r3, #12]
      break;
 8005224:	e009      	b.n	800523a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0210 	bic.w	r2, r2, #16
 8005234:	60da      	str	r2, [r3, #12]
      break;
 8005236:	e000      	b.n	800523a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8005238:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2200      	movs	r2, #0
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f001 fb14 	bl	8006870 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_TIM_PWM_Stop_IT+0xb8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_TIM_PWM_Stop_IT+0x130>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d101      	bne.n	8005260 <HAL_TIM_PWM_Stop_IT+0xbc>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <HAL_TIM_PWM_Stop_IT+0xbe>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d017      	beq.n	8005296 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10f      	bne.n	8005296 <HAL_TIM_PWM_Stop_IT+0xf2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	f240 4344 	movw	r3, #1092	; 0x444
 8005280:	4013      	ands	r3, r2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d107      	bne.n	8005296 <HAL_TIM_PWM_Stop_IT+0xf2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	f241 1311 	movw	r3, #4369	; 0x1111
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10f      	bne.n	80052c6 <HAL_TIM_PWM_Stop_IT+0x122>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	f240 4344 	movw	r3, #1092	; 0x444
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <HAL_TIM_PWM_Stop_IT+0x122>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400

080052d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e01d      	b.n	8005326 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fc f8ce 	bl	80014a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f000 fd60 	bl	8005ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b0c      	cmp	r3, #12
 800533e:	d841      	bhi.n	80053c4 <HAL_TIM_IC_Start_IT+0x94>
 8005340:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <HAL_TIM_IC_Start_IT+0x18>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	0800537d 	.word	0x0800537d
 800534c:	080053c5 	.word	0x080053c5
 8005350:	080053c5 	.word	0x080053c5
 8005354:	080053c5 	.word	0x080053c5
 8005358:	0800538f 	.word	0x0800538f
 800535c:	080053c5 	.word	0x080053c5
 8005360:	080053c5 	.word	0x080053c5
 8005364:	080053c5 	.word	0x080053c5
 8005368:	080053a1 	.word	0x080053a1
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053c5 	.word	0x080053c5
 8005374:	080053c5 	.word	0x080053c5
 8005378:	080053b3 	.word	0x080053b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0202 	orr.w	r2, r2, #2
 800538a:	60da      	str	r2, [r3, #12]
      break;
 800538c:	e01b      	b.n	80053c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0204 	orr.w	r2, r2, #4
 800539c:	60da      	str	r2, [r3, #12]
      break;
 800539e:	e012      	b.n	80053c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	60da      	str	r2, [r3, #12]
      break;
 80053b0:	e009      	b.n	80053c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0210 	orr.w	r2, r2, #16
 80053c0:	60da      	str	r2, [r3, #12]
      break;
 80053c2:	e000      	b.n	80053c6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80053c4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2201      	movs	r2, #1
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fa4e 	bl	8006870 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <HAL_TIM_IC_Start_IT+0xd8>)
 80053dc:	4013      	ands	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b06      	cmp	r3, #6
 80053e4:	d00b      	beq.n	80053fe <HAL_TIM_IC_Start_IT+0xce>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ec:	d007      	beq.n	80053fe <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0201 	orr.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	00010007 	.word	0x00010007

0800540c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b0c      	cmp	r3, #12
 800541a:	d841      	bhi.n	80054a0 <HAL_TIM_IC_Stop_IT+0x94>
 800541c:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <HAL_TIM_IC_Stop_IT+0x18>)
 800541e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005422:	bf00      	nop
 8005424:	08005459 	.word	0x08005459
 8005428:	080054a1 	.word	0x080054a1
 800542c:	080054a1 	.word	0x080054a1
 8005430:	080054a1 	.word	0x080054a1
 8005434:	0800546b 	.word	0x0800546b
 8005438:	080054a1 	.word	0x080054a1
 800543c:	080054a1 	.word	0x080054a1
 8005440:	080054a1 	.word	0x080054a1
 8005444:	0800547d 	.word	0x0800547d
 8005448:	080054a1 	.word	0x080054a1
 800544c:	080054a1 	.word	0x080054a1
 8005450:	080054a1 	.word	0x080054a1
 8005454:	0800548f 	.word	0x0800548f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0202 	bic.w	r2, r2, #2
 8005466:	60da      	str	r2, [r3, #12]
      break;
 8005468:	e01b      	b.n	80054a2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0204 	bic.w	r2, r2, #4
 8005478:	60da      	str	r2, [r3, #12]
      break;
 800547a:	e012      	b.n	80054a2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0208 	bic.w	r2, r2, #8
 800548a:	60da      	str	r2, [r3, #12]
      break;
 800548c:	e009      	b.n	80054a2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0210 	bic.w	r2, r2, #16
 800549c:	60da      	str	r2, [r3, #12]
      break;
 800549e:	e000      	b.n	80054a2 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80054a0:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2200      	movs	r2, #0
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 f9e0 	bl	8006870 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10f      	bne.n	80054e0 <HAL_TIM_IC_Stop_IT+0xd4>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	f240 4344 	movw	r3, #1092	; 0x444
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d107      	bne.n	80054e0 <HAL_TIM_IC_Stop_IT+0xd4>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop

080054ec <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e02d      	b.n	800555c <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f825 	bl	8005564 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3304      	adds	r3, #4
 800552a:	4619      	mov	r1, r3
 800552c:	4610      	mov	r0, r2
 800552e:	f000 fc55 	bl	8005ddc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0208 	bic.w	r2, r2, #8
 8005540:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6819      	ldr	r1, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b02      	cmp	r3, #2
 800558c:	d122      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	d11b      	bne.n	80055d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0202 	mvn.w	r2, #2
 80055a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fb fd64 	bl	8001088 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fbec 	bl	8005da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fbf3 	bl	8005db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d122      	bne.n	8005628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d11b      	bne.n	8005628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f06f 0204 	mvn.w	r2, #4
 80055f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fb fd3a 	bl	8001088 <HAL_TIM_IC_CaptureCallback>
 8005614:	e005      	b.n	8005622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fbc2 	bl	8005da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fbc9 	bl	8005db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b08      	cmp	r3, #8
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0208 	mvn.w	r2, #8
 800564c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2204      	movs	r2, #4
 8005652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fb fd10 	bl	8001088 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 fb98 	bl	8005da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fb9f 	bl	8005db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b10      	cmp	r3, #16
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0210 	mvn.w	r2, #16
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2208      	movs	r2, #8
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fb fce6 	bl	8001088 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fb6e 	bl	8005da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fb75 	bl	8005db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d10e      	bne.n	80056fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0201 	mvn.w	r2, #1
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7fb fcbc 	bl	8001074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005706:	2b80      	cmp	r3, #128	; 0x80
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 f9e0 	bl	8006ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	d10e      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d107      	bne.n	8005756 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800574e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 f9d3 	bl	8006afc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d10e      	bne.n	8005782 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	d107      	bne.n	8005782 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800577a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fb23 	bl	8005dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b20      	cmp	r3, #32
 800578e:	d10e      	bne.n	80057ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b20      	cmp	r3, #32
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0220 	mvn.w	r2, #32
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f993 	bl	8006ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e08a      	b.n	80058e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11b      	bne.n	800581e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f000 fe77 	bl	80064e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 020c 	bic.w	r2, r2, #12
 8005808:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6999      	ldr	r1, [r3, #24]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	619a      	str	r2, [r3, #24]
 800581c:	e05a      	b.n	80058d4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b04      	cmp	r3, #4
 8005822:	d11c      	bne.n	800585e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f000 fefb 	bl	800662e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005846:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	021a      	lsls	r2, r3, #8
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	619a      	str	r2, [r3, #24]
 800585c:	e03a      	b.n	80058d4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d11b      	bne.n	800589c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	6819      	ldr	r1, [r3, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f000 ff48 	bl	8006708 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69da      	ldr	r2, [r3, #28]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 020c 	bic.w	r2, r2, #12
 8005886:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69d9      	ldr	r1, [r3, #28]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	61da      	str	r2, [r3, #28]
 800589a:	e01b      	b.n	80058d4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f000 ff68 	bl	8006780 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	69d9      	ldr	r1, [r3, #28]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	021a      	lsls	r2, r3, #8
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005906:	2302      	movs	r3, #2
 8005908:	e105      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x226>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2202      	movs	r2, #2
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b14      	cmp	r3, #20
 800591e:	f200 80f0 	bhi.w	8005b02 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005922:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	0800597d 	.word	0x0800597d
 800592c:	08005b03 	.word	0x08005b03
 8005930:	08005b03 	.word	0x08005b03
 8005934:	08005b03 	.word	0x08005b03
 8005938:	080059bd 	.word	0x080059bd
 800593c:	08005b03 	.word	0x08005b03
 8005940:	08005b03 	.word	0x08005b03
 8005944:	08005b03 	.word	0x08005b03
 8005948:	080059ff 	.word	0x080059ff
 800594c:	08005b03 	.word	0x08005b03
 8005950:	08005b03 	.word	0x08005b03
 8005954:	08005b03 	.word	0x08005b03
 8005958:	08005a3f 	.word	0x08005a3f
 800595c:	08005b03 	.word	0x08005b03
 8005960:	08005b03 	.word	0x08005b03
 8005964:	08005b03 	.word	0x08005b03
 8005968:	08005a81 	.word	0x08005a81
 800596c:	08005b03 	.word	0x08005b03
 8005970:	08005b03 	.word	0x08005b03
 8005974:	08005b03 	.word	0x08005b03
 8005978:	08005ac1 	.word	0x08005ac1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 faca 	bl	8005f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0208 	orr.w	r2, r2, #8
 8005996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0204 	bic.w	r2, r2, #4
 80059a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6999      	ldr	r1, [r3, #24]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	619a      	str	r2, [r3, #24]
      break;
 80059ba:	e0a3      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fb1c 	bl	8006000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6999      	ldr	r1, [r3, #24]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	619a      	str	r2, [r3, #24]
      break;
 80059fc:	e082      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fb73 	bl	80060f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0208 	orr.w	r2, r2, #8
 8005a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0204 	bic.w	r2, r2, #4
 8005a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69d9      	ldr	r1, [r3, #28]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	61da      	str	r2, [r3, #28]
      break;
 8005a3c:	e062      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fbc9 	bl	80061dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	021a      	lsls	r2, r3, #8
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	61da      	str	r2, [r3, #28]
      break;
 8005a7e:	e041      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fc00 	bl	800628c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0208 	orr.w	r2, r2, #8
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0204 	bic.w	r2, r2, #4
 8005aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005abe:	e021      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fc32 	bl	8006330 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	021a      	lsls	r2, r3, #8
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b00:	e000      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005b02:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop

08005b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_TIM_ConfigClockSource+0x18>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e0a6      	b.n	8005c86 <HAL_TIM_ConfigClockSource+0x166>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4b4f      	ldr	r3, [pc, #316]	; (8005c90 <HAL_TIM_ConfigClockSource+0x170>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d067      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0x120>
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	d80b      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x6c>
 8005b74:	2b10      	cmp	r3, #16
 8005b76:	d073      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x140>
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d802      	bhi.n	8005b82 <HAL_TIM_ConfigClockSource+0x62>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d06f      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b80:	e078      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d06c      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x140>
 8005b86:	2b30      	cmp	r3, #48	; 0x30
 8005b88:	d06a      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b8a:	e073      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b8c:	2b70      	cmp	r3, #112	; 0x70
 8005b8e:	d00d      	beq.n	8005bac <HAL_TIM_ConfigClockSource+0x8c>
 8005b90:	2b70      	cmp	r3, #112	; 0x70
 8005b92:	d804      	bhi.n	8005b9e <HAL_TIM_ConfigClockSource+0x7e>
 8005b94:	2b50      	cmp	r3, #80	; 0x50
 8005b96:	d033      	beq.n	8005c00 <HAL_TIM_ConfigClockSource+0xe0>
 8005b98:	2b60      	cmp	r3, #96	; 0x60
 8005b9a:	d041      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b9c:	e06a      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	d066      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0x152>
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba8:	d017      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005baa:	e063      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6818      	ldr	r0, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	6899      	ldr	r1, [r3, #8]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f000 fe38 	bl	8006830 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	609a      	str	r2, [r3, #8]
      break;
 8005bd8:	e04c      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6899      	ldr	r1, [r3, #8]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f000 fe21 	bl	8006830 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bfc:	609a      	str	r2, [r3, #8]
      break;
 8005bfe:	e039      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f000 fcdf 	bl	80065d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2150      	movs	r1, #80	; 0x50
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fdee 	bl	80067fa <TIM_ITRx_SetConfig>
      break;
 8005c1e:	e029      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f000 fd3b 	bl	80066a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2160      	movs	r1, #96	; 0x60
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fdde 	bl	80067fa <TIM_ITRx_SetConfig>
      break;
 8005c3e:	e019      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f000 fcbf 	bl	80065d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2140      	movs	r1, #64	; 0x40
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fdce 	bl	80067fa <TIM_ITRx_SetConfig>
      break;
 8005c5e:	e009      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 fdc5 	bl	80067fa <TIM_ITRx_SetConfig>
      break;
 8005c70:	e000      	b.n	8005c74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	fffeff88 	.word	0xfffeff88

08005c94 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_TIM_SlaveConfigSynchro+0x18>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e031      	b.n	8005d10 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fb8a 	bl	80063d8 <TIM_SlaveTimer_SetConfig>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e018      	b.n	8005d10 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cfc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b0c      	cmp	r3, #12
 8005d2a:	d831      	bhi.n	8005d90 <HAL_TIM_ReadCapturedValue+0x78>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d69 	.word	0x08005d69
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d73 	.word	0x08005d73
 8005d48:	08005d91 	.word	0x08005d91
 8005d4c:	08005d91 	.word	0x08005d91
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d91 	.word	0x08005d91
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005d91 	.word	0x08005d91
 8005d64:	08005d87 	.word	0x08005d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	60fb      	str	r3, [r7, #12]

      break;
 8005d70:	e00f      	b.n	8005d92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	60fb      	str	r3, [r7, #12]

      break;
 8005d7a:	e00a      	b.n	8005d92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d82:	60fb      	str	r3, [r7, #12]

      break;
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	60fb      	str	r3, [r7, #12]

      break;
 8005d8e:	e000      	b.n	8005d92 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005d90:	bf00      	nop
  }

  return tmpreg;
 8005d92:	68fb      	ldr	r3, [r7, #12]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a40      	ldr	r2, [pc, #256]	; (8005ef0 <TIM_Base_SetConfig+0x114>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d00f      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3d      	ldr	r2, [pc, #244]	; (8005ef4 <TIM_Base_SetConfig+0x118>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a3c      	ldr	r2, [pc, #240]	; (8005ef8 <TIM_Base_SetConfig+0x11c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a3b      	ldr	r2, [pc, #236]	; (8005efc <TIM_Base_SetConfig+0x120>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a3a      	ldr	r2, [pc, #232]	; (8005f00 <TIM_Base_SetConfig+0x124>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d108      	bne.n	8005e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <TIM_Base_SetConfig+0x114>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d02b      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d027      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2c      	ldr	r2, [pc, #176]	; (8005ef4 <TIM_Base_SetConfig+0x118>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d023      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2b      	ldr	r2, [pc, #172]	; (8005ef8 <TIM_Base_SetConfig+0x11c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01f      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <TIM_Base_SetConfig+0x120>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01b      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a29      	ldr	r2, [pc, #164]	; (8005f00 <TIM_Base_SetConfig+0x124>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d017      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <TIM_Base_SetConfig+0x128>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a27      	ldr	r2, [pc, #156]	; (8005f08 <TIM_Base_SetConfig+0x12c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00f      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a26      	ldr	r2, [pc, #152]	; (8005f0c <TIM_Base_SetConfig+0x130>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a25      	ldr	r2, [pc, #148]	; (8005f10 <TIM_Base_SetConfig+0x134>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a24      	ldr	r2, [pc, #144]	; (8005f14 <TIM_Base_SetConfig+0x138>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_Base_SetConfig+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <TIM_Base_SetConfig+0x13c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d108      	bne.n	8005ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <TIM_Base_SetConfig+0x114>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_Base_SetConfig+0xf8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <TIM_Base_SetConfig+0x124>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d103      	bne.n	8005edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	615a      	str	r2, [r3, #20]
}
 8005ee2:	bf00      	nop
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40014400 	.word	0x40014400
 8005f0c:	40014800 	.word	0x40014800
 8005f10:	40001800 	.word	0x40001800
 8005f14:	40001c00 	.word	0x40001c00
 8005f18:	40002000 	.word	0x40002000

08005f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4b2b      	ldr	r3, [pc, #172]	; (8005ff4 <TIM_OC1_SetConfig+0xd8>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 0302 	bic.w	r3, r3, #2
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a21      	ldr	r2, [pc, #132]	; (8005ff8 <TIM_OC1_SetConfig+0xdc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC1_SetConfig+0x64>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a20      	ldr	r2, [pc, #128]	; (8005ffc <TIM_OC1_SetConfig+0xe0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d10c      	bne.n	8005f9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f023 0308 	bic.w	r3, r3, #8
 8005f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f023 0304 	bic.w	r3, r3, #4
 8005f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <TIM_OC1_SetConfig+0xdc>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC1_SetConfig+0x8e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	; (8005ffc <TIM_OC1_SetConfig+0xe0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d111      	bne.n	8005fce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	fffeff8f 	.word	0xfffeff8f
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40010400 	.word	0x40010400

08006000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f023 0210 	bic.w	r2, r3, #16
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4b2e      	ldr	r3, [pc, #184]	; (80060e4 <TIM_OC2_SetConfig+0xe4>)
 800602c:	4013      	ands	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0320 	bic.w	r3, r3, #32
 800604a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a23      	ldr	r2, [pc, #140]	; (80060e8 <TIM_OC2_SetConfig+0xe8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_OC2_SetConfig+0x68>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a22      	ldr	r2, [pc, #136]	; (80060ec <TIM_OC2_SetConfig+0xec>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d10d      	bne.n	8006084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800606e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <TIM_OC2_SetConfig+0xe8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC2_SetConfig+0x94>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a17      	ldr	r2, [pc, #92]	; (80060ec <TIM_OC2_SetConfig+0xec>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d113      	bne.n	80060bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800609a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	feff8fff 	.word	0xfeff8fff
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40010400 	.word	0x40010400

080060f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <TIM_OC3_SetConfig+0xe0>)
 800611c:	4013      	ands	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a22      	ldr	r2, [pc, #136]	; (80061d4 <TIM_OC3_SetConfig+0xe4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_OC3_SetConfig+0x66>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a21      	ldr	r2, [pc, #132]	; (80061d8 <TIM_OC3_SetConfig+0xe8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10d      	bne.n	8006172 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800615c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <TIM_OC3_SetConfig+0xe4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <TIM_OC3_SetConfig+0x92>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a16      	ldr	r2, [pc, #88]	; (80061d8 <TIM_OC3_SetConfig+0xe8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d113      	bne.n	80061aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	621a      	str	r2, [r3, #32]
}
 80061c4:	bf00      	nop
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	fffeff8f 	.word	0xfffeff8f
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40010400 	.word	0x40010400

080061dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <TIM_OC4_SetConfig+0xa4>)
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	031b      	lsls	r3, r3, #12
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a13      	ldr	r2, [pc, #76]	; (8006284 <TIM_OC4_SetConfig+0xa8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_OC4_SetConfig+0x68>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a12      	ldr	r2, [pc, #72]	; (8006288 <TIM_OC4_SetConfig+0xac>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d109      	bne.n	8006258 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	019b      	lsls	r3, r3, #6
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	621a      	str	r2, [r3, #32]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	feff8fff 	.word	0xfeff8fff
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400

0800628c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <TIM_OC5_SetConfig+0x98>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a12      	ldr	r2, [pc, #72]	; (8006328 <TIM_OC5_SetConfig+0x9c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d003      	beq.n	80062ea <TIM_OC5_SetConfig+0x5e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a11      	ldr	r2, [pc, #68]	; (800632c <TIM_OC5_SetConfig+0xa0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d109      	bne.n	80062fe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	621a      	str	r2, [r3, #32]
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	fffeff8f 	.word	0xfffeff8f
 8006328:	40010000 	.word	0x40010000
 800632c:	40010400 	.word	0x40010400

08006330 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4b1c      	ldr	r3, [pc, #112]	; (80063cc <TIM_OC6_SetConfig+0x9c>)
 800635c:	4013      	ands	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	021b      	lsls	r3, r3, #8
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	051b      	lsls	r3, r3, #20
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <TIM_OC6_SetConfig+0xa0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d003      	beq.n	8006390 <TIM_OC6_SetConfig+0x60>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <TIM_OC6_SetConfig+0xa4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d109      	bne.n	80063a4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006396:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	feff8fff 	.word	0xfeff8fff
 80063d0:	40010000 	.word	0x40010000
 80063d4:	40010400 	.word	0x40010400

080063d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <TIM_SlaveTimer_SetConfig+0x10c>)
 8006400:	4013      	ands	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	4313      	orrs	r3, r2
 800640c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b30      	cmp	r3, #48	; 0x30
 800641c:	d05c      	beq.n	80064d8 <TIM_SlaveTimer_SetConfig+0x100>
 800641e:	2b30      	cmp	r3, #48	; 0x30
 8006420:	d806      	bhi.n	8006430 <TIM_SlaveTimer_SetConfig+0x58>
 8006422:	2b10      	cmp	r3, #16
 8006424:	d058      	beq.n	80064d8 <TIM_SlaveTimer_SetConfig+0x100>
 8006426:	2b20      	cmp	r3, #32
 8006428:	d056      	beq.n	80064d8 <TIM_SlaveTimer_SetConfig+0x100>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d054      	beq.n	80064d8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800642e:	e054      	b.n	80064da <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006430:	2b50      	cmp	r3, #80	; 0x50
 8006432:	d03d      	beq.n	80064b0 <TIM_SlaveTimer_SetConfig+0xd8>
 8006434:	2b50      	cmp	r3, #80	; 0x50
 8006436:	d802      	bhi.n	800643e <TIM_SlaveTimer_SetConfig+0x66>
 8006438:	2b40      	cmp	r3, #64	; 0x40
 800643a:	d010      	beq.n	800645e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800643c:	e04d      	b.n	80064da <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800643e:	2b60      	cmp	r3, #96	; 0x60
 8006440:	d040      	beq.n	80064c4 <TIM_SlaveTimer_SetConfig+0xec>
 8006442:	2b70      	cmp	r3, #112	; 0x70
 8006444:	d000      	beq.n	8006448 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006446:	e048      	b.n	80064da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68d9      	ldr	r1, [r3, #12]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f000 f9ea 	bl	8006830 <TIM_ETR_SetConfig>
      break;
 800645c:	e03d      	b.n	80064da <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b05      	cmp	r3, #5
 8006464:	d101      	bne.n	800646a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e038      	b.n	80064dc <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006490:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	621a      	str	r2, [r3, #32]
      break;
 80064ae:	e014      	b.n	80064da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6899      	ldr	r1, [r3, #8]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	461a      	mov	r2, r3
 80064be:	f000 f887 	bl	80065d0 <TIM_TI1_ConfigInputStage>
      break;
 80064c2:	e00a      	b.n	80064da <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6899      	ldr	r1, [r3, #8]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	461a      	mov	r2, r3
 80064d2:	f000 f8e9 	bl	80066a8 <TIM_TI2_ConfigInputStage>
      break;
 80064d6:	e000      	b.n	80064da <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80064d8:	bf00      	nop
  }
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	fffefff8 	.word	0xfffefff8

080064e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f023 0201 	bic.w	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a28      	ldr	r2, [pc, #160]	; (80065b4 <TIM_TI1_SetConfig+0xcc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01b      	beq.n	800654e <TIM_TI1_SetConfig+0x66>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651c:	d017      	beq.n	800654e <TIM_TI1_SetConfig+0x66>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <TIM_TI1_SetConfig+0xd0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d013      	beq.n	800654e <TIM_TI1_SetConfig+0x66>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a24      	ldr	r2, [pc, #144]	; (80065bc <TIM_TI1_SetConfig+0xd4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00f      	beq.n	800654e <TIM_TI1_SetConfig+0x66>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a23      	ldr	r2, [pc, #140]	; (80065c0 <TIM_TI1_SetConfig+0xd8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00b      	beq.n	800654e <TIM_TI1_SetConfig+0x66>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	4a22      	ldr	r2, [pc, #136]	; (80065c4 <TIM_TI1_SetConfig+0xdc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <TIM_TI1_SetConfig+0x66>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a21      	ldr	r2, [pc, #132]	; (80065c8 <TIM_TI1_SetConfig+0xe0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_TI1_SetConfig+0x66>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a20      	ldr	r2, [pc, #128]	; (80065cc <TIM_TI1_SetConfig+0xe4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d101      	bne.n	8006552 <TIM_TI1_SetConfig+0x6a>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <TIM_TI1_SetConfig+0x6c>
 8006552:	2300      	movs	r3, #0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e003      	b.n	8006572 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	b2db      	uxtb	r3, r3
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f023 030a 	bic.w	r3, r3, #10
 800658c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f003 030a 	and.w	r3, r3, #10
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800
 80065c0:	40000c00 	.word	0x40000c00
 80065c4:	40010400 	.word	0x40010400
 80065c8:	40014000 	.word	0x40014000
 80065cc:	40001800 	.word	0x40001800

080065d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	f023 0201 	bic.w	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f023 030a 	bic.w	r3, r3, #10
 800660c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800662e:	b480      	push	{r7}
 8006630:	b087      	sub	sp, #28
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f023 0210 	bic.w	r2, r3, #16
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800666c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	031b      	lsls	r3, r3, #12
 8006672:	b29b      	uxth	r3, r3
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006680:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	621a      	str	r2, [r3, #32]
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f023 0210 	bic.w	r2, r3, #16
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	031b      	lsls	r3, r3, #12
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	621a      	str	r2, [r3, #32]
}
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f023 0303 	bic.w	r3, r3, #3
 8006734:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006744:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	b2db      	uxtb	r3, r3
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006758:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	621a      	str	r2, [r3, #32]
}
 8006774:	bf00      	nop
 8006776:	371c      	adds	r7, #28
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	031b      	lsls	r3, r3, #12
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	031b      	lsls	r3, r3, #12
 80067d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	f043 0307 	orr.w	r3, r3, #7
 800681c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	609a      	str	r2, [r3, #8]
}
 8006824:	bf00      	nop
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800684a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	021a      	lsls	r2, r3, #8
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	431a      	orrs	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4313      	orrs	r3, r2
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	609a      	str	r2, [r3, #8]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f003 031f 	and.w	r3, r3, #31
 8006882:	2201      	movs	r2, #1
 8006884:	fa02 f303 	lsl.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	43db      	mvns	r3, r3
 8006892:	401a      	ands	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a1a      	ldr	r2, [r3, #32]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	fa01 f303 	lsl.w	r3, r1, r3
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e06d      	b.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a30      	ldr	r2, [pc, #192]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2f      	ldr	r2, [pc, #188]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d108      	bne.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800690e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a20      	ldr	r2, [pc, #128]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d022      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d01d      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1c      	ldr	r2, [pc, #112]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1a      	ldr	r2, [pc, #104]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a15      	ldr	r2, [pc, #84]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10c      	bne.n	800699e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800698a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	4313      	orrs	r3, r2
 8006994:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	40010000 	.word	0x40010000
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800
 80069cc:	40000c00 	.word	0x40000c00
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40001800 	.word	0x40001800

080069d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e065      	b.n	8006ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	041b      	lsls	r3, r3, #16
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a16      	ldr	r2, [pc, #88]	; (8006acc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d004      	beq.n	8006a82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a14      	ldr	r2, [pc, #80]	; (8006ad0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d115      	bne.n	8006aae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	051b      	lsls	r3, r3, #20
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	40010000 	.word	0x40010000
 8006ad0:	40010400 	.word	0x40010400

08006ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e040      	b.n	8006ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fa fd5c 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2224      	movs	r2, #36	; 0x24
 8006b3c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0201 	bic.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f8be 	bl	8006cd0 <UART_SetConfig>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e022      	b.n	8006ba4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fb5c 	bl	8007224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fbe3 	bl	8007368 <UART_CheckIdleState>
 8006ba2:	4603      	mov	r3, r0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d17f      	bne.n	8006cc4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_UART_Transmit+0x24>
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e078      	b.n	8006cc6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_UART_Transmit+0x36>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e071      	b.n	8006cc6 <HAL_UART_Transmit+0x11a>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2221      	movs	r2, #33	; 0x21
 8006bf4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006bf6:	f7fa fead 	bl	8001954 <HAL_GetTick>
 8006bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	88fa      	ldrh	r2, [r7, #6]
 8006c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c14:	d108      	bne.n	8006c28 <HAL_UART_Transmit+0x7c>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d104      	bne.n	8006c28 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	61bb      	str	r3, [r7, #24]
 8006c26:	e003      	b.n	8006c30 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006c38:	e02c      	b.n	8006c94 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2200      	movs	r2, #0
 8006c42:	2180      	movs	r1, #128	; 0x80
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 fbd4 	bl	80073f2 <UART_WaitOnFlagUntilTimeout>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e038      	b.n	8006cc6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10b      	bne.n	8006c72 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	e007      	b.n	8006c82 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	781a      	ldrb	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1cc      	bne.n	8006c3a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2140      	movs	r1, #64	; 0x40
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 fba1 	bl	80073f2 <UART_WaitOnFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e005      	b.n	8006cc6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
  }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4bb1      	ldr	r3, [pc, #708]	; (8006fc4 <UART_SetConfig+0x2f4>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	6939      	ldr	r1, [r7, #16]
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a9f      	ldr	r2, [pc, #636]	; (8006fc8 <UART_SetConfig+0x2f8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d121      	bne.n	8006d94 <UART_SetConfig+0xc4>
 8006d50:	4b9e      	ldr	r3, [pc, #632]	; (8006fcc <UART_SetConfig+0x2fc>)
 8006d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d816      	bhi.n	8006d8c <UART_SetConfig+0xbc>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x94>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d75 	.word	0x08006d75
 8006d68:	08006d81 	.word	0x08006d81
 8006d6c:	08006d7b 	.word	0x08006d7b
 8006d70:	08006d87 	.word	0x08006d87
 8006d74:	2301      	movs	r3, #1
 8006d76:	77fb      	strb	r3, [r7, #31]
 8006d78:	e151      	b.n	800701e <UART_SetConfig+0x34e>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	e14e      	b.n	800701e <UART_SetConfig+0x34e>
 8006d80:	2304      	movs	r3, #4
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e14b      	b.n	800701e <UART_SetConfig+0x34e>
 8006d86:	2308      	movs	r3, #8
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e148      	b.n	800701e <UART_SetConfig+0x34e>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	bf00      	nop
 8006d92:	e144      	b.n	800701e <UART_SetConfig+0x34e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a8d      	ldr	r2, [pc, #564]	; (8006fd0 <UART_SetConfig+0x300>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d134      	bne.n	8006e08 <UART_SetConfig+0x138>
 8006d9e:	4b8b      	ldr	r3, [pc, #556]	; (8006fcc <UART_SetConfig+0x2fc>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d829      	bhi.n	8006e00 <UART_SetConfig+0x130>
 8006dac:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <UART_SetConfig+0xe4>)
 8006dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006de9 	.word	0x08006de9
 8006db8:	08006e01 	.word	0x08006e01
 8006dbc:	08006e01 	.word	0x08006e01
 8006dc0:	08006e01 	.word	0x08006e01
 8006dc4:	08006df5 	.word	0x08006df5
 8006dc8:	08006e01 	.word	0x08006e01
 8006dcc:	08006e01 	.word	0x08006e01
 8006dd0:	08006e01 	.word	0x08006e01
 8006dd4:	08006def 	.word	0x08006def
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	08006e01 	.word	0x08006e01
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006dfb 	.word	0x08006dfb
 8006de8:	2300      	movs	r3, #0
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e117      	b.n	800701e <UART_SetConfig+0x34e>
 8006dee:	2302      	movs	r3, #2
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e114      	b.n	800701e <UART_SetConfig+0x34e>
 8006df4:	2304      	movs	r3, #4
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e111      	b.n	800701e <UART_SetConfig+0x34e>
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e10e      	b.n	800701e <UART_SetConfig+0x34e>
 8006e00:	2310      	movs	r3, #16
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	bf00      	nop
 8006e06:	e10a      	b.n	800701e <UART_SetConfig+0x34e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a71      	ldr	r2, [pc, #452]	; (8006fd4 <UART_SetConfig+0x304>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d120      	bne.n	8006e54 <UART_SetConfig+0x184>
 8006e12:	4b6e      	ldr	r3, [pc, #440]	; (8006fcc <UART_SetConfig+0x2fc>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d00f      	beq.n	8006e40 <UART_SetConfig+0x170>
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d802      	bhi.n	8006e2a <UART_SetConfig+0x15a>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <UART_SetConfig+0x164>
 8006e28:	e010      	b.n	8006e4c <UART_SetConfig+0x17c>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d005      	beq.n	8006e3a <UART_SetConfig+0x16a>
 8006e2e:	2b30      	cmp	r3, #48	; 0x30
 8006e30:	d009      	beq.n	8006e46 <UART_SetConfig+0x176>
 8006e32:	e00b      	b.n	8006e4c <UART_SetConfig+0x17c>
 8006e34:	2300      	movs	r3, #0
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e0f1      	b.n	800701e <UART_SetConfig+0x34e>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e0ee      	b.n	800701e <UART_SetConfig+0x34e>
 8006e40:	2304      	movs	r3, #4
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e0eb      	b.n	800701e <UART_SetConfig+0x34e>
 8006e46:	2308      	movs	r3, #8
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e0e8      	b.n	800701e <UART_SetConfig+0x34e>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	bf00      	nop
 8006e52:	e0e4      	b.n	800701e <UART_SetConfig+0x34e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5f      	ldr	r2, [pc, #380]	; (8006fd8 <UART_SetConfig+0x308>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d120      	bne.n	8006ea0 <UART_SetConfig+0x1d0>
 8006e5e:	4b5b      	ldr	r3, [pc, #364]	; (8006fcc <UART_SetConfig+0x2fc>)
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	d00f      	beq.n	8006e8c <UART_SetConfig+0x1bc>
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d802      	bhi.n	8006e76 <UART_SetConfig+0x1a6>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <UART_SetConfig+0x1b0>
 8006e74:	e010      	b.n	8006e98 <UART_SetConfig+0x1c8>
 8006e76:	2b80      	cmp	r3, #128	; 0x80
 8006e78:	d005      	beq.n	8006e86 <UART_SetConfig+0x1b6>
 8006e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e7c:	d009      	beq.n	8006e92 <UART_SetConfig+0x1c2>
 8006e7e:	e00b      	b.n	8006e98 <UART_SetConfig+0x1c8>
 8006e80:	2300      	movs	r3, #0
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e0cb      	b.n	800701e <UART_SetConfig+0x34e>
 8006e86:	2302      	movs	r3, #2
 8006e88:	77fb      	strb	r3, [r7, #31]
 8006e8a:	e0c8      	b.n	800701e <UART_SetConfig+0x34e>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	77fb      	strb	r3, [r7, #31]
 8006e90:	e0c5      	b.n	800701e <UART_SetConfig+0x34e>
 8006e92:	2308      	movs	r3, #8
 8006e94:	77fb      	strb	r3, [r7, #31]
 8006e96:	e0c2      	b.n	800701e <UART_SetConfig+0x34e>
 8006e98:	2310      	movs	r3, #16
 8006e9a:	77fb      	strb	r3, [r7, #31]
 8006e9c:	bf00      	nop
 8006e9e:	e0be      	b.n	800701e <UART_SetConfig+0x34e>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a4d      	ldr	r2, [pc, #308]	; (8006fdc <UART_SetConfig+0x30c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d124      	bne.n	8006ef4 <UART_SetConfig+0x224>
 8006eaa:	4b48      	ldr	r3, [pc, #288]	; (8006fcc <UART_SetConfig+0x2fc>)
 8006eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb8:	d012      	beq.n	8006ee0 <UART_SetConfig+0x210>
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ebe:	d802      	bhi.n	8006ec6 <UART_SetConfig+0x1f6>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <UART_SetConfig+0x204>
 8006ec4:	e012      	b.n	8006eec <UART_SetConfig+0x21c>
 8006ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eca:	d006      	beq.n	8006eda <UART_SetConfig+0x20a>
 8006ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed0:	d009      	beq.n	8006ee6 <UART_SetConfig+0x216>
 8006ed2:	e00b      	b.n	8006eec <UART_SetConfig+0x21c>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e0a1      	b.n	800701e <UART_SetConfig+0x34e>
 8006eda:	2302      	movs	r3, #2
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e09e      	b.n	800701e <UART_SetConfig+0x34e>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e09b      	b.n	800701e <UART_SetConfig+0x34e>
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	77fb      	strb	r3, [r7, #31]
 8006eea:	e098      	b.n	800701e <UART_SetConfig+0x34e>
 8006eec:	2310      	movs	r3, #16
 8006eee:	77fb      	strb	r3, [r7, #31]
 8006ef0:	bf00      	nop
 8006ef2:	e094      	b.n	800701e <UART_SetConfig+0x34e>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a39      	ldr	r2, [pc, #228]	; (8006fe0 <UART_SetConfig+0x310>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d124      	bne.n	8006f48 <UART_SetConfig+0x278>
 8006efe:	4b33      	ldr	r3, [pc, #204]	; (8006fcc <UART_SetConfig+0x2fc>)
 8006f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0c:	d012      	beq.n	8006f34 <UART_SetConfig+0x264>
 8006f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f12:	d802      	bhi.n	8006f1a <UART_SetConfig+0x24a>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <UART_SetConfig+0x258>
 8006f18:	e012      	b.n	8006f40 <UART_SetConfig+0x270>
 8006f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1e:	d006      	beq.n	8006f2e <UART_SetConfig+0x25e>
 8006f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f24:	d009      	beq.n	8006f3a <UART_SetConfig+0x26a>
 8006f26:	e00b      	b.n	8006f40 <UART_SetConfig+0x270>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e077      	b.n	800701e <UART_SetConfig+0x34e>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	77fb      	strb	r3, [r7, #31]
 8006f32:	e074      	b.n	800701e <UART_SetConfig+0x34e>
 8006f34:	2304      	movs	r3, #4
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	e071      	b.n	800701e <UART_SetConfig+0x34e>
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	77fb      	strb	r3, [r7, #31]
 8006f3e:	e06e      	b.n	800701e <UART_SetConfig+0x34e>
 8006f40:	2310      	movs	r3, #16
 8006f42:	77fb      	strb	r3, [r7, #31]
 8006f44:	bf00      	nop
 8006f46:	e06a      	b.n	800701e <UART_SetConfig+0x34e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a25      	ldr	r2, [pc, #148]	; (8006fe4 <UART_SetConfig+0x314>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d124      	bne.n	8006f9c <UART_SetConfig+0x2cc>
 8006f52:	4b1e      	ldr	r3, [pc, #120]	; (8006fcc <UART_SetConfig+0x2fc>)
 8006f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f60:	d012      	beq.n	8006f88 <UART_SetConfig+0x2b8>
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d802      	bhi.n	8006f6e <UART_SetConfig+0x29e>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <UART_SetConfig+0x2ac>
 8006f6c:	e012      	b.n	8006f94 <UART_SetConfig+0x2c4>
 8006f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f72:	d006      	beq.n	8006f82 <UART_SetConfig+0x2b2>
 8006f74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f78:	d009      	beq.n	8006f8e <UART_SetConfig+0x2be>
 8006f7a:	e00b      	b.n	8006f94 <UART_SetConfig+0x2c4>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e04d      	b.n	800701e <UART_SetConfig+0x34e>
 8006f82:	2302      	movs	r3, #2
 8006f84:	77fb      	strb	r3, [r7, #31]
 8006f86:	e04a      	b.n	800701e <UART_SetConfig+0x34e>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e047      	b.n	800701e <UART_SetConfig+0x34e>
 8006f8e:	2308      	movs	r3, #8
 8006f90:	77fb      	strb	r3, [r7, #31]
 8006f92:	e044      	b.n	800701e <UART_SetConfig+0x34e>
 8006f94:	2310      	movs	r3, #16
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	bf00      	nop
 8006f9a:	e040      	b.n	800701e <UART_SetConfig+0x34e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a11      	ldr	r2, [pc, #68]	; (8006fe8 <UART_SetConfig+0x318>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d139      	bne.n	800701a <UART_SetConfig+0x34a>
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <UART_SetConfig+0x2fc>)
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fb4:	d027      	beq.n	8007006 <UART_SetConfig+0x336>
 8006fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fba:	d817      	bhi.n	8006fec <UART_SetConfig+0x31c>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01c      	beq.n	8006ffa <UART_SetConfig+0x32a>
 8006fc0:	e027      	b.n	8007012 <UART_SetConfig+0x342>
 8006fc2:	bf00      	nop
 8006fc4:	efff69f3 	.word	0xefff69f3
 8006fc8:	40011000 	.word	0x40011000
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	40004400 	.word	0x40004400
 8006fd4:	40004800 	.word	0x40004800
 8006fd8:	40004c00 	.word	0x40004c00
 8006fdc:	40005000 	.word	0x40005000
 8006fe0:	40011400 	.word	0x40011400
 8006fe4:	40007800 	.word	0x40007800
 8006fe8:	40007c00 	.word	0x40007c00
 8006fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff0:	d006      	beq.n	8007000 <UART_SetConfig+0x330>
 8006ff2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ff6:	d009      	beq.n	800700c <UART_SetConfig+0x33c>
 8006ff8:	e00b      	b.n	8007012 <UART_SetConfig+0x342>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e00e      	b.n	800701e <UART_SetConfig+0x34e>
 8007000:	2302      	movs	r3, #2
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e00b      	b.n	800701e <UART_SetConfig+0x34e>
 8007006:	2304      	movs	r3, #4
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e008      	b.n	800701e <UART_SetConfig+0x34e>
 800700c:	2308      	movs	r3, #8
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e005      	b.n	800701e <UART_SetConfig+0x34e>
 8007012:	2310      	movs	r3, #16
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	bf00      	nop
 8007018:	e001      	b.n	800701e <UART_SetConfig+0x34e>
 800701a:	2310      	movs	r3, #16
 800701c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007026:	d17f      	bne.n	8007128 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007028:	7ffb      	ldrb	r3, [r7, #31]
 800702a:	2b08      	cmp	r3, #8
 800702c:	d85c      	bhi.n	80070e8 <UART_SetConfig+0x418>
 800702e:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <UART_SetConfig+0x364>)
 8007030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007034:	08007059 	.word	0x08007059
 8007038:	08007079 	.word	0x08007079
 800703c:	08007099 	.word	0x08007099
 8007040:	080070e9 	.word	0x080070e9
 8007044:	080070b1 	.word	0x080070b1
 8007048:	080070e9 	.word	0x080070e9
 800704c:	080070e9 	.word	0x080070e9
 8007050:	080070e9 	.word	0x080070e9
 8007054:	080070d1 	.word	0x080070d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007058:	f7fc fda2 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 800705c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	005a      	lsls	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	b29b      	uxth	r3, r3
 8007074:	61bb      	str	r3, [r7, #24]
        break;
 8007076:	e03a      	b.n	80070ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fc fda6 	bl	8003bc8 <HAL_RCC_GetPCLK2Freq>
 800707c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	005a      	lsls	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	441a      	add	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	61bb      	str	r3, [r7, #24]
        break;
 8007096:	e02a      	b.n	80070ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	085a      	lsrs	r2, r3, #1
 800709e:	4b5f      	ldr	r3, [pc, #380]	; (800721c <UART_SetConfig+0x54c>)
 80070a0:	4413      	add	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6852      	ldr	r2, [r2, #4]
 80070a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	61bb      	str	r3, [r7, #24]
        break;
 80070ae:	e01e      	b.n	80070ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070b0:	f7fc fc92 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 80070b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	005a      	lsls	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	441a      	add	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	61bb      	str	r3, [r7, #24]
        break;
 80070ce:	e00e      	b.n	80070ee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	61bb      	str	r3, [r7, #24]
        break;
 80070e6:	e002      	b.n	80070ee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75fb      	strb	r3, [r7, #23]
        break;
 80070ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b0f      	cmp	r3, #15
 80070f2:	d916      	bls.n	8007122 <UART_SetConfig+0x452>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070fa:	d212      	bcs.n	8007122 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f023 030f 	bic.w	r3, r3, #15
 8007104:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	f003 0307 	and.w	r3, r3, #7
 8007110:	b29a      	uxth	r2, r3
 8007112:	897b      	ldrh	r3, [r7, #10]
 8007114:	4313      	orrs	r3, r2
 8007116:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	897a      	ldrh	r2, [r7, #10]
 800711e:	60da      	str	r2, [r3, #12]
 8007120:	e070      	b.n	8007204 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
 8007126:	e06d      	b.n	8007204 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007128:	7ffb      	ldrb	r3, [r7, #31]
 800712a:	2b08      	cmp	r3, #8
 800712c:	d859      	bhi.n	80071e2 <UART_SetConfig+0x512>
 800712e:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <UART_SetConfig+0x464>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	08007159 	.word	0x08007159
 8007138:	08007177 	.word	0x08007177
 800713c:	08007195 	.word	0x08007195
 8007140:	080071e3 	.word	0x080071e3
 8007144:	080071ad 	.word	0x080071ad
 8007148:	080071e3 	.word	0x080071e3
 800714c:	080071e3 	.word	0x080071e3
 8007150:	080071e3 	.word	0x080071e3
 8007154:	080071cb 	.word	0x080071cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007158:	f7fc fd22 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 800715c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	085a      	lsrs	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	441a      	add	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007170:	b29b      	uxth	r3, r3
 8007172:	61bb      	str	r3, [r7, #24]
        break;
 8007174:	e038      	b.n	80071e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007176:	f7fc fd27 	bl	8003bc8 <HAL_RCC_GetPCLK2Freq>
 800717a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	085a      	lsrs	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	441a      	add	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	fbb2 f3f3 	udiv	r3, r2, r3
 800718e:	b29b      	uxth	r3, r3
 8007190:	61bb      	str	r3, [r7, #24]
        break;
 8007192:	e029      	b.n	80071e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	085a      	lsrs	r2, r3, #1
 800719a:	4b21      	ldr	r3, [pc, #132]	; (8007220 <UART_SetConfig+0x550>)
 800719c:	4413      	add	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6852      	ldr	r2, [r2, #4]
 80071a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	61bb      	str	r3, [r7, #24]
        break;
 80071aa:	e01d      	b.n	80071e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ac:	f7fc fc14 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 80071b0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	085a      	lsrs	r2, r3, #1
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	441a      	add	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	61bb      	str	r3, [r7, #24]
        break;
 80071c8:	e00e      	b.n	80071e8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	085b      	lsrs	r3, r3, #1
 80071d0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	b29b      	uxth	r3, r3
 80071de:	61bb      	str	r3, [r7, #24]
        break;
 80071e0:	e002      	b.n	80071e8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
        break;
 80071e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	2b0f      	cmp	r3, #15
 80071ec:	d908      	bls.n	8007200 <UART_SetConfig+0x530>
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f4:	d204      	bcs.n	8007200 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	e001      	b.n	8007204 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	01e84800 	.word	0x01e84800
 8007220:	00f42400 	.word	0x00f42400

08007224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01a      	beq.n	800733a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007322:	d10a      	bne.n	800733a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af02      	add	r7, sp, #8
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007376:	f7fa faed 	bl	8001954 <HAL_GetTick>
 800737a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b08      	cmp	r3, #8
 8007388:	d10e      	bne.n	80073a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800738a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f82a 	bl	80073f2 <UART_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e020      	b.n	80073ea <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d10e      	bne.n	80073d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f814 	bl	80073f2 <UART_WaitOnFlagUntilTimeout>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e00a      	b.n	80073ea <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	603b      	str	r3, [r7, #0]
 80073fe:	4613      	mov	r3, r2
 8007400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007402:	e05d      	b.n	80074c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740a:	d059      	beq.n	80074c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740c:	f7fa faa2 	bl	8001954 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	429a      	cmp	r2, r3
 800741a:	d302      	bcc.n	8007422 <UART_WaitOnFlagUntilTimeout+0x30>
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d11b      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007430:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2220      	movs	r2, #32
 8007446:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e042      	b.n	80074e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d02b      	beq.n	80074c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007476:	d123      	bne.n	80074c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007480:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007490:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2220      	movs	r2, #32
 80074ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2220      	movs	r2, #32
 80074b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e00f      	b.n	80074e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69da      	ldr	r2, [r3, #28]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	4013      	ands	r3, r2
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	bf0c      	ite	eq
 80074d0:	2301      	moveq	r3, #1
 80074d2:	2300      	movne	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d092      	beq.n	8007404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074e8:	b084      	sub	sp, #16
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	f107 001c 	add.w	r0, r7, #28
 80074f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d120      	bne.n	8007542 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	4b20      	ldr	r3, [pc, #128]	; (8007594 <USB_CoreInit+0xac>)
 8007512:	4013      	ands	r3, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007526:	2b01      	cmp	r3, #1
 8007528:	d105      	bne.n	8007536 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa52 	bl	80079e0 <USB_CoreReset>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
 8007540:	e010      	b.n	8007564 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fa46 	bl	80079e0 <USB_CoreReset>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	2b01      	cmp	r3, #1
 8007568:	d10b      	bne.n	8007582 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f043 0206 	orr.w	r2, r3, #6
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f043 0220 	orr.w	r2, r3, #32
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800758e:	b004      	add	sp, #16
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	ffbdffbf 	.word	0xffbdffbf

08007598 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f023 0201 	bic.w	r2, r3, #1
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d106      	bne.n	80075e6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60da      	str	r2, [r3, #12]
 80075e4:	e00b      	b.n	80075fe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80075e6:	78fb      	ldrb	r3, [r7, #3]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d106      	bne.n	80075fa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60da      	str	r2, [r3, #12]
 80075f8:	e001      	b.n	80075fe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e003      	b.n	8007606 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80075fe:	2032      	movs	r0, #50	; 0x32
 8007600:	f7fa f9b4 	bl	800196c <HAL_Delay>

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007610:	b084      	sub	sp, #16
 8007612:	b580      	push	{r7, lr}
 8007614:	b086      	sub	sp, #24
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800761e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	e009      	b.n	8007644 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	3340      	adds	r3, #64	; 0x40
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	2200      	movs	r2, #0
 800763c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	3301      	adds	r3, #1
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b0e      	cmp	r3, #14
 8007648:	d9f2      	bls.n	8007630 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800764a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d11c      	bne.n	800768a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800765e:	f043 0302 	orr.w	r3, r3, #2
 8007662:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	e005      	b.n	8007696 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800769c:	461a      	mov	r2, r3
 800769e:	2300      	movs	r3, #0
 80076a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a8:	4619      	mov	r1, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b0:	461a      	mov	r2, r3
 80076b2:	680b      	ldr	r3, [r1, #0]
 80076b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d10c      	bne.n	80076d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076c2:	2100      	movs	r1, #0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f959 	bl	800797c <USB_SetDevSpeed>
 80076ca:	e018      	b.n	80076fe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076cc:	2101      	movs	r1, #1
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f954 	bl	800797c <USB_SetDevSpeed>
 80076d4:	e013      	b.n	80076fe <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d10c      	bne.n	80076f6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80076e2:	2100      	movs	r1, #0
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f949 	bl	800797c <USB_SetDevSpeed>
 80076ea:	e008      	b.n	80076fe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076ec:	2101      	movs	r1, #1
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f944 	bl	800797c <USB_SetDevSpeed>
 80076f4:	e003      	b.n	80076fe <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076f6:	2103      	movs	r1, #3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f93f 	bl	800797c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076fe:	2110      	movs	r1, #16
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8f3 	bl	80078ec <USB_FlushTxFifo>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f911 	bl	8007938 <USB_FlushRxFifo>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007726:	461a      	mov	r2, r3
 8007728:	2300      	movs	r3, #0
 800772a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007732:	461a      	mov	r2, r3
 8007734:	2300      	movs	r3, #0
 8007736:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773e:	461a      	mov	r2, r3
 8007740:	2300      	movs	r3, #0
 8007742:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007744:	2300      	movs	r3, #0
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	e043      	b.n	80077d2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800775c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007760:	d118      	bne.n	8007794 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	461a      	mov	r2, r3
 8007776:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	e013      	b.n	80077a6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	461a      	mov	r2, r3
 800778c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	e008      	b.n	80077a6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a0:	461a      	mov	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b2:	461a      	mov	r2, r3
 80077b4:	2300      	movs	r3, #0
 80077b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c4:	461a      	mov	r2, r3
 80077c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3301      	adds	r3, #1
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d3b7      	bcc.n	800774a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077da:	2300      	movs	r3, #0
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	e043      	b.n	8007868 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f6:	d118      	bne.n	800782a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	461a      	mov	r2, r3
 800780c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	e013      	b.n	800783c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007820:	461a      	mov	r2, r3
 8007822:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	e008      	b.n	800783c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007836:	461a      	mov	r2, r3
 8007838:	2300      	movs	r3, #0
 800783a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007848:	461a      	mov	r2, r3
 800784a:	2300      	movs	r3, #0
 800784c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785a:	461a      	mov	r2, r3
 800785c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007860:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3301      	adds	r3, #1
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	429a      	cmp	r2, r3
 800786e:	d3b7      	bcc.n	80077e0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800787e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007882:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007890:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	2b00      	cmp	r3, #0
 8007896:	d105      	bne.n	80078a4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f043 0210 	orr.w	r2, r3, #16
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	4b0e      	ldr	r3, [pc, #56]	; (80078e4 <USB_DevInit+0x2d4>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	f043 0208 	orr.w	r2, r3, #8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80078c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d105      	bne.n	80078d4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <USB_DevInit+0x2d8>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80078d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3718      	adds	r7, #24
 80078da:	46bd      	mov	sp, r7
 80078dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078e0:	b004      	add	sp, #16
 80078e2:	4770      	bx	lr
 80078e4:	803c3800 	.word	0x803c3800
 80078e8:	40000004 	.word	0x40000004

080078ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	019b      	lsls	r3, r3, #6
 80078fe:	f043 0220 	orr.w	r2, r3, #32
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3301      	adds	r3, #1
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a09      	ldr	r2, [pc, #36]	; (8007934 <USB_FlushTxFifo+0x48>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d901      	bls.n	8007918 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e006      	b.n	8007926 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b20      	cmp	r3, #32
 8007922:	d0f0      	beq.n	8007906 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	00030d40 	.word	0x00030d40

08007938 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2210      	movs	r2, #16
 8007948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <USB_FlushRxFifo+0x40>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d901      	bls.n	800795c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e006      	b.n	800796a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b10      	cmp	r3, #16
 8007966:	d0f0      	beq.n	800794a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	00030d40 	.word	0x00030d40

0800797c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	68f9      	ldr	r1, [r7, #12]
 8007998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800799c:	4313      	orrs	r3, r2
 800799e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079c8:	f043 0302 	orr.w	r3, r3, #2
 80079cc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80079ce:	2003      	movs	r0, #3
 80079d0:	f7f9 ffcc 	bl	800196c <HAL_Delay>

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4a13      	ldr	r2, [pc, #76]	; (8007a44 <USB_CoreReset+0x64>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d901      	bls.n	80079fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e01b      	b.n	8007a36 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	daf2      	bge.n	80079ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f043 0201 	orr.w	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <USB_CoreReset+0x64>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d901      	bls.n	8007a28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e006      	b.n	8007a36 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d0f0      	beq.n	8007a16 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	00030d40 	.word	0x00030d40

08007a48 <__errno>:
 8007a48:	4b01      	ldr	r3, [pc, #4]	; (8007a50 <__errno+0x8>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000010 	.word	0x20000010

08007a54 <__libc_init_array>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4e0d      	ldr	r6, [pc, #52]	; (8007a8c <__libc_init_array+0x38>)
 8007a58:	4c0d      	ldr	r4, [pc, #52]	; (8007a90 <__libc_init_array+0x3c>)
 8007a5a:	1ba4      	subs	r4, r4, r6
 8007a5c:	10a4      	asrs	r4, r4, #2
 8007a5e:	2500      	movs	r5, #0
 8007a60:	42a5      	cmp	r5, r4
 8007a62:	d109      	bne.n	8007a78 <__libc_init_array+0x24>
 8007a64:	4e0b      	ldr	r6, [pc, #44]	; (8007a94 <__libc_init_array+0x40>)
 8007a66:	4c0c      	ldr	r4, [pc, #48]	; (8007a98 <__libc_init_array+0x44>)
 8007a68:	f000 fc26 	bl	80082b8 <_init>
 8007a6c:	1ba4      	subs	r4, r4, r6
 8007a6e:	10a4      	asrs	r4, r4, #2
 8007a70:	2500      	movs	r5, #0
 8007a72:	42a5      	cmp	r5, r4
 8007a74:	d105      	bne.n	8007a82 <__libc_init_array+0x2e>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a7c:	4798      	blx	r3
 8007a7e:	3501      	adds	r5, #1
 8007a80:	e7ee      	b.n	8007a60 <__libc_init_array+0xc>
 8007a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a86:	4798      	blx	r3
 8007a88:	3501      	adds	r5, #1
 8007a8a:	e7f2      	b.n	8007a72 <__libc_init_array+0x1e>
 8007a8c:	08008338 	.word	0x08008338
 8007a90:	08008338 	.word	0x08008338
 8007a94:	08008338 	.word	0x08008338
 8007a98:	0800833c 	.word	0x0800833c

08007a9c <memset>:
 8007a9c:	4402      	add	r2, r0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d100      	bne.n	8007aa6 <memset+0xa>
 8007aa4:	4770      	bx	lr
 8007aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aaa:	e7f9      	b.n	8007aa0 <memset+0x4>

08007aac <siprintf>:
 8007aac:	b40e      	push	{r1, r2, r3}
 8007aae:	b500      	push	{lr}
 8007ab0:	b09c      	sub	sp, #112	; 0x70
 8007ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ab4:	9002      	str	r0, [sp, #8]
 8007ab6:	9006      	str	r0, [sp, #24]
 8007ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007abc:	4809      	ldr	r0, [pc, #36]	; (8007ae4 <siprintf+0x38>)
 8007abe:	9107      	str	r1, [sp, #28]
 8007ac0:	9104      	str	r1, [sp, #16]
 8007ac2:	4909      	ldr	r1, [pc, #36]	; (8007ae8 <siprintf+0x3c>)
 8007ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac8:	9105      	str	r1, [sp, #20]
 8007aca:	6800      	ldr	r0, [r0, #0]
 8007acc:	9301      	str	r3, [sp, #4]
 8007ace:	a902      	add	r1, sp, #8
 8007ad0:	f000 f866 	bl	8007ba0 <_svfiprintf_r>
 8007ad4:	9b02      	ldr	r3, [sp, #8]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	b01c      	add	sp, #112	; 0x70
 8007adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ae0:	b003      	add	sp, #12
 8007ae2:	4770      	bx	lr
 8007ae4:	20000010 	.word	0x20000010
 8007ae8:	ffff0208 	.word	0xffff0208

08007aec <__ssputs_r>:
 8007aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af0:	688e      	ldr	r6, [r1, #8]
 8007af2:	429e      	cmp	r6, r3
 8007af4:	4682      	mov	sl, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	4690      	mov	r8, r2
 8007afa:	4699      	mov	r9, r3
 8007afc:	d837      	bhi.n	8007b6e <__ssputs_r+0x82>
 8007afe:	898a      	ldrh	r2, [r1, #12]
 8007b00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b04:	d031      	beq.n	8007b6a <__ssputs_r+0x7e>
 8007b06:	6825      	ldr	r5, [r4, #0]
 8007b08:	6909      	ldr	r1, [r1, #16]
 8007b0a:	1a6f      	subs	r7, r5, r1
 8007b0c:	6965      	ldr	r5, [r4, #20]
 8007b0e:	2302      	movs	r3, #2
 8007b10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b14:	fb95 f5f3 	sdiv	r5, r5, r3
 8007b18:	f109 0301 	add.w	r3, r9, #1
 8007b1c:	443b      	add	r3, r7
 8007b1e:	429d      	cmp	r5, r3
 8007b20:	bf38      	it	cc
 8007b22:	461d      	movcc	r5, r3
 8007b24:	0553      	lsls	r3, r2, #21
 8007b26:	d530      	bpl.n	8007b8a <__ssputs_r+0x9e>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f000 fb2b 	bl	8008184 <_malloc_r>
 8007b2e:	4606      	mov	r6, r0
 8007b30:	b950      	cbnz	r0, 8007b48 <__ssputs_r+0x5c>
 8007b32:	230c      	movs	r3, #12
 8007b34:	f8ca 3000 	str.w	r3, [sl]
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295
 8007b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b48:	463a      	mov	r2, r7
 8007b4a:	6921      	ldr	r1, [r4, #16]
 8007b4c:	f000 faa8 	bl	80080a0 <memcpy>
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	6126      	str	r6, [r4, #16]
 8007b5e:	6165      	str	r5, [r4, #20]
 8007b60:	443e      	add	r6, r7
 8007b62:	1bed      	subs	r5, r5, r7
 8007b64:	6026      	str	r6, [r4, #0]
 8007b66:	60a5      	str	r5, [r4, #8]
 8007b68:	464e      	mov	r6, r9
 8007b6a:	454e      	cmp	r6, r9
 8007b6c:	d900      	bls.n	8007b70 <__ssputs_r+0x84>
 8007b6e:	464e      	mov	r6, r9
 8007b70:	4632      	mov	r2, r6
 8007b72:	4641      	mov	r1, r8
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	f000 fa9e 	bl	80080b6 <memmove>
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	1b9b      	subs	r3, r3, r6
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	441e      	add	r6, r3
 8007b84:	6026      	str	r6, [r4, #0]
 8007b86:	2000      	movs	r0, #0
 8007b88:	e7dc      	b.n	8007b44 <__ssputs_r+0x58>
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	f000 fb54 	bl	8008238 <_realloc_r>
 8007b90:	4606      	mov	r6, r0
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d1e2      	bne.n	8007b5c <__ssputs_r+0x70>
 8007b96:	6921      	ldr	r1, [r4, #16]
 8007b98:	4650      	mov	r0, sl
 8007b9a:	f000 faa5 	bl	80080e8 <_free_r>
 8007b9e:	e7c8      	b.n	8007b32 <__ssputs_r+0x46>

08007ba0 <_svfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	461d      	mov	r5, r3
 8007ba6:	898b      	ldrh	r3, [r1, #12]
 8007ba8:	061f      	lsls	r7, r3, #24
 8007baa:	b09d      	sub	sp, #116	; 0x74
 8007bac:	4680      	mov	r8, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	d50f      	bpl.n	8007bd4 <_svfiprintf_r+0x34>
 8007bb4:	690b      	ldr	r3, [r1, #16]
 8007bb6:	b96b      	cbnz	r3, 8007bd4 <_svfiprintf_r+0x34>
 8007bb8:	2140      	movs	r1, #64	; 0x40
 8007bba:	f000 fae3 	bl	8008184 <_malloc_r>
 8007bbe:	6020      	str	r0, [r4, #0]
 8007bc0:	6120      	str	r0, [r4, #16]
 8007bc2:	b928      	cbnz	r0, 8007bd0 <_svfiprintf_r+0x30>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	f8c8 3000 	str.w	r3, [r8]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	e0c8      	b.n	8007d62 <_svfiprintf_r+0x1c2>
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	6163      	str	r3, [r4, #20]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bde:	2330      	movs	r3, #48	; 0x30
 8007be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007be4:	9503      	str	r5, [sp, #12]
 8007be6:	f04f 0b01 	mov.w	fp, #1
 8007bea:	4637      	mov	r7, r6
 8007bec:	463d      	mov	r5, r7
 8007bee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bf2:	b10b      	cbz	r3, 8007bf8 <_svfiprintf_r+0x58>
 8007bf4:	2b25      	cmp	r3, #37	; 0x25
 8007bf6:	d13e      	bne.n	8007c76 <_svfiprintf_r+0xd6>
 8007bf8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007bfc:	d00b      	beq.n	8007c16 <_svfiprintf_r+0x76>
 8007bfe:	4653      	mov	r3, sl
 8007c00:	4632      	mov	r2, r6
 8007c02:	4621      	mov	r1, r4
 8007c04:	4640      	mov	r0, r8
 8007c06:	f7ff ff71 	bl	8007aec <__ssputs_r>
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f000 80a4 	beq.w	8007d58 <_svfiprintf_r+0x1b8>
 8007c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c12:	4453      	add	r3, sl
 8007c14:	9309      	str	r3, [sp, #36]	; 0x24
 8007c16:	783b      	ldrb	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 809d 	beq.w	8007d58 <_svfiprintf_r+0x1b8>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f04f 32ff 	mov.w	r2, #4294967295
 8007c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	9307      	str	r3, [sp, #28]
 8007c2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c30:	931a      	str	r3, [sp, #104]	; 0x68
 8007c32:	462f      	mov	r7, r5
 8007c34:	2205      	movs	r2, #5
 8007c36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c3a:	4850      	ldr	r0, [pc, #320]	; (8007d7c <_svfiprintf_r+0x1dc>)
 8007c3c:	f7f8 fb08 	bl	8000250 <memchr>
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	b9d0      	cbnz	r0, 8007c7a <_svfiprintf_r+0xda>
 8007c44:	06d9      	lsls	r1, r3, #27
 8007c46:	bf44      	itt	mi
 8007c48:	2220      	movmi	r2, #32
 8007c4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c4e:	071a      	lsls	r2, r3, #28
 8007c50:	bf44      	itt	mi
 8007c52:	222b      	movmi	r2, #43	; 0x2b
 8007c54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c58:	782a      	ldrb	r2, [r5, #0]
 8007c5a:	2a2a      	cmp	r2, #42	; 0x2a
 8007c5c:	d015      	beq.n	8007c8a <_svfiprintf_r+0xea>
 8007c5e:	9a07      	ldr	r2, [sp, #28]
 8007c60:	462f      	mov	r7, r5
 8007c62:	2000      	movs	r0, #0
 8007c64:	250a      	movs	r5, #10
 8007c66:	4639      	mov	r1, r7
 8007c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c6c:	3b30      	subs	r3, #48	; 0x30
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d94d      	bls.n	8007d0e <_svfiprintf_r+0x16e>
 8007c72:	b1b8      	cbz	r0, 8007ca4 <_svfiprintf_r+0x104>
 8007c74:	e00f      	b.n	8007c96 <_svfiprintf_r+0xf6>
 8007c76:	462f      	mov	r7, r5
 8007c78:	e7b8      	b.n	8007bec <_svfiprintf_r+0x4c>
 8007c7a:	4a40      	ldr	r2, [pc, #256]	; (8007d7c <_svfiprintf_r+0x1dc>)
 8007c7c:	1a80      	subs	r0, r0, r2
 8007c7e:	fa0b f000 	lsl.w	r0, fp, r0
 8007c82:	4318      	orrs	r0, r3
 8007c84:	9004      	str	r0, [sp, #16]
 8007c86:	463d      	mov	r5, r7
 8007c88:	e7d3      	b.n	8007c32 <_svfiprintf_r+0x92>
 8007c8a:	9a03      	ldr	r2, [sp, #12]
 8007c8c:	1d11      	adds	r1, r2, #4
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	9103      	str	r1, [sp, #12]
 8007c92:	2a00      	cmp	r2, #0
 8007c94:	db01      	blt.n	8007c9a <_svfiprintf_r+0xfa>
 8007c96:	9207      	str	r2, [sp, #28]
 8007c98:	e004      	b.n	8007ca4 <_svfiprintf_r+0x104>
 8007c9a:	4252      	negs	r2, r2
 8007c9c:	f043 0302 	orr.w	r3, r3, #2
 8007ca0:	9207      	str	r2, [sp, #28]
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	783b      	ldrb	r3, [r7, #0]
 8007ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca8:	d10c      	bne.n	8007cc4 <_svfiprintf_r+0x124>
 8007caa:	787b      	ldrb	r3, [r7, #1]
 8007cac:	2b2a      	cmp	r3, #42	; 0x2a
 8007cae:	d133      	bne.n	8007d18 <_svfiprintf_r+0x178>
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	1d1a      	adds	r2, r3, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	9203      	str	r2, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bfb8      	it	lt
 8007cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cc0:	3702      	adds	r7, #2
 8007cc2:	9305      	str	r3, [sp, #20]
 8007cc4:	4d2e      	ldr	r5, [pc, #184]	; (8007d80 <_svfiprintf_r+0x1e0>)
 8007cc6:	7839      	ldrb	r1, [r7, #0]
 8007cc8:	2203      	movs	r2, #3
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f7f8 fac0 	bl	8000250 <memchr>
 8007cd0:	b138      	cbz	r0, 8007ce2 <_svfiprintf_r+0x142>
 8007cd2:	2340      	movs	r3, #64	; 0x40
 8007cd4:	1b40      	subs	r0, r0, r5
 8007cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	4303      	orrs	r3, r0
 8007cde:	3701      	adds	r7, #1
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	7839      	ldrb	r1, [r7, #0]
 8007ce4:	4827      	ldr	r0, [pc, #156]	; (8007d84 <_svfiprintf_r+0x1e4>)
 8007ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cea:	2206      	movs	r2, #6
 8007cec:	1c7e      	adds	r6, r7, #1
 8007cee:	f7f8 faaf 	bl	8000250 <memchr>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d038      	beq.n	8007d68 <_svfiprintf_r+0x1c8>
 8007cf6:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <_svfiprintf_r+0x1e8>)
 8007cf8:	bb13      	cbnz	r3, 8007d40 <_svfiprintf_r+0x1a0>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	f023 0307 	bic.w	r3, r3, #7
 8007d02:	3308      	adds	r3, #8
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	444b      	add	r3, r9
 8007d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0c:	e76d      	b.n	8007bea <_svfiprintf_r+0x4a>
 8007d0e:	fb05 3202 	mla	r2, r5, r2, r3
 8007d12:	2001      	movs	r0, #1
 8007d14:	460f      	mov	r7, r1
 8007d16:	e7a6      	b.n	8007c66 <_svfiprintf_r+0xc6>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	3701      	adds	r7, #1
 8007d1c:	9305      	str	r3, [sp, #20]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	250a      	movs	r5, #10
 8007d22:	4638      	mov	r0, r7
 8007d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d28:	3a30      	subs	r2, #48	; 0x30
 8007d2a:	2a09      	cmp	r2, #9
 8007d2c:	d903      	bls.n	8007d36 <_svfiprintf_r+0x196>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0c8      	beq.n	8007cc4 <_svfiprintf_r+0x124>
 8007d32:	9105      	str	r1, [sp, #20]
 8007d34:	e7c6      	b.n	8007cc4 <_svfiprintf_r+0x124>
 8007d36:	fb05 2101 	mla	r1, r5, r1, r2
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	e7f0      	b.n	8007d22 <_svfiprintf_r+0x182>
 8007d40:	ab03      	add	r3, sp, #12
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	4622      	mov	r2, r4
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <_svfiprintf_r+0x1ec>)
 8007d48:	a904      	add	r1, sp, #16
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f3af 8000 	nop.w
 8007d50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d54:	4681      	mov	r9, r0
 8007d56:	d1d6      	bne.n	8007d06 <_svfiprintf_r+0x166>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	065b      	lsls	r3, r3, #25
 8007d5c:	f53f af35 	bmi.w	8007bca <_svfiprintf_r+0x2a>
 8007d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d62:	b01d      	add	sp, #116	; 0x74
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	ab03      	add	r3, sp, #12
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <_svfiprintf_r+0x1ec>)
 8007d70:	a904      	add	r1, sp, #16
 8007d72:	4640      	mov	r0, r8
 8007d74:	f000 f882 	bl	8007e7c <_printf_i>
 8007d78:	e7ea      	b.n	8007d50 <_svfiprintf_r+0x1b0>
 8007d7a:	bf00      	nop
 8007d7c:	080082fc 	.word	0x080082fc
 8007d80:	08008302 	.word	0x08008302
 8007d84:	08008306 	.word	0x08008306
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	08007aed 	.word	0x08007aed

08007d90 <_printf_common>:
 8007d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	4691      	mov	r9, r2
 8007d96:	461f      	mov	r7, r3
 8007d98:	688a      	ldr	r2, [r1, #8]
 8007d9a:	690b      	ldr	r3, [r1, #16]
 8007d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	bfb8      	it	lt
 8007da4:	4613      	movlt	r3, r2
 8007da6:	f8c9 3000 	str.w	r3, [r9]
 8007daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dae:	4606      	mov	r6, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	b112      	cbz	r2, 8007dba <_printf_common+0x2a>
 8007db4:	3301      	adds	r3, #1
 8007db6:	f8c9 3000 	str.w	r3, [r9]
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	0699      	lsls	r1, r3, #26
 8007dbe:	bf42      	ittt	mi
 8007dc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007dc4:	3302      	addmi	r3, #2
 8007dc6:	f8c9 3000 	strmi.w	r3, [r9]
 8007dca:	6825      	ldr	r5, [r4, #0]
 8007dcc:	f015 0506 	ands.w	r5, r5, #6
 8007dd0:	d107      	bne.n	8007de2 <_printf_common+0x52>
 8007dd2:	f104 0a19 	add.w	sl, r4, #25
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	42ab      	cmp	r3, r5
 8007de0:	dc28      	bgt.n	8007e34 <_printf_common+0xa4>
 8007de2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	3300      	adds	r3, #0
 8007dea:	bf18      	it	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	0692      	lsls	r2, r2, #26
 8007df0:	d42d      	bmi.n	8007e4e <_printf_common+0xbe>
 8007df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007df6:	4639      	mov	r1, r7
 8007df8:	4630      	mov	r0, r6
 8007dfa:	47c0      	blx	r8
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d020      	beq.n	8007e42 <_printf_common+0xb2>
 8007e00:	6823      	ldr	r3, [r4, #0]
 8007e02:	68e5      	ldr	r5, [r4, #12]
 8007e04:	f8d9 2000 	ldr.w	r2, [r9]
 8007e08:	f003 0306 	and.w	r3, r3, #6
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	bf08      	it	eq
 8007e10:	1aad      	subeq	r5, r5, r2
 8007e12:	68a3      	ldr	r3, [r4, #8]
 8007e14:	6922      	ldr	r2, [r4, #16]
 8007e16:	bf0c      	ite	eq
 8007e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e1c:	2500      	movne	r5, #0
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	bfc4      	itt	gt
 8007e22:	1a9b      	subgt	r3, r3, r2
 8007e24:	18ed      	addgt	r5, r5, r3
 8007e26:	f04f 0900 	mov.w	r9, #0
 8007e2a:	341a      	adds	r4, #26
 8007e2c:	454d      	cmp	r5, r9
 8007e2e:	d11a      	bne.n	8007e66 <_printf_common+0xd6>
 8007e30:	2000      	movs	r0, #0
 8007e32:	e008      	b.n	8007e46 <_printf_common+0xb6>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4652      	mov	r2, sl
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	47c0      	blx	r8
 8007e3e:	3001      	adds	r0, #1
 8007e40:	d103      	bne.n	8007e4a <_printf_common+0xba>
 8007e42:	f04f 30ff 	mov.w	r0, #4294967295
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	3501      	adds	r5, #1
 8007e4c:	e7c3      	b.n	8007dd6 <_printf_common+0x46>
 8007e4e:	18e1      	adds	r1, r4, r3
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	2030      	movs	r0, #48	; 0x30
 8007e54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e58:	4422      	add	r2, r4
 8007e5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e62:	3302      	adds	r3, #2
 8007e64:	e7c5      	b.n	8007df2 <_printf_common+0x62>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	47c0      	blx	r8
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0e6      	beq.n	8007e42 <_printf_common+0xb2>
 8007e74:	f109 0901 	add.w	r9, r9, #1
 8007e78:	e7d8      	b.n	8007e2c <_printf_common+0x9c>
	...

08007e7c <_printf_i>:
 8007e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e84:	460c      	mov	r4, r1
 8007e86:	7e09      	ldrb	r1, [r1, #24]
 8007e88:	b085      	sub	sp, #20
 8007e8a:	296e      	cmp	r1, #110	; 0x6e
 8007e8c:	4617      	mov	r7, r2
 8007e8e:	4606      	mov	r6, r0
 8007e90:	4698      	mov	r8, r3
 8007e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e94:	f000 80b3 	beq.w	8007ffe <_printf_i+0x182>
 8007e98:	d822      	bhi.n	8007ee0 <_printf_i+0x64>
 8007e9a:	2963      	cmp	r1, #99	; 0x63
 8007e9c:	d036      	beq.n	8007f0c <_printf_i+0x90>
 8007e9e:	d80a      	bhi.n	8007eb6 <_printf_i+0x3a>
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	f000 80b9 	beq.w	8008018 <_printf_i+0x19c>
 8007ea6:	2958      	cmp	r1, #88	; 0x58
 8007ea8:	f000 8083 	beq.w	8007fb2 <_printf_i+0x136>
 8007eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007eb4:	e032      	b.n	8007f1c <_printf_i+0xa0>
 8007eb6:	2964      	cmp	r1, #100	; 0x64
 8007eb8:	d001      	beq.n	8007ebe <_printf_i+0x42>
 8007eba:	2969      	cmp	r1, #105	; 0x69
 8007ebc:	d1f6      	bne.n	8007eac <_printf_i+0x30>
 8007ebe:	6820      	ldr	r0, [r4, #0]
 8007ec0:	6813      	ldr	r3, [r2, #0]
 8007ec2:	0605      	lsls	r5, r0, #24
 8007ec4:	f103 0104 	add.w	r1, r3, #4
 8007ec8:	d52a      	bpl.n	8007f20 <_printf_i+0xa4>
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6011      	str	r1, [r2, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da03      	bge.n	8007eda <_printf_i+0x5e>
 8007ed2:	222d      	movs	r2, #45	; 0x2d
 8007ed4:	425b      	negs	r3, r3
 8007ed6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eda:	486f      	ldr	r0, [pc, #444]	; (8008098 <_printf_i+0x21c>)
 8007edc:	220a      	movs	r2, #10
 8007ede:	e039      	b.n	8007f54 <_printf_i+0xd8>
 8007ee0:	2973      	cmp	r1, #115	; 0x73
 8007ee2:	f000 809d 	beq.w	8008020 <_printf_i+0x1a4>
 8007ee6:	d808      	bhi.n	8007efa <_printf_i+0x7e>
 8007ee8:	296f      	cmp	r1, #111	; 0x6f
 8007eea:	d020      	beq.n	8007f2e <_printf_i+0xb2>
 8007eec:	2970      	cmp	r1, #112	; 0x70
 8007eee:	d1dd      	bne.n	8007eac <_printf_i+0x30>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	f043 0320 	orr.w	r3, r3, #32
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	e003      	b.n	8007f02 <_printf_i+0x86>
 8007efa:	2975      	cmp	r1, #117	; 0x75
 8007efc:	d017      	beq.n	8007f2e <_printf_i+0xb2>
 8007efe:	2978      	cmp	r1, #120	; 0x78
 8007f00:	d1d4      	bne.n	8007eac <_printf_i+0x30>
 8007f02:	2378      	movs	r3, #120	; 0x78
 8007f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f08:	4864      	ldr	r0, [pc, #400]	; (800809c <_printf_i+0x220>)
 8007f0a:	e055      	b.n	8007fb8 <_printf_i+0x13c>
 8007f0c:	6813      	ldr	r3, [r2, #0]
 8007f0e:	1d19      	adds	r1, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6011      	str	r1, [r2, #0]
 8007f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e08c      	b.n	800803a <_printf_i+0x1be>
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6011      	str	r1, [r2, #0]
 8007f24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f28:	bf18      	it	ne
 8007f2a:	b21b      	sxthne	r3, r3
 8007f2c:	e7cf      	b.n	8007ece <_printf_i+0x52>
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	6825      	ldr	r5, [r4, #0]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6010      	str	r0, [r2, #0]
 8007f36:	0628      	lsls	r0, r5, #24
 8007f38:	d501      	bpl.n	8007f3e <_printf_i+0xc2>
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	e002      	b.n	8007f44 <_printf_i+0xc8>
 8007f3e:	0668      	lsls	r0, r5, #25
 8007f40:	d5fb      	bpl.n	8007f3a <_printf_i+0xbe>
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	4854      	ldr	r0, [pc, #336]	; (8008098 <_printf_i+0x21c>)
 8007f46:	296f      	cmp	r1, #111	; 0x6f
 8007f48:	bf14      	ite	ne
 8007f4a:	220a      	movne	r2, #10
 8007f4c:	2208      	moveq	r2, #8
 8007f4e:	2100      	movs	r1, #0
 8007f50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f54:	6865      	ldr	r5, [r4, #4]
 8007f56:	60a5      	str	r5, [r4, #8]
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	f2c0 8095 	blt.w	8008088 <_printf_i+0x20c>
 8007f5e:	6821      	ldr	r1, [r4, #0]
 8007f60:	f021 0104 	bic.w	r1, r1, #4
 8007f64:	6021      	str	r1, [r4, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d13d      	bne.n	8007fe6 <_printf_i+0x16a>
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	f040 808e 	bne.w	800808c <_printf_i+0x210>
 8007f70:	4665      	mov	r5, ip
 8007f72:	2a08      	cmp	r2, #8
 8007f74:	d10b      	bne.n	8007f8e <_printf_i+0x112>
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	07db      	lsls	r3, r3, #31
 8007f7a:	d508      	bpl.n	8007f8e <_printf_i+0x112>
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	6862      	ldr	r2, [r4, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	bfde      	ittt	le
 8007f84:	2330      	movle	r3, #48	; 0x30
 8007f86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f8e:	ebac 0305 	sub.w	r3, ip, r5
 8007f92:	6123      	str	r3, [r4, #16]
 8007f94:	f8cd 8000 	str.w	r8, [sp]
 8007f98:	463b      	mov	r3, r7
 8007f9a:	aa03      	add	r2, sp, #12
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff fef6 	bl	8007d90 <_printf_common>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d14d      	bne.n	8008044 <_printf_i+0x1c8>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	b005      	add	sp, #20
 8007fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb2:	4839      	ldr	r0, [pc, #228]	; (8008098 <_printf_i+0x21c>)
 8007fb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007fb8:	6813      	ldr	r3, [r2, #0]
 8007fba:	6821      	ldr	r1, [r4, #0]
 8007fbc:	1d1d      	adds	r5, r3, #4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6015      	str	r5, [r2, #0]
 8007fc2:	060a      	lsls	r2, r1, #24
 8007fc4:	d50b      	bpl.n	8007fde <_printf_i+0x162>
 8007fc6:	07ca      	lsls	r2, r1, #31
 8007fc8:	bf44      	itt	mi
 8007fca:	f041 0120 	orrmi.w	r1, r1, #32
 8007fce:	6021      	strmi	r1, [r4, #0]
 8007fd0:	b91b      	cbnz	r3, 8007fda <_printf_i+0x15e>
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	f022 0220 	bic.w	r2, r2, #32
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	2210      	movs	r2, #16
 8007fdc:	e7b7      	b.n	8007f4e <_printf_i+0xd2>
 8007fde:	064d      	lsls	r5, r1, #25
 8007fe0:	bf48      	it	mi
 8007fe2:	b29b      	uxthmi	r3, r3
 8007fe4:	e7ef      	b.n	8007fc6 <_printf_i+0x14a>
 8007fe6:	4665      	mov	r5, ip
 8007fe8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fec:	fb02 3311 	mls	r3, r2, r1, r3
 8007ff0:	5cc3      	ldrb	r3, [r0, r3]
 8007ff2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	2900      	cmp	r1, #0
 8007ffa:	d1f5      	bne.n	8007fe8 <_printf_i+0x16c>
 8007ffc:	e7b9      	b.n	8007f72 <_printf_i+0xf6>
 8007ffe:	6813      	ldr	r3, [r2, #0]
 8008000:	6825      	ldr	r5, [r4, #0]
 8008002:	6961      	ldr	r1, [r4, #20]
 8008004:	1d18      	adds	r0, r3, #4
 8008006:	6010      	str	r0, [r2, #0]
 8008008:	0628      	lsls	r0, r5, #24
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	d501      	bpl.n	8008012 <_printf_i+0x196>
 800800e:	6019      	str	r1, [r3, #0]
 8008010:	e002      	b.n	8008018 <_printf_i+0x19c>
 8008012:	066a      	lsls	r2, r5, #25
 8008014:	d5fb      	bpl.n	800800e <_printf_i+0x192>
 8008016:	8019      	strh	r1, [r3, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	4665      	mov	r5, ip
 800801e:	e7b9      	b.n	8007f94 <_printf_i+0x118>
 8008020:	6813      	ldr	r3, [r2, #0]
 8008022:	1d19      	adds	r1, r3, #4
 8008024:	6011      	str	r1, [r2, #0]
 8008026:	681d      	ldr	r5, [r3, #0]
 8008028:	6862      	ldr	r2, [r4, #4]
 800802a:	2100      	movs	r1, #0
 800802c:	4628      	mov	r0, r5
 800802e:	f7f8 f90f 	bl	8000250 <memchr>
 8008032:	b108      	cbz	r0, 8008038 <_printf_i+0x1bc>
 8008034:	1b40      	subs	r0, r0, r5
 8008036:	6060      	str	r0, [r4, #4]
 8008038:	6863      	ldr	r3, [r4, #4]
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	2300      	movs	r3, #0
 800803e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008042:	e7a7      	b.n	8007f94 <_printf_i+0x118>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	462a      	mov	r2, r5
 8008048:	4639      	mov	r1, r7
 800804a:	4630      	mov	r0, r6
 800804c:	47c0      	blx	r8
 800804e:	3001      	adds	r0, #1
 8008050:	d0aa      	beq.n	8007fa8 <_printf_i+0x12c>
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	079b      	lsls	r3, r3, #30
 8008056:	d413      	bmi.n	8008080 <_printf_i+0x204>
 8008058:	68e0      	ldr	r0, [r4, #12]
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	4298      	cmp	r0, r3
 800805e:	bfb8      	it	lt
 8008060:	4618      	movlt	r0, r3
 8008062:	e7a3      	b.n	8007fac <_printf_i+0x130>
 8008064:	2301      	movs	r3, #1
 8008066:	464a      	mov	r2, r9
 8008068:	4639      	mov	r1, r7
 800806a:	4630      	mov	r0, r6
 800806c:	47c0      	blx	r8
 800806e:	3001      	adds	r0, #1
 8008070:	d09a      	beq.n	8007fa8 <_printf_i+0x12c>
 8008072:	3501      	adds	r5, #1
 8008074:	68e3      	ldr	r3, [r4, #12]
 8008076:	9a03      	ldr	r2, [sp, #12]
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	42ab      	cmp	r3, r5
 800807c:	dcf2      	bgt.n	8008064 <_printf_i+0x1e8>
 800807e:	e7eb      	b.n	8008058 <_printf_i+0x1dc>
 8008080:	2500      	movs	r5, #0
 8008082:	f104 0919 	add.w	r9, r4, #25
 8008086:	e7f5      	b.n	8008074 <_printf_i+0x1f8>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1ac      	bne.n	8007fe6 <_printf_i+0x16a>
 800808c:	7803      	ldrb	r3, [r0, #0]
 800808e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008092:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008096:	e76c      	b.n	8007f72 <_printf_i+0xf6>
 8008098:	0800830d 	.word	0x0800830d
 800809c:	0800831e 	.word	0x0800831e

080080a0 <memcpy>:
 80080a0:	b510      	push	{r4, lr}
 80080a2:	1e43      	subs	r3, r0, #1
 80080a4:	440a      	add	r2, r1
 80080a6:	4291      	cmp	r1, r2
 80080a8:	d100      	bne.n	80080ac <memcpy+0xc>
 80080aa:	bd10      	pop	{r4, pc}
 80080ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b4:	e7f7      	b.n	80080a6 <memcpy+0x6>

080080b6 <memmove>:
 80080b6:	4288      	cmp	r0, r1
 80080b8:	b510      	push	{r4, lr}
 80080ba:	eb01 0302 	add.w	r3, r1, r2
 80080be:	d807      	bhi.n	80080d0 <memmove+0x1a>
 80080c0:	1e42      	subs	r2, r0, #1
 80080c2:	4299      	cmp	r1, r3
 80080c4:	d00a      	beq.n	80080dc <memmove+0x26>
 80080c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80080ce:	e7f8      	b.n	80080c2 <memmove+0xc>
 80080d0:	4283      	cmp	r3, r0
 80080d2:	d9f5      	bls.n	80080c0 <memmove+0xa>
 80080d4:	1881      	adds	r1, r0, r2
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	42d3      	cmn	r3, r2
 80080da:	d100      	bne.n	80080de <memmove+0x28>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080e6:	e7f7      	b.n	80080d8 <memmove+0x22>

080080e8 <_free_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4605      	mov	r5, r0
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d045      	beq.n	800817c <_free_r+0x94>
 80080f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f4:	1f0c      	subs	r4, r1, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bfb8      	it	lt
 80080fa:	18e4      	addlt	r4, r4, r3
 80080fc:	f000 f8d2 	bl	80082a4 <__malloc_lock>
 8008100:	4a1f      	ldr	r2, [pc, #124]	; (8008180 <_free_r+0x98>)
 8008102:	6813      	ldr	r3, [r2, #0]
 8008104:	4610      	mov	r0, r2
 8008106:	b933      	cbnz	r3, 8008116 <_free_r+0x2e>
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	6014      	str	r4, [r2, #0]
 800810c:	4628      	mov	r0, r5
 800810e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008112:	f000 b8c8 	b.w	80082a6 <__malloc_unlock>
 8008116:	42a3      	cmp	r3, r4
 8008118:	d90c      	bls.n	8008134 <_free_r+0x4c>
 800811a:	6821      	ldr	r1, [r4, #0]
 800811c:	1862      	adds	r2, r4, r1
 800811e:	4293      	cmp	r3, r2
 8008120:	bf04      	itt	eq
 8008122:	681a      	ldreq	r2, [r3, #0]
 8008124:	685b      	ldreq	r3, [r3, #4]
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	bf04      	itt	eq
 800812a:	1852      	addeq	r2, r2, r1
 800812c:	6022      	streq	r2, [r4, #0]
 800812e:	6004      	str	r4, [r0, #0]
 8008130:	e7ec      	b.n	800810c <_free_r+0x24>
 8008132:	4613      	mov	r3, r2
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	b10a      	cbz	r2, 800813c <_free_r+0x54>
 8008138:	42a2      	cmp	r2, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x4a>
 800813c:	6819      	ldr	r1, [r3, #0]
 800813e:	1858      	adds	r0, r3, r1
 8008140:	42a0      	cmp	r0, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x74>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	4401      	add	r1, r0
 8008148:	1858      	adds	r0, r3, r1
 800814a:	4282      	cmp	r2, r0
 800814c:	6019      	str	r1, [r3, #0]
 800814e:	d1dd      	bne.n	800810c <_free_r+0x24>
 8008150:	6810      	ldr	r0, [r2, #0]
 8008152:	6852      	ldr	r2, [r2, #4]
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	4401      	add	r1, r0
 8008158:	6019      	str	r1, [r3, #0]
 800815a:	e7d7      	b.n	800810c <_free_r+0x24>
 800815c:	d902      	bls.n	8008164 <_free_r+0x7c>
 800815e:	230c      	movs	r3, #12
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	e7d3      	b.n	800810c <_free_r+0x24>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	1821      	adds	r1, r4, r0
 8008168:	428a      	cmp	r2, r1
 800816a:	bf04      	itt	eq
 800816c:	6811      	ldreq	r1, [r2, #0]
 800816e:	6852      	ldreq	r2, [r2, #4]
 8008170:	6062      	str	r2, [r4, #4]
 8008172:	bf04      	itt	eq
 8008174:	1809      	addeq	r1, r1, r0
 8008176:	6021      	streq	r1, [r4, #0]
 8008178:	605c      	str	r4, [r3, #4]
 800817a:	e7c7      	b.n	800810c <_free_r+0x24>
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	200000ac 	.word	0x200000ac

08008184 <_malloc_r>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	1ccd      	adds	r5, r1, #3
 8008188:	f025 0503 	bic.w	r5, r5, #3
 800818c:	3508      	adds	r5, #8
 800818e:	2d0c      	cmp	r5, #12
 8008190:	bf38      	it	cc
 8008192:	250c      	movcc	r5, #12
 8008194:	2d00      	cmp	r5, #0
 8008196:	4606      	mov	r6, r0
 8008198:	db01      	blt.n	800819e <_malloc_r+0x1a>
 800819a:	42a9      	cmp	r1, r5
 800819c:	d903      	bls.n	80081a6 <_malloc_r+0x22>
 800819e:	230c      	movs	r3, #12
 80081a0:	6033      	str	r3, [r6, #0]
 80081a2:	2000      	movs	r0, #0
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
 80081a6:	f000 f87d 	bl	80082a4 <__malloc_lock>
 80081aa:	4a21      	ldr	r2, [pc, #132]	; (8008230 <_malloc_r+0xac>)
 80081ac:	6814      	ldr	r4, [r2, #0]
 80081ae:	4621      	mov	r1, r4
 80081b0:	b991      	cbnz	r1, 80081d8 <_malloc_r+0x54>
 80081b2:	4c20      	ldr	r4, [pc, #128]	; (8008234 <_malloc_r+0xb0>)
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	b91b      	cbnz	r3, 80081c0 <_malloc_r+0x3c>
 80081b8:	4630      	mov	r0, r6
 80081ba:	f000 f863 	bl	8008284 <_sbrk_r>
 80081be:	6020      	str	r0, [r4, #0]
 80081c0:	4629      	mov	r1, r5
 80081c2:	4630      	mov	r0, r6
 80081c4:	f000 f85e 	bl	8008284 <_sbrk_r>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d124      	bne.n	8008216 <_malloc_r+0x92>
 80081cc:	230c      	movs	r3, #12
 80081ce:	6033      	str	r3, [r6, #0]
 80081d0:	4630      	mov	r0, r6
 80081d2:	f000 f868 	bl	80082a6 <__malloc_unlock>
 80081d6:	e7e4      	b.n	80081a2 <_malloc_r+0x1e>
 80081d8:	680b      	ldr	r3, [r1, #0]
 80081da:	1b5b      	subs	r3, r3, r5
 80081dc:	d418      	bmi.n	8008210 <_malloc_r+0x8c>
 80081de:	2b0b      	cmp	r3, #11
 80081e0:	d90f      	bls.n	8008202 <_malloc_r+0x7e>
 80081e2:	600b      	str	r3, [r1, #0]
 80081e4:	50cd      	str	r5, [r1, r3]
 80081e6:	18cc      	adds	r4, r1, r3
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f85c 	bl	80082a6 <__malloc_unlock>
 80081ee:	f104 000b 	add.w	r0, r4, #11
 80081f2:	1d23      	adds	r3, r4, #4
 80081f4:	f020 0007 	bic.w	r0, r0, #7
 80081f8:	1ac3      	subs	r3, r0, r3
 80081fa:	d0d3      	beq.n	80081a4 <_malloc_r+0x20>
 80081fc:	425a      	negs	r2, r3
 80081fe:	50e2      	str	r2, [r4, r3]
 8008200:	e7d0      	b.n	80081a4 <_malloc_r+0x20>
 8008202:	428c      	cmp	r4, r1
 8008204:	684b      	ldr	r3, [r1, #4]
 8008206:	bf16      	itet	ne
 8008208:	6063      	strne	r3, [r4, #4]
 800820a:	6013      	streq	r3, [r2, #0]
 800820c:	460c      	movne	r4, r1
 800820e:	e7eb      	b.n	80081e8 <_malloc_r+0x64>
 8008210:	460c      	mov	r4, r1
 8008212:	6849      	ldr	r1, [r1, #4]
 8008214:	e7cc      	b.n	80081b0 <_malloc_r+0x2c>
 8008216:	1cc4      	adds	r4, r0, #3
 8008218:	f024 0403 	bic.w	r4, r4, #3
 800821c:	42a0      	cmp	r0, r4
 800821e:	d005      	beq.n	800822c <_malloc_r+0xa8>
 8008220:	1a21      	subs	r1, r4, r0
 8008222:	4630      	mov	r0, r6
 8008224:	f000 f82e 	bl	8008284 <_sbrk_r>
 8008228:	3001      	adds	r0, #1
 800822a:	d0cf      	beq.n	80081cc <_malloc_r+0x48>
 800822c:	6025      	str	r5, [r4, #0]
 800822e:	e7db      	b.n	80081e8 <_malloc_r+0x64>
 8008230:	200000ac 	.word	0x200000ac
 8008234:	200000b0 	.word	0x200000b0

08008238 <_realloc_r>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	4607      	mov	r7, r0
 800823c:	4614      	mov	r4, r2
 800823e:	460e      	mov	r6, r1
 8008240:	b921      	cbnz	r1, 800824c <_realloc_r+0x14>
 8008242:	4611      	mov	r1, r2
 8008244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008248:	f7ff bf9c 	b.w	8008184 <_malloc_r>
 800824c:	b922      	cbnz	r2, 8008258 <_realloc_r+0x20>
 800824e:	f7ff ff4b 	bl	80080e8 <_free_r>
 8008252:	4625      	mov	r5, r4
 8008254:	4628      	mov	r0, r5
 8008256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008258:	f000 f826 	bl	80082a8 <_malloc_usable_size_r>
 800825c:	42a0      	cmp	r0, r4
 800825e:	d20f      	bcs.n	8008280 <_realloc_r+0x48>
 8008260:	4621      	mov	r1, r4
 8008262:	4638      	mov	r0, r7
 8008264:	f7ff ff8e 	bl	8008184 <_malloc_r>
 8008268:	4605      	mov	r5, r0
 800826a:	2800      	cmp	r0, #0
 800826c:	d0f2      	beq.n	8008254 <_realloc_r+0x1c>
 800826e:	4631      	mov	r1, r6
 8008270:	4622      	mov	r2, r4
 8008272:	f7ff ff15 	bl	80080a0 <memcpy>
 8008276:	4631      	mov	r1, r6
 8008278:	4638      	mov	r0, r7
 800827a:	f7ff ff35 	bl	80080e8 <_free_r>
 800827e:	e7e9      	b.n	8008254 <_realloc_r+0x1c>
 8008280:	4635      	mov	r5, r6
 8008282:	e7e7      	b.n	8008254 <_realloc_r+0x1c>

08008284 <_sbrk_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4c06      	ldr	r4, [pc, #24]	; (80082a0 <_sbrk_r+0x1c>)
 8008288:	2300      	movs	r3, #0
 800828a:	4605      	mov	r5, r0
 800828c:	4608      	mov	r0, r1
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	f7f9 faa4 	bl	80017dc <_sbrk>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_sbrk_r+0x1a>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	b103      	cbz	r3, 800829e <_sbrk_r+0x1a>
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	2002b818 	.word	0x2002b818

080082a4 <__malloc_lock>:
 80082a4:	4770      	bx	lr

080082a6 <__malloc_unlock>:
 80082a6:	4770      	bx	lr

080082a8 <_malloc_usable_size_r>:
 80082a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ac:	1f18      	subs	r0, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfbc      	itt	lt
 80082b2:	580b      	ldrlt	r3, [r1, r0]
 80082b4:	18c0      	addlt	r0, r0, r3
 80082b6:	4770      	bx	lr

080082b8 <_init>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr

080082c4 <_fini>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr
